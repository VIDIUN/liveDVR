# ===================================================================================================
#                           _  __     _ _
#                          | |/ /__ _| | |_ _  _ _ _ __ _
#                          | ' </ _` | |  _| || | '_/ _` |
#                          |_|\_\__,_|_|\__|\_,_|_| \__,_|
#
# This file is part of the Vidiun Collaborative Media Suite which allows users
# to do with audio, video, and animation what Wiki platfroms allow them to do with
# text.
#
# Copyright (C) 2006-2016  Vidiun Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http:#www.gnu.org/licenses/>.
#
# @ignore
# ===================================================================================================
# @package Vidiun
# @subpackage Client
from ..Base import *

API_VERSION = '3.3.0'

########## enums ##########
# @package Vidiun
# @subpackage Client
class VidiunAppTokenStatus(object):
    DISABLED = 1
    ACTIVE = 2
    DELETED = 3

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunAppearInListType(object):
    PARTNER_ONLY = 1
    CATEGORY_MEMBERS_ONLY = 3

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunAssetParamsDeletePolicy(object):
    KEEP = 0
    DELETE = 1

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunAssetParamsOrigin(object):
    CONVERT = 0
    INGEST = 1
    CONVERT_WHEN_MISSING = 2

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunBatchJobErrorTypes(object):
    APP = 0
    RUNTIME = 1
    HTTP = 2
    CURL = 3
    VIDIUN_API = 4
    VIDIUN_CLIENT = 5

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunBatchJobStatus(object):
    PENDING = 0
    QUEUED = 1
    PROCESSING = 2
    PROCESSED = 3
    MOVEFILE = 4
    FINISHED = 5
    FAILED = 6
    ABORTED = 7
    ALMOST_DONE = 8
    RETRY = 9
    FATAL = 10
    DONT_PROCESS = 11
    FINISHED_PARTIALLY = 12

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunBitRateMode(object):
    CBR = 1
    VBR = 2

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunCategoryEntryStatus(object):
    PENDING = 1
    ACTIVE = 2
    DELETED = 3
    REJECTED = 4

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunCategoryStatus(object):
    UPDATING = 1
    ACTIVE = 2
    DELETED = 3
    PURGED = 4

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunCategoryUserPermissionLevel(object):
    MANAGER = 0
    MODERATOR = 1
    CONTRIBUTOR = 2
    MEMBER = 3
    NONE = 4

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunCategoryUserStatus(object):
    ACTIVE = 1
    PENDING = 2
    NOT_ACTIVE = 3
    DELETED = 4

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunCommercialUseType(object):
    NON_COMMERCIAL_USE = 0
    COMMERCIAL_USE = 1

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunContributionPolicyType(object):
    ALL = 1
    MEMBERS_WITH_CONTRIBUTION_PERMISSION = 2

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunControlPanelCommandStatus(object):
    PENDING = 1
    HANDLED = 2
    DONE = 3
    FAILED = 4

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunControlPanelCommandTargetType(object):
    DATA_CENTER = 1
    SCHEDULER = 2
    JOB_TYPE = 3
    JOB = 4
    BATCH = 5

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunControlPanelCommandType(object):
    KILL = 4

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunCountryRestrictionType(object):
    RESTRICT_COUNTRY_LIST = 0
    ALLOW_COUNTRY_LIST = 1

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunDVRStatus(object):
    DISABLED = 0
    ENABLED = 1

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunDeliveryStatus(object):
    ACTIVE = 0
    DELETED = 1
    STAGING_IN = 2
    STAGING_OUT = 3

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunDirectoryRestrictionType(object):
    DONT_DISPLAY = 0
    DISPLAY_WITH_LINK = 1

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunEditorType(object):
    SIMPLE = 1
    ADVANCED = 2

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunEmailIngestionProfileStatus(object):
    INACTIVE = 0
    ACTIVE = 1

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunEntryModerationStatus(object):
    PENDING_MODERATION = 1
    APPROVED = 2
    REJECTED = 3
    FLAGGED_FOR_REVIEW = 5
    AUTO_APPROVED = 6

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class KalturaEntryServerNodeStatus(object):
    STOPPED = 0
    PLAYABLE = 1
    BROADCASTING = 2
    AUTHENTICATED = 3

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunFeatureStatusType(object):
    LOCK_CATEGORY = 1
    CATEGORY = 2
    CATEGORY_ENTRY = 3
    ENTRY = 4
    CATEGORY_USER = 5
    USER = 6

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunFlavorAssetStatus(object):
    ERROR = -1
    QUEUED = 0
    CONVERTING = 1
    READY = 2
    DELETED = 3
    NOT_APPLICABLE = 4
    TEMP = 5
    WAIT_FOR_CONVERT = 6
    IMPORTING = 7
    VALIDATING = 8
    EXPORTING = 9

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunFlavorReadyBehaviorType(object):
    NO_IMPACT = 0
    INHERIT_FLAVOR_PARAMS = 0
    REQUIRED = 1
    OPTIONAL = 2

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunGender(object):
    UNKNOWN = 0
    MALE = 1
    FEMALE = 2

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunGroupUserStatus(object):
    ACTIVE = 0
    DELETED = 1

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunInheritanceType(object):
    INHERIT = 1
    MANUAL = 2

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunIpAddressRestrictionType(object):
    RESTRICT_LIST = 0
    ALLOW_LIST = 1

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunLicenseType(object):
    UNKNOWN = -1
    NONE = 0
    COPYRIGHTED = 1
    PUBLIC_DOMAIN = 2
    CREATIVECOMMONS_ATTRIBUTION = 3
    CREATIVECOMMONS_ATTRIBUTION_SHARE_ALIKE = 4
    CREATIVECOMMONS_ATTRIBUTION_NO_DERIVATIVES = 5
    CREATIVECOMMONS_ATTRIBUTION_NON_COMMERCIAL = 6
    CREATIVECOMMONS_ATTRIBUTION_NON_COMMERCIAL_SHARE_ALIKE = 7
    CREATIVECOMMONS_ATTRIBUTION_NON_COMMERCIAL_NO_DERIVATIVES = 8
    GFDL = 9
    GPL = 10
    AFFERO_GPL = 11
    LGPL = 12
    BSD = 13
    APACHE = 14
    MOZILLA = 15

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunLimitFlavorsRestrictionType(object):
    RESTRICT_LIST = 0
    ALLOW_LIST = 1

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunLivePublishStatus(object):
    DISABLED = 0
    ENABLED = 1

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunLiveReportExportType(object):
    PARTNER_TOTAL_ALL = 1
    PARTNER_TOTAL_LIVE = 2
    ENTRY_TIME_LINE_ALL = 11
    ENTRY_TIME_LINE_LIVE = 12
    LOCATION_ALL = 21
    LOCATION_LIVE = 22
    SYNDICATION_ALL = 31
    SYNDICATION_LIVE = 32

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunLiveStatsEventType(object):
    LIVE = 1
    DVR = 2

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunMailJobStatus(object):
    PENDING = 1
    SENT = 2
    ERROR = 3
    QUEUED = 4

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunMediaType(object):
    VIDEO = 1
    IMAGE = 2
    AUDIO = 5
    LIVE_STREAM_FLASH = 201
    LIVE_STREAM_WINDOWS_MEDIA = 202
    LIVE_STREAM_REAL_MEDIA = 203
    LIVE_STREAM_QUICKTIME = 204

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunModerationFlagType(object):
    SEXUAL_CONTENT = 1
    VIOLENT_REPULSIVE = 2
    HARMFUL_DANGEROUS = 3
    SPAM_COMMERCIALS = 4
    COPYRIGHT = 5
    TERMS_OF_USE_VIOLATION = 6

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunMrssExtensionMode(object):
    APPEND = 1
    REPLACE = 2

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunNotificationObjectType(object):
    ENTRY = 1
    VSHOW = 2
    USER = 3
    BATCH_JOB = 4

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunNotificationStatus(object):
    PENDING = 1
    SENT = 2
    ERROR = 3
    SHOULD_RESEND = 4
    ERROR_RESENDING = 5
    SENT_SYNCH = 6
    QUEUED = 7

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunNotificationType(object):
    ENTRY_ADD = 1
    ENTR_UPDATE_PERMISSIONS = 2
    ENTRY_DELETE = 3
    ENTRY_BLOCK = 4
    ENTRY_UPDATE = 5
    ENTRY_UPDATE_THUMBNAIL = 6
    ENTRY_UPDATE_MODERATION = 7
    USER_ADD = 21
    USER_BANNED = 26

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunNullableBoolean(object):
    NULL_VALUE = -1
    FALSE_VALUE = 0
    TRUE_VALUE = 1

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunPartnerGroupType(object):
    PUBLISHER = 1
    VAR_GROUP = 2
    GROUP = 3
    TEMPLATE = 4

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunPartnerStatus(object):
    DELETED = 0
    ACTIVE = 1
    BLOCKED = 2
    FULL_BLOCK = 3

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunPartnerType(object):
    VMC = 1
    WIKI = 100
    WORDPRESS = 101
    DRUPAL = 102
    DEKIWIKI = 103
    MOODLE = 104
    COMMUNITY_EDITION = 105
    JOOMLA = 106
    BLACKBOARD = 107
    SAKAI = 108
    ADMIN_CONSOLE = 109

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunPermissionStatus(object):
    ACTIVE = 1
    BLOCKED = 2
    DELETED = 3

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunPermissionType(object):
    NORMAL = 1
    SPECIAL_FEATURE = 2
    PLUGIN = 3
    PARTNER_GROUP = 4

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunPlaylistType(object):
    STATIC_LIST = 3
    DYNAMIC = 10
    EXTERNAL = 101

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunPrivacyType(object):
    ALL = 1
    AUTHENTICATED_USERS = 2
    MEMBERS_ONLY = 3

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunRecordStatus(object):
    DISABLED = 0
    APPENDED = 1
    PER_SESSION = 2

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunResponseProfileStatus(object):
    DISABLED = 1
    ENABLED = 2
    DELETED = 3

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunResponseProfileType(object):
    INCLUDE_FIELDS = 1
    EXCLUDE_FIELDS = 2

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunResponseType(object):
    RESPONSE_TYPE_JSON = 1
    RESPONSE_TYPE_XML = 2
    RESPONSE_TYPE_PHP = 3
    RESPONSE_TYPE_PHP_ARRAY = 4
    RESPONSE_TYPE_HTML = 7
    RESPONSE_TYPE_MRSS = 8
    RESPONSE_TYPE_JSONP = 9

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunSchedulerStatusType(object):
    RUNNING_BATCHES_COUNT = 1
    RUNNING_BATCHES_CPU = 2
    RUNNING_BATCHES_MEMORY = 3
    RUNNING_BATCHES_NETWORK = 4
    RUNNING_BATCHES_DISC_IO = 5
    RUNNING_BATCHES_DISC_SPACE = 6
    RUNNING_BATCHES_IS_RUNNING = 7

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunSearchOperatorType(object):
    SEARCH_AND = 1
    SEARCH_OR = 2

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunSearchProviderType(object):
    FLICKR = 3
    YOUTUBE = 4
    MYSPACE = 7
    PHOTOBUCKET = 8
    JAMENDO = 9
    CCMIXTER = 10
    NYPL = 11
    CURRENT = 12
    MEDIA_COMMONS = 13
    VIDIUN = 20
    VIDIUN_USER_CLIPS = 21
    ARCHIVE_ORG = 22
    VIDIUN_PARTNER = 23
    METACAFE = 24
    SEARCH_PROXY = 28
    PARTNER_SPECIFIC = 100

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunServerNodeStatus(object):
    ACTIVE = 1
    DISABLED = 2
    DELETED = 3
    NOT_REGISTERED = 4

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunSessionType(object):
    USER = 0
    ADMIN = 2

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunSiteRestrictionType(object):
    RESTRICT_SITE_LIST = 0
    ALLOW_SITE_LIST = 1

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunStatsEventType(object):
    WIDGET_LOADED = 1
    MEDIA_LOADED = 2
    PLAY = 3
    PLAY_REACHED_25 = 4
    PLAY_REACHED_50 = 5
    PLAY_REACHED_75 = 6
    PLAY_REACHED_100 = 7
    OPEN_EDIT = 8
    OPEN_VIRAL = 9
    OPEN_DOWNLOAD = 10
    OPEN_REPORT = 11
    BUFFER_START = 12
    BUFFER_END = 13
    OPEN_FULL_SCREEN = 14
    CLOSE_FULL_SCREEN = 15
    REPLAY = 16
    SEEK = 17
    OPEN_UPLOAD = 18
    SAVE_PUBLISH = 19
    CLOSE_EDITOR = 20
    PRE_BUMPER_PLAYED = 21
    POST_BUMPER_PLAYED = 22
    BUMPER_CLICKED = 23
    PREROLL_STARTED = 24
    MIDROLL_STARTED = 25
    POSTROLL_STARTED = 26
    OVERLAY_STARTED = 27
    PREROLL_CLICKED = 28
    MIDROLL_CLICKED = 29
    POSTROLL_CLICKED = 30
    OVERLAY_CLICKED = 31
    PREROLL_25 = 32
    PREROLL_50 = 33
    PREROLL_75 = 34
    MIDROLL_25 = 35
    MIDROLL_50 = 36
    MIDROLL_75 = 37
    POSTROLL_25 = 38
    POSTROLL_50 = 39
    POSTROLL_75 = 40

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunStatsFeatureType(object):
    NONE = 0
    RELATED = 1

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunStatsVmcEventType(object):
    CONTENT_PAGE_VIEW = 1001
    CONTENT_ADD_PLAYLIST = 1010
    CONTENT_EDIT_PLAYLIST = 1011
    CONTENT_DELETE_PLAYLIST = 1012
    CONTENT_EDIT_ENTRY = 1013
    CONTENT_CHANGE_THUMBNAIL = 1014
    CONTENT_ADD_TAGS = 1015
    CONTENT_REMOVE_TAGS = 1016
    CONTENT_ADD_ADMIN_TAGS = 1017
    CONTENT_REMOVE_ADMIN_TAGS = 1018
    CONTENT_DOWNLOAD = 1019
    CONTENT_APPROVE_MODERATION = 1020
    CONTENT_REJECT_MODERATION = 1021
    CONTENT_BULK_UPLOAD = 1022
    CONTENT_ADMIN_VCW_UPLOAD = 1023
    ACCOUNT_CHANGE_PARTNER_INFO = 1030
    ACCOUNT_CHANGE_LOGIN_INFO = 1031
    ACCOUNT_CONTACT_US_USAGE = 1032
    ACCOUNT_UPDATE_SERVER_SETTINGS = 1033
    ACCOUNT_ACCOUNT_OVERVIEW = 1034
    ACCOUNT_ACCESS_CONTROL = 1035
    ACCOUNT_TRANSCODING_SETTINGS = 1036
    ACCOUNT_ACCOUNT_UPGRADE = 1037
    ACCOUNT_SAVE_SERVER_SETTINGS = 1038
    ACCOUNT_ACCESS_CONTROL_DELETE = 1039
    ACCOUNT_SAVE_TRANSCODING_SETTINGS = 1040
    LOGIN = 1041
    DASHBOARD_IMPORT_CONTENT = 1042
    DASHBOARD_UPDATE_CONTENT = 1043
    DASHBOARD_ACCOUNT_CONTACT_US = 1044
    DASHBOARD_VIEW_REPORTS = 1045
    DASHBOARD_EMBED_PLAYER = 1046
    DASHBOARD_EMBED_PLAYLIST = 1047
    DASHBOARD_CUSTOMIZE_PLAYERS = 1048
    APP_STUDIO_NEW_PLAYER_SINGLE_VIDEO = 1050
    APP_STUDIO_NEW_PLAYER_PLAYLIST = 1051
    APP_STUDIO_NEW_PLAYER_MULTI_TAB_PLAYLIST = 1052
    APP_STUDIO_EDIT_PLAYER_SINGLE_VIDEO = 1053
    APP_STUDIO_EDIT_PLAYER_PLAYLIST = 1054
    APP_STUDIO_EDIT_PLAYER_MULTI_TAB_PLAYLIST = 1055
    APP_STUDIO_DUPLICATE_PLAYER = 1056
    CONTENT_CONTENT_GO_TO_PAGE = 1057
    CONTENT_DELETE_ITEM = 1058
    CONTENT_DELETE_MIX = 1059
    REPORTS_AND_ANALYTICS_BANDWIDTH_USAGE_TAB = 1070
    REPORTS_AND_ANALYTICS_CONTENT_REPORTS_TAB = 1071
    REPORTS_AND_ANALYTICS_USERS_AND_COMMUNITY_REPORTS_TAB = 1072
    REPORTS_AND_ANALYTICS_TOP_CONTRIBUTORS = 1073
    REPORTS_AND_ANALYTICS_MAP_OVERLAYS = 1074
    REPORTS_AND_ANALYTICS_TOP_SYNDICATIONS = 1075
    REPORTS_AND_ANALYTICS_TOP_CONTENT = 1076
    REPORTS_AND_ANALYTICS_CONTENT_DROPOFF = 1077
    REPORTS_AND_ANALYTICS_CONTENT_INTERACTIONS = 1078
    REPORTS_AND_ANALYTICS_CONTENT_CONTRIBUTIONS = 1079
    REPORTS_AND_ANALYTICS_VIDEO_DRILL_DOWN = 1080
    REPORTS_AND_ANALYTICS_CONTENT_DRILL_DOWN_INTERACTION = 1081
    REPORTS_AND_ANALYTICS_CONTENT_CONTRIBUTIONS_DRILLDOWN = 1082
    REPORTS_AND_ANALYTICS_VIDEO_DRILL_DOWN_DROPOFF = 1083
    REPORTS_AND_ANALYTICS_MAP_OVERLAYS_DRILLDOWN = 1084
    REPORTS_AND_ANALYTICS_TOP_SYNDICATIONS_DRILL_DOWN = 1085
    REPORTS_AND_ANALYTICS_BANDWIDTH_USAGE_VIEW_MONTHLY = 1086
    REPORTS_AND_ANALYTICS_BANDWIDTH_USAGE_VIEW_YEARLY = 1087
    CONTENT_ENTRY_DRILLDOWN = 1088
    CONTENT_OPEN_PREVIEW_AND_EMBED = 1089

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunStorageProfileDeliveryStatus(object):
    ACTIVE = 1
    BLOCKED = 2

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunStorageProfileReadyBehavior(object):
    NO_IMPACT = 0
    REQUIRED = 1

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunStorageProfileStatus(object):
    DISABLED = 1
    AUTOMATIC = 2
    MANUAL = 3

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunSyndicationFeedStatus(object):
    DELETED = -1
    ACTIVE = 1

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunSyndicationFeedType(object):
    GOOGLE_VIDEO = 1
    YAHOO = 2
    ITUNES = 3
    TUBE_MOGUL = 4
    VIDIUN = 5
    VIDIUN_XSLT = 6

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunThumbAssetStatus(object):
    ERROR = -1
    QUEUED = 0
    CAPTURING = 1
    READY = 2
    DELETED = 3
    IMPORTING = 7
    EXPORTING = 9

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunThumbCropType(object):
    RESIZE = 1
    RESIZE_WITH_PADDING = 2
    CROP = 3
    CROP_FROM_TOP = 4
    RESIZE_WITH_FORCE = 5

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunUiConfCreationMode(object):
    WIZARD = 2
    ADVANCED = 3

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunUiConfObjType(object):
    PLAYER = 1
    CONTRIBUTION_WIZARD = 2
    SIMPLE_EDITOR = 3
    ADVANCED_EDITOR = 4
    PLAYLIST = 5
    APP_STUDIO = 6
    VRECORD = 7
    PLAYER_V3 = 8
    VMC_ACCOUNT = 9
    VMC_ANALYTICS = 10
    VMC_CONTENT = 11
    VMC_DASHBOARD = 12
    VMC_LOGIN = 13
    PLAYER_SL = 14
    CLIENTSIDE_ENCODER = 15
    VMC_GENERAL = 16
    VMC_ROLES_AND_PERMISSIONS = 17
    CLIPPER = 18
    VSR = 19
    VUPLOAD = 20
    WEBCASTING = 21

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunUpdateMethodType(object):
    MANUAL = 0
    AUTOMATIC = 1

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunUploadErrorCode(object):
    NO_ERROR = 0
    GENERAL_ERROR = 1
    PARTIAL_UPLOAD = 2

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunUploadTokenStatus(object):
    PENDING = 0
    PARTIAL_UPLOAD = 1
    FULL_UPLOAD = 2
    CLOSED = 3
    TIMED_OUT = 4
    DELETED = 5

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunUserAgentRestrictionType(object):
    RESTRICT_LIST = 0
    ALLOW_LIST = 1

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunUserJoinPolicyType(object):
    AUTO_JOIN = 1
    REQUEST_TO_JOIN = 2
    NOT_ALLOWED = 3

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunUserRoleStatus(object):
    ACTIVE = 1
    BLOCKED = 2
    DELETED = 3

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunUserStatus(object):
    BLOCKED = 0
    ACTIVE = 1
    DELETED = 2

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunUserType(object):
    USER = 0
    GROUP = 1

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunWidgetSecurityType(object):
    NONE = 1
    TIMEHASH = 2

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunAccessControlOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    CREATED_AT_DESC = "-createdAt"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunAccessControlProfileOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    UPDATED_AT_ASC = "+updatedAt"
    CREATED_AT_DESC = "-createdAt"
    UPDATED_AT_DESC = "-updatedAt"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunAdminUserOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    ID_ASC = "+id"
    CREATED_AT_DESC = "-createdAt"
    ID_DESC = "-id"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunAkamaiUniversalStreamType(object):
    HD_IPHONE_IPAD_LIVE = "HD iPhone/iPad Live"
    UNIVERSAL_STREAMING_LIVE = "Universal Streaming Live"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunAmazonS3StorageProfileFilesPermissionLevel(object):
    ACL_AUTHENTICATED_READ = "authenticated-read"
    ACL_PRIVATE = "private"
    ACL_PUBLIC_READ = "public-read"
    ACL_PUBLIC_READ_WRITE = "public-read-write"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunAmazonS3StorageProfileOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    UPDATED_AT_ASC = "+updatedAt"
    CREATED_AT_DESC = "-createdAt"
    UPDATED_AT_DESC = "-updatedAt"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunApiActionPermissionItemOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    ID_ASC = "+id"
    UPDATED_AT_ASC = "+updatedAt"
    CREATED_AT_DESC = "-createdAt"
    ID_DESC = "-id"
    UPDATED_AT_DESC = "-updatedAt"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunApiParameterPermissionItemAction(object):
    USAGE = "all"
    INSERT = "insert"
    READ = "read"
    UPDATE = "update"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunApiParameterPermissionItemOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    ID_ASC = "+id"
    UPDATED_AT_ASC = "+updatedAt"
    CREATED_AT_DESC = "-createdAt"
    ID_DESC = "-id"
    UPDATED_AT_DESC = "-updatedAt"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunAppTokenHashType(object):
    MD5 = "MD5"
    SHA1 = "SHA1"
    SHA256 = "SHA256"
    SHA512 = "SHA512"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunAppTokenOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    UPDATED_AT_ASC = "+updatedAt"
    CREATED_AT_DESC = "-createdAt"
    UPDATED_AT_DESC = "-updatedAt"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunAssetOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    DELETED_AT_ASC = "+deletedAt"
    SIZE_ASC = "+size"
    UPDATED_AT_ASC = "+updatedAt"
    CREATED_AT_DESC = "-createdAt"
    DELETED_AT_DESC = "-deletedAt"
    SIZE_DESC = "-size"
    UPDATED_AT_DESC = "-updatedAt"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunAssetParamsOrderBy(object):

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunAssetParamsOutputOrderBy(object):

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunAssetType(object):
    ATTACHMENT = "attachment.Attachment"
    CAPTION = "caption.Caption"
    DOCUMENT = "document.Document"
    IMAGE = "document.Image"
    PDF = "document.PDF"
    SWF = "document.SWF"
    TIMED_THUMB_ASSET = "thumbCuePoint.timedThumb"
    TRANSCRIPT = "transcript.Transcript"
    WIDEVINE_FLAVOR = "widevine.WidevineFlavor"
    FLAVOR = "1"
    THUMBNAIL = "2"
    LIVE = "3"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunAudioCodec(object):
    NONE = ""
    AAC = "aac"
    AACHE = "aache"
    AC3 = "ac3"
    AMRNB = "amrnb"
    COPY = "copy"
    MP3 = "mp3"
    MPEG2 = "mpeg2"
    PCM = "pcm"
    VORBIS = "vorbis"
    WMA = "wma"
    WMAPRO = "wmapro"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunBaseEntryCloneOptions(object):
    AD_CUE_POINTS = "adCuePoint.AD_CUE_POINTS"
    ANNOTATION_CUE_POINTS = "annotation.ANNOTATION_CUE_POINTS"
    CODE_CUE_POINTS = "codeCuePoint.CODE_CUE_POINTS"
    THUMB_CUE_POINTS = "thumbCuePoint.THUMB_CUE_POINTS"
    USERS = "1"
    CATEGORIES = "2"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunBaseEntryCompareAttribute(object):
    ACCESS_CONTROL_ID = "accessControlId"
    CREATED_AT = "createdAt"
    END_DATE = "endDate"
    MODERATION_COUNT = "moderationCount"
    MODERATION_STATUS = "moderationStatus"
    PARTNER_ID = "partnerId"
    PARTNER_SORT_VALUE = "partnerSortValue"
    RANK = "rank"
    REPLACEMENT_STATUS = "replacementStatus"
    START_DATE = "startDate"
    STATUS = "status"
    TOTAL_RANK = "totalRank"
    TYPE = "type"
    UPDATED_AT = "updatedAt"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunBaseEntryMatchAttribute(object):
    ADMIN_TAGS = "adminTags"
    CATEGORIES_IDS = "categoriesIds"
    CREATOR_ID = "creatorId"
    DESCRIPTION = "description"
    GROUP_ID = "groupId"
    ID = "id"
    NAME = "name"
    REFERENCE_ID = "referenceId"
    REPLACED_ENTRY_ID = "replacedEntryId"
    REPLACING_ENTRY_ID = "replacingEntryId"
    SEARCH_TEXT = "searchText"
    TAGS = "tags"
    USER_ID = "userId"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunBaseEntryOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    END_DATE_ASC = "+endDate"
    MODERATION_COUNT_ASC = "+moderationCount"
    NAME_ASC = "+name"
    PARTNER_SORT_VALUE_ASC = "+partnerSortValue"
    RANK_ASC = "+rank"
    RECENT_ASC = "+recent"
    START_DATE_ASC = "+startDate"
    TOTAL_RANK_ASC = "+totalRank"
    UPDATED_AT_ASC = "+updatedAt"
    WEIGHT_ASC = "+weight"
    CREATED_AT_DESC = "-createdAt"
    END_DATE_DESC = "-endDate"
    MODERATION_COUNT_DESC = "-moderationCount"
    NAME_DESC = "-name"
    PARTNER_SORT_VALUE_DESC = "-partnerSortValue"
    RANK_DESC = "-rank"
    RECENT_DESC = "-recent"
    START_DATE_DESC = "-startDate"
    TOTAL_RANK_DESC = "-totalRank"
    UPDATED_AT_DESC = "-updatedAt"
    WEIGHT_DESC = "-weight"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunBaseSyndicationFeedOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    NAME_ASC = "+name"
    PLAYLIST_ID_ASC = "+playlistId"
    TYPE_ASC = "+type"
    UPDATED_AT_ASC = "+updatedAt"
    CREATED_AT_DESC = "-createdAt"
    NAME_DESC = "-name"
    PLAYLIST_ID_DESC = "-playlistId"
    TYPE_DESC = "-type"
    UPDATED_AT_DESC = "-updatedAt"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunBatchJobObjectType(object):
    ENTRY_DISTRIBUTION = "contentDistribution.EntryDistribution"
    DROP_FOLDER_FILE = "dropFolderXmlBulkUpload.DropFolderFile"
    METADATA = "metadata.Metadata"
    METADATA_PROFILE = "metadata.MetadataProfile"
    SCHEDULED_TASK_PROFILE = "scheduledTask.ScheduledTaskProfile"
    ENTRY = "1"
    CATEGORY = "2"
    FILE_SYNC = "3"
    ASSET = "4"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunBatchJobOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    ESTIMATED_EFFORT_ASC = "+estimatedEffort"
    EXECUTION_ATTEMPTS_ASC = "+executionAttempts"
    FINISH_TIME_ASC = "+finishTime"
    LOCK_VERSION_ASC = "+lockVersion"
    PRIORITY_ASC = "+priority"
    QUEUE_TIME_ASC = "+queueTime"
    STATUS_ASC = "+status"
    UPDATED_AT_ASC = "+updatedAt"
    CREATED_AT_DESC = "-createdAt"
    ESTIMATED_EFFORT_DESC = "-estimatedEffort"
    EXECUTION_ATTEMPTS_DESC = "-executionAttempts"
    FINISH_TIME_DESC = "-finishTime"
    LOCK_VERSION_DESC = "-lockVersion"
    PRIORITY_DESC = "-priority"
    QUEUE_TIME_DESC = "-queueTime"
    STATUS_DESC = "-status"
    UPDATED_AT_DESC = "-updatedAt"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunBatchJobType(object):
    PARSE_MULTI_LANGUAGE_CAPTION_ASSET = "caption.parsemultilanguagecaptionasset"
    PARSE_CAPTION_ASSET = "captionSearch.parseCaptionAsset"
    DISTRIBUTION_DELETE = "contentDistribution.DistributionDelete"
    DISTRIBUTION_DISABLE = "contentDistribution.DistributionDisable"
    DISTRIBUTION_ENABLE = "contentDistribution.DistributionEnable"
    DISTRIBUTION_FETCH_REPORT = "contentDistribution.DistributionFetchReport"
    DISTRIBUTION_SUBMIT = "contentDistribution.DistributionSubmit"
    DISTRIBUTION_SYNC = "contentDistribution.DistributionSync"
    DISTRIBUTION_UPDATE = "contentDistribution.DistributionUpdate"
    DROP_FOLDER_CONTENT_PROCESSOR = "dropFolder.DropFolderContentProcessor"
    CONVERT = "0"
    DROP_FOLDER_WATCHER = "dropFolder.DropFolderWatcher"
    EVENT_NOTIFICATION_HANDLER = "eventNotification.EventNotificationHandler"
    INTEGRATION = "integration.Integration"
    SCHEDULED_TASK = "scheduledTask.ScheduledTask"
    INDEX_TAGS = "tagSearch.IndexTagsByPrivacyContext"
    TAG_RESOLVE = "tagSearch.TagResolve"
    VIRUS_SCAN = "virusScan.VirusScan"
    WIDEVINE_REPOSITORY_SYNC = "widevine.WidevineRepositorySync"
    IMPORT = "1"
    DELETE = "2"
    FLATTEN = "3"
    BULKUPLOAD = "4"
    DVDCREATOR = "5"
    DOWNLOAD = "6"
    OOCONVERT = "7"
    CONVERT_PROFILE = "10"
    POSTCONVERT = "11"
    EXTRACT_MEDIA = "14"
    MAIL = "15"
    NOTIFICATION = "16"
    CLEANUP = "17"
    SCHEDULER_HELPER = "18"
    BULKDOWNLOAD = "19"
    DB_CLEANUP = "20"
    PROVISION_PROVIDE = "21"
    CONVERT_COLLECTION = "22"
    STORAGE_EXPORT = "23"
    PROVISION_DELETE = "24"
    STORAGE_DELETE = "25"
    EMAIL_INGESTION = "26"
    METADATA_IMPORT = "27"
    METADATA_TRANSFORM = "28"
    FILESYNC_IMPORT = "29"
    CAPTURE_THUMB = "30"
    DELETE_FILE = "31"
    INDEX = "32"
    MOVE_CATEGORY_ENTRIES = "33"
    COPY = "34"
    CONCAT = "35"
    CONVERT_LIVE_SEGMENT = "36"
    COPY_PARTNER = "37"
    VALIDATE_LIVE_MEDIA_SERVERS = "38"
    SYNC_CATEGORY_PRIVACY_CONTEXT = "39"
    LIVE_REPORT_EXPORT = "40"
    RECALCULATE_CACHE = "41"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunBulkUploadAction(object):
    CANCEL = "scheduleBulkUpload.CANCEL"
    ADD = "1"
    UPDATE = "2"
    DELETE = "3"
    REPLACE = "4"
    TRANSFORM_XSLT = "5"
    ADD_OR_UPDATE = "6"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunBulkUploadObjectType(object):
    SCHEDULE_EVENT = "scheduleBulkUpload.SCHEDULE_EVENT"
    SCHEDULE_RESOURCE = "scheduleBulkUpload.SCHEDULE_RESOURCE"
    ENTRY = "1"
    CATEGORY = "2"
    USER = "3"
    CATEGORY_USER = "4"
    CATEGORY_ENTRY = "5"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunBulkUploadOrderBy(object):

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunBulkUploadResultStatus(object):
    ERROR = "1"
    OK = "2"
    IN_PROGRESS = "3"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunBulkUploadType(object):
    CSV = "bulkUploadCsv.CSV"
    FILTER = "bulkUploadFilter.FILTER"
    XML = "bulkUploadXml.XML"
    DROP_FOLDER_XML = "dropFolderXmlBulkUpload.DROP_FOLDER_XML"
    ICAL = "scheduleBulkUpload.ICAL"
    DROP_FOLDER_ICAL = "scheduleDropFolder.DROP_FOLDER_ICAL"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunCategoryEntryAdvancedOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    CREATED_AT_DESC = "-createdAt"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunCategoryEntryOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    CREATED_AT_DESC = "-createdAt"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunCategoryIdentifierField(object):
    FULL_NAME = "fullName"
    ID = "id"
    REFERENCE_ID = "referenceId"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunCategoryOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    DEPTH_ASC = "+depth"
    DIRECT_ENTRIES_COUNT_ASC = "+directEntriesCount"
    DIRECT_SUB_CATEGORIES_COUNT_ASC = "+directSubCategoriesCount"
    ENTRIES_COUNT_ASC = "+entriesCount"
    FULL_NAME_ASC = "+fullName"
    MEMBERS_COUNT_ASC = "+membersCount"
    NAME_ASC = "+name"
    PARTNER_SORT_VALUE_ASC = "+partnerSortValue"
    UPDATED_AT_ASC = "+updatedAt"
    CREATED_AT_DESC = "-createdAt"
    DEPTH_DESC = "-depth"
    DIRECT_ENTRIES_COUNT_DESC = "-directEntriesCount"
    DIRECT_SUB_CATEGORIES_COUNT_DESC = "-directSubCategoriesCount"
    ENTRIES_COUNT_DESC = "-entriesCount"
    FULL_NAME_DESC = "-fullName"
    MEMBERS_COUNT_DESC = "-membersCount"
    NAME_DESC = "-name"
    PARTNER_SORT_VALUE_DESC = "-partnerSortValue"
    UPDATED_AT_DESC = "-updatedAt"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunCategoryUserOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    UPDATED_AT_ASC = "+updatedAt"
    CREATED_AT_DESC = "-createdAt"
    UPDATED_AT_DESC = "-updatedAt"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunCloneComponentSelectorType(object):
    INCLUDE_COMPONENT = "0"
    EXCLUDE_COMPONENT = "1"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunConditionType(object):
    ABC_WATERMARK = "abcScreenersWatermarkAccessControl.abcWatermark"
    EVENT_NOTIFICATION_FIELD = "eventNotification.BooleanField"
    EVENT_NOTIFICATION_OBJECT_CHANGED = "eventNotification.ObjectChanged"
    METADATA_FIELD_CHANGED = "metadata.FieldChanged"
    METADATA_FIELD_COMPARE = "metadata.FieldCompare"
    METADATA_FIELD_MATCH = "metadata.FieldMatch"
    AUTHENTICATED = "1"
    COUNTRY = "2"
    IP_ADDRESS = "3"
    SITE = "4"
    USER_AGENT = "5"
    FIELD_MATCH = "6"
    FIELD_COMPARE = "7"
    ASSET_PROPERTIES_COMPARE = "8"
    USER_ROLE = "9"
    GEO_DISTANCE = "10"
    OR_OPERATOR = "11"
    HASH = "12"
    DELIVERY_PROFILE = "13"
    ACTIVE_EDGE_VALIDATE = "14"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunContainerFormat(object):
    _3GP = "3gp"
    APPLEHTTP = "applehttp"
    AVI = "avi"
    BMP = "bmp"
    COPY = "copy"
    FLV = "flv"
    HLS = "hls"
    ISMA = "isma"
    ISMV = "ismv"
    JPG = "jpg"
    M2TS = "m2ts"
    M4V = "m4v"
    MKV = "mkv"
    MOV = "mov"
    MP3 = "mp3"
    MP4 = "mp4"
    MPEG = "mpeg"
    MPEGTS = "mpegts"
    MXF = "mxf"
    OGG = "ogg"
    OGV = "ogv"
    PDF = "pdf"
    PNG = "png"
    SWF = "swf"
    WAV = "wav"
    WEBM = "webm"
    WMA = "wma"
    WMV = "wmv"
    WVM = "wvm"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunContextType(object):
    PLAY = "1"
    DOWNLOAD = "2"
    THUMBNAIL = "3"
    METADATA = "4"
    EXPORT = "5"
    SERVE = "6"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunControlPanelCommandOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    UPDATED_AT_ASC = "+updatedAt"
    CREATED_AT_DESC = "-createdAt"
    UPDATED_AT_DESC = "-updatedAt"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunConversionProfileAssetParamsOrderBy(object):

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunConversionProfileOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    CREATED_AT_DESC = "-createdAt"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunConversionProfileStatus(object):
    DISABLED = "1"
    ENABLED = "2"
    DELETED = "3"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunConversionProfileType(object):
    MEDIA = "1"
    LIVE_STREAM = "2"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunDataEntryCompareAttribute(object):
    ACCESS_CONTROL_ID = "accessControlId"
    CREATED_AT = "createdAt"
    END_DATE = "endDate"
    MODERATION_COUNT = "moderationCount"
    MODERATION_STATUS = "moderationStatus"
    PARTNER_ID = "partnerId"
    PARTNER_SORT_VALUE = "partnerSortValue"
    RANK = "rank"
    REPLACEMENT_STATUS = "replacementStatus"
    START_DATE = "startDate"
    STATUS = "status"
    TOTAL_RANK = "totalRank"
    TYPE = "type"
    UPDATED_AT = "updatedAt"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunDataEntryMatchAttribute(object):
    ADMIN_TAGS = "adminTags"
    CATEGORIES_IDS = "categoriesIds"
    CREATOR_ID = "creatorId"
    DESCRIPTION = "description"
    GROUP_ID = "groupId"
    ID = "id"
    NAME = "name"
    REFERENCE_ID = "referenceId"
    REPLACED_ENTRY_ID = "replacedEntryId"
    REPLACING_ENTRY_ID = "replacingEntryId"
    SEARCH_TEXT = "searchText"
    TAGS = "tags"
    USER_ID = "userId"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunDataEntryOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    END_DATE_ASC = "+endDate"
    MODERATION_COUNT_ASC = "+moderationCount"
    NAME_ASC = "+name"
    PARTNER_SORT_VALUE_ASC = "+partnerSortValue"
    RANK_ASC = "+rank"
    RECENT_ASC = "+recent"
    START_DATE_ASC = "+startDate"
    TOTAL_RANK_ASC = "+totalRank"
    UPDATED_AT_ASC = "+updatedAt"
    WEIGHT_ASC = "+weight"
    CREATED_AT_DESC = "-createdAt"
    END_DATE_DESC = "-endDate"
    MODERATION_COUNT_DESC = "-moderationCount"
    NAME_DESC = "-name"
    PARTNER_SORT_VALUE_DESC = "-partnerSortValue"
    RANK_DESC = "-rank"
    RECENT_DESC = "-recent"
    START_DATE_DESC = "-startDate"
    TOTAL_RANK_DESC = "-totalRank"
    UPDATED_AT_DESC = "-updatedAt"
    WEIGHT_DESC = "-weight"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunDeliveryProfileAkamaiAppleHttpManifestOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    UPDATED_AT_ASC = "+updatedAt"
    CREATED_AT_DESC = "-createdAt"
    UPDATED_AT_DESC = "-updatedAt"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunDeliveryProfileAkamaiHdsOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    UPDATED_AT_ASC = "+updatedAt"
    CREATED_AT_DESC = "-createdAt"
    UPDATED_AT_DESC = "-updatedAt"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunDeliveryProfileAkamaiHttpOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    UPDATED_AT_ASC = "+updatedAt"
    CREATED_AT_DESC = "-createdAt"
    UPDATED_AT_DESC = "-updatedAt"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunDeliveryProfileGenericAppleHttpOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    UPDATED_AT_ASC = "+updatedAt"
    CREATED_AT_DESC = "-createdAt"
    UPDATED_AT_DESC = "-updatedAt"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunDeliveryProfileGenericHdsOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    UPDATED_AT_ASC = "+updatedAt"
    CREATED_AT_DESC = "-createdAt"
    UPDATED_AT_DESC = "-updatedAt"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunDeliveryProfileGenericHttpOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    UPDATED_AT_ASC = "+updatedAt"
    CREATED_AT_DESC = "-createdAt"
    UPDATED_AT_DESC = "-updatedAt"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunDeliveryProfileGenericRtmpOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    UPDATED_AT_ASC = "+updatedAt"
    CREATED_AT_DESC = "-createdAt"
    UPDATED_AT_DESC = "-updatedAt"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunDeliveryProfileGenericSilverLightOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    UPDATED_AT_ASC = "+updatedAt"
    CREATED_AT_DESC = "-createdAt"
    UPDATED_AT_DESC = "-updatedAt"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunDeliveryProfileLiveAppleHttpOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    UPDATED_AT_ASC = "+updatedAt"
    CREATED_AT_DESC = "-createdAt"
    UPDATED_AT_DESC = "-updatedAt"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunDeliveryProfileOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    UPDATED_AT_ASC = "+updatedAt"
    CREATED_AT_DESC = "-createdAt"
    UPDATED_AT_DESC = "-updatedAt"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunDeliveryProfileRtmpOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    UPDATED_AT_ASC = "+updatedAt"
    CREATED_AT_DESC = "-createdAt"
    UPDATED_AT_DESC = "-updatedAt"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunDeliveryProfileType(object):
    EDGE_CAST_HTTP = "edgeCast.EDGE_CAST_HTTP"
    EDGE_CAST_RTMP = "edgeCast.EDGE_CAST_RTMP"
    KONTIKI_HTTP = "kontiki.KONTIKI_HTTP"
    UPLYNK_HTTP = "uplynk.UPLYNK_HTTP"
    UPLYNK_RTMP = "uplynk.UPLYNK_RTMP"
    VELOCIX_HDS = "velocix.VELOCIX_HDS"
    VELOCIX_HLS = "velocix.VELOCIX_HLS"
    APPLE_HTTP = "1"
    HDS = "3"
    HTTP = "4"
    RTMP = "5"
    RTSP = "6"
    SILVER_LIGHT = "7"
    AKAMAI_HLS_DIRECT = "10"
    AKAMAI_HLS_MANIFEST = "11"
    AKAMAI_HD = "12"
    AKAMAI_HDS = "13"
    AKAMAI_HTTP = "14"
    AKAMAI_RTMP = "15"
    AKAMAI_RTSP = "16"
    AKAMAI_SS = "17"
    GENERIC_HLS = "21"
    GENERIC_HDS = "23"
    GENERIC_HTTP = "24"
    GENERIC_HLS_MANIFEST = "25"
    GENERIC_HDS_MANIFEST = "26"
    GENERIC_SS = "27"
    GENERIC_RTMP = "28"
    LEVEL3_HLS = "31"
    LEVEL3_HTTP = "34"
    LEVEL3_RTMP = "35"
    LIMELIGHT_HTTP = "44"
    LIMELIGHT_RTMP = "45"
    LOCAL_PATH_APPLE_HTTP = "51"
    LOCAL_PATH_HDS = "53"
    LOCAL_PATH_HTTP = "54"
    LOCAL_PATH_RTMP = "55"
    VOD_PACKAGER_HLS = "61"
    VOD_PACKAGER_HDS = "63"
    VOD_PACKAGER_MSS = "67"
    VOD_PACKAGER_DASH = "68"
    LIVE_HLS = "1001"
    LIVE_HDS = "1002"
    LIVE_DASH = "1003"
    LIVE_RTMP = "1005"
    LIVE_HLS_TO_MULTICAST = "1006"
    LIVE_AKAMAI_HDS = "1013"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunDeliveryServerNodeOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    HEARTBEAT_TIME_ASC = "+heartbeatTime"
    UPDATED_AT_ASC = "+updatedAt"
    CREATED_AT_DESC = "-createdAt"
    HEARTBEAT_TIME_DESC = "-heartbeatTime"
    UPDATED_AT_DESC = "-updatedAt"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunDocumentEntryCompareAttribute(object):
    ACCESS_CONTROL_ID = "accessControlId"
    CREATED_AT = "createdAt"
    END_DATE = "endDate"
    MODERATION_COUNT = "moderationCount"
    MODERATION_STATUS = "moderationStatus"
    PARTNER_ID = "partnerId"
    PARTNER_SORT_VALUE = "partnerSortValue"
    RANK = "rank"
    REPLACEMENT_STATUS = "replacementStatus"
    START_DATE = "startDate"
    STATUS = "status"
    TOTAL_RANK = "totalRank"
    TYPE = "type"
    UPDATED_AT = "updatedAt"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunDocumentEntryMatchAttribute(object):
    ADMIN_TAGS = "adminTags"
    CATEGORIES_IDS = "categoriesIds"
    CREATOR_ID = "creatorId"
    DESCRIPTION = "description"
    GROUP_ID = "groupId"
    ID = "id"
    NAME = "name"
    REFERENCE_ID = "referenceId"
    REPLACED_ENTRY_ID = "replacedEntryId"
    REPLACING_ENTRY_ID = "replacingEntryId"
    SEARCH_TEXT = "searchText"
    TAGS = "tags"
    USER_ID = "userId"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunDurationType(object):
    LONG = "long"
    MEDIUM = "medium"
    NOT_AVAILABLE = "notavailable"
    SHORT = "short"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunEdgeServerNodeOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    HEARTBEAT_TIME_ASC = "+heartbeatTime"
    UPDATED_AT_ASC = "+updatedAt"
    CREATED_AT_DESC = "-createdAt"
    HEARTBEAT_TIME_DESC = "-heartbeatTime"
    UPDATED_AT_DESC = "-updatedAt"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunEntryIdentifierField(object):
    ID = "id"
    REFERENCE_ID = "referenceId"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunEntryReplacementStatus(object):
    NONE = "0"
    APPROVED_BUT_NOT_READY = "1"
    READY_BUT_NOT_APPROVED = "2"
    NOT_READY_AND_NOT_APPROVED = "3"
    FAILED = "4"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunEntryServerNodeOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    UPDATED_AT_ASC = "+updatedAt"
    CREATED_AT_DESC = "-createdAt"
    UPDATED_AT_DESC = "-updatedAt"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunEntryServerNodeType(object):
    LIVE_PRIMARY = "0"
    LIVE_BACKUP = "1"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunEntryStatus(object):
    ERROR_IMPORTING = "-2"
    ERROR_CONVERTING = "-1"
    SCAN_FAILURE = "virusScan.ScanFailure"
    IMPORT = "0"
    INFECTED = "virusScan.Infected"
    PRECONVERT = "1"
    READY = "2"
    DELETED = "3"
    PENDING = "4"
    MODERATE = "5"
    BLOCKED = "6"
    NO_CONTENT = "7"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunEntryType(object):
    AUTOMATIC = "-1"
    EXTERNAL_MEDIA = "externalMedia.externalMedia"
    MEDIA_CLIP = "1"
    MIX = "2"
    PLAYLIST = "5"
    DATA = "6"
    LIVE_STREAM = "7"
    LIVE_CHANNEL = "8"
    DOCUMENT = "10"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunExternalMediaEntryCompareAttribute(object):
    ACCESS_CONTROL_ID = "accessControlId"
    CREATED_AT = "createdAt"
    END_DATE = "endDate"
    LAST_PLAYED_AT = "lastPlayedAt"
    MEDIA_DATE = "mediaDate"
    MEDIA_TYPE = "mediaType"
    MODERATION_COUNT = "moderationCount"
    MODERATION_STATUS = "moderationStatus"
    MS_DURATION = "msDuration"
    PARTNER_ID = "partnerId"
    PARTNER_SORT_VALUE = "partnerSortValue"
    PLAYS = "plays"
    RANK = "rank"
    REPLACEMENT_STATUS = "replacementStatus"
    START_DATE = "startDate"
    STATUS = "status"
    TOTAL_RANK = "totalRank"
    TYPE = "type"
    UPDATED_AT = "updatedAt"
    VIEWS = "views"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunExternalMediaEntryMatchAttribute(object):
    ADMIN_TAGS = "adminTags"
    CATEGORIES_IDS = "categoriesIds"
    CREATOR_ID = "creatorId"
    DESCRIPTION = "description"
    DURATION_TYPE = "durationType"
    FLAVOR_PARAMS_IDS = "flavorParamsIds"
    GROUP_ID = "groupId"
    ID = "id"
    NAME = "name"
    REFERENCE_ID = "referenceId"
    REPLACED_ENTRY_ID = "replacedEntryId"
    REPLACING_ENTRY_ID = "replacingEntryId"
    SEARCH_TEXT = "searchText"
    TAGS = "tags"
    USER_ID = "userId"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunFileAssetObjectType(object):
    UI_CONF = "2"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunFileAssetOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    UPDATED_AT_ASC = "+updatedAt"
    CREATED_AT_DESC = "-createdAt"
    UPDATED_AT_DESC = "-updatedAt"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunFileAssetStatus(object):
    PENDING = "0"
    UPLOADING = "1"
    READY = "2"
    DELETED = "3"
    ERROR = "4"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunFileSyncObjectType(object):
    DISTRIBUTION_PROFILE = "contentDistribution.DistributionProfile"
    ENTRY_DISTRIBUTION = "contentDistribution.EntryDistribution"
    GENERIC_DISTRIBUTION_ACTION = "contentDistribution.GenericDistributionAction"
    EMAIL_NOTIFICATION_TEMPLATE = "emailNotification.EmailNotificationTemplate"
    HTTP_NOTIFICATION_TEMPLATE = "httpNotification.HttpNotificationTemplate"
    ENTRY = "1"
    UICONF = "2"
    BATCHJOB = "3"
    ASSET = "4"
    FLAVOR_ASSET = "4"
    METADATA = "5"
    METADATA_PROFILE = "6"
    SYNDICATION_FEED = "7"
    CONVERSION_PROFILE = "8"
    FILE_ASSET = "9"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunFlavorAssetOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    DELETED_AT_ASC = "+deletedAt"
    SIZE_ASC = "+size"
    UPDATED_AT_ASC = "+updatedAt"
    CREATED_AT_DESC = "-createdAt"
    DELETED_AT_DESC = "-deletedAt"
    SIZE_DESC = "-size"
    UPDATED_AT_DESC = "-updatedAt"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunFlavorParamsOrderBy(object):

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunFlavorParamsOutputOrderBy(object):

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunGenericSyndicationFeedOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    NAME_ASC = "+name"
    PLAYLIST_ID_ASC = "+playlistId"
    TYPE_ASC = "+type"
    UPDATED_AT_ASC = "+updatedAt"
    CREATED_AT_DESC = "-createdAt"
    NAME_DESC = "-name"
    PLAYLIST_ID_DESC = "-playlistId"
    TYPE_DESC = "-type"
    UPDATED_AT_DESC = "-updatedAt"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunGenericXsltSyndicationFeedOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    NAME_ASC = "+name"
    PLAYLIST_ID_ASC = "+playlistId"
    TYPE_ASC = "+type"
    UPDATED_AT_ASC = "+updatedAt"
    CREATED_AT_DESC = "-createdAt"
    NAME_DESC = "-name"
    PLAYLIST_ID_DESC = "-playlistId"
    TYPE_DESC = "-type"
    UPDATED_AT_DESC = "-updatedAt"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunGeoCoderType(object):
    VIDIUN = "1"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunGoogleSyndicationFeedAdultValues(object):
    NO = "No"
    YES = "Yes"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunGoogleVideoSyndicationFeedOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    NAME_ASC = "+name"
    PLAYLIST_ID_ASC = "+playlistId"
    TYPE_ASC = "+type"
    UPDATED_AT_ASC = "+updatedAt"
    CREATED_AT_DESC = "-createdAt"
    NAME_DESC = "-name"
    PLAYLIST_ID_DESC = "-playlistId"
    TYPE_DESC = "-type"
    UPDATED_AT_DESC = "-updatedAt"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunGroupUserOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    UPDATED_AT_ASC = "+updatedAt"
    CREATED_AT_DESC = "-createdAt"
    UPDATED_AT_DESC = "-updatedAt"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunITunesSyndicationFeedAdultValues(object):
    CLEAN = "clean"
    NO = "no"
    YES = "yes"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunITunesSyndicationFeedCategories(object):
    ARTS = "Arts"
    ARTS_DESIGN = "Arts/Design"
    ARTS_FASHION_BEAUTY = "Arts/Fashion &amp; Beauty"
    ARTS_FOOD = "Arts/Food"
    ARTS_LITERATURE = "Arts/Literature"
    ARTS_PERFORMING_ARTS = "Arts/Performing Arts"
    ARTS_VISUAL_ARTS = "Arts/Visual Arts"
    BUSINESS = "Business"
    BUSINESS_BUSINESS_NEWS = "Business/Business News"
    BUSINESS_CAREERS = "Business/Careers"
    BUSINESS_INVESTING = "Business/Investing"
    BUSINESS_MANAGEMENT_MARKETING = "Business/Management &amp; Marketing"
    BUSINESS_SHOPPING = "Business/Shopping"
    COMEDY = "Comedy"
    EDUCATION = "Education"
    EDUCATION_TECHNOLOGY = "Education/Education Technology"
    EDUCATION_HIGHER_EDUCATION = "Education/Higher Education"
    EDUCATION_K_12 = "Education/K-12"
    EDUCATION_LANGUAGE_COURSES = "Education/Language Courses"
    EDUCATION_TRAINING = "Education/Training"
    GAMES_HOBBIES = "Games &amp; Hobbies"
    GAMES_HOBBIES_AUTOMOTIVE = "Games &amp; Hobbies/Automotive"
    GAMES_HOBBIES_AVIATION = "Games &amp; Hobbies/Aviation"
    GAMES_HOBBIES_HOBBIES = "Games &amp; Hobbies/Hobbies"
    GAMES_HOBBIES_OTHER_GAMES = "Games &amp; Hobbies/Other Games"
    GAMES_HOBBIES_VIDEO_GAMES = "Games &amp; Hobbies/Video Games"
    GOVERNMENT_ORGANIZATIONS = "Government &amp; Organizations"
    GOVERNMENT_ORGANIZATIONS_LOCAL = "Government &amp; Organizations/Local"
    GOVERNMENT_ORGANIZATIONS_NATIONAL = "Government &amp; Organizations/National"
    GOVERNMENT_ORGANIZATIONS_NON_PROFIT = "Government &amp; Organizations/Non-Profit"
    GOVERNMENT_ORGANIZATIONS_REGIONAL = "Government &amp; Organizations/Regional"
    HEALTH = "Health"
    HEALTH_ALTERNATIVE_HEALTH = "Health/Alternative Health"
    HEALTH_FITNESS_NUTRITION = "Health/Fitness &amp; Nutrition"
    HEALTH_SELF_HELP = "Health/Self-Help"
    HEALTH_SEXUALITY = "Health/Sexuality"
    KIDS_FAMILY = "Kids &amp; Family"
    MUSIC = "Music"
    NEWS_POLITICS = "News &amp; Politics"
    RELIGION_SPIRITUALITY = "Religion &amp; Spirituality"
    RELIGION_SPIRITUALITY_BUDDHISM = "Religion &amp; Spirituality/Buddhism"
    RELIGION_SPIRITUALITY_CHRISTIANITY = "Religion &amp; Spirituality/Christianity"
    RELIGION_SPIRITUALITY_HINDUISM = "Religion &amp; Spirituality/Hinduism"
    RELIGION_SPIRITUALITY_ISLAM = "Religion &amp; Spirituality/Islam"
    RELIGION_SPIRITUALITY_JUDAISM = "Religion &amp; Spirituality/Judaism"
    RELIGION_SPIRITUALITY_OTHER = "Religion &amp; Spirituality/Other"
    RELIGION_SPIRITUALITY_SPIRITUALITY = "Religion &amp; Spirituality/Spirituality"
    SCIENCE_MEDICINE = "Science &amp; Medicine"
    SCIENCE_MEDICINE_MEDICINE = "Science &amp; Medicine/Medicine"
    SCIENCE_MEDICINE_NATURAL_SCIENCES = "Science &amp; Medicine/Natural Sciences"
    SCIENCE_MEDICINE_SOCIAL_SCIENCES = "Science &amp; Medicine/Social Sciences"
    SOCIETY_CULTURE = "Society &amp; Culture"
    SOCIETY_CULTURE_HISTORY = "Society &amp; Culture/History"
    SOCIETY_CULTURE_PERSONAL_JOURNALS = "Society &amp; Culture/Personal Journals"
    SOCIETY_CULTURE_PHILOSOPHY = "Society &amp; Culture/Philosophy"
    SOCIETY_CULTURE_PLACES_TRAVEL = "Society &amp; Culture/Places &amp; Travel"
    SPORTS_RECREATION = "Sports &amp; Recreation"
    SPORTS_RECREATION_AMATEUR = "Sports &amp; Recreation/Amateur"
    SPORTS_RECREATION_COLLEGE_HIGH_SCHOOL = "Sports &amp; Recreation/College &amp; High School"
    SPORTS_RECREATION_OUTDOOR = "Sports &amp; Recreation/Outdoor"
    SPORTS_RECREATION_PROFESSIONAL = "Sports &amp; Recreation/Professional"
    TV_FILM = "TV &amp; Film"
    TECHNOLOGY = "Technology"
    TECHNOLOGY_GADGETS = "Technology/Gadgets"
    TECHNOLOGY_PODCASTING = "Technology/Podcasting"
    TECHNOLOGY_SOFTWARE_HOW_TO = "Technology/Software How-To"
    TECHNOLOGY_TECH_NEWS = "Technology/Tech News"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunITunesSyndicationFeedOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    NAME_ASC = "+name"
    PLAYLIST_ID_ASC = "+playlistId"
    TYPE_ASC = "+type"
    UPDATED_AT_ASC = "+updatedAt"
    CREATED_AT_DESC = "-createdAt"
    NAME_DESC = "-name"
    PLAYLIST_ID_DESC = "-playlistId"
    TYPE_DESC = "-type"
    UPDATED_AT_DESC = "-updatedAt"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunLanguage(object):
    AB = "Abkhazian"
    AA = "Afar"
    AF = "Afrikaans"
    SQ = "Albanian"
    AM = "Amharic"
    AR = "Arabic"
    HY = "Armenian"
    AS_ = "Assamese"
    AY = "Aymara"
    AZ = "Azerbaijani"
    BA = "Bashkir"
    EU = "Basque"
    BN = "Bengali (Bangla)"
    DZ = "Bhutani"
    BH = "Bihari"
    BI = "Bislama"
    BR = "Breton"
    BG = "Bulgarian"
    MY = "Burmese"
    BE = "Byelorussian (Belarusian)"
    KM = "Cambodian"
    CA = "Catalan"
    ZH = "Chinese"
    CO = "Corsican"
    HR = "Croatian"
    CS = "Czech"
    DA = "Danish"
    NL = "Dutch"
    EN = "English"
    EN_US = "English (American)"
    EN_GB = "English (British)"
    EO = "Esperanto"
    ET = "Estonian"
    FO = "Faeroese"
    FA = "Farsi"
    FJ = "Fiji"
    FI = "Finnish"
    FR = "French"
    FY = "Frisian"
    GV = "Gaelic (Manx)"
    GD = "Gaelic (Scottish)"
    GL = "Galician"
    KA = "Georgian"
    DE = "German"
    EL = "Greek"
    KL = "Greenlandic"
    GN = "Guarani"
    GU = "Gujarati"
    HA = "Hausa"
    HE = "Hebrew"
    IW = "Hebrew"
    HI = "Hindi"
    HU = "Hungarian"
    IS = "Icelandic"
    ID = "Indonesian"
    IN = "Indonesian"
    IA = "Interlingua"
    IE = "Interlingue"
    IU = "Inuktitut"
    IK = "Inupiak"
    GA = "Irish"
    IT = "Italian"
    JA = "Japanese"
    JV = "Javanese"
    KN = "Kannada"
    VS = "Kashmiri"
    KK = "Kazakh"
    RW = "Kinyarwanda (Ruanda)"
    KY = "Kirghiz"
    RN = "Kirundi (Rundi)"
    KO = "Korean"
    KU = "Kurdish"
    LO = "Laothian"
    LA = "Latin"
    LV = "Latvian (Lettish)"
    LI = "Limburgish ( Limburger)"
    LN = "Lingala"
    LT = "Lithuanian"
    MK = "Macedonian"
    MG = "Malagasy"
    MS = "Malay"
    ML = "Malayalam"
    MT = "Maltese"
    MI = "Maori"
    MR = "Marathi"
    MO = "Moldavian"
    MN = "Mongolian"
    MU = "Multilingual"
    NA = "Nauru"
    NE = "Nepali"
    NO = "Norwegian"
    OC = "Occitan"
    OR_ = "Oriya"
    OM = "Oromo (Afan, Galla)"
    PS = "Pashto (Pushto)"
    PL = "Polish"
    PT = "Portuguese"
    PA = "Punjabi"
    QU = "Quechua"
    RM = "Rhaeto-Romance"
    RO = "Romanian"
    RU = "Russian"
    SM = "Samoan"
    SG = "Sangro"
    SA = "Sanskrit"
    SR = "Serbian"
    SH = "Serbo-Croatian"
    ST = "Sesotho"
    TN = "Setswana"
    SN = "Shona"
    SD = "Sindhi"
    SI = "Sinhalese"
    SS = "Siswati"
    SK = "Slovak"
    SL = "Slovenian"
    SO = "Somali"
    ES = "Spanish"
    SU = "Sundanese"
    SW = "Swahili (Kiswahili)"
    SV = "Swedish"
    TL = "Tagalog"
    TG = "Tajik"
    TA = "Tamil"
    TT = "Tatar"
    TE = "Telugu"
    TH = "Thai"
    BO = "Tibetan"
    TI = "Tigrinya"
    TO = "Tonga"
    TS = "Tsonga"
    TR = "Turkish"
    TK = "Turkmen"
    TW = "Twi"
    UG = "Uighur"
    UK = "Ukrainian"
    UR = "Urdu"
    UZ = "Uzbek"
    VI = "Vietnamese"
    VO = "Volapuk"
    CY = "Welsh"
    WO = "Wolof"
    XH = "Xhosa"
    JI = "Yiddish"
    YI = "Yiddish"
    YO = "Yoruba"
    ZU = "Zulu"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunLanguageCode(object):
    AA = "aa"
    AB = "ab"
    AF = "af"
    AM = "am"
    AR = "ar"
    AS_ = "as"
    AY = "ay"
    AZ = "az"
    BA = "ba"
    BE = "be"
    BG = "bg"
    BH = "bh"
    BI = "bi"
    BN = "bn"
    BO = "bo"
    BR = "br"
    CA = "ca"
    CO = "co"
    CS = "cs"
    CY = "cy"
    DA = "da"
    DE = "de"
    DZ = "dz"
    EL = "el"
    EN = "en"
    EN_GB = "en_gb"
    EN_US = "en_us"
    EO = "eo"
    ES = "es"
    ET = "et"
    EU = "eu"
    FA = "fa"
    FI = "fi"
    FJ = "fj"
    FO = "fo"
    FR = "fr"
    FY = "fy"
    GA = "ga"
    GD = "gd"
    GL = "gl"
    GN = "gn"
    GU = "gu"
    GV = "gv"
    HA = "ha"
    HE = "he"
    HI = "hi"
    HR = "hr"
    HU = "hu"
    HY = "hy"
    IA = "ia"
    ID = "id"
    IE = "ie"
    IK = "ik"
    IN = "in"
    IS = "is"
    IT = "it"
    IU = "iu"
    IW = "iw"
    JA = "ja"
    JI = "ji"
    JV = "jv"
    KA = "ka"
    KK = "kk"
    KL = "kl"
    KM = "km"
    KN = "kn"
    KO = "ko"
    VS = "ks"
    KU = "ku"
    KY = "ky"
    LA = "la"
    LI = "li"
    LN = "ln"
    LO = "lo"
    LT = "lt"
    LV = "lv"
    MG = "mg"
    MI = "mi"
    MK = "mk"
    ML = "ml"
    MN = "mn"
    MO = "mo"
    MR = "mr"
    MS = "ms"
    MT = "mt"
    MU = "multilingual"
    MY = "my"
    NA = "na"
    NE = "ne"
    NL = "nl"
    NO = "no"
    OC = "oc"
    OM = "om"
    OR_ = "or"
    PA = "pa"
    PL = "pl"
    PS = "ps"
    PT = "pt"
    QU = "qu"
    RM = "rm"
    RN = "rn"
    RO = "ro"
    RU = "ru"
    RW = "rw"
    SA = "sa"
    SD = "sd"
    SG = "sg"
    SH = "sh"
    SI = "si"
    SK = "sk"
    SL = "sl"
    SM = "sm"
    SN = "sn"
    SO = "so"
    SQ = "sq"
    SR = "sr"
    SS = "ss"
    ST = "st"
    SU = "su"
    SV = "sv"
    SW = "sw"
    TA = "ta"
    TE = "te"
    TG = "tg"
    TH = "th"
    TI = "ti"
    TK = "tk"
    TL = "tl"
    TN = "tn"
    TO = "to"
    TR = "tr"
    TS = "ts"
    TT = "tt"
    TW = "tw"
    UG = "ug"
    UK = "uk"
    UR = "ur"
    UZ = "uz"
    VI = "vi"
    VO = "vo"
    WO = "wo"
    XH = "xh"
    YI = "yi"
    YO = "yo"
    ZH = "zh"
    ZU = "zu"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunLiveAssetOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    DELETED_AT_ASC = "+deletedAt"
    SIZE_ASC = "+size"
    UPDATED_AT_ASC = "+updatedAt"
    CREATED_AT_DESC = "-createdAt"
    DELETED_AT_DESC = "-deletedAt"
    SIZE_DESC = "-size"
    UPDATED_AT_DESC = "-updatedAt"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunLiveChannelCompareAttribute(object):
    ACCESS_CONTROL_ID = "accessControlId"
    CREATED_AT = "createdAt"
    END_DATE = "endDate"
    LAST_PLAYED_AT = "lastPlayedAt"
    MEDIA_DATE = "mediaDate"
    MEDIA_TYPE = "mediaType"
    MODERATION_COUNT = "moderationCount"
    MODERATION_STATUS = "moderationStatus"
    MS_DURATION = "msDuration"
    PARTNER_ID = "partnerId"
    PARTNER_SORT_VALUE = "partnerSortValue"
    PLAYS = "plays"
    RANK = "rank"
    REPLACEMENT_STATUS = "replacementStatus"
    START_DATE = "startDate"
    STATUS = "status"
    TOTAL_RANK = "totalRank"
    TYPE = "type"
    UPDATED_AT = "updatedAt"
    VIEWS = "views"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunLiveChannelMatchAttribute(object):
    ADMIN_TAGS = "adminTags"
    CATEGORIES_IDS = "categoriesIds"
    CREATOR_ID = "creatorId"
    DESCRIPTION = "description"
    DURATION_TYPE = "durationType"
    FLAVOR_PARAMS_IDS = "flavorParamsIds"
    GROUP_ID = "groupId"
    ID = "id"
    NAME = "name"
    REFERENCE_ID = "referenceId"
    REPLACED_ENTRY_ID = "replacedEntryId"
    REPLACING_ENTRY_ID = "replacingEntryId"
    SEARCH_TEXT = "searchText"
    TAGS = "tags"
    USER_ID = "userId"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunLiveChannelOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    DURATION_ASC = "+duration"
    END_DATE_ASC = "+endDate"
    FIRST_BROADCAST_ASC = "+firstBroadcast"
    LAST_BROADCAST_ASC = "+lastBroadcast"
    LAST_PLAYED_AT_ASC = "+lastPlayedAt"
    MEDIA_TYPE_ASC = "+mediaType"
    MODERATION_COUNT_ASC = "+moderationCount"
    NAME_ASC = "+name"
    PARTNER_SORT_VALUE_ASC = "+partnerSortValue"
    PLAYS_ASC = "+plays"
    RANK_ASC = "+rank"
    RECENT_ASC = "+recent"
    START_DATE_ASC = "+startDate"
    TOTAL_RANK_ASC = "+totalRank"
    UPDATED_AT_ASC = "+updatedAt"
    VIEWS_ASC = "+views"
    WEIGHT_ASC = "+weight"
    CREATED_AT_DESC = "-createdAt"
    DURATION_DESC = "-duration"
    END_DATE_DESC = "-endDate"
    FIRST_BROADCAST_DESC = "-firstBroadcast"
    LAST_BROADCAST_DESC = "-lastBroadcast"
    LAST_PLAYED_AT_DESC = "-lastPlayedAt"
    MEDIA_TYPE_DESC = "-mediaType"
    MODERATION_COUNT_DESC = "-moderationCount"
    NAME_DESC = "-name"
    PARTNER_SORT_VALUE_DESC = "-partnerSortValue"
    PLAYS_DESC = "-plays"
    RANK_DESC = "-rank"
    RECENT_DESC = "-recent"
    START_DATE_DESC = "-startDate"
    TOTAL_RANK_DESC = "-totalRank"
    UPDATED_AT_DESC = "-updatedAt"
    VIEWS_DESC = "-views"
    WEIGHT_DESC = "-weight"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunLiveChannelSegmentOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    START_TIME_ASC = "+startTime"
    UPDATED_AT_ASC = "+updatedAt"
    CREATED_AT_DESC = "-createdAt"
    START_TIME_DESC = "-startTime"
    UPDATED_AT_DESC = "-updatedAt"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunLiveChannelSegmentStatus(object):
    ACTIVE = "2"
    DELETED = "3"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunLiveChannelSegmentTriggerType(object):
    CHANNEL_RELATIVE = "1"
    ABSOLUTE_TIME = "2"
    SEGMENT_START_RELATIVE = "3"
    SEGMENT_END_RELATIVE = "4"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunLiveChannelSegmentType(object):
    VIDEO_AND_AUDIO = "1"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunLiveEntryCompareAttribute(object):
    ACCESS_CONTROL_ID = "accessControlId"
    CREATED_AT = "createdAt"
    END_DATE = "endDate"
    LAST_PLAYED_AT = "lastPlayedAt"
    MEDIA_DATE = "mediaDate"
    MEDIA_TYPE = "mediaType"
    MODERATION_COUNT = "moderationCount"
    MODERATION_STATUS = "moderationStatus"
    MS_DURATION = "msDuration"
    PARTNER_ID = "partnerId"
    PARTNER_SORT_VALUE = "partnerSortValue"
    PLAYS = "plays"
    RANK = "rank"
    REPLACEMENT_STATUS = "replacementStatus"
    START_DATE = "startDate"
    STATUS = "status"
    TOTAL_RANK = "totalRank"
    TYPE = "type"
    UPDATED_AT = "updatedAt"
    VIEWS = "views"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunLiveEntryMatchAttribute(object):
    ADMIN_TAGS = "adminTags"
    CATEGORIES_IDS = "categoriesIds"
    CREATOR_ID = "creatorId"
    DESCRIPTION = "description"
    DURATION_TYPE = "durationType"
    FLAVOR_PARAMS_IDS = "flavorParamsIds"
    GROUP_ID = "groupId"
    ID = "id"
    NAME = "name"
    REFERENCE_ID = "referenceId"
    REPLACED_ENTRY_ID = "replacedEntryId"
    REPLACING_ENTRY_ID = "replacingEntryId"
    SEARCH_TEXT = "searchText"
    TAGS = "tags"
    USER_ID = "userId"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunLiveEntryOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    DURATION_ASC = "+duration"
    END_DATE_ASC = "+endDate"
    FIRST_BROADCAST_ASC = "+firstBroadcast"
    LAST_BROADCAST_ASC = "+lastBroadcast"
    LAST_PLAYED_AT_ASC = "+lastPlayedAt"
    MEDIA_TYPE_ASC = "+mediaType"
    MODERATION_COUNT_ASC = "+moderationCount"
    NAME_ASC = "+name"
    PARTNER_SORT_VALUE_ASC = "+partnerSortValue"
    PLAYS_ASC = "+plays"
    RANK_ASC = "+rank"
    RECENT_ASC = "+recent"
    START_DATE_ASC = "+startDate"
    TOTAL_RANK_ASC = "+totalRank"
    UPDATED_AT_ASC = "+updatedAt"
    VIEWS_ASC = "+views"
    WEIGHT_ASC = "+weight"
    CREATED_AT_DESC = "-createdAt"
    DURATION_DESC = "-duration"
    END_DATE_DESC = "-endDate"
    FIRST_BROADCAST_DESC = "-firstBroadcast"
    LAST_BROADCAST_DESC = "-lastBroadcast"
    LAST_PLAYED_AT_DESC = "-lastPlayedAt"
    MEDIA_TYPE_DESC = "-mediaType"
    MODERATION_COUNT_DESC = "-moderationCount"
    NAME_DESC = "-name"
    PARTNER_SORT_VALUE_DESC = "-partnerSortValue"
    PLAYS_DESC = "-plays"
    RANK_DESC = "-rank"
    RECENT_DESC = "-recent"
    START_DATE_DESC = "-startDate"
    TOTAL_RANK_DESC = "-totalRank"
    UPDATED_AT_DESC = "-updatedAt"
    VIEWS_DESC = "-views"
    WEIGHT_DESC = "-weight"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunLiveEntryServerNodeOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    UPDATED_AT_ASC = "+updatedAt"
    CREATED_AT_DESC = "-createdAt"
    UPDATED_AT_DESC = "-updatedAt"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunLiveParamsOrderBy(object):

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunLiveReportOrderBy(object):
    NAME_ASC = "+name"
    AUDIENCE_DESC = "-audience"
    EVENT_TIME_DESC = "-eventTime"
    PLAYS_DESC = "-plays"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunLiveReportType(object):
    ENTRY_GEO_TIME_LINE = "ENTRY_GEO_TIME_LINE"
    ENTRY_SYNDICATION_TOTAL = "ENTRY_SYNDICATION_TOTAL"
    ENTRY_TIME_LINE = "ENTRY_TIME_LINE"
    ENTRY_TOTAL = "ENTRY_TOTAL"
    PARTNER_TOTAL = "PARTNER_TOTAL"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunLiveStreamAdminEntryCompareAttribute(object):
    ACCESS_CONTROL_ID = "accessControlId"
    CREATED_AT = "createdAt"
    END_DATE = "endDate"
    LAST_PLAYED_AT = "lastPlayedAt"
    MEDIA_DATE = "mediaDate"
    MEDIA_TYPE = "mediaType"
    MODERATION_COUNT = "moderationCount"
    MODERATION_STATUS = "moderationStatus"
    MS_DURATION = "msDuration"
    PARTNER_ID = "partnerId"
    PARTNER_SORT_VALUE = "partnerSortValue"
    PLAYS = "plays"
    RANK = "rank"
    REPLACEMENT_STATUS = "replacementStatus"
    START_DATE = "startDate"
    STATUS = "status"
    TOTAL_RANK = "totalRank"
    TYPE = "type"
    UPDATED_AT = "updatedAt"
    VIEWS = "views"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunLiveStreamAdminEntryMatchAttribute(object):
    ADMIN_TAGS = "adminTags"
    CATEGORIES_IDS = "categoriesIds"
    CREATOR_ID = "creatorId"
    DESCRIPTION = "description"
    DURATION_TYPE = "durationType"
    FLAVOR_PARAMS_IDS = "flavorParamsIds"
    GROUP_ID = "groupId"
    ID = "id"
    NAME = "name"
    REFERENCE_ID = "referenceId"
    REPLACED_ENTRY_ID = "replacedEntryId"
    REPLACING_ENTRY_ID = "replacingEntryId"
    SEARCH_TEXT = "searchText"
    TAGS = "tags"
    USER_ID = "userId"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunLiveStreamAdminEntryOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    DURATION_ASC = "+duration"
    END_DATE_ASC = "+endDate"
    FIRST_BROADCAST_ASC = "+firstBroadcast"
    LAST_BROADCAST_ASC = "+lastBroadcast"
    LAST_PLAYED_AT_ASC = "+lastPlayedAt"
    MEDIA_TYPE_ASC = "+mediaType"
    MODERATION_COUNT_ASC = "+moderationCount"
    NAME_ASC = "+name"
    PARTNER_SORT_VALUE_ASC = "+partnerSortValue"
    PLAYS_ASC = "+plays"
    RANK_ASC = "+rank"
    RECENT_ASC = "+recent"
    START_DATE_ASC = "+startDate"
    TOTAL_RANK_ASC = "+totalRank"
    UPDATED_AT_ASC = "+updatedAt"
    VIEWS_ASC = "+views"
    WEIGHT_ASC = "+weight"
    CREATED_AT_DESC = "-createdAt"
    DURATION_DESC = "-duration"
    END_DATE_DESC = "-endDate"
    FIRST_BROADCAST_DESC = "-firstBroadcast"
    LAST_BROADCAST_DESC = "-lastBroadcast"
    LAST_PLAYED_AT_DESC = "-lastPlayedAt"
    MEDIA_TYPE_DESC = "-mediaType"
    MODERATION_COUNT_DESC = "-moderationCount"
    NAME_DESC = "-name"
    PARTNER_SORT_VALUE_DESC = "-partnerSortValue"
    PLAYS_DESC = "-plays"
    RANK_DESC = "-rank"
    RECENT_DESC = "-recent"
    START_DATE_DESC = "-startDate"
    TOTAL_RANK_DESC = "-totalRank"
    UPDATED_AT_DESC = "-updatedAt"
    VIEWS_DESC = "-views"
    WEIGHT_DESC = "-weight"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunLiveStreamEntryCompareAttribute(object):
    ACCESS_CONTROL_ID = "accessControlId"
    CREATED_AT = "createdAt"
    END_DATE = "endDate"
    LAST_PLAYED_AT = "lastPlayedAt"
    MEDIA_DATE = "mediaDate"
    MEDIA_TYPE = "mediaType"
    MODERATION_COUNT = "moderationCount"
    MODERATION_STATUS = "moderationStatus"
    MS_DURATION = "msDuration"
    PARTNER_ID = "partnerId"
    PARTNER_SORT_VALUE = "partnerSortValue"
    PLAYS = "plays"
    RANK = "rank"
    REPLACEMENT_STATUS = "replacementStatus"
    START_DATE = "startDate"
    STATUS = "status"
    TOTAL_RANK = "totalRank"
    TYPE = "type"
    UPDATED_AT = "updatedAt"
    VIEWS = "views"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunLiveStreamEntryMatchAttribute(object):
    ADMIN_TAGS = "adminTags"
    CATEGORIES_IDS = "categoriesIds"
    CREATOR_ID = "creatorId"
    DESCRIPTION = "description"
    DURATION_TYPE = "durationType"
    FLAVOR_PARAMS_IDS = "flavorParamsIds"
    GROUP_ID = "groupId"
    ID = "id"
    NAME = "name"
    REFERENCE_ID = "referenceId"
    REPLACED_ENTRY_ID = "replacedEntryId"
    REPLACING_ENTRY_ID = "replacingEntryId"
    SEARCH_TEXT = "searchText"
    TAGS = "tags"
    USER_ID = "userId"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunLiveStreamEntryOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    DURATION_ASC = "+duration"
    END_DATE_ASC = "+endDate"
    FIRST_BROADCAST_ASC = "+firstBroadcast"
    LAST_BROADCAST_ASC = "+lastBroadcast"
    LAST_PLAYED_AT_ASC = "+lastPlayedAt"
    MEDIA_TYPE_ASC = "+mediaType"
    MODERATION_COUNT_ASC = "+moderationCount"
    NAME_ASC = "+name"
    PARTNER_SORT_VALUE_ASC = "+partnerSortValue"
    PLAYS_ASC = "+plays"
    RANK_ASC = "+rank"
    RECENT_ASC = "+recent"
    START_DATE_ASC = "+startDate"
    TOTAL_RANK_ASC = "+totalRank"
    UPDATED_AT_ASC = "+updatedAt"
    VIEWS_ASC = "+views"
    WEIGHT_ASC = "+weight"
    CREATED_AT_DESC = "-createdAt"
    DURATION_DESC = "-duration"
    END_DATE_DESC = "-endDate"
    FIRST_BROADCAST_DESC = "-firstBroadcast"
    LAST_BROADCAST_DESC = "-lastBroadcast"
    LAST_PLAYED_AT_DESC = "-lastPlayedAt"
    MEDIA_TYPE_DESC = "-mediaType"
    MODERATION_COUNT_DESC = "-moderationCount"
    NAME_DESC = "-name"
    PARTNER_SORT_VALUE_DESC = "-partnerSortValue"
    PLAYS_DESC = "-plays"
    RANK_DESC = "-rank"
    RECENT_DESC = "-recent"
    START_DATE_DESC = "-startDate"
    TOTAL_RANK_DESC = "-totalRank"
    UPDATED_AT_DESC = "-updatedAt"
    VIEWS_DESC = "-views"
    WEIGHT_DESC = "-weight"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunMailType(object):
    MAIL_TYPE_VIDIUN_NEWSLETTER = "10"
    MAIL_TYPE_ADDED_TO_FAVORITES = "11"
    MAIL_TYPE_ADDED_TO_CLIP_FAVORITES = "12"
    MAIL_TYPE_NEW_COMMENT_IN_PROFILE = "13"
    MAIL_TYPE_CLIP_ADDED_YOUR_VIDIUN = "20"
    MAIL_TYPE_VIDEO_ADDED = "21"
    MAIL_TYPE_ROUGHCUT_CREATED = "22"
    MAIL_TYPE_ADDED_VIDIUN_TO_YOUR_FAVORITES = "23"
    MAIL_TYPE_NEW_COMMENT_IN_VIDIUN = "24"
    MAIL_TYPE_CLIP_ADDED = "30"
    MAIL_TYPE_VIDEO_CREATED = "31"
    MAIL_TYPE_ADDED_VIDIUN_TO_HIS_FAVORITES = "32"
    MAIL_TYPE_NEW_COMMENT_IN_VIDIUN_YOU_CONTRIBUTED = "33"
    MAIL_TYPE_CLIP_CONTRIBUTED = "40"
    MAIL_TYPE_ROUGHCUT_CREATED_SUBSCRIBED = "41"
    MAIL_TYPE_ADDED_VIDIUN_TO_HIS_FAVORITES_SUBSCRIBED = "42"
    MAIL_TYPE_NEW_COMMENT_IN_VIDIUN_YOU_SUBSCRIBED = "43"
    MAIL_TYPE_REGISTER_CONFIRM = "50"
    MAIL_TYPE_PASSWORD_RESET = "51"
    MAIL_TYPE_LOGIN_MAIL_RESET = "52"
    MAIL_TYPE_REGISTER_CONFIRM_VIDEO_SERVICE = "54"
    MAIL_TYPE_VIDEO_READY = "60"
    MAIL_TYPE_VIDEO_IS_READY = "62"
    MAIL_TYPE_BULK_DOWNLOAD_READY = "63"
    MAIL_TYPE_BULKUPLOAD_FINISHED = "64"
    MAIL_TYPE_BULKUPLOAD_FAILED = "65"
    MAIL_TYPE_BULKUPLOAD_ABORTED = "66"
    MAIL_TYPE_NOTIFY_ERR = "70"
    MAIL_TYPE_ACCOUNT_UPGRADE_CONFIRM = "80"
    MAIL_TYPE_VIDEO_SERVICE_NOTICE = "81"
    MAIL_TYPE_VIDEO_SERVICE_NOTICE_LIMIT_REACHED = "82"
    MAIL_TYPE_VIDEO_SERVICE_NOTICE_ACCOUNT_LOCKED = "83"
    MAIL_TYPE_VIDEO_SERVICE_NOTICE_ACCOUNT_DELETED = "84"
    MAIL_TYPE_VIDEO_SERVICE_NOTICE_UPGRADE_OFFER = "85"
    MAIL_TYPE_ACCOUNT_REACTIVE_CONFIRM = "86"
    MAIL_TYPE_SYSTEM_USER_RESET_PASSWORD = "110"
    MAIL_TYPE_SYSTEM_USER_RESET_PASSWORD_SUCCESS = "111"
    MAIL_TYPE_SYSTEM_USER_NEW_PASSWORD = "112"
    MAIL_TYPE_SYSTEM_USER_CREDENTIALS_SAVED = "113"
    MAIL_TYPE_LIVE_REPORT_EXPORT_SUCCESS = "130"
    MAIL_TYPE_LIVE_REPORT_EXPORT_FAILURE = "131"
    MAIL_TYPE_LIVE_REPORT_EXPORT_ABORT = "132"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunMediaEntryCompareAttribute(object):
    ACCESS_CONTROL_ID = "accessControlId"
    CREATED_AT = "createdAt"
    END_DATE = "endDate"
    LAST_PLAYED_AT = "lastPlayedAt"
    MEDIA_DATE = "mediaDate"
    MEDIA_TYPE = "mediaType"
    MODERATION_COUNT = "moderationCount"
    MODERATION_STATUS = "moderationStatus"
    MS_DURATION = "msDuration"
    PARTNER_ID = "partnerId"
    PARTNER_SORT_VALUE = "partnerSortValue"
    PLAYS = "plays"
    RANK = "rank"
    REPLACEMENT_STATUS = "replacementStatus"
    START_DATE = "startDate"
    STATUS = "status"
    TOTAL_RANK = "totalRank"
    TYPE = "type"
    UPDATED_AT = "updatedAt"
    VIEWS = "views"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunMediaEntryMatchAttribute(object):
    ADMIN_TAGS = "adminTags"
    CATEGORIES_IDS = "categoriesIds"
    CREATOR_ID = "creatorId"
    DESCRIPTION = "description"
    DURATION_TYPE = "durationType"
    FLAVOR_PARAMS_IDS = "flavorParamsIds"
    GROUP_ID = "groupId"
    ID = "id"
    NAME = "name"
    REFERENCE_ID = "referenceId"
    REPLACED_ENTRY_ID = "replacedEntryId"
    REPLACING_ENTRY_ID = "replacingEntryId"
    SEARCH_TEXT = "searchText"
    TAGS = "tags"
    USER_ID = "userId"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunMediaEntryOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    DURATION_ASC = "+duration"
    END_DATE_ASC = "+endDate"
    LAST_PLAYED_AT_ASC = "+lastPlayedAt"
    MEDIA_TYPE_ASC = "+mediaType"
    MODERATION_COUNT_ASC = "+moderationCount"
    NAME_ASC = "+name"
    PARTNER_SORT_VALUE_ASC = "+partnerSortValue"
    PLAYS_ASC = "+plays"
    RANK_ASC = "+rank"
    RECENT_ASC = "+recent"
    START_DATE_ASC = "+startDate"
    TOTAL_RANK_ASC = "+totalRank"
    UPDATED_AT_ASC = "+updatedAt"
    VIEWS_ASC = "+views"
    WEIGHT_ASC = "+weight"
    CREATED_AT_DESC = "-createdAt"
    DURATION_DESC = "-duration"
    END_DATE_DESC = "-endDate"
    LAST_PLAYED_AT_DESC = "-lastPlayedAt"
    MEDIA_TYPE_DESC = "-mediaType"
    MODERATION_COUNT_DESC = "-moderationCount"
    NAME_DESC = "-name"
    PARTNER_SORT_VALUE_DESC = "-partnerSortValue"
    PLAYS_DESC = "-plays"
    RANK_DESC = "-rank"
    RECENT_DESC = "-recent"
    START_DATE_DESC = "-startDate"
    TOTAL_RANK_DESC = "-totalRank"
    UPDATED_AT_DESC = "-updatedAt"
    VIEWS_DESC = "-views"
    WEIGHT_DESC = "-weight"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunMediaFlavorParamsOrderBy(object):

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunMediaFlavorParamsOutputOrderBy(object):

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunMediaInfoOrderBy(object):

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunMediaParserType(object):
    MEDIAINFO = "0"
    REMOTE_MEDIAINFO = "remoteMediaInfo.RemoteMediaInfo"
    FFMPEG = "1"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunMediaServerNodeOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    HEARTBEAT_TIME_ASC = "+heartbeatTime"
    UPDATED_AT_ASC = "+updatedAt"
    CREATED_AT_DESC = "-createdAt"
    HEARTBEAT_TIME_DESC = "-heartbeatTime"
    UPDATED_AT_DESC = "-updatedAt"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunMixEntryCompareAttribute(object):
    ACCESS_CONTROL_ID = "accessControlId"
    CREATED_AT = "createdAt"
    END_DATE = "endDate"
    LAST_PLAYED_AT = "lastPlayedAt"
    MODERATION_COUNT = "moderationCount"
    MODERATION_STATUS = "moderationStatus"
    MS_DURATION = "msDuration"
    PARTNER_ID = "partnerId"
    PARTNER_SORT_VALUE = "partnerSortValue"
    PLAYS = "plays"
    RANK = "rank"
    REPLACEMENT_STATUS = "replacementStatus"
    START_DATE = "startDate"
    STATUS = "status"
    TOTAL_RANK = "totalRank"
    TYPE = "type"
    UPDATED_AT = "updatedAt"
    VIEWS = "views"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunMixEntryMatchAttribute(object):
    ADMIN_TAGS = "adminTags"
    CATEGORIES_IDS = "categoriesIds"
    CREATOR_ID = "creatorId"
    DESCRIPTION = "description"
    DURATION_TYPE = "durationType"
    GROUP_ID = "groupId"
    ID = "id"
    NAME = "name"
    REFERENCE_ID = "referenceId"
    REPLACED_ENTRY_ID = "replacedEntryId"
    REPLACING_ENTRY_ID = "replacingEntryId"
    SEARCH_TEXT = "searchText"
    TAGS = "tags"
    USER_ID = "userId"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunMixEntryOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    DURATION_ASC = "+duration"
    END_DATE_ASC = "+endDate"
    LAST_PLAYED_AT_ASC = "+lastPlayedAt"
    MODERATION_COUNT_ASC = "+moderationCount"
    NAME_ASC = "+name"
    PARTNER_SORT_VALUE_ASC = "+partnerSortValue"
    PLAYS_ASC = "+plays"
    RANK_ASC = "+rank"
    RECENT_ASC = "+recent"
    START_DATE_ASC = "+startDate"
    TOTAL_RANK_ASC = "+totalRank"
    UPDATED_AT_ASC = "+updatedAt"
    VIEWS_ASC = "+views"
    WEIGHT_ASC = "+weight"
    CREATED_AT_DESC = "-createdAt"
    DURATION_DESC = "-duration"
    END_DATE_DESC = "-endDate"
    LAST_PLAYED_AT_DESC = "-lastPlayedAt"
    MODERATION_COUNT_DESC = "-moderationCount"
    NAME_DESC = "-name"
    PARTNER_SORT_VALUE_DESC = "-partnerSortValue"
    PLAYS_DESC = "-plays"
    RANK_DESC = "-rank"
    RECENT_DESC = "-recent"
    START_DATE_DESC = "-startDate"
    TOTAL_RANK_DESC = "-totalRank"
    UPDATED_AT_DESC = "-updatedAt"
    VIEWS_DESC = "-views"
    WEIGHT_DESC = "-weight"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunModerationFlagStatus(object):
    PENDING = "1"
    MODERATED = "2"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunModerationObjectType(object):
    ENTRY = "2"
    USER = "3"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunPartnerOrderBy(object):
    ADMIN_EMAIL_ASC = "+adminEmail"
    ADMIN_NAME_ASC = "+adminName"
    CREATED_AT_ASC = "+createdAt"
    ID_ASC = "+id"
    NAME_ASC = "+name"
    STATUS_ASC = "+status"
    WEBSITE_ASC = "+website"
    ADMIN_EMAIL_DESC = "-adminEmail"
    ADMIN_NAME_DESC = "-adminName"
    CREATED_AT_DESC = "-createdAt"
    ID_DESC = "-id"
    NAME_DESC = "-name"
    STATUS_DESC = "-status"
    WEBSITE_DESC = "-website"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunPermissionItemOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    ID_ASC = "+id"
    UPDATED_AT_ASC = "+updatedAt"
    CREATED_AT_DESC = "-createdAt"
    ID_DESC = "-id"
    UPDATED_AT_DESC = "-updatedAt"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunPermissionItemType(object):
    API_ACTION_ITEM = "vApiActionPermissionItem"
    API_PARAMETER_ITEM = "vApiParameterPermissionItem"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunPermissionOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    ID_ASC = "+id"
    NAME_ASC = "+name"
    UPDATED_AT_ASC = "+updatedAt"
    CREATED_AT_DESC = "-createdAt"
    ID_DESC = "-id"
    NAME_DESC = "-name"
    UPDATED_AT_DESC = "-updatedAt"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunPlayableEntryCompareAttribute(object):
    ACCESS_CONTROL_ID = "accessControlId"
    CREATED_AT = "createdAt"
    END_DATE = "endDate"
    LAST_PLAYED_AT = "lastPlayedAt"
    MODERATION_COUNT = "moderationCount"
    MODERATION_STATUS = "moderationStatus"
    MS_DURATION = "msDuration"
    PARTNER_ID = "partnerId"
    PARTNER_SORT_VALUE = "partnerSortValue"
    PLAYS = "plays"
    RANK = "rank"
    REPLACEMENT_STATUS = "replacementStatus"
    START_DATE = "startDate"
    STATUS = "status"
    TOTAL_RANK = "totalRank"
    TYPE = "type"
    UPDATED_AT = "updatedAt"
    VIEWS = "views"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunPlayableEntryMatchAttribute(object):
    ADMIN_TAGS = "adminTags"
    CATEGORIES_IDS = "categoriesIds"
    CREATOR_ID = "creatorId"
    DESCRIPTION = "description"
    DURATION_TYPE = "durationType"
    GROUP_ID = "groupId"
    ID = "id"
    NAME = "name"
    REFERENCE_ID = "referenceId"
    REPLACED_ENTRY_ID = "replacedEntryId"
    REPLACING_ENTRY_ID = "replacingEntryId"
    SEARCH_TEXT = "searchText"
    TAGS = "tags"
    USER_ID = "userId"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunPlayableEntryOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    DURATION_ASC = "+duration"
    END_DATE_ASC = "+endDate"
    LAST_PLAYED_AT_ASC = "+lastPlayedAt"
    MODERATION_COUNT_ASC = "+moderationCount"
    NAME_ASC = "+name"
    PARTNER_SORT_VALUE_ASC = "+partnerSortValue"
    PLAYS_ASC = "+plays"
    RANK_ASC = "+rank"
    RECENT_ASC = "+recent"
    START_DATE_ASC = "+startDate"
    TOTAL_RANK_ASC = "+totalRank"
    UPDATED_AT_ASC = "+updatedAt"
    VIEWS_ASC = "+views"
    WEIGHT_ASC = "+weight"
    CREATED_AT_DESC = "-createdAt"
    DURATION_DESC = "-duration"
    END_DATE_DESC = "-endDate"
    LAST_PLAYED_AT_DESC = "-lastPlayedAt"
    MODERATION_COUNT_DESC = "-moderationCount"
    NAME_DESC = "-name"
    PARTNER_SORT_VALUE_DESC = "-partnerSortValue"
    PLAYS_DESC = "-plays"
    RANK_DESC = "-rank"
    RECENT_DESC = "-recent"
    START_DATE_DESC = "-startDate"
    TOTAL_RANK_DESC = "-totalRank"
    UPDATED_AT_DESC = "-updatedAt"
    VIEWS_DESC = "-views"
    WEIGHT_DESC = "-weight"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunPlaybackProtocol(object):
    APPLE_HTTP = "applehttp"
    APPLE_HTTP_TO_MC = "applehttp_to_mc"
    AUTO = "auto"
    AKAMAI_HD = "hdnetwork"
    AKAMAI_HDS = "hdnetworkmanifest"
    HDS = "hds"
    HLS = "hls"
    HTTP = "http"
    MPEG_DASH = "mpegdash"
    MULTICAST_SL = "multicast_silverlight"
    RTMP = "rtmp"
    RTSP = "rtsp"
    SILVER_LIGHT = "sl"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunPlaylistCompareAttribute(object):
    ACCESS_CONTROL_ID = "accessControlId"
    CREATED_AT = "createdAt"
    END_DATE = "endDate"
    MODERATION_COUNT = "moderationCount"
    MODERATION_STATUS = "moderationStatus"
    PARTNER_ID = "partnerId"
    PARTNER_SORT_VALUE = "partnerSortValue"
    RANK = "rank"
    REPLACEMENT_STATUS = "replacementStatus"
    START_DATE = "startDate"
    STATUS = "status"
    TOTAL_RANK = "totalRank"
    TYPE = "type"
    UPDATED_AT = "updatedAt"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunPlaylistMatchAttribute(object):
    ADMIN_TAGS = "adminTags"
    CATEGORIES_IDS = "categoriesIds"
    CREATOR_ID = "creatorId"
    DESCRIPTION = "description"
    GROUP_ID = "groupId"
    ID = "id"
    NAME = "name"
    REFERENCE_ID = "referenceId"
    REPLACED_ENTRY_ID = "replacedEntryId"
    REPLACING_ENTRY_ID = "replacingEntryId"
    SEARCH_TEXT = "searchText"
    TAGS = "tags"
    USER_ID = "userId"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunPlaylistOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    END_DATE_ASC = "+endDate"
    MODERATION_COUNT_ASC = "+moderationCount"
    NAME_ASC = "+name"
    PARTNER_SORT_VALUE_ASC = "+partnerSortValue"
    RANK_ASC = "+rank"
    RECENT_ASC = "+recent"
    START_DATE_ASC = "+startDate"
    TOTAL_RANK_ASC = "+totalRank"
    UPDATED_AT_ASC = "+updatedAt"
    WEIGHT_ASC = "+weight"
    CREATED_AT_DESC = "-createdAt"
    END_DATE_DESC = "-endDate"
    MODERATION_COUNT_DESC = "-moderationCount"
    NAME_DESC = "-name"
    PARTNER_SORT_VALUE_DESC = "-partnerSortValue"
    RANK_DESC = "-rank"
    RECENT_DESC = "-recent"
    START_DATE_DESC = "-startDate"
    TOTAL_RANK_DESC = "-totalRank"
    UPDATED_AT_DESC = "-updatedAt"
    WEIGHT_DESC = "-weight"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunQuizUserEntryOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    UPDATED_AT_ASC = "+updatedAt"
    CREATED_AT_DESC = "-createdAt"
    UPDATED_AT_DESC = "-updatedAt"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunReportInterval(object):
    DAYS = "days"
    MONTHS = "months"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunReportOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    CREATED_AT_DESC = "-createdAt"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunReportType(object):
    QUIZ = "quiz.QUIZ"
    QUIZ_AGGREGATE_BY_QUESTION = "quiz.QUIZ_AGGREGATE_BY_QUESTION"
    QUIZ_USER_AGGREGATE_BY_QUESTION = "quiz.QUIZ_USER_AGGREGATE_BY_QUESTION"
    QUIZ_USER_PERCENTAGE = "quiz.QUIZ_USER_PERCENTAGE"
    TOP_CONTENT = "1"
    CONTENT_DROPOFF = "2"
    CONTENT_INTERACTIONS = "3"
    MAP_OVERLAY = "4"
    TOP_CONTRIBUTORS = "5"
    TOP_SYNDICATION = "6"
    CONTENT_CONTRIBUTIONS = "7"
    USER_ENGAGEMENT = "11"
    SPEFICIC_USER_ENGAGEMENT = "12"
    USER_TOP_CONTENT = "13"
    USER_CONTENT_DROPOFF = "14"
    USER_CONTENT_INTERACTIONS = "15"
    APPLICATIONS = "16"
    USER_USAGE = "17"
    SPECIFIC_USER_USAGE = "18"
    VAR_USAGE = "19"
    TOP_CREATORS = "20"
    PLATFORMS = "21"
    OPERATION_SYSTEM = "22"
    BROWSERS = "23"
    LIVE = "24"
    TOP_PLAYBACK_CONTEXT = "25"
    VPAAS_USAGE = "26"
    PARTNER_USAGE = "201"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunResponseProfileOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    UPDATED_AT_ASC = "+updatedAt"
    CREATED_AT_DESC = "-createdAt"
    UPDATED_AT_DESC = "-updatedAt"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunRuleActionType(object):
    DRM_POLICY = "drm.DRM_POLICY"
    BLOCK = "1"
    PREVIEW = "2"
    LIMIT_FLAVORS = "3"
    ADD_TO_STORAGE = "4"
    LIMIT_DELIVERY_PROFILES = "5"
    SERVE_FROM_REMOTE_SERVER = "6"
    REQUEST_HOST_REGEX = "7"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunSchemaType(object):
    BULK_UPLOAD_RESULT_XML = "bulkUploadXml.bulkUploadResultXML"
    BULK_UPLOAD_XML = "bulkUploadXml.bulkUploadXML"
    INGEST_API = "cuePoint.ingestAPI"
    SERVE_API = "cuePoint.serveAPI"
    DROP_FOLDER_XML = "dropFolderXmlBulkUpload.dropFolderXml"
    SYNDICATION = "syndication"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunSearchConditionComparison(object):
    EQUAL = "1"
    GREATER_THAN = "2"
    GREATER_THAN_OR_EQUAL = "3"
    LESS_THAN = "4"
    LESS_THAN_OR_EQUAL = "5"
    NOT_EQUAL = "6"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunServerNodeOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    HEARTBEAT_TIME_ASC = "+heartbeatTime"
    UPDATED_AT_ASC = "+updatedAt"
    CREATED_AT_DESC = "-createdAt"
    HEARTBEAT_TIME_DESC = "-heartbeatTime"
    UPDATED_AT_DESC = "-updatedAt"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunServerNodeType(object):
    WOWZA_MEDIA_SERVER = "wowza.WOWZA_MEDIA_SERVER"
    EDGE = "1"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunSourceType(object):
    LIMELIGHT_LIVE = "limeLight.LIVE_STREAM"
    VELOCIX_LIVE = "velocix.VELOCIX_LIVE"
    FILE = "1"
    WEBCAM = "2"
    URL = "5"
    SEARCH_PROVIDER = "6"
    AKAMAI_LIVE = "29"
    MANUAL_LIVE_STREAM = "30"
    AKAMAI_UNIVERSAL_LIVE = "31"
    LIVE_STREAM = "32"
    LIVE_CHANNEL = "33"
    RECORDED_LIVE = "34"
    CLIP = "35"
    LIVE_STREAM_ONTEXTDATA_CAPTIONS = "42"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunStorageProfileOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    UPDATED_AT_ASC = "+updatedAt"
    CREATED_AT_DESC = "-createdAt"
    UPDATED_AT_DESC = "-updatedAt"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunStorageProfileProtocol(object):
    KONTIKI = "kontiki.KONTIKI"
    VIDIUN_DC = "0"
    FTP = "1"
    SCP = "2"
    SFTP = "3"
    S3 = "6"
    LOCAL = "7"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunSyndicationFeedEntriesOrderBy(object):
    CREATED_AT_DESC = "-createdAt"
    RECENT = "recent"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunTaggedObjectType(object):
    ENTRY = "1"
    CATEGORY = "2"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunThumbAssetOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    DELETED_AT_ASC = "+deletedAt"
    SIZE_ASC = "+size"
    UPDATED_AT_ASC = "+updatedAt"
    CREATED_AT_DESC = "-createdAt"
    DELETED_AT_DESC = "-deletedAt"
    SIZE_DESC = "-size"
    UPDATED_AT_DESC = "-updatedAt"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunThumbParamsOrderBy(object):

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunThumbParamsOutputOrderBy(object):

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunTubeMogulSyndicationFeedCategories(object):
    ANIMALS_AND_PETS = "Animals &amp; Pets"
    ARTS_AND_ANIMATION = "Arts &amp; Animation"
    AUTOS = "Autos"
    COMEDY = "Comedy"
    COMMERCIALS_PROMOTIONAL = "Commercials/Promotional"
    ENTERTAINMENT = "Entertainment"
    FAMILY_AND_KIDS = "Family &amp; Kids"
    HOW_TO_INSTRUCTIONAL_DIY = "How To/Instructional/DIY"
    MUSIC = "Music"
    NEWS_AND_BLOGS = "News &amp; Blogs"
    SCIENCE_AND_TECHNOLOGY = "Science &amp; Technology"
    SPORTS = "Sports"
    TRAVEL_AND_PLACES = "Travel &amp; Places"
    VIDEO_GAMES = "Video Games"
    VLOGS_PEOPLE = "Vlogs &amp; People"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunTubeMogulSyndicationFeedOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    NAME_ASC = "+name"
    PLAYLIST_ID_ASC = "+playlistId"
    TYPE_ASC = "+type"
    UPDATED_AT_ASC = "+updatedAt"
    CREATED_AT_DESC = "-createdAt"
    NAME_DESC = "-name"
    PLAYLIST_ID_DESC = "-playlistId"
    TYPE_DESC = "-type"
    UPDATED_AT_DESC = "-updatedAt"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunUiConfOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    UPDATED_AT_ASC = "+updatedAt"
    CREATED_AT_DESC = "-createdAt"
    UPDATED_AT_DESC = "-updatedAt"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunUploadTokenOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    CREATED_AT_DESC = "-createdAt"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunUserEntryOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    UPDATED_AT_ASC = "+updatedAt"
    CREATED_AT_DESC = "-createdAt"
    UPDATED_AT_DESC = "-updatedAt"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunUserEntryStatus(object):
    QUIZ_SUBMITTED = "quiz.3"
    ACTIVE = "1"
    DELETED = "2"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunUserEntryType(object):
    QUIZ = "quiz.QUIZ"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunUserLoginDataOrderBy(object):

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunUserOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    ID_ASC = "+id"
    CREATED_AT_DESC = "-createdAt"
    ID_DESC = "-id"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunUserRoleOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    ID_ASC = "+id"
    NAME_ASC = "+name"
    UPDATED_AT_ASC = "+updatedAt"
    CREATED_AT_DESC = "-createdAt"
    ID_DESC = "-id"
    NAME_DESC = "-name"
    UPDATED_AT_DESC = "-updatedAt"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunVideoCodec(object):
    NONE = ""
    APCH = "apch"
    APCN = "apcn"
    APCO = "apco"
    APCS = "apcs"
    COPY = "copy"
    DNXHD = "dnxhd"
    DV = "dv"
    FLV = "flv"
    H263 = "h263"
    H264 = "h264"
    H264B = "h264b"
    H264H = "h264h"
    H264M = "h264m"
    H265 = "h265"
    MPEG2 = "mpeg2"
    MPEG4 = "mpeg4"
    THEORA = "theora"
    VP6 = "vp6"
    VP8 = "vp8"
    VP9 = "vp9"
    WMV2 = "wmv2"
    WMV3 = "wmv3"
    WVC1A = "wvc1a"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunWidgetOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    CREATED_AT_DESC = "-createdAt"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunYahooSyndicationFeedAdultValues(object):
    ADULT = "adult"
    NON_ADULT = "nonadult"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunYahooSyndicationFeedCategories(object):
    ACTION = "Action"
    ANIMALS = "Animals"
    ART_AND_ANIMATION = "Art &amp; Animation"
    COMMERCIALS = "Commercials"
    ENTERTAINMENT_AND_TV = "Entertainment &amp; TV"
    FAMILY = "Family"
    FOOD = "Food"
    FUNNY_VIDEOS = "Funny Videos"
    GAMES = "Games"
    HEALTH_AND_BEAUTY = "Health &amp; Beauty"
    HOW_TO = "How-To"
    MOVIES_AND_SHORTS = "Movies &amp; Shorts"
    MUSIC = "Music"
    NEWS_AND_POLITICS = "News &amp; Politics"
    PEOPLE_AND_VLOGS = "People &amp; Vlogs"
    PRODUCTS_AND_TECH = "Products &amp; Tech."
    SCIENCE_AND_ENVIRONMENT = "Science &amp; Environment"
    SPORTS = "Sports"
    TRANSPORTATION = "Transportation"
    TRAVEL = "Travel"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Vidiun
# @subpackage Client
class VidiunYahooSyndicationFeedOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    NAME_ASC = "+name"
    PLAYLIST_ID_ASC = "+playlistId"
    TYPE_ASC = "+type"
    UPDATED_AT_ASC = "+updatedAt"
    CREATED_AT_DESC = "-createdAt"
    NAME_DESC = "-name"
    PLAYLIST_ID_DESC = "-playlistId"
    TYPE_DESC = "-type"
    UPDATED_AT_DESC = "-updatedAt"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

########## classes ##########
# @package Vidiun
# @subpackage Client
class VidiunListResponse(VidiunObjectBase):
    def __init__(self,
            totalCount=NotImplemented):
        VidiunObjectBase.__init__(self)

        # @var int
        # @readonly
        self.totalCount = totalCount


    PROPERTY_LOADERS = {
        'totalCount': getXmlNodeInt, 
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunListResponse.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunListResponse")
        return vparams

    def getTotalCount(self):
        return self.totalCount


# @package Vidiun
# @subpackage Client
class VidiunBaseRestriction(VidiunObjectBase):
    def __init__(self):
        VidiunObjectBase.__init__(self)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunBaseRestriction.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunBaseRestriction")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunAccessControl(VidiunObjectBase):
    def __init__(self,
            id=NotImplemented,
            partnerId=NotImplemented,
            name=NotImplemented,
            systemName=NotImplemented,
            description=NotImplemented,
            createdAt=NotImplemented,
            isDefault=NotImplemented,
            restrictions=NotImplemented,
            containsUnsuportedRestrictions=NotImplemented):
        VidiunObjectBase.__init__(self)

        # The id of the Access Control Profile
        # @var int
        # @readonly
        self.id = id

        # @var int
        # @readonly
        self.partnerId = partnerId

        # The name of the Access Control Profile
        # @var string
        self.name = name

        # System name of the Access Control Profile
        # @var string
        self.systemName = systemName

        # The description of the Access Control Profile
        # @var string
        self.description = description

        # Creation date as Unix timestamp (In seconds)
        # @var int
        # @readonly
        self.createdAt = createdAt

        # True if this Conversion Profile is the default
        # @var VidiunNullableBoolean
        self.isDefault = isDefault

        # Array of Access Control Restrictions
        # @var array of VidiunBaseRestriction
        self.restrictions = restrictions

        # Indicates that the access control profile is new and should be handled using VidiunAccessControlProfile object and accessControlProfile service
        # @var bool
        # @readonly
        self.containsUnsuportedRestrictions = containsUnsuportedRestrictions


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'partnerId': getXmlNodeInt, 
        'name': getXmlNodeText, 
        'systemName': getXmlNodeText, 
        'description': getXmlNodeText, 
        'createdAt': getXmlNodeInt, 
        'isDefault': (VidiunEnumsFactory.createInt, "VidiunNullableBoolean"), 
        'restrictions': (VidiunObjectFactory.createArray, VidiunBaseRestriction), 
        'containsUnsuportedRestrictions': getXmlNodeBool, 
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunAccessControl.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunAccessControl")
        vparams.addStringIfDefined("name", self.name)
        vparams.addStringIfDefined("systemName", self.systemName)
        vparams.addStringIfDefined("description", self.description)
        vparams.addIntEnumIfDefined("isDefault", self.isDefault)
        vparams.addArrayIfDefined("restrictions", self.restrictions)
        return vparams

    def getId(self):
        return self.id

    def getPartnerId(self):
        return self.partnerId

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName

    def getSystemName(self):
        return self.systemName

    def setSystemName(self, newSystemName):
        self.systemName = newSystemName

    def getDescription(self):
        return self.description

    def setDescription(self, newDescription):
        self.description = newDescription

    def getCreatedAt(self):
        return self.createdAt

    def getIsDefault(self):
        return self.isDefault

    def setIsDefault(self, newIsDefault):
        self.isDefault = newIsDefault

    def getRestrictions(self):
        return self.restrictions

    def setRestrictions(self, newRestrictions):
        self.restrictions = newRestrictions

    def getContainsUnsuportedRestrictions(self):
        return self.containsUnsuportedRestrictions


# @package Vidiun
# @subpackage Client
class VidiunContextTypeHolder(VidiunObjectBase):
    def __init__(self,
            type=NotImplemented):
        VidiunObjectBase.__init__(self)

        # The type of the condition context
        # @var VidiunContextType
        self.type = type


    PROPERTY_LOADERS = {
        'type': (VidiunEnumsFactory.createString, "VidiunContextType"), 
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunContextTypeHolder.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunContextTypeHolder")
        vparams.addStringEnumIfDefined("type", self.type)
        return vparams

    def getType(self):
        return self.type

    def setType(self, newType):
        self.type = newType


# @package Vidiun
# @subpackage Client
class VidiunAccessControlContextTypeHolder(VidiunContextTypeHolder):
    def __init__(self,
            type=NotImplemented):
        VidiunContextTypeHolder.__init__(self,
            type)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunContextTypeHolder.fromXml(self, node)
        self.fromXmlImpl(node, VidiunAccessControlContextTypeHolder.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunContextTypeHolder.toParams(self)
        vparams.put("objectType", "VidiunAccessControlContextTypeHolder")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunRuleAction(VidiunObjectBase):
    def __init__(self,
            type=NotImplemented):
        VidiunObjectBase.__init__(self)

        # The type of the action
        # @var VidiunRuleActionType
        # @readonly
        self.type = type


    PROPERTY_LOADERS = {
        'type': (VidiunEnumsFactory.createString, "VidiunRuleActionType"), 
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunRuleAction.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunRuleAction")
        return vparams

    def getType(self):
        return self.type


# @package Vidiun
# @subpackage Client
class VidiunCondition(VidiunObjectBase):
    def __init__(self,
            type=NotImplemented,
            description=NotImplemented,
            not_=NotImplemented):
        VidiunObjectBase.__init__(self)

        # The type of the access control condition
        # @var VidiunConditionType
        # @readonly
        self.type = type

        # @var string
        self.description = description

        # @var bool
        self.not_ = not_


    PROPERTY_LOADERS = {
        'type': (VidiunEnumsFactory.createString, "VidiunConditionType"), 
        'description': getXmlNodeText, 
        'not': getXmlNodeBool, 
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunCondition.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunCondition")
        vparams.addStringIfDefined("description", self.description)
        vparams.addBoolIfDefined("not", self.not_)
        return vparams

    def getType(self):
        return self.type

    def getDescription(self):
        return self.description

    def setDescription(self, newDescription):
        self.description = newDescription

    def getNot_(self):
        return self.not_

    def setNot_(self, newNot_):
        self.not_ = newNot_


# @package Vidiun
# @subpackage Client
class VidiunRule(VidiunObjectBase):
    def __init__(self,
            description=NotImplemented,
            ruleData=NotImplemented,
            message=NotImplemented,
            actions=NotImplemented,
            conditions=NotImplemented,
            contexts=NotImplemented,
            stopProcessing=NotImplemented,
            forceAdminValidation=NotImplemented):
        VidiunObjectBase.__init__(self)

        # Short Rule Description
        # @var string
        self.description = description

        # Rule Custom Data to allow saving rule specific information
        # @var string
        self.ruleData = ruleData

        # Message to be thrown to the player in case the rule is fulfilled
        # @var string
        self.message = message

        # Actions to be performed by the player in case the rule is fulfilled
        # @var array of VidiunRuleAction
        self.actions = actions

        # Conditions to validate the rule
        # @var array of VidiunCondition
        self.conditions = conditions

        # Indicates what contexts should be tested by this rule
        # @var array of VidiunContextTypeHolder
        self.contexts = contexts

        # Indicates that this rule is enough and no need to continue checking the rest of the rules
        # @var bool
        self.stopProcessing = stopProcessing

        # Indicates if we should force ks validation for admin ks users as well
        # @var VidiunNullableBoolean
        self.forceAdminValidation = forceAdminValidation


    PROPERTY_LOADERS = {
        'description': getXmlNodeText, 
        'ruleData': getXmlNodeText, 
        'message': getXmlNodeText, 
        'actions': (VidiunObjectFactory.createArray, VidiunRuleAction), 
        'conditions': (VidiunObjectFactory.createArray, VidiunCondition), 
        'contexts': (VidiunObjectFactory.createArray, VidiunContextTypeHolder), 
        'stopProcessing': getXmlNodeBool, 
        'forceAdminValidation': (VidiunEnumsFactory.createInt, "VidiunNullableBoolean"), 
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunRule.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunRule")
        vparams.addStringIfDefined("description", self.description)
        vparams.addStringIfDefined("ruleData", self.ruleData)
        vparams.addStringIfDefined("message", self.message)
        vparams.addArrayIfDefined("actions", self.actions)
        vparams.addArrayIfDefined("conditions", self.conditions)
        vparams.addArrayIfDefined("contexts", self.contexts)
        vparams.addBoolIfDefined("stopProcessing", self.stopProcessing)
        vparams.addIntEnumIfDefined("forceAdminValidation", self.forceAdminValidation)
        return vparams

    def getDescription(self):
        return self.description

    def setDescription(self, newDescription):
        self.description = newDescription

    def getRuleData(self):
        return self.ruleData

    def setRuleData(self, newRuleData):
        self.ruleData = newRuleData

    def getMessage(self):
        return self.message

    def setMessage(self, newMessage):
        self.message = newMessage

    def getActions(self):
        return self.actions

    def setActions(self, newActions):
        self.actions = newActions

    def getConditions(self):
        return self.conditions

    def setConditions(self, newConditions):
        self.conditions = newConditions

    def getContexts(self):
        return self.contexts

    def setContexts(self, newContexts):
        self.contexts = newContexts

    def getStopProcessing(self):
        return self.stopProcessing

    def setStopProcessing(self, newStopProcessing):
        self.stopProcessing = newStopProcessing

    def getForceAdminValidation(self):
        return self.forceAdminValidation

    def setForceAdminValidation(self, newForceAdminValidation):
        self.forceAdminValidation = newForceAdminValidation


# @package Vidiun
# @subpackage Client
class VidiunAccessControlProfile(VidiunObjectBase):
    def __init__(self,
            id=NotImplemented,
            partnerId=NotImplemented,
            name=NotImplemented,
            systemName=NotImplemented,
            description=NotImplemented,
            createdAt=NotImplemented,
            updatedAt=NotImplemented,
            isDefault=NotImplemented,
            rules=NotImplemented):
        VidiunObjectBase.__init__(self)

        # The id of the Access Control Profile
        # @var int
        # @readonly
        self.id = id

        # @var int
        # @readonly
        self.partnerId = partnerId

        # The name of the Access Control Profile
        # @var string
        self.name = name

        # System name of the Access Control Profile
        # @var string
        self.systemName = systemName

        # The description of the Access Control Profile
        # @var string
        self.description = description

        # Creation time as Unix timestamp (In seconds)
        # @var int
        # @readonly
        self.createdAt = createdAt

        # Update time as Unix timestamp (In seconds)
        # @var int
        # @readonly
        self.updatedAt = updatedAt

        # True if this access control profile is the partner default
        # @var VidiunNullableBoolean
        self.isDefault = isDefault

        # Array of access control rules
        # @var array of VidiunRule
        self.rules = rules


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'partnerId': getXmlNodeInt, 
        'name': getXmlNodeText, 
        'systemName': getXmlNodeText, 
        'description': getXmlNodeText, 
        'createdAt': getXmlNodeInt, 
        'updatedAt': getXmlNodeInt, 
        'isDefault': (VidiunEnumsFactory.createInt, "VidiunNullableBoolean"), 
        'rules': (VidiunObjectFactory.createArray, VidiunRule), 
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunAccessControlProfile.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunAccessControlProfile")
        vparams.addStringIfDefined("name", self.name)
        vparams.addStringIfDefined("systemName", self.systemName)
        vparams.addStringIfDefined("description", self.description)
        vparams.addIntEnumIfDefined("isDefault", self.isDefault)
        vparams.addArrayIfDefined("rules", self.rules)
        return vparams

    def getId(self):
        return self.id

    def getPartnerId(self):
        return self.partnerId

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName

    def getSystemName(self):
        return self.systemName

    def setSystemName(self, newSystemName):
        self.systemName = newSystemName

    def getDescription(self):
        return self.description

    def setDescription(self, newDescription):
        self.description = newDescription

    def getCreatedAt(self):
        return self.createdAt

    def getUpdatedAt(self):
        return self.updatedAt

    def getIsDefault(self):
        return self.isDefault

    def setIsDefault(self, newIsDefault):
        self.isDefault = newIsDefault

    def getRules(self):
        return self.rules

    def setRules(self, newRules):
        self.rules = newRules


# @package Vidiun
# @subpackage Client
class VidiunKeyValue(VidiunObjectBase):
    """A key value pair representation to return an array of key-value pairs (associative array)"""

    def __init__(self,
            key=NotImplemented,
            value=NotImplemented):
        VidiunObjectBase.__init__(self)

        # @var string
        self.key = key

        # @var string
        self.value = value


    PROPERTY_LOADERS = {
        'key': getXmlNodeText, 
        'value': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunKeyValue.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunKeyValue")
        vparams.addStringIfDefined("key", self.key)
        vparams.addStringIfDefined("value", self.value)
        return vparams

    def getKey(self):
        return self.key

    def setKey(self, newKey):
        self.key = newKey

    def getValue(self):
        return self.value

    def setValue(self, newValue):
        self.value = newValue


# @package Vidiun
# @subpackage Client
class VidiunAccessControlScope(VidiunObjectBase):
    def __init__(self,
            referrer=NotImplemented,
            ip=NotImplemented,
            ks=NotImplemented,
            userAgent=NotImplemented,
            time=NotImplemented,
            contexts=NotImplemented,
            hashes=NotImplemented):
        VidiunObjectBase.__init__(self)

        # URL to be used to test domain conditions.
        # @var string
        self.referrer = referrer

        # IP to be used to test geographic location conditions.
        # @var string
        self.ip = ip

        # Vidiun session to be used to test session and user conditions.
        # @var string
        self.ks = ks

        # Browser or client application to be used to test agent conditions.
        # @var string
        self.userAgent = userAgent

        # Unix timestamp (In seconds) to be used to test entry scheduling, keep null to use now.
        # @var int
        self.time = time

        # Indicates what contexts should be tested. No contexts means any context.
        # @var array of VidiunAccessControlContextTypeHolder
        self.contexts = contexts

        # Array of hashes to pass to the access control profile scope
        # @var array of VidiunKeyValue
        self.hashes = hashes


    PROPERTY_LOADERS = {
        'referrer': getXmlNodeText, 
        'ip': getXmlNodeText, 
        'ks': getXmlNodeText, 
        'userAgent': getXmlNodeText, 
        'time': getXmlNodeInt, 
        'contexts': (VidiunObjectFactory.createArray, VidiunAccessControlContextTypeHolder), 
        'hashes': (VidiunObjectFactory.createArray, VidiunKeyValue), 
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunAccessControlScope.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunAccessControlScope")
        vparams.addStringIfDefined("referrer", self.referrer)
        vparams.addStringIfDefined("ip", self.ip)
        vparams.addStringIfDefined("ks", self.ks)
        vparams.addStringIfDefined("userAgent", self.userAgent)
        vparams.addIntIfDefined("time", self.time)
        vparams.addArrayIfDefined("contexts", self.contexts)
        vparams.addArrayIfDefined("hashes", self.hashes)
        return vparams

    def getReferrer(self):
        return self.referrer

    def setReferrer(self, newReferrer):
        self.referrer = newReferrer

    def getIp(self):
        return self.ip

    def setIp(self, newIp):
        self.ip = newIp

    def getVs(self):
        return self.ks

    def setVs(self, newVs):
        self.ks = newVs

    def getUserAgent(self):
        return self.userAgent

    def setUserAgent(self, newUserAgent):
        self.userAgent = newUserAgent

    def getTime(self):
        return self.time

    def setTime(self, newTime):
        self.time = newTime

    def getContexts(self):
        return self.contexts

    def setContexts(self, newContexts):
        self.contexts = newContexts

    def getHashes(self):
        return self.hashes

    def setHashes(self, newHashes):
        self.hashes = newHashes


# @package Vidiun
# @subpackage Client
class VidiunReportFilter(VidiunObjectBase):
    def __init__(self,
            dimension=NotImplemented,
            values=NotImplemented):
        VidiunObjectBase.__init__(self)

        # The dimension whose values should be filtered
        # @var string
        self.dimension = dimension

        # The (comma separated) values to include in the filter
        # @var string
        self.values = values


    PROPERTY_LOADERS = {
        'dimension': getXmlNodeText, 
        'values': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunReportFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunReportFilter")
        vparams.addStringIfDefined("dimension", self.dimension)
        vparams.addStringIfDefined("values", self.values)
        return vparams

    def getDimension(self):
        return self.dimension

    def setDimension(self, newDimension):
        self.dimension = newDimension

    def getValues(self):
        return self.values

    def setValues(self, newValues):
        self.values = newValues


# @package Vidiun
# @subpackage Client
class VidiunAnalyticsFilter(VidiunObjectBase):
    def __init__(self,
            from_time=NotImplemented,
            to_time=NotImplemented,
            metrics=NotImplemented,
            utcOffset=NotImplemented,
            dimensions=NotImplemented,
            filters=NotImplemented):
        VidiunObjectBase.__init__(self)

        # Query start time (in local time)
        # @var string
        self.from_time = from_time

        # Query end time (in local time)
        # @var string
        self.to_time = to_time

        # Comma separated metrics list
        # @var string
        self.metrics = metrics

        # Timezone offset from UTC (in minutes)
        # @var float
        self.utcOffset = utcOffset

        # Comma separated dimensions list
        # @var string
        self.dimensions = dimensions

        # Array of filters
        # @var array of VidiunReportFilter
        self.filters = filters


    PROPERTY_LOADERS = {
        'from_time': getXmlNodeText, 
        'to_time': getXmlNodeText, 
        'metrics': getXmlNodeText, 
        'utcOffset': getXmlNodeFloat, 
        'dimensions': getXmlNodeText, 
        'filters': (VidiunObjectFactory.createArray, VidiunReportFilter), 
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunAnalyticsFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunAnalyticsFilter")
        vparams.addStringIfDefined("from_time", self.from_time)
        vparams.addStringIfDefined("to_time", self.to_time)
        vparams.addStringIfDefined("metrics", self.metrics)
        vparams.addFloatIfDefined("utcOffset", self.utcOffset)
        vparams.addStringIfDefined("dimensions", self.dimensions)
        vparams.addArrayIfDefined("filters", self.filters)
        return vparams

    def getFrom_time(self):
        return self.from_time

    def setFrom_time(self, newFrom_time):
        self.from_time = newFrom_time

    def getTo_time(self):
        return self.to_time

    def setTo_time(self, newTo_time):
        self.to_time = newTo_time

    def getMetrics(self):
        return self.metrics

    def setMetrics(self, newMetrics):
        self.metrics = newMetrics

    def getUtcOffset(self):
        return self.utcOffset

    def setUtcOffset(self, newUtcOffset):
        self.utcOffset = newUtcOffset

    def getDimensions(self):
        return self.dimensions

    def setDimensions(self, newDimensions):
        self.dimensions = newDimensions

    def getFilters(self):
        return self.filters

    def setFilters(self, newFilters):
        self.filters = newFilters


# @package Vidiun
# @subpackage Client
class VidiunApiExceptionArg(VidiunObjectBase):
    def __init__(self,
            name=NotImplemented,
            value=NotImplemented):
        VidiunObjectBase.__init__(self)

        # @var string
        self.name = name

        # @var string
        self.value = value


    PROPERTY_LOADERS = {
        'name': getXmlNodeText, 
        'value': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunApiExceptionArg.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunApiExceptionArg")
        vparams.addStringIfDefined("name", self.name)
        vparams.addStringIfDefined("value", self.value)
        return vparams

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName

    def getValue(self):
        return self.value

    def setValue(self, newValue):
        self.value = newValue


# @package Vidiun
# @subpackage Client
class VidiunAppToken(VidiunObjectBase):
    def __init__(self,
            id=NotImplemented,
            token=NotImplemented,
            partnerId=NotImplemented,
            createdAt=NotImplemented,
            updatedAt=NotImplemented,
            status=NotImplemented,
            expiry=NotImplemented,
            sessionType=NotImplemented,
            sessionUserId=NotImplemented,
            sessionDuration=NotImplemented,
            sessionPrivileges=NotImplemented,
            hashType=NotImplemented):
        VidiunObjectBase.__init__(self)

        # The id of the application token
        # @var string
        # @readonly
        self.id = id

        # The application token
        # @var string
        # @readonly
        self.token = token

        # @var int
        # @readonly
        self.partnerId = partnerId

        # Creation time as Unix timestamp (In seconds)
        # @var int
        # @readonly
        self.createdAt = createdAt

        # Update time as Unix timestamp (In seconds)
        # @var int
        # @readonly
        self.updatedAt = updatedAt

        # Application token status
        # @var VidiunAppTokenStatus
        # @readonly
        self.status = status

        # Expiry time of current token (unix timestamp in seconds)
        # @var int
        self.expiry = expiry

        # Type of VS (Vidiun Session) that created using the current token
        # @var VidiunSessionType
        self.sessionType = sessionType

        # User id of VS (Vidiun Session) that created using the current token
        # @var string
        self.sessionUserId = sessionUserId

        # Expiry duration of VS (Vidiun Session) that created using the current token (in seconds)
        # @var int
        self.sessionDuration = sessionDuration

        # Comma separated privileges to be applied on VS (Vidiun Session) that created using the current token
        # @var string
        self.sessionPrivileges = sessionPrivileges

        # @var VidiunAppTokenHashType
        self.hashType = hashType


    PROPERTY_LOADERS = {
        'id': getXmlNodeText, 
        'token': getXmlNodeText, 
        'partnerId': getXmlNodeInt, 
        'createdAt': getXmlNodeInt, 
        'updatedAt': getXmlNodeInt, 
        'status': (VidiunEnumsFactory.createInt, "VidiunAppTokenStatus"), 
        'expiry': getXmlNodeInt, 
        'sessionType': (VidiunEnumsFactory.createInt, "VidiunSessionType"), 
        'sessionUserId': getXmlNodeText, 
        'sessionDuration': getXmlNodeInt, 
        'sessionPrivileges': getXmlNodeText, 
        'hashType': (VidiunEnumsFactory.createString, "VidiunAppTokenHashType"), 
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunAppToken.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunAppToken")
        vparams.addIntIfDefined("expiry", self.expiry)
        vparams.addIntEnumIfDefined("sessionType", self.sessionType)
        vparams.addStringIfDefined("sessionUserId", self.sessionUserId)
        vparams.addIntIfDefined("sessionDuration", self.sessionDuration)
        vparams.addStringIfDefined("sessionPrivileges", self.sessionPrivileges)
        vparams.addStringEnumIfDefined("hashType", self.hashType)
        return vparams

    def getId(self):
        return self.id

    def getToken(self):
        return self.token

    def getPartnerId(self):
        return self.partnerId

    def getCreatedAt(self):
        return self.createdAt

    def getUpdatedAt(self):
        return self.updatedAt

    def getStatus(self):
        return self.status

    def getExpiry(self):
        return self.expiry

    def setExpiry(self, newExpiry):
        self.expiry = newExpiry

    def getSessionType(self):
        return self.sessionType

    def setSessionType(self, newSessionType):
        self.sessionType = newSessionType

    def getSessionUserId(self):
        return self.sessionUserId

    def setSessionUserId(self, newSessionUserId):
        self.sessionUserId = newSessionUserId

    def getSessionDuration(self):
        return self.sessionDuration

    def setSessionDuration(self, newSessionDuration):
        self.sessionDuration = newSessionDuration

    def getSessionPrivileges(self):
        return self.sessionPrivileges

    def setSessionPrivileges(self, newSessionPrivileges):
        self.sessionPrivileges = newSessionPrivileges

    def getHashType(self):
        return self.hashType

    def setHashType(self, newHashType):
        self.hashType = newHashType


# @package Vidiun
# @subpackage Client
class VidiunAsset(VidiunObjectBase):
    def __init__(self,
            id=NotImplemented,
            entryId=NotImplemented,
            partnerId=NotImplemented,
            version=NotImplemented,
            size=NotImplemented,
            tags=NotImplemented,
            fileExt=NotImplemented,
            createdAt=NotImplemented,
            updatedAt=NotImplemented,
            deletedAt=NotImplemented,
            description=NotImplemented,
            partnerData=NotImplemented,
            partnerDescription=NotImplemented,
            actualSourceAssetParamsIds=NotImplemented):
        VidiunObjectBase.__init__(self)

        # The ID of the Flavor Asset
        # @var string
        # @readonly
        self.id = id

        # The entry ID of the Flavor Asset
        # @var string
        # @readonly
        self.entryId = entryId

        # @var int
        # @readonly
        self.partnerId = partnerId

        # The version of the Flavor Asset
        # @var int
        # @readonly
        self.version = version

        # The size (in KBytes) of the Flavor Asset
        # @var int
        # @readonly
        self.size = size

        # Tags used to identify the Flavor Asset in various scenarios
        # @var string
        self.tags = tags

        # The file extension
        # @var string
        # @insertonly
        self.fileExt = fileExt

        # @var int
        # @readonly
        self.createdAt = createdAt

        # @var int
        # @readonly
        self.updatedAt = updatedAt

        # @var int
        # @readonly
        self.deletedAt = deletedAt

        # System description, error message, warnings and failure cause.
        # @var string
        # @readonly
        self.description = description

        # Partner private data
        # @var string
        self.partnerData = partnerData

        # Partner friendly description
        # @var string
        self.partnerDescription = partnerDescription

        # Comma separated list of source flavor params ids
        # @var string
        self.actualSourceAssetParamsIds = actualSourceAssetParamsIds


    PROPERTY_LOADERS = {
        'id': getXmlNodeText, 
        'entryId': getXmlNodeText, 
        'partnerId': getXmlNodeInt, 
        'version': getXmlNodeInt, 
        'size': getXmlNodeInt, 
        'tags': getXmlNodeText, 
        'fileExt': getXmlNodeText, 
        'createdAt': getXmlNodeInt, 
        'updatedAt': getXmlNodeInt, 
        'deletedAt': getXmlNodeInt, 
        'description': getXmlNodeText, 
        'partnerData': getXmlNodeText, 
        'partnerDescription': getXmlNodeText, 
        'actualSourceAssetParamsIds': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunAsset.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunAsset")
        vparams.addStringIfDefined("tags", self.tags)
        vparams.addStringIfDefined("fileExt", self.fileExt)
        vparams.addStringIfDefined("partnerData", self.partnerData)
        vparams.addStringIfDefined("partnerDescription", self.partnerDescription)
        vparams.addStringIfDefined("actualSourceAssetParamsIds", self.actualSourceAssetParamsIds)
        return vparams

    def getId(self):
        return self.id

    def getEntryId(self):
        return self.entryId

    def getPartnerId(self):
        return self.partnerId

    def getVersion(self):
        return self.version

    def getSize(self):
        return self.size

    def getTags(self):
        return self.tags

    def setTags(self, newTags):
        self.tags = newTags

    def getFileExt(self):
        return self.fileExt

    def setFileExt(self, newFileExt):
        self.fileExt = newFileExt

    def getCreatedAt(self):
        return self.createdAt

    def getUpdatedAt(self):
        return self.updatedAt

    def getDeletedAt(self):
        return self.deletedAt

    def getDescription(self):
        return self.description

    def getPartnerData(self):
        return self.partnerData

    def setPartnerData(self, newPartnerData):
        self.partnerData = newPartnerData

    def getPartnerDescription(self):
        return self.partnerDescription

    def setPartnerDescription(self, newPartnerDescription):
        self.partnerDescription = newPartnerDescription

    def getActualSourceAssetParamsIds(self):
        return self.actualSourceAssetParamsIds

    def setActualSourceAssetParamsIds(self, newActualSourceAssetParamsIds):
        self.actualSourceAssetParamsIds = newActualSourceAssetParamsIds


# @package Vidiun
# @subpackage Client
class VidiunString(VidiunObjectBase):
    """A string representation to return an array of strings"""

    def __init__(self,
            value=NotImplemented):
        VidiunObjectBase.__init__(self)

        # @var string
        self.value = value


    PROPERTY_LOADERS = {
        'value': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunString.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunString")
        vparams.addStringIfDefined("value", self.value)
        return vparams

    def getValue(self):
        return self.value

    def setValue(self, newValue):
        self.value = newValue


# @package Vidiun
# @subpackage Client
class VidiunAssetParams(VidiunObjectBase):
    def __init__(self,
            id=NotImplemented,
            partnerId=NotImplemented,
            name=NotImplemented,
            systemName=NotImplemented,
            description=NotImplemented,
            createdAt=NotImplemented,
            isSystemDefault=NotImplemented,
            tags=NotImplemented,
            requiredPermissions=NotImplemented,
            sourceRemoteStorageProfileId=NotImplemented,
            remoteStorageProfileIds=NotImplemented,
            mediaParserType=NotImplemented,
            sourceAssetParamsIds=NotImplemented):
        VidiunObjectBase.__init__(self)

        # The id of the Flavor Params
        # @var int
        # @readonly
        self.id = id

        # @var int
        self.partnerId = partnerId

        # The name of the Flavor Params
        # @var string
        self.name = name

        # System name of the Flavor Params
        # @var string
        self.systemName = systemName

        # The description of the Flavor Params
        # @var string
        self.description = description

        # Creation date as Unix timestamp (In seconds)
        # @var int
        # @readonly
        self.createdAt = createdAt

        # True if those Flavor Params are part of system defaults
        # @var VidiunNullableBoolean
        # @readonly
        self.isSystemDefault = isSystemDefault

        # The Flavor Params tags are used to identify the flavor for different usage (e.g. web, hd, mobile)
        # @var string
        self.tags = tags

        # Array of partner permisison names that required for using this asset params
        # @var array of VidiunString
        self.requiredPermissions = requiredPermissions

        # Id of remote storage profile that used to get the source, zero indicates Vidiun data center
        # @var int
        self.sourceRemoteStorageProfileId = sourceRemoteStorageProfileId

        # Comma seperated ids of remote storage profiles that the flavor distributed to, the distribution done by the conversion engine
        # @var int
        self.remoteStorageProfileIds = remoteStorageProfileIds

        # Media parser type to be used for post-conversion validation
        # @var VidiunMediaParserType
        self.mediaParserType = mediaParserType

        # Comma seperated ids of source flavor params this flavor is created from
        # @var string
        self.sourceAssetParamsIds = sourceAssetParamsIds


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'partnerId': getXmlNodeInt, 
        'name': getXmlNodeText, 
        'systemName': getXmlNodeText, 
        'description': getXmlNodeText, 
        'createdAt': getXmlNodeInt, 
        'isSystemDefault': (VidiunEnumsFactory.createInt, "VidiunNullableBoolean"), 
        'tags': getXmlNodeText, 
        'requiredPermissions': (VidiunObjectFactory.createArray, VidiunString), 
        'sourceRemoteStorageProfileId': getXmlNodeInt, 
        'remoteStorageProfileIds': getXmlNodeInt, 
        'mediaParserType': (VidiunEnumsFactory.createString, "VidiunMediaParserType"), 
        'sourceAssetParamsIds': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunAssetParams.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunAssetParams")
        vparams.addIntIfDefined("partnerId", self.partnerId)
        vparams.addStringIfDefined("name", self.name)
        vparams.addStringIfDefined("systemName", self.systemName)
        vparams.addStringIfDefined("description", self.description)
        vparams.addStringIfDefined("tags", self.tags)
        vparams.addArrayIfDefined("requiredPermissions", self.requiredPermissions)
        vparams.addIntIfDefined("sourceRemoteStorageProfileId", self.sourceRemoteStorageProfileId)
        vparams.addIntIfDefined("remoteStorageProfileIds", self.remoteStorageProfileIds)
        vparams.addStringEnumIfDefined("mediaParserType", self.mediaParserType)
        vparams.addStringIfDefined("sourceAssetParamsIds", self.sourceAssetParamsIds)
        return vparams

    def getId(self):
        return self.id

    def getPartnerId(self):
        return self.partnerId

    def setPartnerId(self, newPartnerId):
        self.partnerId = newPartnerId

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName

    def getSystemName(self):
        return self.systemName

    def setSystemName(self, newSystemName):
        self.systemName = newSystemName

    def getDescription(self):
        return self.description

    def setDescription(self, newDescription):
        self.description = newDescription

    def getCreatedAt(self):
        return self.createdAt

    def getIsSystemDefault(self):
        return self.isSystemDefault

    def getTags(self):
        return self.tags

    def setTags(self, newTags):
        self.tags = newTags

    def getRequiredPermissions(self):
        return self.requiredPermissions

    def setRequiredPermissions(self, newRequiredPermissions):
        self.requiredPermissions = newRequiredPermissions

    def getSourceRemoteStorageProfileId(self):
        return self.sourceRemoteStorageProfileId

    def setSourceRemoteStorageProfileId(self, newSourceRemoteStorageProfileId):
        self.sourceRemoteStorageProfileId = newSourceRemoteStorageProfileId

    def getRemoteStorageProfileIds(self):
        return self.remoteStorageProfileIds

    def setRemoteStorageProfileIds(self, newRemoteStorageProfileIds):
        self.remoteStorageProfileIds = newRemoteStorageProfileIds

    def getMediaParserType(self):
        return self.mediaParserType

    def setMediaParserType(self, newMediaParserType):
        self.mediaParserType = newMediaParserType

    def getSourceAssetParamsIds(self):
        return self.sourceAssetParamsIds

    def setSourceAssetParamsIds(self, newSourceAssetParamsIds):
        self.sourceAssetParamsIds = newSourceAssetParamsIds


# @package Vidiun
# @subpackage Client
class VidiunResource(VidiunObjectBase):
    """Used to ingest entry object, as single resource or list of resources accompanied by asset params ids."""

    def __init__(self):
        VidiunObjectBase.__init__(self)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunResource.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunResource")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunContentResource(VidiunResource):
    """Is a unified way to add content to Vidiun whether it's an uploaded file, webcam recording, imported URL or existing file sync."""

    def __init__(self):
        VidiunResource.__init__(self)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunResource.fromXml(self, node)
        self.fromXmlImpl(node, VidiunContentResource.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunResource.toParams(self)
        vparams.put("objectType", "VidiunContentResource")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunAssetParamsResourceContainer(VidiunResource):
    def __init__(self,
            resource=NotImplemented,
            assetParamsId=NotImplemented):
        VidiunResource.__init__(self)

        # The content resource to associate with asset params
        # @var VidiunContentResource
        self.resource = resource

        # The asset params to associate with the reaource
        # @var int
        self.assetParamsId = assetParamsId


    PROPERTY_LOADERS = {
        'resource': (VidiunObjectFactory.create, VidiunContentResource), 
        'assetParamsId': getXmlNodeInt, 
    }

    def fromXml(self, node):
        VidiunResource.fromXml(self, node)
        self.fromXmlImpl(node, VidiunAssetParamsResourceContainer.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunResource.toParams(self)
        vparams.put("objectType", "VidiunAssetParamsResourceContainer")
        vparams.addObjectIfDefined("resource", self.resource)
        vparams.addIntIfDefined("assetParamsId", self.assetParamsId)
        return vparams

    def getResource(self):
        return self.resource

    def setResource(self, newResource):
        self.resource = newResource

    def getAssetParamsId(self):
        return self.assetParamsId

    def setAssetParamsId(self, newAssetParamsId):
        self.assetParamsId = newAssetParamsId


# @package Vidiun
# @subpackage Client
class VidiunOperationAttributes(VidiunObjectBase):
    """Base class to all operation attributes types"""

    def __init__(self):
        VidiunObjectBase.__init__(self)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunOperationAttributes.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunOperationAttributes")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunBaseEntry(VidiunObjectBase):
    def __init__(self,
            id=NotImplemented,
            name=NotImplemented,
            description=NotImplemented,
            partnerId=NotImplemented,
            userId=NotImplemented,
            creatorId=NotImplemented,
            tags=NotImplemented,
            adminTags=NotImplemented,
            categories=NotImplemented,
            categoriesIds=NotImplemented,
            status=NotImplemented,
            moderationStatus=NotImplemented,
            moderationCount=NotImplemented,
            type=NotImplemented,
            createdAt=NotImplemented,
            updatedAt=NotImplemented,
            rank=NotImplemented,
            totalRank=NotImplemented,
            votes=NotImplemented,
            groupId=NotImplemented,
            partnerData=NotImplemented,
            downloadUrl=NotImplemented,
            searchText=NotImplemented,
            licenseType=NotImplemented,
            version=NotImplemented,
            thumbnailUrl=NotImplemented,
            accessControlId=NotImplemented,
            startDate=NotImplemented,
            endDate=NotImplemented,
            referenceId=NotImplemented,
            replacingEntryId=NotImplemented,
            replacedEntryId=NotImplemented,
            replacementStatus=NotImplemented,
            partnerSortValue=NotImplemented,
            conversionProfileId=NotImplemented,
            redirectEntryId=NotImplemented,
            rootEntryId=NotImplemented,
            parentEntryId=NotImplemented,
            operationAttributes=NotImplemented,
            entitledUsersEdit=NotImplemented,
            entitledUsersPublish=NotImplemented,
            capabilities=NotImplemented,
            templateEntryId=NotImplemented):
        VidiunObjectBase.__init__(self)

        # Auto generated 10 characters alphanumeric string
        # @var string
        # @readonly
        self.id = id

        # Entry name (Min 1 chars)
        # @var string
        self.name = name

        # Entry description
        # @var string
        self.description = description

        # @var int
        # @readonly
        self.partnerId = partnerId

        # The ID of the user who is the owner of this entry
        # @var string
        self.userId = userId

        # The ID of the user who created this entry
        # @var string
        # @insertonly
        self.creatorId = creatorId

        # Entry tags
        # @var string
        self.tags = tags

        # Entry admin tags can be updated only by administrators
        # @var string
        self.adminTags = adminTags

        # Comma separated list of full names of categories to which this entry belongs. Only categories that don't have entitlement (privacy context) are listed, to retrieve the full list of categories, use the categoryEntry.list action.
        # @var string
        self.categories = categories

        # Comma separated list of ids of categories to which this entry belongs. Only categories that don't have entitlement (privacy context) are listed, to retrieve the full list of categories, use the categoryEntry.list action.
        # @var string
        self.categoriesIds = categoriesIds

        # @var VidiunEntryStatus
        # @readonly
        self.status = status

        # Entry moderation status
        # @var VidiunEntryModerationStatus
        # @readonly
        self.moderationStatus = moderationStatus

        # Number of moderation requests waiting for this entry
        # @var int
        # @readonly
        self.moderationCount = moderationCount

        # The type of the entry, this is auto filled by the derived entry object
        # @var VidiunEntryType
        self.type = type

        # Entry creation date as Unix timestamp (In seconds)
        # @var int
        # @readonly
        self.createdAt = createdAt

        # Entry update date as Unix timestamp (In seconds)
        # @var int
        # @readonly
        self.updatedAt = updatedAt

        # The calculated average rank. rank = totalRank / votes
        # @var float
        # @readonly
        self.rank = rank

        # The sum of all rank values submitted to the baseEntry.anonymousRank action
        # @var int
        # @readonly
        self.totalRank = totalRank

        # A count of all requests made to the baseEntry.anonymousRank action
        # @var int
        # @readonly
        self.votes = votes

        # @var int
        self.groupId = groupId

        # Can be used to store various partner related data as a string
        # @var string
        self.partnerData = partnerData

        # Download URL for the entry
        # @var string
        # @readonly
        self.downloadUrl = downloadUrl

        # Indexed search text for full text search
        # @var string
        # @readonly
        self.searchText = searchText

        # License type used for this entry
        # @var VidiunLicenseType
        self.licenseType = licenseType

        # Version of the entry data
        # @var int
        # @readonly
        self.version = version

        # Thumbnail URL
        # @var string
        # @readonly
        self.thumbnailUrl = thumbnailUrl

        # The Access Control ID assigned to this entry (null when not set, send -1 to remove)
        # @var int
        self.accessControlId = accessControlId

        # Entry scheduling start date (null when not set, send -1 to remove)
        # @var int
        self.startDate = startDate

        # Entry scheduling end date (null when not set, send -1 to remove)
        # @var int
        self.endDate = endDate

        # Entry external reference id
        # @var string
        self.referenceId = referenceId

        # ID of temporary entry that will replace this entry when it's approved and ready for replacement
        # @var string
        # @readonly
        self.replacingEntryId = replacingEntryId

        # ID of the entry that will be replaced when the replacement approved and this entry is ready
        # @var string
        # @readonly
        self.replacedEntryId = replacedEntryId

        # Status of the replacement readiness and approval
        # @var VidiunEntryReplacementStatus
        # @readonly
        self.replacementStatus = replacementStatus

        # Can be used to store various partner related data as a numeric value
        # @var int
        self.partnerSortValue = partnerSortValue

        # Override the default ingestion profile
        # @var int
        self.conversionProfileId = conversionProfileId

        # IF not empty, points to an entry ID the should replace this current entry's id.
        # @var string
        self.redirectEntryId = redirectEntryId

        # ID of source root entry, used for clipped, skipped and cropped entries that created from another entry
        # @var string
        # @readonly
        self.rootEntryId = rootEntryId

        # ID of source root entry, used for defining entires association
        # @var string
        self.parentEntryId = parentEntryId

        # clipping, skipping and cropping attributes that used to create this entry
        # @var array of VidiunOperationAttributes
        self.operationAttributes = operationAttributes

        # list of user ids that are entitled to edit the entry (no server enforcement) The difference between entitledUsersEdit and entitledUsersPublish is applicative only
        # @var string
        self.entitledUsersEdit = entitledUsersEdit

        # list of user ids that are entitled to publish the entry (no server enforcement) The difference between entitledUsersEdit and entitledUsersPublish is applicative only
        # @var string
        self.entitledUsersPublish = entitledUsersPublish

        # Comma seperated string of the capabilities of the entry. Any capability needed can be added to this list.
        # @var string
        # @readonly
        self.capabilities = capabilities

        # Template entry id
        # @var string
        # @insertonly
        self.templateEntryId = templateEntryId


    PROPERTY_LOADERS = {
        'id': getXmlNodeText, 
        'name': getXmlNodeText, 
        'description': getXmlNodeText, 
        'partnerId': getXmlNodeInt, 
        'userId': getXmlNodeText, 
        'creatorId': getXmlNodeText, 
        'tags': getXmlNodeText, 
        'adminTags': getXmlNodeText, 
        'categories': getXmlNodeText, 
        'categoriesIds': getXmlNodeText, 
        'status': (VidiunEnumsFactory.createString, "VidiunEntryStatus"), 
        'moderationStatus': (VidiunEnumsFactory.createInt, "VidiunEntryModerationStatus"), 
        'moderationCount': getXmlNodeInt, 
        'type': (VidiunEnumsFactory.createString, "VidiunEntryType"), 
        'createdAt': getXmlNodeInt, 
        'updatedAt': getXmlNodeInt, 
        'rank': getXmlNodeFloat, 
        'totalRank': getXmlNodeInt, 
        'votes': getXmlNodeInt, 
        'groupId': getXmlNodeInt, 
        'partnerData': getXmlNodeText, 
        'downloadUrl': getXmlNodeText, 
        'searchText': getXmlNodeText, 
        'licenseType': (VidiunEnumsFactory.createInt, "VidiunLicenseType"), 
        'version': getXmlNodeInt, 
        'thumbnailUrl': getXmlNodeText, 
        'accessControlId': getXmlNodeInt, 
        'startDate': getXmlNodeInt, 
        'endDate': getXmlNodeInt, 
        'referenceId': getXmlNodeText, 
        'replacingEntryId': getXmlNodeText, 
        'replacedEntryId': getXmlNodeText, 
        'replacementStatus': (VidiunEnumsFactory.createString, "VidiunEntryReplacementStatus"), 
        'partnerSortValue': getXmlNodeInt, 
        'conversionProfileId': getXmlNodeInt, 
        'redirectEntryId': getXmlNodeText, 
        'rootEntryId': getXmlNodeText, 
        'parentEntryId': getXmlNodeText, 
        'operationAttributes': (VidiunObjectFactory.createArray, VidiunOperationAttributes), 
        'entitledUsersEdit': getXmlNodeText, 
        'entitledUsersPublish': getXmlNodeText, 
        'capabilities': getXmlNodeText, 
        'templateEntryId': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunBaseEntry.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunBaseEntry")
        vparams.addStringIfDefined("name", self.name)
        vparams.addStringIfDefined("description", self.description)
        vparams.addStringIfDefined("userId", self.userId)
        vparams.addStringIfDefined("creatorId", self.creatorId)
        vparams.addStringIfDefined("tags", self.tags)
        vparams.addStringIfDefined("adminTags", self.adminTags)
        vparams.addStringIfDefined("categories", self.categories)
        vparams.addStringIfDefined("categoriesIds", self.categoriesIds)
        vparams.addStringEnumIfDefined("type", self.type)
        vparams.addIntIfDefined("groupId", self.groupId)
        vparams.addStringIfDefined("partnerData", self.partnerData)
        vparams.addIntEnumIfDefined("licenseType", self.licenseType)
        vparams.addIntIfDefined("accessControlId", self.accessControlId)
        vparams.addIntIfDefined("startDate", self.startDate)
        vparams.addIntIfDefined("endDate", self.endDate)
        vparams.addStringIfDefined("referenceId", self.referenceId)
        vparams.addIntIfDefined("partnerSortValue", self.partnerSortValue)
        vparams.addIntIfDefined("conversionProfileId", self.conversionProfileId)
        vparams.addStringIfDefined("redirectEntryId", self.redirectEntryId)
        vparams.addStringIfDefined("parentEntryId", self.parentEntryId)
        vparams.addArrayIfDefined("operationAttributes", self.operationAttributes)
        vparams.addStringIfDefined("entitledUsersEdit", self.entitledUsersEdit)
        vparams.addStringIfDefined("entitledUsersPublish", self.entitledUsersPublish)
        vparams.addStringIfDefined("templateEntryId", self.templateEntryId)
        return vparams

    def getId(self):
        return self.id

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName

    def getDescription(self):
        return self.description

    def setDescription(self, newDescription):
        self.description = newDescription

    def getPartnerId(self):
        return self.partnerId

    def getUserId(self):
        return self.userId

    def setUserId(self, newUserId):
        self.userId = newUserId

    def getCreatorId(self):
        return self.creatorId

    def setCreatorId(self, newCreatorId):
        self.creatorId = newCreatorId

    def getTags(self):
        return self.tags

    def setTags(self, newTags):
        self.tags = newTags

    def getAdminTags(self):
        return self.adminTags

    def setAdminTags(self, newAdminTags):
        self.adminTags = newAdminTags

    def getCategories(self):
        return self.categories

    def setCategories(self, newCategories):
        self.categories = newCategories

    def getCategoriesIds(self):
        return self.categoriesIds

    def setCategoriesIds(self, newCategoriesIds):
        self.categoriesIds = newCategoriesIds

    def getStatus(self):
        return self.status

    def getModerationStatus(self):
        return self.moderationStatus

    def getModerationCount(self):
        return self.moderationCount

    def getType(self):
        return self.type

    def setType(self, newType):
        self.type = newType

    def getCreatedAt(self):
        return self.createdAt

    def getUpdatedAt(self):
        return self.updatedAt

    def getRank(self):
        return self.rank

    def getTotalRank(self):
        return self.totalRank

    def getVotes(self):
        return self.votes

    def getGroupId(self):
        return self.groupId

    def setGroupId(self, newGroupId):
        self.groupId = newGroupId

    def getPartnerData(self):
        return self.partnerData

    def setPartnerData(self, newPartnerData):
        self.partnerData = newPartnerData

    def getDownloadUrl(self):
        return self.downloadUrl

    def getSearchText(self):
        return self.searchText

    def getLicenseType(self):
        return self.licenseType

    def setLicenseType(self, newLicenseType):
        self.licenseType = newLicenseType

    def getVersion(self):
        return self.version

    def getThumbnailUrl(self):
        return self.thumbnailUrl

    def getAccessControlId(self):
        return self.accessControlId

    def setAccessControlId(self, newAccessControlId):
        self.accessControlId = newAccessControlId

    def getStartDate(self):
        return self.startDate

    def setStartDate(self, newStartDate):
        self.startDate = newStartDate

    def getEndDate(self):
        return self.endDate

    def setEndDate(self, newEndDate):
        self.endDate = newEndDate

    def getReferenceId(self):
        return self.referenceId

    def setReferenceId(self, newReferenceId):
        self.referenceId = newReferenceId

    def getReplacingEntryId(self):
        return self.replacingEntryId

    def getReplacedEntryId(self):
        return self.replacedEntryId

    def getReplacementStatus(self):
        return self.replacementStatus

    def getPartnerSortValue(self):
        return self.partnerSortValue

    def setPartnerSortValue(self, newPartnerSortValue):
        self.partnerSortValue = newPartnerSortValue

    def getConversionProfileId(self):
        return self.conversionProfileId

    def setConversionProfileId(self, newConversionProfileId):
        self.conversionProfileId = newConversionProfileId

    def getRedirectEntryId(self):
        return self.redirectEntryId

    def setRedirectEntryId(self, newRedirectEntryId):
        self.redirectEntryId = newRedirectEntryId

    def getRootEntryId(self):
        return self.rootEntryId

    def getParentEntryId(self):
        return self.parentEntryId

    def setParentEntryId(self, newParentEntryId):
        self.parentEntryId = newParentEntryId

    def getOperationAttributes(self):
        return self.operationAttributes

    def setOperationAttributes(self, newOperationAttributes):
        self.operationAttributes = newOperationAttributes

    def getEntitledUsersEdit(self):
        return self.entitledUsersEdit

    def setEntitledUsersEdit(self, newEntitledUsersEdit):
        self.entitledUsersEdit = newEntitledUsersEdit

    def getEntitledUsersPublish(self):
        return self.entitledUsersPublish

    def setEntitledUsersPublish(self, newEntitledUsersPublish):
        self.entitledUsersPublish = newEntitledUsersPublish

    def getCapabilities(self):
        return self.capabilities

    def getTemplateEntryId(self):
        return self.templateEntryId

    def setTemplateEntryId(self, newTemplateEntryId):
        self.templateEntryId = newTemplateEntryId


# @package Vidiun
# @subpackage Client
class VidiunBaseEntryCloneOptionItem(VidiunObjectBase):
    def __init__(self):
        VidiunObjectBase.__init__(self)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunBaseEntryCloneOptionItem.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunBaseEntryCloneOptionItem")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunBaseResponseProfile(VidiunObjectBase):
    def __init__(self):
        VidiunObjectBase.__init__(self)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunBaseResponseProfile.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunBaseResponseProfile")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunBaseSyndicationFeed(VidiunObjectBase):
    def __init__(self,
            id=NotImplemented,
            feedUrl=NotImplemented,
            partnerId=NotImplemented,
            playlistId=NotImplemented,
            name=NotImplemented,
            status=NotImplemented,
            type=NotImplemented,
            landingPage=NotImplemented,
            createdAt=NotImplemented,
            allowEmbed=NotImplemented,
            playerUiconfId=NotImplemented,
            flavorParamId=NotImplemented,
            transcodeExistingContent=NotImplemented,
            addToDefaultConversionProfile=NotImplemented,
            categories=NotImplemented,
            storageId=NotImplemented,
            entriesOrderBy=NotImplemented,
            enforceEntitlement=NotImplemented,
            privacyContext=NotImplemented,
            updatedAt=NotImplemented,
            useCategoryEntries=NotImplemented):
        VidiunObjectBase.__init__(self)

        # @var string
        # @readonly
        self.id = id

        # @var string
        # @readonly
        self.feedUrl = feedUrl

        # @var int
        # @readonly
        self.partnerId = partnerId

        # link a playlist that will set what content the feed will include
        # 	 if empty, all content will be included in feed
        # @var string
        self.playlistId = playlistId

        # feed name
        # @var string
        self.name = name

        # feed status
        # @var VidiunSyndicationFeedStatus
        # @readonly
        self.status = status

        # feed type
        # @var VidiunSyndicationFeedType
        # @insertonly
        self.type = type

        # Base URL for each video, on the partners site
        # 	 This is required by all syndication types.
        # @var string
        self.landingPage = landingPage

        # Creation date as Unix timestamp (In seconds)
        # @var int
        # @readonly
        self.createdAt = createdAt

        # allow_embed tells google OR yahoo weather to allow embedding the video on google OR yahoo video results
        # 	 or just to provide a link to the landing page.
        # 	 it is applied on the video-player_loc property in the XML (google)
        # 	 and addes media-player tag (yahoo)
        # @var bool
        self.allowEmbed = allowEmbed

        # Select a uiconf ID as player skin to include in the vwidget url
        # @var int
        self.playerUiconfId = playerUiconfId

        # @var int
        self.flavorParamId = flavorParamId

        # @var bool
        self.transcodeExistingContent = transcodeExistingContent

        # @var bool
        self.addToDefaultConversionProfile = addToDefaultConversionProfile

        # @var string
        self.categories = categories

        # @var int
        self.storageId = storageId

        # @var VidiunSyndicationFeedEntriesOrderBy
        self.entriesOrderBy = entriesOrderBy

        # Should enforce entitlement on feed entries
        # @var bool
        self.enforceEntitlement = enforceEntitlement

        # Set privacy context for search entries that assiged to private and public categories within a category privacy context.
        # @var string
        self.privacyContext = privacyContext

        # Update date as Unix timestamp (In seconds)
        # @var int
        # @readonly
        self.updatedAt = updatedAt

        # @var bool
        self.useCategoryEntries = useCategoryEntries


    PROPERTY_LOADERS = {
        'id': getXmlNodeText, 
        'feedUrl': getXmlNodeText, 
        'partnerId': getXmlNodeInt, 
        'playlistId': getXmlNodeText, 
        'name': getXmlNodeText, 
        'status': (VidiunEnumsFactory.createInt, "VidiunSyndicationFeedStatus"), 
        'type': (VidiunEnumsFactory.createInt, "VidiunSyndicationFeedType"), 
        'landingPage': getXmlNodeText, 
        'createdAt': getXmlNodeInt, 
        'allowEmbed': getXmlNodeBool, 
        'playerUiconfId': getXmlNodeInt, 
        'flavorParamId': getXmlNodeInt, 
        'transcodeExistingContent': getXmlNodeBool, 
        'addToDefaultConversionProfile': getXmlNodeBool, 
        'categories': getXmlNodeText, 
        'storageId': getXmlNodeInt, 
        'entriesOrderBy': (VidiunEnumsFactory.createString, "VidiunSyndicationFeedEntriesOrderBy"), 
        'enforceEntitlement': getXmlNodeBool, 
        'privacyContext': getXmlNodeText, 
        'updatedAt': getXmlNodeInt, 
        'useCategoryEntries': getXmlNodeBool, 
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunBaseSyndicationFeed.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunBaseSyndicationFeed")
        vparams.addStringIfDefined("playlistId", self.playlistId)
        vparams.addStringIfDefined("name", self.name)
        vparams.addIntEnumIfDefined("type", self.type)
        vparams.addStringIfDefined("landingPage", self.landingPage)
        vparams.addBoolIfDefined("allowEmbed", self.allowEmbed)
        vparams.addIntIfDefined("playerUiconfId", self.playerUiconfId)
        vparams.addIntIfDefined("flavorParamId", self.flavorParamId)
        vparams.addBoolIfDefined("transcodeExistingContent", self.transcodeExistingContent)
        vparams.addBoolIfDefined("addToDefaultConversionProfile", self.addToDefaultConversionProfile)
        vparams.addStringIfDefined("categories", self.categories)
        vparams.addIntIfDefined("storageId", self.storageId)
        vparams.addStringEnumIfDefined("entriesOrderBy", self.entriesOrderBy)
        vparams.addBoolIfDefined("enforceEntitlement", self.enforceEntitlement)
        vparams.addStringIfDefined("privacyContext", self.privacyContext)
        vparams.addBoolIfDefined("useCategoryEntries", self.useCategoryEntries)
        return vparams

    def getId(self):
        return self.id

    def getFeedUrl(self):
        return self.feedUrl

    def getPartnerId(self):
        return self.partnerId

    def getPlaylistId(self):
        return self.playlistId

    def setPlaylistId(self, newPlaylistId):
        self.playlistId = newPlaylistId

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName

    def getStatus(self):
        return self.status

    def getType(self):
        return self.type

    def setType(self, newType):
        self.type = newType

    def getLandingPage(self):
        return self.landingPage

    def setLandingPage(self, newLandingPage):
        self.landingPage = newLandingPage

    def getCreatedAt(self):
        return self.createdAt

    def getAllowEmbed(self):
        return self.allowEmbed

    def setAllowEmbed(self, newAllowEmbed):
        self.allowEmbed = newAllowEmbed

    def getPlayerUiconfId(self):
        return self.playerUiconfId

    def setPlayerUiconfId(self, newPlayerUiconfId):
        self.playerUiconfId = newPlayerUiconfId

    def getFlavorParamId(self):
        return self.flavorParamId

    def setFlavorParamId(self, newFlavorParamId):
        self.flavorParamId = newFlavorParamId

    def getTranscodeExistingContent(self):
        return self.transcodeExistingContent

    def setTranscodeExistingContent(self, newTranscodeExistingContent):
        self.transcodeExistingContent = newTranscodeExistingContent

    def getAddToDefaultConversionProfile(self):
        return self.addToDefaultConversionProfile

    def setAddToDefaultConversionProfile(self, newAddToDefaultConversionProfile):
        self.addToDefaultConversionProfile = newAddToDefaultConversionProfile

    def getCategories(self):
        return self.categories

    def setCategories(self, newCategories):
        self.categories = newCategories

    def getStorageId(self):
        return self.storageId

    def setStorageId(self, newStorageId):
        self.storageId = newStorageId

    def getEntriesOrderBy(self):
        return self.entriesOrderBy

    def setEntriesOrderBy(self, newEntriesOrderBy):
        self.entriesOrderBy = newEntriesOrderBy

    def getEnforceEntitlement(self):
        return self.enforceEntitlement

    def setEnforceEntitlement(self, newEnforceEntitlement):
        self.enforceEntitlement = newEnforceEntitlement

    def getPrivacyContext(self):
        return self.privacyContext

    def setPrivacyContext(self, newPrivacyContext):
        self.privacyContext = newPrivacyContext

    def getUpdatedAt(self):
        return self.updatedAt

    def getUseCategoryEntries(self):
        return self.useCategoryEntries

    def setUseCategoryEntries(self, newUseCategoryEntries):
        self.useCategoryEntries = newUseCategoryEntries


# @package Vidiun
# @subpackage Client
class VidiunJobData(VidiunObjectBase):
    def __init__(self):
        VidiunObjectBase.__init__(self)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunJobData.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunJobData")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunBatchHistoryData(VidiunObjectBase):
    def __init__(self,
            schedulerId=NotImplemented,
            workerId=NotImplemented,
            batchIndex=NotImplemented,
            timeStamp=NotImplemented,
            message=NotImplemented,
            errType=NotImplemented,
            errNumber=NotImplemented,
            hostName=NotImplemented,
            sessionId=NotImplemented):
        VidiunObjectBase.__init__(self)

        # @var int
        self.schedulerId = schedulerId

        # @var int
        self.workerId = workerId

        # @var int
        self.batchIndex = batchIndex

        # @var int
        self.timeStamp = timeStamp

        # @var string
        self.message = message

        # @var int
        self.errType = errType

        # @var int
        self.errNumber = errNumber

        # @var string
        self.hostName = hostName

        # @var string
        self.sessionId = sessionId


    PROPERTY_LOADERS = {
        'schedulerId': getXmlNodeInt, 
        'workerId': getXmlNodeInt, 
        'batchIndex': getXmlNodeInt, 
        'timeStamp': getXmlNodeInt, 
        'message': getXmlNodeText, 
        'errType': getXmlNodeInt, 
        'errNumber': getXmlNodeInt, 
        'hostName': getXmlNodeText, 
        'sessionId': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunBatchHistoryData.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunBatchHistoryData")
        vparams.addIntIfDefined("schedulerId", self.schedulerId)
        vparams.addIntIfDefined("workerId", self.workerId)
        vparams.addIntIfDefined("batchIndex", self.batchIndex)
        vparams.addIntIfDefined("timeStamp", self.timeStamp)
        vparams.addStringIfDefined("message", self.message)
        vparams.addIntIfDefined("errType", self.errType)
        vparams.addIntIfDefined("errNumber", self.errNumber)
        vparams.addStringIfDefined("hostName", self.hostName)
        vparams.addStringIfDefined("sessionId", self.sessionId)
        return vparams

    def getSchedulerId(self):
        return self.schedulerId

    def setSchedulerId(self, newSchedulerId):
        self.schedulerId = newSchedulerId

    def getWorkerId(self):
        return self.workerId

    def setWorkerId(self, newWorkerId):
        self.workerId = newWorkerId

    def getBatchIndex(self):
        return self.batchIndex

    def setBatchIndex(self, newBatchIndex):
        self.batchIndex = newBatchIndex

    def getTimeStamp(self):
        return self.timeStamp

    def setTimeStamp(self, newTimeStamp):
        self.timeStamp = newTimeStamp

    def getMessage(self):
        return self.message

    def setMessage(self, newMessage):
        self.message = newMessage

    def getErrType(self):
        return self.errType

    def setErrType(self, newErrType):
        self.errType = newErrType

    def getErrNumber(self):
        return self.errNumber

    def setErrNumber(self, newErrNumber):
        self.errNumber = newErrNumber

    def getHostName(self):
        return self.hostName

    def setHostName(self, newHostName):
        self.hostName = newHostName

    def getSessionId(self):
        return self.sessionId

    def setSessionId(self, newSessionId):
        self.sessionId = newSessionId


# @package Vidiun
# @subpackage Client
class VidiunBatchJob(VidiunObjectBase):
    def __init__(self,
            id=NotImplemented,
            partnerId=NotImplemented,
            createdAt=NotImplemented,
            updatedAt=NotImplemented,
            deletedAt=NotImplemented,
            lockExpiration=NotImplemented,
            executionAttempts=NotImplemented,
            lockVersion=NotImplemented,
            entryId=NotImplemented,
            entryName=NotImplemented,
            jobType=NotImplemented,
            jobSubType=NotImplemented,
            data=NotImplemented,
            status=NotImplemented,
            abort=NotImplemented,
            checkAgainTimeout=NotImplemented,
            message=NotImplemented,
            description=NotImplemented,
            priority=NotImplemented,
            history=NotImplemented,
            bulkJobId=NotImplemented,
            batchVersion=NotImplemented,
            parentJobId=NotImplemented,
            rootJobId=NotImplemented,
            queueTime=NotImplemented,
            finishTime=NotImplemented,
            errType=NotImplemented,
            errNumber=NotImplemented,
            estimatedEffort=NotImplemented,
            urgency=NotImplemented,
            schedulerId=NotImplemented,
            workerId=NotImplemented,
            batchIndex=NotImplemented,
            lastSchedulerId=NotImplemented,
            lastWorkerId=NotImplemented,
            dc=NotImplemented,
            jobObjectId=NotImplemented,
            jobObjectType=NotImplemented):
        VidiunObjectBase.__init__(self)

        # @var int
        # @readonly
        self.id = id

        # @var int
        # @readonly
        self.partnerId = partnerId

        # @var int
        # @readonly
        self.createdAt = createdAt

        # @var int
        # @readonly
        self.updatedAt = updatedAt

        # @var int
        # @readonly
        self.deletedAt = deletedAt

        # @var int
        # @readonly
        self.lockExpiration = lockExpiration

        # @var int
        # @readonly
        self.executionAttempts = executionAttempts

        # @var int
        # @readonly
        self.lockVersion = lockVersion

        # @var string
        self.entryId = entryId

        # @var string
        self.entryName = entryName

        # @var VidiunBatchJobType
        # @readonly
        self.jobType = jobType

        # @var int
        self.jobSubType = jobSubType

        # @var VidiunJobData
        self.data = data

        # @var VidiunBatchJobStatus
        self.status = status

        # @var int
        self.abort = abort

        # @var int
        self.checkAgainTimeout = checkAgainTimeout

        # @var string
        self.message = message

        # @var string
        self.description = description

        # @var int
        self.priority = priority

        # @var array of VidiunBatchHistoryData
        self.history = history

        # The id of the bulk upload job that initiated this job
        # @var int
        self.bulkJobId = bulkJobId

        # @var int
        self.batchVersion = batchVersion

        # When one job creates another - the parent should set this parentJobId to be its own id.
        # @var int
        self.parentJobId = parentJobId

        # The id of the root parent job
        # @var int
        self.rootJobId = rootJobId

        # The time that the job was pulled from the queue
        # @var int
        self.queueTime = queueTime

        # The time that the job was finished or closed as failed
        # @var int
        self.finishTime = finishTime

        # @var VidiunBatchJobErrorTypes
        self.errType = errType

        # @var int
        self.errNumber = errNumber

        # @var int
        self.estimatedEffort = estimatedEffort

        # @var int
        self.urgency = urgency

        # @var int
        self.schedulerId = schedulerId

        # @var int
        self.workerId = workerId

        # @var int
        self.batchIndex = batchIndex

        # @var int
        self.lastSchedulerId = lastSchedulerId

        # @var int
        self.lastWorkerId = lastWorkerId

        # @var int
        self.dc = dc

        # @var string
        self.jobObjectId = jobObjectId

        # @var int
        self.jobObjectType = jobObjectType


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'partnerId': getXmlNodeInt, 
        'createdAt': getXmlNodeInt, 
        'updatedAt': getXmlNodeInt, 
        'deletedAt': getXmlNodeInt, 
        'lockExpiration': getXmlNodeInt, 
        'executionAttempts': getXmlNodeInt, 
        'lockVersion': getXmlNodeInt, 
        'entryId': getXmlNodeText, 
        'entryName': getXmlNodeText, 
        'jobType': (VidiunEnumsFactory.createString, "VidiunBatchJobType"), 
        'jobSubType': getXmlNodeInt, 
        'data': (VidiunObjectFactory.create, VidiunJobData), 
        'status': (VidiunEnumsFactory.createInt, "VidiunBatchJobStatus"), 
        'abort': getXmlNodeInt, 
        'checkAgainTimeout': getXmlNodeInt, 
        'message': getXmlNodeText, 
        'description': getXmlNodeText, 
        'priority': getXmlNodeInt, 
        'history': (VidiunObjectFactory.createArray, VidiunBatchHistoryData), 
        'bulkJobId': getXmlNodeInt, 
        'batchVersion': getXmlNodeInt, 
        'parentJobId': getXmlNodeInt, 
        'rootJobId': getXmlNodeInt, 
        'queueTime': getXmlNodeInt, 
        'finishTime': getXmlNodeInt, 
        'errType': (VidiunEnumsFactory.createInt, "VidiunBatchJobErrorTypes"), 
        'errNumber': getXmlNodeInt, 
        'estimatedEffort': getXmlNodeInt, 
        'urgency': getXmlNodeInt, 
        'schedulerId': getXmlNodeInt, 
        'workerId': getXmlNodeInt, 
        'batchIndex': getXmlNodeInt, 
        'lastSchedulerId': getXmlNodeInt, 
        'lastWorkerId': getXmlNodeInt, 
        'dc': getXmlNodeInt, 
        'jobObjectId': getXmlNodeText, 
        'jobObjectType': getXmlNodeInt, 
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunBatchJob.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunBatchJob")
        vparams.addStringIfDefined("entryId", self.entryId)
        vparams.addStringIfDefined("entryName", self.entryName)
        vparams.addIntIfDefined("jobSubType", self.jobSubType)
        vparams.addObjectIfDefined("data", self.data)
        vparams.addIntEnumIfDefined("status", self.status)
        vparams.addIntIfDefined("abort", self.abort)
        vparams.addIntIfDefined("checkAgainTimeout", self.checkAgainTimeout)
        vparams.addStringIfDefined("message", self.message)
        vparams.addStringIfDefined("description", self.description)
        vparams.addIntIfDefined("priority", self.priority)
        vparams.addArrayIfDefined("history", self.history)
        vparams.addIntIfDefined("bulkJobId", self.bulkJobId)
        vparams.addIntIfDefined("batchVersion", self.batchVersion)
        vparams.addIntIfDefined("parentJobId", self.parentJobId)
        vparams.addIntIfDefined("rootJobId", self.rootJobId)
        vparams.addIntIfDefined("queueTime", self.queueTime)
        vparams.addIntIfDefined("finishTime", self.finishTime)
        vparams.addIntEnumIfDefined("errType", self.errType)
        vparams.addIntIfDefined("errNumber", self.errNumber)
        vparams.addIntIfDefined("estimatedEffort", self.estimatedEffort)
        vparams.addIntIfDefined("urgency", self.urgency)
        vparams.addIntIfDefined("schedulerId", self.schedulerId)
        vparams.addIntIfDefined("workerId", self.workerId)
        vparams.addIntIfDefined("batchIndex", self.batchIndex)
        vparams.addIntIfDefined("lastSchedulerId", self.lastSchedulerId)
        vparams.addIntIfDefined("lastWorkerId", self.lastWorkerId)
        vparams.addIntIfDefined("dc", self.dc)
        vparams.addStringIfDefined("jobObjectId", self.jobObjectId)
        vparams.addIntIfDefined("jobObjectType", self.jobObjectType)
        return vparams

    def getId(self):
        return self.id

    def getPartnerId(self):
        return self.partnerId

    def getCreatedAt(self):
        return self.createdAt

    def getUpdatedAt(self):
        return self.updatedAt

    def getDeletedAt(self):
        return self.deletedAt

    def getLockExpiration(self):
        return self.lockExpiration

    def getExecutionAttempts(self):
        return self.executionAttempts

    def getLockVersion(self):
        return self.lockVersion

    def getEntryId(self):
        return self.entryId

    def setEntryId(self, newEntryId):
        self.entryId = newEntryId

    def getEntryName(self):
        return self.entryName

    def setEntryName(self, newEntryName):
        self.entryName = newEntryName

    def getJobType(self):
        return self.jobType

    def getJobSubType(self):
        return self.jobSubType

    def setJobSubType(self, newJobSubType):
        self.jobSubType = newJobSubType

    def getData(self):
        return self.data

    def setData(self, newData):
        self.data = newData

    def getStatus(self):
        return self.status

    def setStatus(self, newStatus):
        self.status = newStatus

    def getAbort(self):
        return self.abort

    def setAbort(self, newAbort):
        self.abort = newAbort

    def getCheckAgainTimeout(self):
        return self.checkAgainTimeout

    def setCheckAgainTimeout(self, newCheckAgainTimeout):
        self.checkAgainTimeout = newCheckAgainTimeout

    def getMessage(self):
        return self.message

    def setMessage(self, newMessage):
        self.message = newMessage

    def getDescription(self):
        return self.description

    def setDescription(self, newDescription):
        self.description = newDescription

    def getPriority(self):
        return self.priority

    def setPriority(self, newPriority):
        self.priority = newPriority

    def getHistory(self):
        return self.history

    def setHistory(self, newHistory):
        self.history = newHistory

    def getBulkJobId(self):
        return self.bulkJobId

    def setBulkJobId(self, newBulkJobId):
        self.bulkJobId = newBulkJobId

    def getBatchVersion(self):
        return self.batchVersion

    def setBatchVersion(self, newBatchVersion):
        self.batchVersion = newBatchVersion

    def getParentJobId(self):
        return self.parentJobId

    def setParentJobId(self, newParentJobId):
        self.parentJobId = newParentJobId

    def getRootJobId(self):
        return self.rootJobId

    def setRootJobId(self, newRootJobId):
        self.rootJobId = newRootJobId

    def getQueueTime(self):
        return self.queueTime

    def setQueueTime(self, newQueueTime):
        self.queueTime = newQueueTime

    def getFinishTime(self):
        return self.finishTime

    def setFinishTime(self, newFinishTime):
        self.finishTime = newFinishTime

    def getErrType(self):
        return self.errType

    def setErrType(self, newErrType):
        self.errType = newErrType

    def getErrNumber(self):
        return self.errNumber

    def setErrNumber(self, newErrNumber):
        self.errNumber = newErrNumber

    def getEstimatedEffort(self):
        return self.estimatedEffort

    def setEstimatedEffort(self, newEstimatedEffort):
        self.estimatedEffort = newEstimatedEffort

    def getUrgency(self):
        return self.urgency

    def setUrgency(self, newUrgency):
        self.urgency = newUrgency

    def getSchedulerId(self):
        return self.schedulerId

    def setSchedulerId(self, newSchedulerId):
        self.schedulerId = newSchedulerId

    def getWorkerId(self):
        return self.workerId

    def setWorkerId(self, newWorkerId):
        self.workerId = newWorkerId

    def getBatchIndex(self):
        return self.batchIndex

    def setBatchIndex(self, newBatchIndex):
        self.batchIndex = newBatchIndex

    def getLastSchedulerId(self):
        return self.lastSchedulerId

    def setLastSchedulerId(self, newLastSchedulerId):
        self.lastSchedulerId = newLastSchedulerId

    def getLastWorkerId(self):
        return self.lastWorkerId

    def setLastWorkerId(self, newLastWorkerId):
        self.lastWorkerId = newLastWorkerId

    def getDc(self):
        return self.dc

    def setDc(self, newDc):
        self.dc = newDc

    def getJobObjectId(self):
        return self.jobObjectId

    def setJobObjectId(self, newJobObjectId):
        self.jobObjectId = newJobObjectId

    def getJobObjectType(self):
        return self.jobObjectType

    def setJobObjectType(self, newJobObjectType):
        self.jobObjectType = newJobObjectType


# @package Vidiun
# @subpackage Client
class VidiunPlayerDeliveryType(VidiunObjectBase):
    def __init__(self,
            id=NotImplemented,
            label=NotImplemented,
            flashvars=NotImplemented,
            minVersion=NotImplemented,
            enabledByDefault=NotImplemented):
        VidiunObjectBase.__init__(self)

        # @var string
        self.id = id

        # @var string
        self.label = label

        # @var array of VidiunKeyValue
        self.flashvars = flashvars

        # @var string
        self.minVersion = minVersion

        # @var bool
        self.enabledByDefault = enabledByDefault


    PROPERTY_LOADERS = {
        'id': getXmlNodeText, 
        'label': getXmlNodeText, 
        'flashvars': (VidiunObjectFactory.createArray, VidiunKeyValue), 
        'minVersion': getXmlNodeText, 
        'enabledByDefault': getXmlNodeBool, 
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunPlayerDeliveryType.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunPlayerDeliveryType")
        vparams.addStringIfDefined("id", self.id)
        vparams.addStringIfDefined("label", self.label)
        vparams.addArrayIfDefined("flashvars", self.flashvars)
        vparams.addStringIfDefined("minVersion", self.minVersion)
        vparams.addBoolIfDefined("enabledByDefault", self.enabledByDefault)
        return vparams

    def getId(self):
        return self.id

    def setId(self, newId):
        self.id = newId

    def getLabel(self):
        return self.label

    def setLabel(self, newLabel):
        self.label = newLabel

    def getFlashvars(self):
        return self.flashvars

    def setFlashvars(self, newFlashvars):
        self.flashvars = newFlashvars

    def getMinVersion(self):
        return self.minVersion

    def setMinVersion(self, newMinVersion):
        self.minVersion = newMinVersion

    def getEnabledByDefault(self):
        return self.enabledByDefault

    def setEnabledByDefault(self, newEnabledByDefault):
        self.enabledByDefault = newEnabledByDefault


# @package Vidiun
# @subpackage Client
class VidiunPlayerEmbedCodeType(VidiunObjectBase):
    def __init__(self,
            id=NotImplemented,
            label=NotImplemented,
            entryOnly=NotImplemented,
            minVersion=NotImplemented):
        VidiunObjectBase.__init__(self)

        # @var string
        self.id = id

        # @var string
        self.label = label

        # @var bool
        self.entryOnly = entryOnly

        # @var string
        self.minVersion = minVersion


    PROPERTY_LOADERS = {
        'id': getXmlNodeText, 
        'label': getXmlNodeText, 
        'entryOnly': getXmlNodeBool, 
        'minVersion': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunPlayerEmbedCodeType.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunPlayerEmbedCodeType")
        vparams.addStringIfDefined("id", self.id)
        vparams.addStringIfDefined("label", self.label)
        vparams.addBoolIfDefined("entryOnly", self.entryOnly)
        vparams.addStringIfDefined("minVersion", self.minVersion)
        return vparams

    def getId(self):
        return self.id

    def setId(self, newId):
        self.id = newId

    def getLabel(self):
        return self.label

    def setLabel(self, newLabel):
        self.label = newLabel

    def getEntryOnly(self):
        return self.entryOnly

    def setEntryOnly(self, newEntryOnly):
        self.entryOnly = newEntryOnly

    def getMinVersion(self):
        return self.minVersion

    def setMinVersion(self, newMinVersion):
        self.minVersion = newMinVersion


# @package Vidiun
# @subpackage Client
class VidiunPartner(VidiunObjectBase):
    def __init__(self,
            id=NotImplemented,
            name=NotImplemented,
            website=NotImplemented,
            notificationUrl=NotImplemented,
            appearInSearch=NotImplemented,
            createdAt=NotImplemented,
            adminName=NotImplemented,
            adminEmail=NotImplemented,
            description=NotImplemented,
            commercialUse=NotImplemented,
            landingPage=NotImplemented,
            userLandingPage=NotImplemented,
            contentCategories=NotImplemented,
            type=NotImplemented,
            phone=NotImplemented,
            describeYourself=NotImplemented,
            adultContent=NotImplemented,
            defConversionProfileType=NotImplemented,
            notify=NotImplemented,
            status=NotImplemented,
            allowQuickEdit=NotImplemented,
            mergeEntryLists=NotImplemented,
            notificationsConfig=NotImplemented,
            maxUploadSize=NotImplemented,
            partnerPackage=NotImplemented,
            secret=NotImplemented,
            adminSecret=NotImplemented,
            cmsPassword=NotImplemented,
            allowMultiNotification=NotImplemented,
            adminLoginUsersQuota=NotImplemented,
            adminUserId=NotImplemented,
            firstName=NotImplemented,
            lastName=NotImplemented,
            country=NotImplemented,
            state=NotImplemented,
            additionalParams=NotImplemented,
            publishersQuota=NotImplemented,
            partnerGroupType=NotImplemented,
            defaultEntitlementEnforcement=NotImplemented,
            defaultDeliveryType=NotImplemented,
            defaultEmbedCodeType=NotImplemented,
            deliveryTypes=NotImplemented,
            embedCodeTypes=NotImplemented,
            templatePartnerId=NotImplemented,
            ignoreSeoLinks=NotImplemented,
            host=NotImplemented,
            cdnHost=NotImplemented,
            isFirstLogin=NotImplemented,
            logoutUrl=NotImplemented,
            partnerParentId=NotImplemented,
            crmId=NotImplemented,
            referenceId=NotImplemented,
            timeAlignedRenditions=NotImplemented):
        VidiunObjectBase.__init__(self)

        # @var int
        # @readonly
        self.id = id

        # @var string
        self.name = name

        # @var string
        self.website = website

        # @var string
        self.notificationUrl = notificationUrl

        # @var int
        self.appearInSearch = appearInSearch

        # @var int
        # @readonly
        self.createdAt = createdAt

        # deprecated - lastName and firstName replaces this field
        # @var string
        self.adminName = adminName

        # @var string
        self.adminEmail = adminEmail

        # @var string
        self.description = description

        # @var VidiunCommercialUseType
        self.commercialUse = commercialUse

        # @var string
        self.landingPage = landingPage

        # @var string
        self.userLandingPage = userLandingPage

        # @var string
        self.contentCategories = contentCategories

        # @var VidiunPartnerType
        self.type = type

        # @var string
        self.phone = phone

        # @var string
        self.describeYourself = describeYourself

        # @var bool
        self.adultContent = adultContent

        # @var string
        self.defConversionProfileType = defConversionProfileType

        # @var int
        self.notify = notify

        # @var VidiunPartnerStatus
        # @readonly
        self.status = status

        # @var int
        self.allowQuickEdit = allowQuickEdit

        # @var int
        self.mergeEntryLists = mergeEntryLists

        # @var string
        self.notificationsConfig = notificationsConfig

        # @var int
        self.maxUploadSize = maxUploadSize

        # @var int
        # @readonly
        self.partnerPackage = partnerPackage

        # @var string
        # @readonly
        self.secret = secret

        # @var string
        # @readonly
        self.adminSecret = adminSecret

        # @var string
        # @readonly
        self.cmsPassword = cmsPassword

        # @var int
        self.allowMultiNotification = allowMultiNotification

        # @var int
        # @readonly
        self.adminLoginUsersQuota = adminLoginUsersQuota

        # @var string
        self.adminUserId = adminUserId

        # firstName and lastName replace the old (deprecated) adminName
        # @var string
        self.firstName = firstName

        # lastName and firstName replace the old (deprecated) adminName
        # @var string
        self.lastName = lastName

        # country code (2char) - this field is optional
        # @var string
        self.country = country

        # state code (2char) - this field is optional
        # @var string
        self.state = state

        # @var array of VidiunKeyValue
        # @insertonly
        self.additionalParams = additionalParams

        # @var int
        # @readonly
        self.publishersQuota = publishersQuota

        # @var VidiunPartnerGroupType
        # @readonly
        self.partnerGroupType = partnerGroupType

        # @var bool
        # @readonly
        self.defaultEntitlementEnforcement = defaultEntitlementEnforcement

        # @var string
        # @readonly
        self.defaultDeliveryType = defaultDeliveryType

        # @var string
        # @readonly
        self.defaultEmbedCodeType = defaultEmbedCodeType

        # @var array of VidiunPlayerDeliveryType
        # @readonly
        self.deliveryTypes = deliveryTypes

        # @var array of VidiunPlayerEmbedCodeType
        # @readonly
        self.embedCodeTypes = embedCodeTypes

        # @var int
        # @readonly
        self.templatePartnerId = templatePartnerId

        # @var bool
        # @readonly
        self.ignoreSeoLinks = ignoreSeoLinks

        # @var string
        # @readonly
        self.host = host

        # @var string
        # @readonly
        self.cdnHost = cdnHost

        # @var bool
        # @readonly
        self.isFirstLogin = isFirstLogin

        # @var string
        # @readonly
        self.logoutUrl = logoutUrl

        # @var int
        # @readonly
        self.partnerParentId = partnerParentId

        # @var string
        # @readonly
        self.crmId = crmId

        # @var string
        self.referenceId = referenceId

        # @var bool
        # @readonly
        self.timeAlignedRenditions = timeAlignedRenditions


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'name': getXmlNodeText, 
        'website': getXmlNodeText, 
        'notificationUrl': getXmlNodeText, 
        'appearInSearch': getXmlNodeInt, 
        'createdAt': getXmlNodeInt, 
        'adminName': getXmlNodeText, 
        'adminEmail': getXmlNodeText, 
        'description': getXmlNodeText, 
        'commercialUse': (VidiunEnumsFactory.createInt, "VidiunCommercialUseType"), 
        'landingPage': getXmlNodeText, 
        'userLandingPage': getXmlNodeText, 
        'contentCategories': getXmlNodeText, 
        'type': (VidiunEnumsFactory.createInt, "VidiunPartnerType"), 
        'phone': getXmlNodeText, 
        'describeYourself': getXmlNodeText, 
        'adultContent': getXmlNodeBool, 
        'defConversionProfileType': getXmlNodeText, 
        'notify': getXmlNodeInt, 
        'status': (VidiunEnumsFactory.createInt, "VidiunPartnerStatus"), 
        'allowQuickEdit': getXmlNodeInt, 
        'mergeEntryLists': getXmlNodeInt, 
        'notificationsConfig': getXmlNodeText, 
        'maxUploadSize': getXmlNodeInt, 
        'partnerPackage': getXmlNodeInt, 
        'secret': getXmlNodeText, 
        'adminSecret': getXmlNodeText, 
        'cmsPassword': getXmlNodeText, 
        'allowMultiNotification': getXmlNodeInt, 
        'adminLoginUsersQuota': getXmlNodeInt, 
        'adminUserId': getXmlNodeText, 
        'firstName': getXmlNodeText, 
        'lastName': getXmlNodeText, 
        'country': getXmlNodeText, 
        'state': getXmlNodeText, 
        'additionalParams': (VidiunObjectFactory.createArray, VidiunKeyValue), 
        'publishersQuota': getXmlNodeInt, 
        'partnerGroupType': (VidiunEnumsFactory.createInt, "VidiunPartnerGroupType"), 
        'defaultEntitlementEnforcement': getXmlNodeBool, 
        'defaultDeliveryType': getXmlNodeText, 
        'defaultEmbedCodeType': getXmlNodeText, 
        'deliveryTypes': (VidiunObjectFactory.createArray, VidiunPlayerDeliveryType), 
        'embedCodeTypes': (VidiunObjectFactory.createArray, VidiunPlayerEmbedCodeType), 
        'templatePartnerId': getXmlNodeInt, 
        'ignoreSeoLinks': getXmlNodeBool, 
        'host': getXmlNodeText, 
        'cdnHost': getXmlNodeText, 
        'isFirstLogin': getXmlNodeBool, 
        'logoutUrl': getXmlNodeText, 
        'partnerParentId': getXmlNodeInt, 
        'crmId': getXmlNodeText, 
        'referenceId': getXmlNodeText, 
        'timeAlignedRenditions': getXmlNodeBool, 
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunPartner.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunPartner")
        vparams.addStringIfDefined("name", self.name)
        vparams.addStringIfDefined("website", self.website)
        vparams.addStringIfDefined("notificationUrl", self.notificationUrl)
        vparams.addIntIfDefined("appearInSearch", self.appearInSearch)
        vparams.addStringIfDefined("adminName", self.adminName)
        vparams.addStringIfDefined("adminEmail", self.adminEmail)
        vparams.addStringIfDefined("description", self.description)
        vparams.addIntEnumIfDefined("commercialUse", self.commercialUse)
        vparams.addStringIfDefined("landingPage", self.landingPage)
        vparams.addStringIfDefined("userLandingPage", self.userLandingPage)
        vparams.addStringIfDefined("contentCategories", self.contentCategories)
        vparams.addIntEnumIfDefined("type", self.type)
        vparams.addStringIfDefined("phone", self.phone)
        vparams.addStringIfDefined("describeYourself", self.describeYourself)
        vparams.addBoolIfDefined("adultContent", self.adultContent)
        vparams.addStringIfDefined("defConversionProfileType", self.defConversionProfileType)
        vparams.addIntIfDefined("notify", self.notify)
        vparams.addIntIfDefined("allowQuickEdit", self.allowQuickEdit)
        vparams.addIntIfDefined("mergeEntryLists", self.mergeEntryLists)
        vparams.addStringIfDefined("notificationsConfig", self.notificationsConfig)
        vparams.addIntIfDefined("maxUploadSize", self.maxUploadSize)
        vparams.addIntIfDefined("allowMultiNotification", self.allowMultiNotification)
        vparams.addStringIfDefined("adminUserId", self.adminUserId)
        vparams.addStringIfDefined("firstName", self.firstName)
        vparams.addStringIfDefined("lastName", self.lastName)
        vparams.addStringIfDefined("country", self.country)
        vparams.addStringIfDefined("state", self.state)
        vparams.addArrayIfDefined("additionalParams", self.additionalParams)
        vparams.addStringIfDefined("referenceId", self.referenceId)
        return vparams

    def getId(self):
        return self.id

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName

    def getWebsite(self):
        return self.website

    def setWebsite(self, newWebsite):
        self.website = newWebsite

    def getNotificationUrl(self):
        return self.notificationUrl

    def setNotificationUrl(self, newNotificationUrl):
        self.notificationUrl = newNotificationUrl

    def getAppearInSearch(self):
        return self.appearInSearch

    def setAppearInSearch(self, newAppearInSearch):
        self.appearInSearch = newAppearInSearch

    def getCreatedAt(self):
        return self.createdAt

    def getAdminName(self):
        return self.adminName

    def setAdminName(self, newAdminName):
        self.adminName = newAdminName

    def getAdminEmail(self):
        return self.adminEmail

    def setAdminEmail(self, newAdminEmail):
        self.adminEmail = newAdminEmail

    def getDescription(self):
        return self.description

    def setDescription(self, newDescription):
        self.description = newDescription

    def getCommercialUse(self):
        return self.commercialUse

    def setCommercialUse(self, newCommercialUse):
        self.commercialUse = newCommercialUse

    def getLandingPage(self):
        return self.landingPage

    def setLandingPage(self, newLandingPage):
        self.landingPage = newLandingPage

    def getUserLandingPage(self):
        return self.userLandingPage

    def setUserLandingPage(self, newUserLandingPage):
        self.userLandingPage = newUserLandingPage

    def getContentCategories(self):
        return self.contentCategories

    def setContentCategories(self, newContentCategories):
        self.contentCategories = newContentCategories

    def getType(self):
        return self.type

    def setType(self, newType):
        self.type = newType

    def getPhone(self):
        return self.phone

    def setPhone(self, newPhone):
        self.phone = newPhone

    def getDescribeYourself(self):
        return self.describeYourself

    def setDescribeYourself(self, newDescribeYourself):
        self.describeYourself = newDescribeYourself

    def getAdultContent(self):
        return self.adultContent

    def setAdultContent(self, newAdultContent):
        self.adultContent = newAdultContent

    def getDefConversionProfileType(self):
        return self.defConversionProfileType

    def setDefConversionProfileType(self, newDefConversionProfileType):
        self.defConversionProfileType = newDefConversionProfileType

    def getNotify(self):
        return self.notify

    def setNotify(self, newNotify):
        self.notify = newNotify

    def getStatus(self):
        return self.status

    def getAllowQuickEdit(self):
        return self.allowQuickEdit

    def setAllowQuickEdit(self, newAllowQuickEdit):
        self.allowQuickEdit = newAllowQuickEdit

    def getMergeEntryLists(self):
        return self.mergeEntryLists

    def setMergeEntryLists(self, newMergeEntryLists):
        self.mergeEntryLists = newMergeEntryLists

    def getNotificationsConfig(self):
        return self.notificationsConfig

    def setNotificationsConfig(self, newNotificationsConfig):
        self.notificationsConfig = newNotificationsConfig

    def getMaxUploadSize(self):
        return self.maxUploadSize

    def setMaxUploadSize(self, newMaxUploadSize):
        self.maxUploadSize = newMaxUploadSize

    def getPartnerPackage(self):
        return self.partnerPackage

    def getSecret(self):
        return self.secret

    def getAdminSecret(self):
        return self.adminSecret

    def getCmsPassword(self):
        return self.cmsPassword

    def getAllowMultiNotification(self):
        return self.allowMultiNotification

    def setAllowMultiNotification(self, newAllowMultiNotification):
        self.allowMultiNotification = newAllowMultiNotification

    def getAdminLoginUsersQuota(self):
        return self.adminLoginUsersQuota

    def getAdminUserId(self):
        return self.adminUserId

    def setAdminUserId(self, newAdminUserId):
        self.adminUserId = newAdminUserId

    def getFirstName(self):
        return self.firstName

    def setFirstName(self, newFirstName):
        self.firstName = newFirstName

    def getLastName(self):
        return self.lastName

    def setLastName(self, newLastName):
        self.lastName = newLastName

    def getCountry(self):
        return self.country

    def setCountry(self, newCountry):
        self.country = newCountry

    def getState(self):
        return self.state

    def setState(self, newState):
        self.state = newState

    def getAdditionalParams(self):
        return self.additionalParams

    def setAdditionalParams(self, newAdditionalParams):
        self.additionalParams = newAdditionalParams

    def getPublishersQuota(self):
        return self.publishersQuota

    def getPartnerGroupType(self):
        return self.partnerGroupType

    def getDefaultEntitlementEnforcement(self):
        return self.defaultEntitlementEnforcement

    def getDefaultDeliveryType(self):
        return self.defaultDeliveryType

    def getDefaultEmbedCodeType(self):
        return self.defaultEmbedCodeType

    def getDeliveryTypes(self):
        return self.deliveryTypes

    def getEmbedCodeTypes(self):
        return self.embedCodeTypes

    def getTemplatePartnerId(self):
        return self.templatePartnerId

    def getIgnoreSeoLinks(self):
        return self.ignoreSeoLinks

    def getHost(self):
        return self.host

    def getCdnHost(self):
        return self.cdnHost

    def getIsFirstLogin(self):
        return self.isFirstLogin

    def getLogoutUrl(self):
        return self.logoutUrl

    def getPartnerParentId(self):
        return self.partnerParentId

    def getCrmId(self):
        return self.crmId

    def getReferenceId(self):
        return self.referenceId

    def setReferenceId(self, newReferenceId):
        self.referenceId = newReferenceId

    def getTimeAlignedRenditions(self):
        return self.timeAlignedRenditions


# @package Vidiun
# @subpackage Client
class VidiunValue(VidiunObjectBase):
    """A representation to return an array of values"""

    def __init__(self,
            description=NotImplemented):
        VidiunObjectBase.__init__(self)

        # @var string
        self.description = description


    PROPERTY_LOADERS = {
        'description': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunValue.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunValue")
        vparams.addStringIfDefined("description", self.description)
        return vparams

    def getDescription(self):
        return self.description

    def setDescription(self, newDescription):
        self.description = newDescription


# @package Vidiun
# @subpackage Client
class VidiunBooleanValue(VidiunValue):
    """A boolean representation to return an array of booleans"""

    def __init__(self,
            description=NotImplemented,
            value=NotImplemented):
        VidiunValue.__init__(self,
            description)

        # @var bool
        self.value = value


    PROPERTY_LOADERS = {
        'value': getXmlNodeBool, 
    }

    def fromXml(self, node):
        VidiunValue.fromXml(self, node)
        self.fromXmlImpl(node, VidiunBooleanValue.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunValue.toParams(self)
        vparams.put("objectType", "VidiunBooleanValue")
        vparams.addBoolIfDefined("value", self.value)
        return vparams

    def getValue(self):
        return self.value

    def setValue(self, newValue):
        self.value = newValue


# @package Vidiun
# @subpackage Client
class VidiunBulkUploadPluginData(VidiunObjectBase):
    def __init__(self,
            field=NotImplemented,
            value=NotImplemented):
        VidiunObjectBase.__init__(self)

        # @var string
        self.field = field

        # @var string
        self.value = value


    PROPERTY_LOADERS = {
        'field': getXmlNodeText, 
        'value': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunBulkUploadPluginData.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunBulkUploadPluginData")
        vparams.addStringIfDefined("field", self.field)
        vparams.addStringIfDefined("value", self.value)
        return vparams

    def getField(self):
        return self.field

    def setField(self, newField):
        self.field = newField

    def getValue(self):
        return self.value

    def setValue(self, newValue):
        self.value = newValue


# @package Vidiun
# @subpackage Client
class VidiunBulkUploadResult(VidiunObjectBase):
    def __init__(self,
            id=NotImplemented,
            bulkUploadJobId=NotImplemented,
            lineIndex=NotImplemented,
            partnerId=NotImplemented,
            status=NotImplemented,
            action=NotImplemented,
            objectId=NotImplemented,
            objectStatus=NotImplemented,
            bulkUploadResultObjectType=NotImplemented,
            rowData=NotImplemented,
            partnerData=NotImplemented,
            objectErrorDescription=NotImplemented,
            pluginsData=NotImplemented,
            errorDescription=NotImplemented,
            errorCode=NotImplemented,
            errorType=NotImplemented):
        VidiunObjectBase.__init__(self)

        # The id of the result
        # @var int
        # @readonly
        self.id = id

        # The id of the parent job
        # @var int
        self.bulkUploadJobId = bulkUploadJobId

        # The index of the line in the CSV
        # @var int
        self.lineIndex = lineIndex

        # @var int
        self.partnerId = partnerId

        # @var VidiunBulkUploadResultStatus
        self.status = status

        # @var VidiunBulkUploadAction
        self.action = action

        # @var string
        self.objectId = objectId

        # @var int
        self.objectStatus = objectStatus

        # @var VidiunBulkUploadObjectType
        self.bulkUploadResultObjectType = bulkUploadResultObjectType

        # The data as recieved in the csv
        # @var string
        self.rowData = rowData

        # @var string
        self.partnerData = partnerData

        # @var string
        self.objectErrorDescription = objectErrorDescription

        # @var array of VidiunBulkUploadPluginData
        self.pluginsData = pluginsData

        # @var string
        self.errorDescription = errorDescription

        # @var string
        self.errorCode = errorCode

        # @var int
        self.errorType = errorType


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'bulkUploadJobId': getXmlNodeInt, 
        'lineIndex': getXmlNodeInt, 
        'partnerId': getXmlNodeInt, 
        'status': (VidiunEnumsFactory.createString, "VidiunBulkUploadResultStatus"), 
        'action': (VidiunEnumsFactory.createString, "VidiunBulkUploadAction"), 
        'objectId': getXmlNodeText, 
        'objectStatus': getXmlNodeInt, 
        'bulkUploadResultObjectType': (VidiunEnumsFactory.createString, "VidiunBulkUploadObjectType"), 
        'rowData': getXmlNodeText, 
        'partnerData': getXmlNodeText, 
        'objectErrorDescription': getXmlNodeText, 
        'pluginsData': (VidiunObjectFactory.createArray, VidiunBulkUploadPluginData), 
        'errorDescription': getXmlNodeText, 
        'errorCode': getXmlNodeText, 
        'errorType': getXmlNodeInt, 
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunBulkUploadResult.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunBulkUploadResult")
        vparams.addIntIfDefined("bulkUploadJobId", self.bulkUploadJobId)
        vparams.addIntIfDefined("lineIndex", self.lineIndex)
        vparams.addIntIfDefined("partnerId", self.partnerId)
        vparams.addStringEnumIfDefined("status", self.status)
        vparams.addStringEnumIfDefined("action", self.action)
        vparams.addStringIfDefined("objectId", self.objectId)
        vparams.addIntIfDefined("objectStatus", self.objectStatus)
        vparams.addStringEnumIfDefined("bulkUploadResultObjectType", self.bulkUploadResultObjectType)
        vparams.addStringIfDefined("rowData", self.rowData)
        vparams.addStringIfDefined("partnerData", self.partnerData)
        vparams.addStringIfDefined("objectErrorDescription", self.objectErrorDescription)
        vparams.addArrayIfDefined("pluginsData", self.pluginsData)
        vparams.addStringIfDefined("errorDescription", self.errorDescription)
        vparams.addStringIfDefined("errorCode", self.errorCode)
        vparams.addIntIfDefined("errorType", self.errorType)
        return vparams

    def getId(self):
        return self.id

    def getBulkUploadJobId(self):
        return self.bulkUploadJobId

    def setBulkUploadJobId(self, newBulkUploadJobId):
        self.bulkUploadJobId = newBulkUploadJobId

    def getLineIndex(self):
        return self.lineIndex

    def setLineIndex(self, newLineIndex):
        self.lineIndex = newLineIndex

    def getPartnerId(self):
        return self.partnerId

    def setPartnerId(self, newPartnerId):
        self.partnerId = newPartnerId

    def getStatus(self):
        return self.status

    def setStatus(self, newStatus):
        self.status = newStatus

    def getAction(self):
        return self.action

    def setAction(self, newAction):
        self.action = newAction

    def getObjectId(self):
        return self.objectId

    def setObjectId(self, newObjectId):
        self.objectId = newObjectId

    def getObjectStatus(self):
        return self.objectStatus

    def setObjectStatus(self, newObjectStatus):
        self.objectStatus = newObjectStatus

    def getBulkUploadResultObjectType(self):
        return self.bulkUploadResultObjectType

    def setBulkUploadResultObjectType(self, newBulkUploadResultObjectType):
        self.bulkUploadResultObjectType = newBulkUploadResultObjectType

    def getRowData(self):
        return self.rowData

    def setRowData(self, newRowData):
        self.rowData = newRowData

    def getPartnerData(self):
        return self.partnerData

    def setPartnerData(self, newPartnerData):
        self.partnerData = newPartnerData

    def getObjectErrorDescription(self):
        return self.objectErrorDescription

    def setObjectErrorDescription(self, newObjectErrorDescription):
        self.objectErrorDescription = newObjectErrorDescription

    def getPluginsData(self):
        return self.pluginsData

    def setPluginsData(self, newPluginsData):
        self.pluginsData = newPluginsData

    def getErrorDescription(self):
        return self.errorDescription

    def setErrorDescription(self, newErrorDescription):
        self.errorDescription = newErrorDescription

    def getErrorCode(self):
        return self.errorCode

    def setErrorCode(self, newErrorCode):
        self.errorCode = newErrorCode

    def getErrorType(self):
        return self.errorType

    def setErrorType(self, newErrorType):
        self.errorType = newErrorType


# @package Vidiun
# @subpackage Client
class VidiunBulkUpload(VidiunObjectBase):
    def __init__(self,
            id=NotImplemented,
            uploadedBy=NotImplemented,
            uploadedByUserId=NotImplemented,
            uploadedOn=NotImplemented,
            numOfEntries=NotImplemented,
            status=NotImplemented,
            logFileUrl=NotImplemented,
            csvFileUrl=NotImplemented,
            bulkFileUrl=NotImplemented,
            bulkUploadType=NotImplemented,
            results=NotImplemented,
            error=NotImplemented,
            errorType=NotImplemented,
            errorNumber=NotImplemented,
            fileName=NotImplemented,
            description=NotImplemented,
            numOfObjects=NotImplemented,
            bulkUploadObjectType=NotImplemented):
        VidiunObjectBase.__init__(self)

        # @var int
        self.id = id

        # @var string
        self.uploadedBy = uploadedBy

        # @var string
        self.uploadedByUserId = uploadedByUserId

        # @var int
        self.uploadedOn = uploadedOn

        # @var int
        self.numOfEntries = numOfEntries

        # @var VidiunBatchJobStatus
        self.status = status

        # @var string
        self.logFileUrl = logFileUrl

        # @var string
        self.csvFileUrl = csvFileUrl

        # @var string
        self.bulkFileUrl = bulkFileUrl

        # @var VidiunBulkUploadType
        self.bulkUploadType = bulkUploadType

        # @var array of VidiunBulkUploadResult
        self.results = results

        # @var string
        self.error = error

        # @var VidiunBatchJobErrorTypes
        self.errorType = errorType

        # @var int
        self.errorNumber = errorNumber

        # @var string
        self.fileName = fileName

        # @var string
        self.description = description

        # @var int
        self.numOfObjects = numOfObjects

        # @var VidiunBulkUploadObjectType
        self.bulkUploadObjectType = bulkUploadObjectType


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'uploadedBy': getXmlNodeText, 
        'uploadedByUserId': getXmlNodeText, 
        'uploadedOn': getXmlNodeInt, 
        'numOfEntries': getXmlNodeInt, 
        'status': (VidiunEnumsFactory.createInt, "VidiunBatchJobStatus"), 
        'logFileUrl': getXmlNodeText, 
        'csvFileUrl': getXmlNodeText, 
        'bulkFileUrl': getXmlNodeText, 
        'bulkUploadType': (VidiunEnumsFactory.createString, "VidiunBulkUploadType"), 
        'results': (VidiunObjectFactory.createArray, VidiunBulkUploadResult), 
        'error': getXmlNodeText, 
        'errorType': (VidiunEnumsFactory.createInt, "VidiunBatchJobErrorTypes"), 
        'errorNumber': getXmlNodeInt, 
        'fileName': getXmlNodeText, 
        'description': getXmlNodeText, 
        'numOfObjects': getXmlNodeInt, 
        'bulkUploadObjectType': (VidiunEnumsFactory.createString, "VidiunBulkUploadObjectType"), 
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunBulkUpload.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunBulkUpload")
        vparams.addIntIfDefined("id", self.id)
        vparams.addStringIfDefined("uploadedBy", self.uploadedBy)
        vparams.addStringIfDefined("uploadedByUserId", self.uploadedByUserId)
        vparams.addIntIfDefined("uploadedOn", self.uploadedOn)
        vparams.addIntIfDefined("numOfEntries", self.numOfEntries)
        vparams.addIntEnumIfDefined("status", self.status)
        vparams.addStringIfDefined("logFileUrl", self.logFileUrl)
        vparams.addStringIfDefined("csvFileUrl", self.csvFileUrl)
        vparams.addStringIfDefined("bulkFileUrl", self.bulkFileUrl)
        vparams.addStringEnumIfDefined("bulkUploadType", self.bulkUploadType)
        vparams.addArrayIfDefined("results", self.results)
        vparams.addStringIfDefined("error", self.error)
        vparams.addIntEnumIfDefined("errorType", self.errorType)
        vparams.addIntIfDefined("errorNumber", self.errorNumber)
        vparams.addStringIfDefined("fileName", self.fileName)
        vparams.addStringIfDefined("description", self.description)
        vparams.addIntIfDefined("numOfObjects", self.numOfObjects)
        vparams.addStringEnumIfDefined("bulkUploadObjectType", self.bulkUploadObjectType)
        return vparams

    def getId(self):
        return self.id

    def setId(self, newId):
        self.id = newId

    def getUploadedBy(self):
        return self.uploadedBy

    def setUploadedBy(self, newUploadedBy):
        self.uploadedBy = newUploadedBy

    def getUploadedByUserId(self):
        return self.uploadedByUserId

    def setUploadedByUserId(self, newUploadedByUserId):
        self.uploadedByUserId = newUploadedByUserId

    def getUploadedOn(self):
        return self.uploadedOn

    def setUploadedOn(self, newUploadedOn):
        self.uploadedOn = newUploadedOn

    def getNumOfEntries(self):
        return self.numOfEntries

    def setNumOfEntries(self, newNumOfEntries):
        self.numOfEntries = newNumOfEntries

    def getStatus(self):
        return self.status

    def setStatus(self, newStatus):
        self.status = newStatus

    def getLogFileUrl(self):
        return self.logFileUrl

    def setLogFileUrl(self, newLogFileUrl):
        self.logFileUrl = newLogFileUrl

    def getCsvFileUrl(self):
        return self.csvFileUrl

    def setCsvFileUrl(self, newCsvFileUrl):
        self.csvFileUrl = newCsvFileUrl

    def getBulkFileUrl(self):
        return self.bulkFileUrl

    def setBulkFileUrl(self, newBulkFileUrl):
        self.bulkFileUrl = newBulkFileUrl

    def getBulkUploadType(self):
        return self.bulkUploadType

    def setBulkUploadType(self, newBulkUploadType):
        self.bulkUploadType = newBulkUploadType

    def getResults(self):
        return self.results

    def setResults(self, newResults):
        self.results = newResults

    def getError(self):
        return self.error

    def setError(self, newError):
        self.error = newError

    def getErrorType(self):
        return self.errorType

    def setErrorType(self, newErrorType):
        self.errorType = newErrorType

    def getErrorNumber(self):
        return self.errorNumber

    def setErrorNumber(self, newErrorNumber):
        self.errorNumber = newErrorNumber

    def getFileName(self):
        return self.fileName

    def setFileName(self, newFileName):
        self.fileName = newFileName

    def getDescription(self):
        return self.description

    def setDescription(self, newDescription):
        self.description = newDescription

    def getNumOfObjects(self):
        return self.numOfObjects

    def setNumOfObjects(self, newNumOfObjects):
        self.numOfObjects = newNumOfObjects

    def getBulkUploadObjectType(self):
        return self.bulkUploadObjectType

    def setBulkUploadObjectType(self, newBulkUploadObjectType):
        self.bulkUploadObjectType = newBulkUploadObjectType


# @package Vidiun
# @subpackage Client
class VidiunBulkUploadObjectData(VidiunObjectBase):
    """This class represents object-specific data passed to the 
     bulk upload job."""

    def __init__(self):
        VidiunObjectBase.__init__(self)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunBulkUploadObjectData.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunBulkUploadObjectData")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunCEError(VidiunObjectBase):
    def __init__(self,
            id=NotImplemented,
            partnerId=NotImplemented,
            browser=NotImplemented,
            serverIp=NotImplemented,
            serverOs=NotImplemented,
            phpVersion=NotImplemented,
            ceAdminEmail=NotImplemented,
            type=NotImplemented,
            description=NotImplemented,
            data=NotImplemented):
        VidiunObjectBase.__init__(self)

        # @var string
        # @readonly
        self.id = id

        # @var int
        self.partnerId = partnerId

        # @var string
        self.browser = browser

        # @var string
        self.serverIp = serverIp

        # @var string
        self.serverOs = serverOs

        # @var string
        self.phpVersion = phpVersion

        # @var string
        self.ceAdminEmail = ceAdminEmail

        # @var string
        self.type = type

        # @var string
        self.description = description

        # @var string
        self.data = data


    PROPERTY_LOADERS = {
        'id': getXmlNodeText, 
        'partnerId': getXmlNodeInt, 
        'browser': getXmlNodeText, 
        'serverIp': getXmlNodeText, 
        'serverOs': getXmlNodeText, 
        'phpVersion': getXmlNodeText, 
        'ceAdminEmail': getXmlNodeText, 
        'type': getXmlNodeText, 
        'description': getXmlNodeText, 
        'data': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunCEError.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunCEError")
        vparams.addIntIfDefined("partnerId", self.partnerId)
        vparams.addStringIfDefined("browser", self.browser)
        vparams.addStringIfDefined("serverIp", self.serverIp)
        vparams.addStringIfDefined("serverOs", self.serverOs)
        vparams.addStringIfDefined("phpVersion", self.phpVersion)
        vparams.addStringIfDefined("ceAdminEmail", self.ceAdminEmail)
        vparams.addStringIfDefined("type", self.type)
        vparams.addStringIfDefined("description", self.description)
        vparams.addStringIfDefined("data", self.data)
        return vparams

    def getId(self):
        return self.id

    def getPartnerId(self):
        return self.partnerId

    def setPartnerId(self, newPartnerId):
        self.partnerId = newPartnerId

    def getBrowser(self):
        return self.browser

    def setBrowser(self, newBrowser):
        self.browser = newBrowser

    def getServerIp(self):
        return self.serverIp

    def setServerIp(self, newServerIp):
        self.serverIp = newServerIp

    def getServerOs(self):
        return self.serverOs

    def setServerOs(self, newServerOs):
        self.serverOs = newServerOs

    def getPhpVersion(self):
        return self.phpVersion

    def setPhpVersion(self, newPhpVersion):
        self.phpVersion = newPhpVersion

    def getCeAdminEmail(self):
        return self.ceAdminEmail

    def setCeAdminEmail(self, newCeAdminEmail):
        self.ceAdminEmail = newCeAdminEmail

    def getType(self):
        return self.type

    def setType(self, newType):
        self.type = newType

    def getDescription(self):
        return self.description

    def setDescription(self, newDescription):
        self.description = newDescription

    def getData(self):
        return self.data

    def setData(self, newData):
        self.data = newData


# @package Vidiun
# @subpackage Client
class VidiunCategory(VidiunObjectBase):
    def __init__(self,
            id=NotImplemented,
            parentId=NotImplemented,
            depth=NotImplemented,
            partnerId=NotImplemented,
            name=NotImplemented,
            fullName=NotImplemented,
            fullIds=NotImplemented,
            entriesCount=NotImplemented,
            createdAt=NotImplemented,
            updatedAt=NotImplemented,
            description=NotImplemented,
            tags=NotImplemented,
            appearInList=NotImplemented,
            privacy=NotImplemented,
            inheritanceType=NotImplemented,
            userJoinPolicy=NotImplemented,
            defaultPermissionLevel=NotImplemented,
            owner=NotImplemented,
            directEntriesCount=NotImplemented,
            referenceId=NotImplemented,
            contributionPolicy=NotImplemented,
            membersCount=NotImplemented,
            pendingMembersCount=NotImplemented,
            privacyContext=NotImplemented,
            privacyContexts=NotImplemented,
            status=NotImplemented,
            inheritedParentId=NotImplemented,
            partnerSortValue=NotImplemented,
            partnerData=NotImplemented,
            defaultOrderBy=NotImplemented,
            directSubCategoriesCount=NotImplemented,
            moderation=NotImplemented,
            pendingEntriesCount=NotImplemented,
            isAggregationCategory=NotImplemented,
            aggregationCategories=NotImplemented):
        VidiunObjectBase.__init__(self)

        # The id of the Category
        # @var int
        # @readonly
        self.id = id

        # @var int
        self.parentId = parentId

        # @var int
        # @readonly
        self.depth = depth

        # @var int
        # @readonly
        self.partnerId = partnerId

        # The name of the Category. 
        # 	 The following characters are not allowed: '<', '>', ','
        # @var string
        self.name = name

        # The full name of the Category
        # @var string
        # @readonly
        self.fullName = fullName

        # The full ids of the Category
        # @var string
        # @readonly
        self.fullIds = fullIds

        # Number of entries in this Category (including child categories)
        # @var int
        # @readonly
        self.entriesCount = entriesCount

        # Creation date as Unix timestamp (In seconds)
        # @var int
        # @readonly
        self.createdAt = createdAt

        # Update date as Unix timestamp (In seconds)
        # @var int
        # @readonly
        self.updatedAt = updatedAt

        # Category description
        # @var string
        self.description = description

        # Category tags
        # @var string
        self.tags = tags

        # If category will be returned for list action.
        # @var VidiunAppearInListType
        self.appearInList = appearInList

        # defines the privacy of the entries that assigned to this category
        # @var VidiunPrivacyType
        self.privacy = privacy

        # If Category members are inherited from parent category or set manualy.
        # @var VidiunInheritanceType
        self.inheritanceType = inheritanceType

        # Who can ask to join this category
        # @var VidiunUserJoinPolicyType
        # @readonly
        self.userJoinPolicy = userJoinPolicy

        # Default permissionLevel for new users
        # @var VidiunCategoryUserPermissionLevel
        self.defaultPermissionLevel = defaultPermissionLevel

        # Category Owner (User id)
        # @var string
        self.owner = owner

        # Number of entries that belong to this category directly
        # @var int
        # @readonly
        self.directEntriesCount = directEntriesCount

        # Category external id, controlled and managed by the partner.
        # @var string
        self.referenceId = referenceId

        # who can assign entries to this category
        # @var VidiunContributionPolicyType
        self.contributionPolicy = contributionPolicy

        # Number of active members for this category
        # @var int
        # @readonly
        self.membersCount = membersCount

        # Number of pending members for this category
        # @var int
        # @readonly
        self.pendingMembersCount = pendingMembersCount

        # Set privacy context for search entries that assiged to private and public categories. the entries will be private if the search context is set with those categories.
        # @var string
        self.privacyContext = privacyContext

        # comma separated parents that defines a privacyContext for search
        # @var string
        # @readonly
        self.privacyContexts = privacyContexts

        # Status
        # @var VidiunCategoryStatus
        # @readonly
        self.status = status

        # The category id that this category inherit its members and members permission (for contribution and join)
        # @var int
        # @readonly
        self.inheritedParentId = inheritedParentId

        # Can be used to store various partner related data as a numeric value
        # @var int
        self.partnerSortValue = partnerSortValue

        # Can be used to store various partner related data as a string
        # @var string
        self.partnerData = partnerData

        # Enable client side applications to define how to sort the category child categories
        # @var VidiunCategoryOrderBy
        self.defaultOrderBy = defaultOrderBy

        # Number of direct children categories
        # @var int
        # @readonly
        self.directSubCategoriesCount = directSubCategoriesCount

        # Moderation to add entries to this category by users that are not of permission level Manager or Moderator.
        # @var VidiunNullableBoolean
        self.moderation = moderation

        # Nunber of pending moderation entries
        # @var int
        # @readonly
        self.pendingEntriesCount = pendingEntriesCount

        # Flag indicating that the category is an aggregation category
        # @var VidiunNullableBoolean
        self.isAggregationCategory = isAggregationCategory

        # List of aggregation channels the category belongs to
        # @var string
        self.aggregationCategories = aggregationCategories


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'parentId': getXmlNodeInt, 
        'depth': getXmlNodeInt, 
        'partnerId': getXmlNodeInt, 
        'name': getXmlNodeText, 
        'fullName': getXmlNodeText, 
        'fullIds': getXmlNodeText, 
        'entriesCount': getXmlNodeInt, 
        'createdAt': getXmlNodeInt, 
        'updatedAt': getXmlNodeInt, 
        'description': getXmlNodeText, 
        'tags': getXmlNodeText, 
        'appearInList': (VidiunEnumsFactory.createInt, "VidiunAppearInListType"), 
        'privacy': (VidiunEnumsFactory.createInt, "VidiunPrivacyType"), 
        'inheritanceType': (VidiunEnumsFactory.createInt, "VidiunInheritanceType"), 
        'userJoinPolicy': (VidiunEnumsFactory.createInt, "VidiunUserJoinPolicyType"), 
        'defaultPermissionLevel': (VidiunEnumsFactory.createInt, "VidiunCategoryUserPermissionLevel"), 
        'owner': getXmlNodeText, 
        'directEntriesCount': getXmlNodeInt, 
        'referenceId': getXmlNodeText, 
        'contributionPolicy': (VidiunEnumsFactory.createInt, "VidiunContributionPolicyType"), 
        'membersCount': getXmlNodeInt, 
        'pendingMembersCount': getXmlNodeInt, 
        'privacyContext': getXmlNodeText, 
        'privacyContexts': getXmlNodeText, 
        'status': (VidiunEnumsFactory.createInt, "VidiunCategoryStatus"), 
        'inheritedParentId': getXmlNodeInt, 
        'partnerSortValue': getXmlNodeInt, 
        'partnerData': getXmlNodeText, 
        'defaultOrderBy': (VidiunEnumsFactory.createString, "VidiunCategoryOrderBy"), 
        'directSubCategoriesCount': getXmlNodeInt, 
        'moderation': (VidiunEnumsFactory.createInt, "VidiunNullableBoolean"), 
        'pendingEntriesCount': getXmlNodeInt, 
        'isAggregationCategory': (VidiunEnumsFactory.createInt, "VidiunNullableBoolean"), 
        'aggregationCategories': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunCategory.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunCategory")
        vparams.addIntIfDefined("parentId", self.parentId)
        vparams.addStringIfDefined("name", self.name)
        vparams.addStringIfDefined("description", self.description)
        vparams.addStringIfDefined("tags", self.tags)
        vparams.addIntEnumIfDefined("appearInList", self.appearInList)
        vparams.addIntEnumIfDefined("privacy", self.privacy)
        vparams.addIntEnumIfDefined("inheritanceType", self.inheritanceType)
        vparams.addIntEnumIfDefined("defaultPermissionLevel", self.defaultPermissionLevel)
        vparams.addStringIfDefined("owner", self.owner)
        vparams.addStringIfDefined("referenceId", self.referenceId)
        vparams.addIntEnumIfDefined("contributionPolicy", self.contributionPolicy)
        vparams.addStringIfDefined("privacyContext", self.privacyContext)
        vparams.addIntIfDefined("partnerSortValue", self.partnerSortValue)
        vparams.addStringIfDefined("partnerData", self.partnerData)
        vparams.addStringEnumIfDefined("defaultOrderBy", self.defaultOrderBy)
        vparams.addIntEnumIfDefined("moderation", self.moderation)
        vparams.addIntEnumIfDefined("isAggregationCategory", self.isAggregationCategory)
        vparams.addStringIfDefined("aggregationCategories", self.aggregationCategories)
        return vparams

    def getId(self):
        return self.id

    def getParentId(self):
        return self.parentId

    def setParentId(self, newParentId):
        self.parentId = newParentId

    def getDepth(self):
        return self.depth

    def getPartnerId(self):
        return self.partnerId

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName

    def getFullName(self):
        return self.fullName

    def getFullIds(self):
        return self.fullIds

    def getEntriesCount(self):
        return self.entriesCount

    def getCreatedAt(self):
        return self.createdAt

    def getUpdatedAt(self):
        return self.updatedAt

    def getDescription(self):
        return self.description

    def setDescription(self, newDescription):
        self.description = newDescription

    def getTags(self):
        return self.tags

    def setTags(self, newTags):
        self.tags = newTags

    def getAppearInList(self):
        return self.appearInList

    def setAppearInList(self, newAppearInList):
        self.appearInList = newAppearInList

    def getPrivacy(self):
        return self.privacy

    def setPrivacy(self, newPrivacy):
        self.privacy = newPrivacy

    def getInheritanceType(self):
        return self.inheritanceType

    def setInheritanceType(self, newInheritanceType):
        self.inheritanceType = newInheritanceType

    def getUserJoinPolicy(self):
        return self.userJoinPolicy

    def getDefaultPermissionLevel(self):
        return self.defaultPermissionLevel

    def setDefaultPermissionLevel(self, newDefaultPermissionLevel):
        self.defaultPermissionLevel = newDefaultPermissionLevel

    def getOwner(self):
        return self.owner

    def setOwner(self, newOwner):
        self.owner = newOwner

    def getDirectEntriesCount(self):
        return self.directEntriesCount

    def getReferenceId(self):
        return self.referenceId

    def setReferenceId(self, newReferenceId):
        self.referenceId = newReferenceId

    def getContributionPolicy(self):
        return self.contributionPolicy

    def setContributionPolicy(self, newContributionPolicy):
        self.contributionPolicy = newContributionPolicy

    def getMembersCount(self):
        return self.membersCount

    def getPendingMembersCount(self):
        return self.pendingMembersCount

    def getPrivacyContext(self):
        return self.privacyContext

    def setPrivacyContext(self, newPrivacyContext):
        self.privacyContext = newPrivacyContext

    def getPrivacyContexts(self):
        return self.privacyContexts

    def getStatus(self):
        return self.status

    def getInheritedParentId(self):
        return self.inheritedParentId

    def getPartnerSortValue(self):
        return self.partnerSortValue

    def setPartnerSortValue(self, newPartnerSortValue):
        self.partnerSortValue = newPartnerSortValue

    def getPartnerData(self):
        return self.partnerData

    def setPartnerData(self, newPartnerData):
        self.partnerData = newPartnerData

    def getDefaultOrderBy(self):
        return self.defaultOrderBy

    def setDefaultOrderBy(self, newDefaultOrderBy):
        self.defaultOrderBy = newDefaultOrderBy

    def getDirectSubCategoriesCount(self):
        return self.directSubCategoriesCount

    def getModeration(self):
        return self.moderation

    def setModeration(self, newModeration):
        self.moderation = newModeration

    def getPendingEntriesCount(self):
        return self.pendingEntriesCount

    def getIsAggregationCategory(self):
        return self.isAggregationCategory

    def setIsAggregationCategory(self, newIsAggregationCategory):
        self.isAggregationCategory = newIsAggregationCategory

    def getAggregationCategories(self):
        return self.aggregationCategories

    def setAggregationCategories(self, newAggregationCategories):
        self.aggregationCategories = newAggregationCategories


# @package Vidiun
# @subpackage Client
class VidiunCategoryEntry(VidiunObjectBase):
    def __init__(self,
            categoryId=NotImplemented,
            entryId=NotImplemented,
            createdAt=NotImplemented,
            categoryFullIds=NotImplemented,
            status=NotImplemented):
        VidiunObjectBase.__init__(self)

        # @var int
        self.categoryId = categoryId

        # entry id
        # @var string
        self.entryId = entryId

        # Creation date as Unix timestamp (In seconds)
        # @var int
        # @readonly
        self.createdAt = createdAt

        # The full ids of the Category
        # @var string
        # @readonly
        self.categoryFullIds = categoryFullIds

        # CategroyEntry status
        # @var VidiunCategoryEntryStatus
        # @readonly
        self.status = status


    PROPERTY_LOADERS = {
        'categoryId': getXmlNodeInt, 
        'entryId': getXmlNodeText, 
        'createdAt': getXmlNodeInt, 
        'categoryFullIds': getXmlNodeText, 
        'status': (VidiunEnumsFactory.createInt, "VidiunCategoryEntryStatus"), 
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunCategoryEntry.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunCategoryEntry")
        vparams.addIntIfDefined("categoryId", self.categoryId)
        vparams.addStringIfDefined("entryId", self.entryId)
        return vparams

    def getCategoryId(self):
        return self.categoryId

    def setCategoryId(self, newCategoryId):
        self.categoryId = newCategoryId

    def getEntryId(self):
        return self.entryId

    def setEntryId(self, newEntryId):
        self.entryId = newEntryId

    def getCreatedAt(self):
        return self.createdAt

    def getCategoryFullIds(self):
        return self.categoryFullIds

    def getStatus(self):
        return self.status


# @package Vidiun
# @subpackage Client
class VidiunCategoryUser(VidiunObjectBase):
    def __init__(self,
            categoryId=NotImplemented,
            userId=NotImplemented,
            partnerId=NotImplemented,
            permissionLevel=NotImplemented,
            status=NotImplemented,
            createdAt=NotImplemented,
            updatedAt=NotImplemented,
            updateMethod=NotImplemented,
            categoryFullIds=NotImplemented,
            permissionNames=NotImplemented):
        VidiunObjectBase.__init__(self)

        # @var int
        # @insertonly
        self.categoryId = categoryId

        # User id
        # @var string
        # @insertonly
        self.userId = userId

        # Partner id
        # @var int
        # @readonly
        self.partnerId = partnerId

        # Permission level
        # @var VidiunCategoryUserPermissionLevel
        self.permissionLevel = permissionLevel

        # Status
        # @var VidiunCategoryUserStatus
        # @readonly
        self.status = status

        # CategoryUser creation date as Unix timestamp (In seconds)
        # @var int
        # @readonly
        self.createdAt = createdAt

        # CategoryUser update date as Unix timestamp (In seconds)
        # @var int
        # @readonly
        self.updatedAt = updatedAt

        # Update method can be either manual or automatic to distinguish between manual operations (for example in VMC) on automatic - using bulk upload
        # @var VidiunUpdateMethodType
        self.updateMethod = updateMethod

        # The full ids of the Category
        # @var string
        # @readonly
        self.categoryFullIds = categoryFullIds

        # Set of category-related permissions for the current category user.
        # @var string
        self.permissionNames = permissionNames


    PROPERTY_LOADERS = {
        'categoryId': getXmlNodeInt, 
        'userId': getXmlNodeText, 
        'partnerId': getXmlNodeInt, 
        'permissionLevel': (VidiunEnumsFactory.createInt, "VidiunCategoryUserPermissionLevel"), 
        'status': (VidiunEnumsFactory.createInt, "VidiunCategoryUserStatus"), 
        'createdAt': getXmlNodeInt, 
        'updatedAt': getXmlNodeInt, 
        'updateMethod': (VidiunEnumsFactory.createInt, "VidiunUpdateMethodType"), 
        'categoryFullIds': getXmlNodeText, 
        'permissionNames': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunCategoryUser.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunCategoryUser")
        vparams.addIntIfDefined("categoryId", self.categoryId)
        vparams.addStringIfDefined("userId", self.userId)
        vparams.addIntEnumIfDefined("permissionLevel", self.permissionLevel)
        vparams.addIntEnumIfDefined("updateMethod", self.updateMethod)
        vparams.addStringIfDefined("permissionNames", self.permissionNames)
        return vparams

    def getCategoryId(self):
        return self.categoryId

    def setCategoryId(self, newCategoryId):
        self.categoryId = newCategoryId

    def getUserId(self):
        return self.userId

    def setUserId(self, newUserId):
        self.userId = newUserId

    def getPartnerId(self):
        return self.partnerId

    def getPermissionLevel(self):
        return self.permissionLevel

    def setPermissionLevel(self, newPermissionLevel):
        self.permissionLevel = newPermissionLevel

    def getStatus(self):
        return self.status

    def getCreatedAt(self):
        return self.createdAt

    def getUpdatedAt(self):
        return self.updatedAt

    def getUpdateMethod(self):
        return self.updateMethod

    def setUpdateMethod(self, newUpdateMethod):
        self.updateMethod = newUpdateMethod

    def getCategoryFullIds(self):
        return self.categoryFullIds

    def getPermissionNames(self):
        return self.permissionNames

    def setPermissionNames(self, newPermissionNames):
        self.permissionNames = newPermissionNames


# @package Vidiun
# @subpackage Client
class VidiunClientConfiguration(VidiunObjectBase):
    """Define client optional configurations
     /"""

    def __init__(self,
            clientTag=NotImplemented,
            apiVersion=NotImplemented):
        VidiunObjectBase.__init__(self)

        # @var string
        self.clientTag = clientTag

        # @var string
        self.apiVersion = apiVersion


    PROPERTY_LOADERS = {
        'clientTag': getXmlNodeText, 
        'apiVersion': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunClientConfiguration.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunClientConfiguration")
        vparams.addStringIfDefined("clientTag", self.clientTag)
        vparams.addStringIfDefined("apiVersion", self.apiVersion)
        return vparams

    def getClientTag(self):
        return self.clientTag

    def setClientTag(self, newClientTag):
        self.clientTag = newClientTag

    def getApiVersion(self):
        return self.apiVersion

    def setApiVersion(self, newApiVersion):
        self.apiVersion = newApiVersion


# @package Vidiun
# @subpackage Client
class VidiunClientNotification(VidiunObjectBase):
    """Client notification object to hold the notification url and the data when sending client side notifications"""

    def __init__(self,
            url=NotImplemented,
            data=NotImplemented):
        VidiunObjectBase.__init__(self)

        # The URL where the notification should be sent to
        # @var string
        self.url = url

        # The serialized notification data to send
        # @var string
        self.data = data


    PROPERTY_LOADERS = {
        'url': getXmlNodeText, 
        'data': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunClientNotification.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunClientNotification")
        vparams.addStringIfDefined("url", self.url)
        vparams.addStringIfDefined("data", self.data)
        return vparams

    def getUrl(self):
        return self.url

    def setUrl(self, newUrl):
        self.url = newUrl

    def getData(self):
        return self.data

    def setData(self, newData):
        self.data = newData


# @package Vidiun
# @subpackage Client
class VidiunContext(VidiunObjectBase):
    def __init__(self):
        VidiunObjectBase.__init__(self)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunContext.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunContext")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunContextDataResult(VidiunObjectBase):
    def __init__(self,
            messages=NotImplemented,
            actions=NotImplemented):
        VidiunObjectBase.__init__(self)

        # Array of messages as received from the rules that invalidated
        # @var array of VidiunString
        self.messages = messages

        # Array of actions as received from the rules that invalidated
        # @var array of VidiunRuleAction
        self.actions = actions


    PROPERTY_LOADERS = {
        'messages': (VidiunObjectFactory.createArray, VidiunString), 
        'actions': (VidiunObjectFactory.createArray, VidiunRuleAction), 
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunContextDataResult.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunContextDataResult")
        vparams.addArrayIfDefined("messages", self.messages)
        vparams.addArrayIfDefined("actions", self.actions)
        return vparams

    def getMessages(self):
        return self.messages

    def setMessages(self, newMessages):
        self.messages = newMessages

    def getActions(self):
        return self.actions

    def setActions(self, newActions):
        self.actions = newActions


# @package Vidiun
# @subpackage Client
class VidiunControlPanelCommand(VidiunObjectBase):
    def __init__(self,
            id=NotImplemented,
            createdAt=NotImplemented,
            createdBy=NotImplemented,
            updatedAt=NotImplemented,
            updatedBy=NotImplemented,
            createdById=NotImplemented,
            schedulerId=NotImplemented,
            workerId=NotImplemented,
            workerConfiguredId=NotImplemented,
            workerName=NotImplemented,
            batchIndex=NotImplemented,
            type=NotImplemented,
            targetType=NotImplemented,
            status=NotImplemented,
            cause=NotImplemented,
            description=NotImplemented,
            errorDescription=NotImplemented):
        VidiunObjectBase.__init__(self)

        # The id of the Category
        # @var int
        # @readonly
        self.id = id

        # Creation date as Unix timestamp (In seconds)
        # @var int
        # @readonly
        self.createdAt = createdAt

        # Creator name
        # @var string
        self.createdBy = createdBy

        # Update date as Unix timestamp (In seconds)
        # @var int
        # @readonly
        self.updatedAt = updatedAt

        # Updater name
        # @var string
        self.updatedBy = updatedBy

        # Creator id
        # @var int
        self.createdById = createdById

        # The id of the scheduler that the command refers to
        # @var int
        self.schedulerId = schedulerId

        # The id of the scheduler worker that the command refers to
        # @var int
        self.workerId = workerId

        # The id of the scheduler worker as configured in the ini file
        # @var int
        self.workerConfiguredId = workerConfiguredId

        # The name of the scheduler worker that the command refers to
        # @var int
        self.workerName = workerName

        # The index of the batch process that the command refers to
        # @var int
        self.batchIndex = batchIndex

        # The command type - stop / start / config
        # @var VidiunControlPanelCommandType
        self.type = type

        # The command target type - data center / scheduler / job / job type
        # @var VidiunControlPanelCommandTargetType
        self.targetType = targetType

        # The command status
        # @var VidiunControlPanelCommandStatus
        self.status = status

        # The reason for the command
        # @var string
        self.cause = cause

        # Command description
        # @var string
        self.description = description

        # Error description
        # @var string
        self.errorDescription = errorDescription


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'createdAt': getXmlNodeInt, 
        'createdBy': getXmlNodeText, 
        'updatedAt': getXmlNodeInt, 
        'updatedBy': getXmlNodeText, 
        'createdById': getXmlNodeInt, 
        'schedulerId': getXmlNodeInt, 
        'workerId': getXmlNodeInt, 
        'workerConfiguredId': getXmlNodeInt, 
        'workerName': getXmlNodeInt, 
        'batchIndex': getXmlNodeInt, 
        'type': (VidiunEnumsFactory.createInt, "VidiunControlPanelCommandType"), 
        'targetType': (VidiunEnumsFactory.createInt, "VidiunControlPanelCommandTargetType"), 
        'status': (VidiunEnumsFactory.createInt, "VidiunControlPanelCommandStatus"), 
        'cause': getXmlNodeText, 
        'description': getXmlNodeText, 
        'errorDescription': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunControlPanelCommand.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunControlPanelCommand")
        vparams.addStringIfDefined("createdBy", self.createdBy)
        vparams.addStringIfDefined("updatedBy", self.updatedBy)
        vparams.addIntIfDefined("createdById", self.createdById)
        vparams.addIntIfDefined("schedulerId", self.schedulerId)
        vparams.addIntIfDefined("workerId", self.workerId)
        vparams.addIntIfDefined("workerConfiguredId", self.workerConfiguredId)
        vparams.addIntIfDefined("workerName", self.workerName)
        vparams.addIntIfDefined("batchIndex", self.batchIndex)
        vparams.addIntEnumIfDefined("type", self.type)
        vparams.addIntEnumIfDefined("targetType", self.targetType)
        vparams.addIntEnumIfDefined("status", self.status)
        vparams.addStringIfDefined("cause", self.cause)
        vparams.addStringIfDefined("description", self.description)
        vparams.addStringIfDefined("errorDescription", self.errorDescription)
        return vparams

    def getId(self):
        return self.id

    def getCreatedAt(self):
        return self.createdAt

    def getCreatedBy(self):
        return self.createdBy

    def setCreatedBy(self, newCreatedBy):
        self.createdBy = newCreatedBy

    def getUpdatedAt(self):
        return self.updatedAt

    def getUpdatedBy(self):
        return self.updatedBy

    def setUpdatedBy(self, newUpdatedBy):
        self.updatedBy = newUpdatedBy

    def getCreatedById(self):
        return self.createdById

    def setCreatedById(self, newCreatedById):
        self.createdById = newCreatedById

    def getSchedulerId(self):
        return self.schedulerId

    def setSchedulerId(self, newSchedulerId):
        self.schedulerId = newSchedulerId

    def getWorkerId(self):
        return self.workerId

    def setWorkerId(self, newWorkerId):
        self.workerId = newWorkerId

    def getWorkerConfiguredId(self):
        return self.workerConfiguredId

    def setWorkerConfiguredId(self, newWorkerConfiguredId):
        self.workerConfiguredId = newWorkerConfiguredId

    def getWorkerName(self):
        return self.workerName

    def setWorkerName(self, newWorkerName):
        self.workerName = newWorkerName

    def getBatchIndex(self):
        return self.batchIndex

    def setBatchIndex(self, newBatchIndex):
        self.batchIndex = newBatchIndex

    def getType(self):
        return self.type

    def setType(self, newType):
        self.type = newType

    def getTargetType(self):
        return self.targetType

    def setTargetType(self, newTargetType):
        self.targetType = newTargetType

    def getStatus(self):
        return self.status

    def setStatus(self, newStatus):
        self.status = newStatus

    def getCause(self):
        return self.cause

    def setCause(self, newCause):
        self.cause = newCause

    def getDescription(self):
        return self.description

    def setDescription(self, newDescription):
        self.description = newDescription

    def getErrorDescription(self):
        return self.errorDescription

    def setErrorDescription(self, newErrorDescription):
        self.errorDescription = newErrorDescription


# @package Vidiun
# @subpackage Client
class VidiunConversionAttribute(VidiunObjectBase):
    def __init__(self,
            flavorParamsId=NotImplemented,
            name=NotImplemented,
            value=NotImplemented):
        VidiunObjectBase.__init__(self)

        # The id of the flavor params, set to null for source flavor
        # @var int
        self.flavorParamsId = flavorParamsId

        # Attribute name
        # @var string
        self.name = name

        # Attribute value
        # @var string
        self.value = value


    PROPERTY_LOADERS = {
        'flavorParamsId': getXmlNodeInt, 
        'name': getXmlNodeText, 
        'value': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunConversionAttribute.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunConversionAttribute")
        vparams.addIntIfDefined("flavorParamsId", self.flavorParamsId)
        vparams.addStringIfDefined("name", self.name)
        vparams.addStringIfDefined("value", self.value)
        return vparams

    def getFlavorParamsId(self):
        return self.flavorParamsId

    def setFlavorParamsId(self, newFlavorParamsId):
        self.flavorParamsId = newFlavorParamsId

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName

    def getValue(self):
        return self.value

    def setValue(self, newValue):
        self.value = newValue


# @package Vidiun
# @subpackage Client
class VidiunCropDimensions(VidiunObjectBase):
    def __init__(self,
            left=NotImplemented,
            top=NotImplemented,
            width=NotImplemented,
            height=NotImplemented):
        VidiunObjectBase.__init__(self)

        # Crop left point
        # @var int
        self.left = left

        # Crop top point
        # @var int
        self.top = top

        # Crop width
        # @var int
        self.width = width

        # Crop height
        # @var int
        self.height = height


    PROPERTY_LOADERS = {
        'left': getXmlNodeInt, 
        'top': getXmlNodeInt, 
        'width': getXmlNodeInt, 
        'height': getXmlNodeInt, 
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunCropDimensions.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunCropDimensions")
        vparams.addIntIfDefined("left", self.left)
        vparams.addIntIfDefined("top", self.top)
        vparams.addIntIfDefined("width", self.width)
        vparams.addIntIfDefined("height", self.height)
        return vparams

    def getLeft(self):
        return self.left

    def setLeft(self, newLeft):
        self.left = newLeft

    def getTop(self):
        return self.top

    def setTop(self, newTop):
        self.top = newTop

    def getWidth(self):
        return self.width

    def setWidth(self, newWidth):
        self.width = newWidth

    def getHeight(self):
        return self.height

    def setHeight(self, newHeight):
        self.height = newHeight


# @package Vidiun
# @subpackage Client
class VidiunConversionProfile(VidiunObjectBase):
    def __init__(self,
            id=NotImplemented,
            partnerId=NotImplemented,
            status=NotImplemented,
            type=NotImplemented,
            name=NotImplemented,
            systemName=NotImplemented,
            tags=NotImplemented,
            description=NotImplemented,
            defaultEntryId=NotImplemented,
            createdAt=NotImplemented,
            flavorParamsIds=NotImplemented,
            isDefault=NotImplemented,
            isPartnerDefault=NotImplemented,
            cropDimensions=NotImplemented,
            clipStart=NotImplemented,
            clipDuration=NotImplemented,
            xslTransformation=NotImplemented,
            storageProfileId=NotImplemented,
            mediaParserType=NotImplemented):
        VidiunObjectBase.__init__(self)

        # The id of the Conversion Profile
        # @var int
        # @readonly
        self.id = id

        # @var int
        # @readonly
        self.partnerId = partnerId

        # @var VidiunConversionProfileStatus
        self.status = status

        # @var VidiunConversionProfileType
        # @insertonly
        self.type = type

        # The name of the Conversion Profile
        # @var string
        self.name = name

        # System name of the Conversion Profile
        # @var string
        self.systemName = systemName

        # Comma separated tags
        # @var string
        self.tags = tags

        # The description of the Conversion Profile
        # @var string
        self.description = description

        # ID of the default entry to be used for template data
        # @var string
        self.defaultEntryId = defaultEntryId

        # Creation date as Unix timestamp (In seconds)
        # @var int
        # @readonly
        self.createdAt = createdAt

        # List of included flavor ids (comma separated)
        # @var string
        self.flavorParamsIds = flavorParamsIds

        # Indicates that this conversion profile is system default
        # @var VidiunNullableBoolean
        self.isDefault = isDefault

        # Indicates that this conversion profile is partner default
        # @var bool
        # @readonly
        self.isPartnerDefault = isPartnerDefault

        # Cropping dimensions
        # @var VidiunCropDimensions
        self.cropDimensions = cropDimensions

        # Clipping start position (in miliseconds)
        # @var int
        self.clipStart = clipStart

        # Clipping duration (in miliseconds)
        # @var int
        self.clipDuration = clipDuration

        # XSL to transform ingestion MRSS XML
        # @var string
        self.xslTransformation = xslTransformation

        # ID of default storage profile to be used for linked net-storage file syncs
        # @var int
        self.storageProfileId = storageProfileId

        # Media parser type to be used for extract media
        # @var VidiunMediaParserType
        self.mediaParserType = mediaParserType


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'partnerId': getXmlNodeInt, 
        'status': (VidiunEnumsFactory.createString, "VidiunConversionProfileStatus"), 
        'type': (VidiunEnumsFactory.createString, "VidiunConversionProfileType"), 
        'name': getXmlNodeText, 
        'systemName': getXmlNodeText, 
        'tags': getXmlNodeText, 
        'description': getXmlNodeText, 
        'defaultEntryId': getXmlNodeText, 
        'createdAt': getXmlNodeInt, 
        'flavorParamsIds': getXmlNodeText, 
        'isDefault': (VidiunEnumsFactory.createInt, "VidiunNullableBoolean"), 
        'isPartnerDefault': getXmlNodeBool, 
        'cropDimensions': (VidiunObjectFactory.create, VidiunCropDimensions), 
        'clipStart': getXmlNodeInt, 
        'clipDuration': getXmlNodeInt, 
        'xslTransformation': getXmlNodeText, 
        'storageProfileId': getXmlNodeInt, 
        'mediaParserType': (VidiunEnumsFactory.createString, "VidiunMediaParserType"), 
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunConversionProfile.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunConversionProfile")
        vparams.addStringEnumIfDefined("status", self.status)
        vparams.addStringEnumIfDefined("type", self.type)
        vparams.addStringIfDefined("name", self.name)
        vparams.addStringIfDefined("systemName", self.systemName)
        vparams.addStringIfDefined("tags", self.tags)
        vparams.addStringIfDefined("description", self.description)
        vparams.addStringIfDefined("defaultEntryId", self.defaultEntryId)
        vparams.addStringIfDefined("flavorParamsIds", self.flavorParamsIds)
        vparams.addIntEnumIfDefined("isDefault", self.isDefault)
        vparams.addObjectIfDefined("cropDimensions", self.cropDimensions)
        vparams.addIntIfDefined("clipStart", self.clipStart)
        vparams.addIntIfDefined("clipDuration", self.clipDuration)
        vparams.addStringIfDefined("xslTransformation", self.xslTransformation)
        vparams.addIntIfDefined("storageProfileId", self.storageProfileId)
        vparams.addStringEnumIfDefined("mediaParserType", self.mediaParserType)
        return vparams

    def getId(self):
        return self.id

    def getPartnerId(self):
        return self.partnerId

    def getStatus(self):
        return self.status

    def setStatus(self, newStatus):
        self.status = newStatus

    def getType(self):
        return self.type

    def setType(self, newType):
        self.type = newType

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName

    def getSystemName(self):
        return self.systemName

    def setSystemName(self, newSystemName):
        self.systemName = newSystemName

    def getTags(self):
        return self.tags

    def setTags(self, newTags):
        self.tags = newTags

    def getDescription(self):
        return self.description

    def setDescription(self, newDescription):
        self.description = newDescription

    def getDefaultEntryId(self):
        return self.defaultEntryId

    def setDefaultEntryId(self, newDefaultEntryId):
        self.defaultEntryId = newDefaultEntryId

    def getCreatedAt(self):
        return self.createdAt

    def getFlavorParamsIds(self):
        return self.flavorParamsIds

    def setFlavorParamsIds(self, newFlavorParamsIds):
        self.flavorParamsIds = newFlavorParamsIds

    def getIsDefault(self):
        return self.isDefault

    def setIsDefault(self, newIsDefault):
        self.isDefault = newIsDefault

    def getIsPartnerDefault(self):
        return self.isPartnerDefault

    def getCropDimensions(self):
        return self.cropDimensions

    def setCropDimensions(self, newCropDimensions):
        self.cropDimensions = newCropDimensions

    def getClipStart(self):
        return self.clipStart

    def setClipStart(self, newClipStart):
        self.clipStart = newClipStart

    def getClipDuration(self):
        return self.clipDuration

    def setClipDuration(self, newClipDuration):
        self.clipDuration = newClipDuration

    def getXslTransformation(self):
        return self.xslTransformation

    def setXslTransformation(self, newXslTransformation):
        self.xslTransformation = newXslTransformation

    def getStorageProfileId(self):
        return self.storageProfileId

    def setStorageProfileId(self, newStorageProfileId):
        self.storageProfileId = newStorageProfileId

    def getMediaParserType(self):
        return self.mediaParserType

    def setMediaParserType(self, newMediaParserType):
        self.mediaParserType = newMediaParserType


# @package Vidiun
# @subpackage Client
class VidiunConversionProfileAssetParams(VidiunObjectBase):
    def __init__(self,
            conversionProfileId=NotImplemented,
            assetParamsId=NotImplemented,
            readyBehavior=NotImplemented,
            origin=NotImplemented,
            systemName=NotImplemented,
            forceNoneComplied=NotImplemented,
            deletePolicy=NotImplemented,
            isEncrypted=NotImplemented,
            contentAwareness=NotImplemented,
            twoPass=NotImplemented):
        VidiunObjectBase.__init__(self)

        # The id of the conversion profile
        # @var int
        # @readonly
        self.conversionProfileId = conversionProfileId

        # The id of the asset params
        # @var int
        # @readonly
        self.assetParamsId = assetParamsId

        # The ingestion origin of the asset params
        # @var VidiunFlavorReadyBehaviorType
        self.readyBehavior = readyBehavior

        # The ingestion origin of the asset params
        # @var VidiunAssetParamsOrigin
        self.origin = origin

        # Asset params system name
        # @var string
        self.systemName = systemName

        # Starts conversion even if the decision layer reduced the configuration to comply with the source
        # @var VidiunNullableBoolean
        self.forceNoneComplied = forceNoneComplied

        # Specifies how to treat the flavor after conversion is finished
        # @var VidiunAssetParamsDeletePolicy
        self.deletePolicy = deletePolicy

        # @var VidiunNullableBoolean
        self.isEncrypted = isEncrypted

        # @var float
        self.contentAwareness = contentAwareness

        # @var VidiunNullableBoolean
        self.twoPass = twoPass


    PROPERTY_LOADERS = {
        'conversionProfileId': getXmlNodeInt, 
        'assetParamsId': getXmlNodeInt, 
        'readyBehavior': (VidiunEnumsFactory.createInt, "VidiunFlavorReadyBehaviorType"), 
        'origin': (VidiunEnumsFactory.createInt, "VidiunAssetParamsOrigin"), 
        'systemName': getXmlNodeText, 
        'forceNoneComplied': (VidiunEnumsFactory.createInt, "VidiunNullableBoolean"), 
        'deletePolicy': (VidiunEnumsFactory.createInt, "VidiunAssetParamsDeletePolicy"), 
        'isEncrypted': (VidiunEnumsFactory.createInt, "VidiunNullableBoolean"), 
        'contentAwareness': getXmlNodeFloat, 
        'twoPass': (VidiunEnumsFactory.createInt, "VidiunNullableBoolean"), 
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunConversionProfileAssetParams.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunConversionProfileAssetParams")
        vparams.addIntEnumIfDefined("readyBehavior", self.readyBehavior)
        vparams.addIntEnumIfDefined("origin", self.origin)
        vparams.addStringIfDefined("systemName", self.systemName)
        vparams.addIntEnumIfDefined("forceNoneComplied", self.forceNoneComplied)
        vparams.addIntEnumIfDefined("deletePolicy", self.deletePolicy)
        vparams.addIntEnumIfDefined("isEncrypted", self.isEncrypted)
        vparams.addFloatIfDefined("contentAwareness", self.contentAwareness)
        vparams.addIntEnumIfDefined("twoPass", self.twoPass)
        return vparams

    def getConversionProfileId(self):
        return self.conversionProfileId

    def getAssetParamsId(self):
        return self.assetParamsId

    def getReadyBehavior(self):
        return self.readyBehavior

    def setReadyBehavior(self, newReadyBehavior):
        self.readyBehavior = newReadyBehavior

    def getOrigin(self):
        return self.origin

    def setOrigin(self, newOrigin):
        self.origin = newOrigin

    def getSystemName(self):
        return self.systemName

    def setSystemName(self, newSystemName):
        self.systemName = newSystemName

    def getForceNoneComplied(self):
        return self.forceNoneComplied

    def setForceNoneComplied(self, newForceNoneComplied):
        self.forceNoneComplied = newForceNoneComplied

    def getDeletePolicy(self):
        return self.deletePolicy

    def setDeletePolicy(self, newDeletePolicy):
        self.deletePolicy = newDeletePolicy

    def getIsEncrypted(self):
        return self.isEncrypted

    def setIsEncrypted(self, newIsEncrypted):
        self.isEncrypted = newIsEncrypted

    def getContentAwareness(self):
        return self.contentAwareness

    def setContentAwareness(self, newContentAwareness):
        self.contentAwareness = newContentAwareness

    def getTwoPass(self):
        return self.twoPass

    def setTwoPass(self, newTwoPass):
        self.twoPass = newTwoPass


# @package Vidiun
# @subpackage Client
class VidiunConvertCollectionFlavorData(VidiunObjectBase):
    def __init__(self,
            flavorAssetId=NotImplemented,
            flavorParamsOutputId=NotImplemented,
            readyBehavior=NotImplemented,
            videoBitrate=NotImplemented,
            audioBitrate=NotImplemented,
            destFileSyncLocalPath=NotImplemented,
            destFileSyncRemoteUrl=NotImplemented):
        VidiunObjectBase.__init__(self)

        # @var string
        self.flavorAssetId = flavorAssetId

        # @var int
        self.flavorParamsOutputId = flavorParamsOutputId

        # @var int
        self.readyBehavior = readyBehavior

        # @var int
        self.videoBitrate = videoBitrate

        # @var int
        self.audioBitrate = audioBitrate

        # @var string
        self.destFileSyncLocalPath = destFileSyncLocalPath

        # @var string
        self.destFileSyncRemoteUrl = destFileSyncRemoteUrl


    PROPERTY_LOADERS = {
        'flavorAssetId': getXmlNodeText, 
        'flavorParamsOutputId': getXmlNodeInt, 
        'readyBehavior': getXmlNodeInt, 
        'videoBitrate': getXmlNodeInt, 
        'audioBitrate': getXmlNodeInt, 
        'destFileSyncLocalPath': getXmlNodeText, 
        'destFileSyncRemoteUrl': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunConvertCollectionFlavorData.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunConvertCollectionFlavorData")
        vparams.addStringIfDefined("flavorAssetId", self.flavorAssetId)
        vparams.addIntIfDefined("flavorParamsOutputId", self.flavorParamsOutputId)
        vparams.addIntIfDefined("readyBehavior", self.readyBehavior)
        vparams.addIntIfDefined("videoBitrate", self.videoBitrate)
        vparams.addIntIfDefined("audioBitrate", self.audioBitrate)
        vparams.addStringIfDefined("destFileSyncLocalPath", self.destFileSyncLocalPath)
        vparams.addStringIfDefined("destFileSyncRemoteUrl", self.destFileSyncRemoteUrl)
        return vparams

    def getFlavorAssetId(self):
        return self.flavorAssetId

    def setFlavorAssetId(self, newFlavorAssetId):
        self.flavorAssetId = newFlavorAssetId

    def getFlavorParamsOutputId(self):
        return self.flavorParamsOutputId

    def setFlavorParamsOutputId(self, newFlavorParamsOutputId):
        self.flavorParamsOutputId = newFlavorParamsOutputId

    def getReadyBehavior(self):
        return self.readyBehavior

    def setReadyBehavior(self, newReadyBehavior):
        self.readyBehavior = newReadyBehavior

    def getVideoBitrate(self):
        return self.videoBitrate

    def setVideoBitrate(self, newVideoBitrate):
        self.videoBitrate = newVideoBitrate

    def getAudioBitrate(self):
        return self.audioBitrate

    def setAudioBitrate(self, newAudioBitrate):
        self.audioBitrate = newAudioBitrate

    def getDestFileSyncLocalPath(self):
        return self.destFileSyncLocalPath

    def setDestFileSyncLocalPath(self, newDestFileSyncLocalPath):
        self.destFileSyncLocalPath = newDestFileSyncLocalPath

    def getDestFileSyncRemoteUrl(self):
        return self.destFileSyncRemoteUrl

    def setDestFileSyncRemoteUrl(self, newDestFileSyncRemoteUrl):
        self.destFileSyncRemoteUrl = newDestFileSyncRemoteUrl


# @package Vidiun
# @subpackage Client
class VidiunCoordinate(VidiunObjectBase):
    def __init__(self,
            latitude=NotImplemented,
            longitude=NotImplemented,
            name=NotImplemented):
        VidiunObjectBase.__init__(self)

        # @var float
        self.latitude = latitude

        # @var float
        self.longitude = longitude

        # @var string
        self.name = name


    PROPERTY_LOADERS = {
        'latitude': getXmlNodeFloat, 
        'longitude': getXmlNodeFloat, 
        'name': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunCoordinate.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunCoordinate")
        vparams.addFloatIfDefined("latitude", self.latitude)
        vparams.addFloatIfDefined("longitude", self.longitude)
        vparams.addStringIfDefined("name", self.name)
        return vparams

    def getLatitude(self):
        return self.latitude

    def setLatitude(self, newLatitude):
        self.latitude = newLatitude

    def getLongitude(self):
        return self.longitude

    def setLongitude(self, newLongitude):
        self.longitude = newLongitude

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName


# @package Vidiun
# @subpackage Client
class VidiunDataEntry(VidiunBaseEntry):
    def __init__(self,
            id=NotImplemented,
            name=NotImplemented,
            description=NotImplemented,
            partnerId=NotImplemented,
            userId=NotImplemented,
            creatorId=NotImplemented,
            tags=NotImplemented,
            adminTags=NotImplemented,
            categories=NotImplemented,
            categoriesIds=NotImplemented,
            status=NotImplemented,
            moderationStatus=NotImplemented,
            moderationCount=NotImplemented,
            type=NotImplemented,
            createdAt=NotImplemented,
            updatedAt=NotImplemented,
            rank=NotImplemented,
            totalRank=NotImplemented,
            votes=NotImplemented,
            groupId=NotImplemented,
            partnerData=NotImplemented,
            downloadUrl=NotImplemented,
            searchText=NotImplemented,
            licenseType=NotImplemented,
            version=NotImplemented,
            thumbnailUrl=NotImplemented,
            accessControlId=NotImplemented,
            startDate=NotImplemented,
            endDate=NotImplemented,
            referenceId=NotImplemented,
            replacingEntryId=NotImplemented,
            replacedEntryId=NotImplemented,
            replacementStatus=NotImplemented,
            partnerSortValue=NotImplemented,
            conversionProfileId=NotImplemented,
            redirectEntryId=NotImplemented,
            rootEntryId=NotImplemented,
            parentEntryId=NotImplemented,
            operationAttributes=NotImplemented,
            entitledUsersEdit=NotImplemented,
            entitledUsersPublish=NotImplemented,
            capabilities=NotImplemented,
            templateEntryId=NotImplemented,
            dataContent=NotImplemented,
            retrieveDataContentByGet=NotImplemented):
        VidiunBaseEntry.__init__(self,
            id,
            name,
            description,
            partnerId,
            userId,
            creatorId,
            tags,
            adminTags,
            categories,
            categoriesIds,
            status,
            moderationStatus,
            moderationCount,
            type,
            createdAt,
            updatedAt,
            rank,
            totalRank,
            votes,
            groupId,
            partnerData,
            downloadUrl,
            searchText,
            licenseType,
            version,
            thumbnailUrl,
            accessControlId,
            startDate,
            endDate,
            referenceId,
            replacingEntryId,
            replacedEntryId,
            replacementStatus,
            partnerSortValue,
            conversionProfileId,
            redirectEntryId,
            rootEntryId,
            parentEntryId,
            operationAttributes,
            entitledUsersEdit,
            entitledUsersPublish,
            capabilities,
            templateEntryId)

        # The data of the entry
        # @var string
        self.dataContent = dataContent

        # indicator whether to return the object for get action with the dataContent field.
        # @var bool
        # @insertonly
        self.retrieveDataContentByGet = retrieveDataContentByGet


    PROPERTY_LOADERS = {
        'dataContent': getXmlNodeText, 
        'retrieveDataContentByGet': getXmlNodeBool, 
    }

    def fromXml(self, node):
        VidiunBaseEntry.fromXml(self, node)
        self.fromXmlImpl(node, VidiunDataEntry.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunBaseEntry.toParams(self)
        vparams.put("objectType", "VidiunDataEntry")
        vparams.addStringIfDefined("dataContent", self.dataContent)
        vparams.addBoolIfDefined("retrieveDataContentByGet", self.retrieveDataContentByGet)
        return vparams

    def getDataContent(self):
        return self.dataContent

    def setDataContent(self, newDataContent):
        self.dataContent = newDataContent

    def getRetrieveDataContentByGet(self):
        return self.retrieveDataContentByGet

    def setRetrieveDataContentByGet(self, newRetrieveDataContentByGet):
        self.retrieveDataContentByGet = newRetrieveDataContentByGet


# @package Vidiun
# @subpackage Client
class VidiunUrlRecognizer(VidiunObjectBase):
    def __init__(self,
            hosts=NotImplemented,
            uriPrefix=NotImplemented):
        VidiunObjectBase.__init__(self)

        # The hosts that are recognized
        # @var string
        self.hosts = hosts

        # The URI prefix we use for security
        # @var string
        self.uriPrefix = uriPrefix


    PROPERTY_LOADERS = {
        'hosts': getXmlNodeText, 
        'uriPrefix': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunUrlRecognizer.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunUrlRecognizer")
        vparams.addStringIfDefined("hosts", self.hosts)
        vparams.addStringIfDefined("uriPrefix", self.uriPrefix)
        return vparams

    def getHosts(self):
        return self.hosts

    def setHosts(self, newHosts):
        self.hosts = newHosts

    def getUriPrefix(self):
        return self.uriPrefix

    def setUriPrefix(self, newUriPrefix):
        self.uriPrefix = newUriPrefix


# @package Vidiun
# @subpackage Client
class VidiunUrlTokenizer(VidiunObjectBase):
    def __init__(self,
            window=NotImplemented,
            key=NotImplemented):
        VidiunObjectBase.__init__(self)

        # Window
        # @var int
        self.window = window

        # key
        # @var string
        self.key = key


    PROPERTY_LOADERS = {
        'window': getXmlNodeInt, 
        'key': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunUrlTokenizer.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunUrlTokenizer")
        vparams.addIntIfDefined("window", self.window)
        vparams.addStringIfDefined("key", self.key)
        return vparams

    def getWindow(self):
        return self.window

    def setWindow(self, newWindow):
        self.window = newWindow

    def getKey(self):
        return self.key

    def setKey(self, newKey):
        self.key = newKey


# @package Vidiun
# @subpackage Client
class VidiunDeliveryProfile(VidiunObjectBase):
    def __init__(self,
            id=NotImplemented,
            partnerId=NotImplemented,
            name=NotImplemented,
            type=NotImplemented,
            systemName=NotImplemented,
            description=NotImplemented,
            createdAt=NotImplemented,
            updatedAt=NotImplemented,
            streamerType=NotImplemented,
            url=NotImplemented,
            hostName=NotImplemented,
            status=NotImplemented,
            recognizer=NotImplemented,
            tokenizer=NotImplemented,
            isDefault=NotImplemented,
            parentId=NotImplemented,
            mediaProtocols=NotImplemented,
            priority=NotImplemented,
            extraParams=NotImplemented):
        VidiunObjectBase.__init__(self)

        # The id of the Delivery
        # @var int
        # @readonly
        self.id = id

        # @var int
        # @readonly
        self.partnerId = partnerId

        # The name of the Delivery
        # @var string
        self.name = name

        # Delivery type
        # @var VidiunDeliveryProfileType
        self.type = type

        # System name of the delivery
        # @var string
        self.systemName = systemName

        # The description of the Delivery
        # @var string
        self.description = description

        # Creation time as Unix timestamp (In seconds)
        # @var int
        # @readonly
        self.createdAt = createdAt

        # Update time as Unix timestamp (In seconds)
        # @var int
        # @readonly
        self.updatedAt = updatedAt

        # @var VidiunPlaybackProtocol
        self.streamerType = streamerType

        # @var string
        self.url = url

        # the host part of the url
        # @var string
        # @readonly
        self.hostName = hostName

        # @var VidiunDeliveryStatus
        self.status = status

        # @var VidiunUrlRecognizer
        self.recognizer = recognizer

        # @var VidiunUrlTokenizer
        self.tokenizer = tokenizer

        # True if this is the systemwide default for the protocol
        # @var VidiunNullableBoolean
        # @readonly
        self.isDefault = isDefault

        # the object from which this object was cloned (or 0)
        # @var int
        # @readonly
        self.parentId = parentId

        # Comma separated list of supported media protocols. f.i. rtmpe
        # @var string
        self.mediaProtocols = mediaProtocols

        # priority used for ordering similar delivery profiles
        # @var int
        self.priority = priority

        # Extra query string parameters that should be added to the url
        # @var string
        self.extraParams = extraParams


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'partnerId': getXmlNodeInt, 
        'name': getXmlNodeText, 
        'type': (VidiunEnumsFactory.createString, "VidiunDeliveryProfileType"), 
        'systemName': getXmlNodeText, 
        'description': getXmlNodeText, 
        'createdAt': getXmlNodeInt, 
        'updatedAt': getXmlNodeInt, 
        'streamerType': (VidiunEnumsFactory.createString, "VidiunPlaybackProtocol"), 
        'url': getXmlNodeText, 
        'hostName': getXmlNodeText, 
        'status': (VidiunEnumsFactory.createInt, "VidiunDeliveryStatus"), 
        'recognizer': (VidiunObjectFactory.create, VidiunUrlRecognizer), 
        'tokenizer': (VidiunObjectFactory.create, VidiunUrlTokenizer), 
        'isDefault': (VidiunEnumsFactory.createInt, "VidiunNullableBoolean"), 
        'parentId': getXmlNodeInt, 
        'mediaProtocols': getXmlNodeText, 
        'priority': getXmlNodeInt, 
        'extraParams': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunDeliveryProfile.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunDeliveryProfile")
        vparams.addStringIfDefined("name", self.name)
        vparams.addStringEnumIfDefined("type", self.type)
        vparams.addStringIfDefined("systemName", self.systemName)
        vparams.addStringIfDefined("description", self.description)
        vparams.addStringEnumIfDefined("streamerType", self.streamerType)
        vparams.addStringIfDefined("url", self.url)
        vparams.addIntEnumIfDefined("status", self.status)
        vparams.addObjectIfDefined("recognizer", self.recognizer)
        vparams.addObjectIfDefined("tokenizer", self.tokenizer)
        vparams.addStringIfDefined("mediaProtocols", self.mediaProtocols)
        vparams.addIntIfDefined("priority", self.priority)
        vparams.addStringIfDefined("extraParams", self.extraParams)
        return vparams

    def getId(self):
        return self.id

    def getPartnerId(self):
        return self.partnerId

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName

    def getType(self):
        return self.type

    def setType(self, newType):
        self.type = newType

    def getSystemName(self):
        return self.systemName

    def setSystemName(self, newSystemName):
        self.systemName = newSystemName

    def getDescription(self):
        return self.description

    def setDescription(self, newDescription):
        self.description = newDescription

    def getCreatedAt(self):
        return self.createdAt

    def getUpdatedAt(self):
        return self.updatedAt

    def getStreamerType(self):
        return self.streamerType

    def setStreamerType(self, newStreamerType):
        self.streamerType = newStreamerType

    def getUrl(self):
        return self.url

    def setUrl(self, newUrl):
        self.url = newUrl

    def getHostName(self):
        return self.hostName

    def getStatus(self):
        return self.status

    def setStatus(self, newStatus):
        self.status = newStatus

    def getRecognizer(self):
        return self.recognizer

    def setRecognizer(self, newRecognizer):
        self.recognizer = newRecognizer

    def getTokenizer(self):
        return self.tokenizer

    def setTokenizer(self, newTokenizer):
        self.tokenizer = newTokenizer

    def getIsDefault(self):
        return self.isDefault

    def getParentId(self):
        return self.parentId

    def getMediaProtocols(self):
        return self.mediaProtocols

    def setMediaProtocols(self, newMediaProtocols):
        self.mediaProtocols = newMediaProtocols

    def getPriority(self):
        return self.priority

    def setPriority(self, newPriority):
        self.priority = newPriority

    def getExtraParams(self):
        return self.extraParams

    def setExtraParams(self, newExtraParams):
        self.extraParams = newExtraParams


# @package Vidiun
# @subpackage Client
class VidiunFileSyncDescriptor(VidiunObjectBase):
    def __init__(self,
            fileSyncLocalPath=NotImplemented,
            fileSyncRemoteUrl=NotImplemented,
            fileSyncObjectSubType=NotImplemented):
        VidiunObjectBase.__init__(self)

        # @var string
        self.fileSyncLocalPath = fileSyncLocalPath

        # The translated path as used by the scheduler
        # @var string
        self.fileSyncRemoteUrl = fileSyncRemoteUrl

        # @var int
        self.fileSyncObjectSubType = fileSyncObjectSubType


    PROPERTY_LOADERS = {
        'fileSyncLocalPath': getXmlNodeText, 
        'fileSyncRemoteUrl': getXmlNodeText, 
        'fileSyncObjectSubType': getXmlNodeInt, 
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunFileSyncDescriptor.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunFileSyncDescriptor")
        vparams.addStringIfDefined("fileSyncLocalPath", self.fileSyncLocalPath)
        vparams.addStringIfDefined("fileSyncRemoteUrl", self.fileSyncRemoteUrl)
        vparams.addIntIfDefined("fileSyncObjectSubType", self.fileSyncObjectSubType)
        return vparams

    def getFileSyncLocalPath(self):
        return self.fileSyncLocalPath

    def setFileSyncLocalPath(self, newFileSyncLocalPath):
        self.fileSyncLocalPath = newFileSyncLocalPath

    def getFileSyncRemoteUrl(self):
        return self.fileSyncRemoteUrl

    def setFileSyncRemoteUrl(self, newFileSyncRemoteUrl):
        self.fileSyncRemoteUrl = newFileSyncRemoteUrl

    def getFileSyncObjectSubType(self):
        return self.fileSyncObjectSubType

    def setFileSyncObjectSubType(self, newFileSyncObjectSubType):
        self.fileSyncObjectSubType = newFileSyncObjectSubType


# @package Vidiun
# @subpackage Client
class VidiunDestFileSyncDescriptor(VidiunFileSyncDescriptor):
    def __init__(self,
            fileSyncLocalPath=NotImplemented,
            fileSyncRemoteUrl=NotImplemented,
            fileSyncObjectSubType=NotImplemented):
        VidiunFileSyncDescriptor.__init__(self,
            fileSyncLocalPath,
            fileSyncRemoteUrl,
            fileSyncObjectSubType)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunFileSyncDescriptor.fromXml(self, node)
        self.fromXmlImpl(node, VidiunDestFileSyncDescriptor.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunFileSyncDescriptor.toParams(self)
        vparams.put("objectType", "VidiunDestFileSyncDescriptor")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunSearchItem(VidiunObjectBase):
    def __init__(self):
        VidiunObjectBase.__init__(self)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunSearchItem.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunSearchItem")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunFilter(VidiunObjectBase):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented):
        VidiunObjectBase.__init__(self)

        # @var string
        self.orderBy = orderBy

        # @var VidiunSearchItem
        self.advancedSearch = advancedSearch


    PROPERTY_LOADERS = {
        'orderBy': getXmlNodeText, 
        'advancedSearch': (VidiunObjectFactory.create, VidiunSearchItem), 
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunFilter")
        vparams.addStringIfDefined("orderBy", self.orderBy)
        vparams.addObjectIfDefined("advancedSearch", self.advancedSearch)
        return vparams

    def getOrderBy(self):
        return self.orderBy

    def setOrderBy(self, newOrderBy):
        self.orderBy = newOrderBy

    def getAdvancedSearch(self):
        return self.advancedSearch

    def setAdvancedSearch(self, newAdvancedSearch):
        self.advancedSearch = newAdvancedSearch


# @package Vidiun
# @subpackage Client
class VidiunRelatedFilter(VidiunFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented):
        VidiunFilter.__init__(self,
            orderBy,
            advancedSearch)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunRelatedFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunFilter.toParams(self)
        vparams.put("objectType", "VidiunRelatedFilter")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunFilterPager(VidiunObjectBase):
    """The VidiunFilterPager object enables paging management to be applied upon service list actions."""

    def __init__(self,
            pageSize=NotImplemented,
            pageIndex=NotImplemented):
        VidiunObjectBase.__init__(self)

        # The number of objects to retrieve. (Default is 30, maximum page size is 500).
        # @var int
        self.pageSize = pageSize

        # The page number for which {pageSize} of objects should be retrieved (Default is 1).
        # @var int
        self.pageIndex = pageIndex


    PROPERTY_LOADERS = {
        'pageSize': getXmlNodeInt, 
        'pageIndex': getXmlNodeInt, 
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunFilterPager.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunFilterPager")
        vparams.addIntIfDefined("pageSize", self.pageSize)
        vparams.addIntIfDefined("pageIndex", self.pageIndex)
        return vparams

    def getPageSize(self):
        return self.pageSize

    def setPageSize(self, newPageSize):
        self.pageSize = newPageSize

    def getPageIndex(self):
        return self.pageIndex

    def setPageIndex(self, newPageIndex):
        self.pageIndex = newPageIndex


# @package Vidiun
# @subpackage Client
class VidiunResponseProfileMapping(VidiunObjectBase):
    def __init__(self,
            parentProperty=NotImplemented,
            filterProperty=NotImplemented,
            allowNull=NotImplemented):
        VidiunObjectBase.__init__(self)

        # @var string
        self.parentProperty = parentProperty

        # @var string
        self.filterProperty = filterProperty

        # @var bool
        self.allowNull = allowNull


    PROPERTY_LOADERS = {
        'parentProperty': getXmlNodeText, 
        'filterProperty': getXmlNodeText, 
        'allowNull': getXmlNodeBool, 
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunResponseProfileMapping.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunResponseProfileMapping")
        vparams.addStringIfDefined("parentProperty", self.parentProperty)
        vparams.addStringIfDefined("filterProperty", self.filterProperty)
        vparams.addBoolIfDefined("allowNull", self.allowNull)
        return vparams

    def getParentProperty(self):
        return self.parentProperty

    def setParentProperty(self, newParentProperty):
        self.parentProperty = newParentProperty

    def getFilterProperty(self):
        return self.filterProperty

    def setFilterProperty(self, newFilterProperty):
        self.filterProperty = newFilterProperty

    def getAllowNull(self):
        return self.allowNull

    def setAllowNull(self, newAllowNull):
        self.allowNull = newAllowNull


# @package Vidiun
# @subpackage Client
class VidiunDetachedResponseProfile(VidiunBaseResponseProfile):
    def __init__(self,
            name=NotImplemented,
            type=NotImplemented,
            fields=NotImplemented,
            filter=NotImplemented,
            pager=NotImplemented,
            relatedProfiles=NotImplemented,
            mappings=NotImplemented):
        VidiunBaseResponseProfile.__init__(self)

        # Friendly name
        # @var string
        self.name = name

        # @var VidiunResponseProfileType
        self.type = type

        # Comma separated fields list to be included or excluded
        # @var string
        self.fields = fields

        # @var VidiunRelatedFilter
        self.filter = filter

        # @var VidiunFilterPager
        self.pager = pager

        # @var array of VidiunDetachedResponseProfile
        self.relatedProfiles = relatedProfiles

        # @var array of VidiunResponseProfileMapping
        self.mappings = mappings


    PROPERTY_LOADERS = {
        'name': getXmlNodeText, 
        'type': (VidiunEnumsFactory.createInt, "VidiunResponseProfileType"), 
        'fields': getXmlNodeText, 
        'filter': (VidiunObjectFactory.create, VidiunRelatedFilter), 
        'pager': (VidiunObjectFactory.create, VidiunFilterPager), 
        'relatedProfiles': (VidiunObjectFactory.createArray, VidiunObjectBase), 
        'mappings': (VidiunObjectFactory.createArray, VidiunResponseProfileMapping), 
    }

    def fromXml(self, node):
        VidiunBaseResponseProfile.fromXml(self, node)
        self.fromXmlImpl(node, VidiunDetachedResponseProfile.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunBaseResponseProfile.toParams(self)
        vparams.put("objectType", "VidiunDetachedResponseProfile")
        vparams.addStringIfDefined("name", self.name)
        vparams.addIntEnumIfDefined("type", self.type)
        vparams.addStringIfDefined("fields", self.fields)
        vparams.addObjectIfDefined("filter", self.filter)
        vparams.addObjectIfDefined("pager", self.pager)
        vparams.addArrayIfDefined("relatedProfiles", self.relatedProfiles)
        vparams.addArrayIfDefined("mappings", self.mappings)
        return vparams

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName

    def getType(self):
        return self.type

    def setType(self, newType):
        self.type = newType

    def getFields(self):
        return self.fields

    def setFields(self, newFields):
        self.fields = newFields

    def getFilter(self):
        return self.filter

    def setFilter(self, newFilter):
        self.filter = newFilter

    def getPager(self):
        return self.pager

    def setPager(self, newPager):
        self.pager = newPager

    def getRelatedProfiles(self):
        return self.relatedProfiles

    def setRelatedProfiles(self, newRelatedProfiles):
        self.relatedProfiles = newRelatedProfiles

    def getMappings(self):
        return self.mappings

    def setMappings(self, newMappings):
        self.mappings = newMappings


# @package Vidiun
# @subpackage Client
class VidiunEmailIngestionProfile(VidiunObjectBase):
    def __init__(self,
            id=NotImplemented,
            name=NotImplemented,
            description=NotImplemented,
            emailAddress=NotImplemented,
            mailboxId=NotImplemented,
            partnerId=NotImplemented,
            conversionProfile2Id=NotImplemented,
            moderationStatus=NotImplemented,
            status=NotImplemented,
            createdAt=NotImplemented,
            defaultCategory=NotImplemented,
            defaultUserId=NotImplemented,
            defaultTags=NotImplemented,
            defaultAdminTags=NotImplemented,
            maxAttachmentSizeKbytes=NotImplemented,
            maxAttachmentsPerMail=NotImplemented):
        VidiunObjectBase.__init__(self)

        # @var int
        # @readonly
        self.id = id

        # @var string
        self.name = name

        # @var string
        self.description = description

        # @var string
        self.emailAddress = emailAddress

        # @var string
        self.mailboxId = mailboxId

        # @var int
        # @readonly
        self.partnerId = partnerId

        # @var int
        self.conversionProfile2Id = conversionProfile2Id

        # @var VidiunEntryModerationStatus
        self.moderationStatus = moderationStatus

        # @var VidiunEmailIngestionProfileStatus
        # @readonly
        self.status = status

        # @var string
        # @readonly
        self.createdAt = createdAt

        # @var string
        self.defaultCategory = defaultCategory

        # @var string
        self.defaultUserId = defaultUserId

        # @var string
        self.defaultTags = defaultTags

        # @var string
        self.defaultAdminTags = defaultAdminTags

        # @var int
        self.maxAttachmentSizeKbytes = maxAttachmentSizeKbytes

        # @var int
        self.maxAttachmentsPerMail = maxAttachmentsPerMail


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'name': getXmlNodeText, 
        'description': getXmlNodeText, 
        'emailAddress': getXmlNodeText, 
        'mailboxId': getXmlNodeText, 
        'partnerId': getXmlNodeInt, 
        'conversionProfile2Id': getXmlNodeInt, 
        'moderationStatus': (VidiunEnumsFactory.createInt, "VidiunEntryModerationStatus"), 
        'status': (VidiunEnumsFactory.createInt, "VidiunEmailIngestionProfileStatus"), 
        'createdAt': getXmlNodeText, 
        'defaultCategory': getXmlNodeText, 
        'defaultUserId': getXmlNodeText, 
        'defaultTags': getXmlNodeText, 
        'defaultAdminTags': getXmlNodeText, 
        'maxAttachmentSizeKbytes': getXmlNodeInt, 
        'maxAttachmentsPerMail': getXmlNodeInt, 
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunEmailIngestionProfile.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunEmailIngestionProfile")
        vparams.addStringIfDefined("name", self.name)
        vparams.addStringIfDefined("description", self.description)
        vparams.addStringIfDefined("emailAddress", self.emailAddress)
        vparams.addStringIfDefined("mailboxId", self.mailboxId)
        vparams.addIntIfDefined("conversionProfile2Id", self.conversionProfile2Id)
        vparams.addIntEnumIfDefined("moderationStatus", self.moderationStatus)
        vparams.addStringIfDefined("defaultCategory", self.defaultCategory)
        vparams.addStringIfDefined("defaultUserId", self.defaultUserId)
        vparams.addStringIfDefined("defaultTags", self.defaultTags)
        vparams.addStringIfDefined("defaultAdminTags", self.defaultAdminTags)
        vparams.addIntIfDefined("maxAttachmentSizeKbytes", self.maxAttachmentSizeKbytes)
        vparams.addIntIfDefined("maxAttachmentsPerMail", self.maxAttachmentsPerMail)
        return vparams

    def getId(self):
        return self.id

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName

    def getDescription(self):
        return self.description

    def setDescription(self, newDescription):
        self.description = newDescription

    def getEmailAddress(self):
        return self.emailAddress

    def setEmailAddress(self, newEmailAddress):
        self.emailAddress = newEmailAddress

    def getMailboxId(self):
        return self.mailboxId

    def setMailboxId(self, newMailboxId):
        self.mailboxId = newMailboxId

    def getPartnerId(self):
        return self.partnerId

    def getConversionProfile2Id(self):
        return self.conversionProfile2Id

    def setConversionProfile2Id(self, newConversionProfile2Id):
        self.conversionProfile2Id = newConversionProfile2Id

    def getModerationStatus(self):
        return self.moderationStatus

    def setModerationStatus(self, newModerationStatus):
        self.moderationStatus = newModerationStatus

    def getStatus(self):
        return self.status

    def getCreatedAt(self):
        return self.createdAt

    def getDefaultCategory(self):
        return self.defaultCategory

    def setDefaultCategory(self, newDefaultCategory):
        self.defaultCategory = newDefaultCategory

    def getDefaultUserId(self):
        return self.defaultUserId

    def setDefaultUserId(self, newDefaultUserId):
        self.defaultUserId = newDefaultUserId

    def getDefaultTags(self):
        return self.defaultTags

    def setDefaultTags(self, newDefaultTags):
        self.defaultTags = newDefaultTags

    def getDefaultAdminTags(self):
        return self.defaultAdminTags

    def setDefaultAdminTags(self, newDefaultAdminTags):
        self.defaultAdminTags = newDefaultAdminTags

    def getMaxAttachmentSizeKbytes(self):
        return self.maxAttachmentSizeKbytes

    def setMaxAttachmentSizeKbytes(self, newMaxAttachmentSizeKbytes):
        self.maxAttachmentSizeKbytes = newMaxAttachmentSizeKbytes

    def getMaxAttachmentsPerMail(self):
        return self.maxAttachmentsPerMail

    def setMaxAttachmentsPerMail(self, newMaxAttachmentsPerMail):
        self.maxAttachmentsPerMail = newMaxAttachmentsPerMail


# @package Vidiun
# @subpackage Client
class VidiunStringValue(VidiunValue):
    """A string representation to return an array of strings"""

    def __init__(self,
            description=NotImplemented,
            value=NotImplemented):
        VidiunValue.__init__(self,
            description)

        # @var string
        self.value = value


    PROPERTY_LOADERS = {
        'value': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunValue.fromXml(self, node)
        self.fromXmlImpl(node, VidiunStringValue.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunValue.toParams(self)
        vparams.put("objectType", "VidiunStringValue")
        vparams.addStringIfDefined("value", self.value)
        return vparams

    def getValue(self):
        return self.value

    def setValue(self, newValue):
        self.value = newValue


# @package Vidiun
# @subpackage Client
class VidiunEntryReplacementOptions(VidiunObjectBase):
    """Advanced configuration for entry replacement process"""

    def __init__(self,
            keepManualThumbnails=NotImplemented):
        VidiunObjectBase.__init__(self)

        # If true manually created thumbnails will not be deleted on entry replacement
        # @var int
        self.keepManualThumbnails = keepManualThumbnails


    PROPERTY_LOADERS = {
        'keepManualThumbnails': getXmlNodeInt, 
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunEntryReplacementOptions.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunEntryReplacementOptions")
        vparams.addIntIfDefined("keepManualThumbnails", self.keepManualThumbnails)
        return vparams

    def getKeepManualThumbnails(self):
        return self.keepManualThumbnails

    def setKeepManualThumbnails(self, newKeepManualThumbnails):
        self.keepManualThumbnails = newKeepManualThumbnails


# @package Vidiun
# @subpackage Client
class VidiunEntryServerNode(VidiunObjectBase):
    def __init__(self,
            id=NotImplemented,
            entryId=NotImplemented,
            serverNodeId=NotImplemented,
            partnerId=NotImplemented,
            createdAt=NotImplemented,
            updatedAt=NotImplemented,
            status=NotImplemented,
            serverType=NotImplemented):
        VidiunObjectBase.__init__(self)

        # unique auto-generated identifier
        # @var int
        # @readonly
        self.id = id

        # @var string
        # @readonly
        self.entryId = entryId

        # @var int
        # @readonly
        self.serverNodeId = serverNodeId

        # @var int
        # @readonly
        self.partnerId = partnerId

        # @var int
        # @readonly
        self.createdAt = createdAt

        # @var int
        # @readonly
        self.updatedAt = updatedAt

        # @var VidiunEntryServerNodeStatus
        # @readonly
        self.status = status

        # @var VidiunEntryServerNodeType
        # @readonly
        self.serverType = serverType


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'entryId': getXmlNodeText, 
        'serverNodeId': getXmlNodeInt, 
        'partnerId': getXmlNodeInt, 
        'createdAt': getXmlNodeInt, 
        'updatedAt': getXmlNodeInt, 
        'status': (VidiunEnumsFactory.createInt, "VidiunEntryServerNodeStatus"), 
        'serverType': (VidiunEnumsFactory.createString, "VidiunEntryServerNodeType"), 
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunEntryServerNode.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunEntryServerNode")
        return vparams

    def getId(self):
        return self.id

    def getEntryId(self):
        return self.entryId

    def getServerNodeId(self):
        return self.serverNodeId

    def getPartnerId(self):
        return self.partnerId

    def getCreatedAt(self):
        return self.createdAt

    def getUpdatedAt(self):
        return self.updatedAt

    def getStatus(self):
        return self.status

    def getServerType(self):
        return self.serverType


# @package Vidiun
# @subpackage Client
class VidiunObjectIdentifier(VidiunObjectBase):
    """Configuration for extended item in the Vidiun MRSS feeds"""

    def __init__(self,
            extendedFeatures=NotImplemented):
        VidiunObjectBase.__init__(self)

        # Comma separated string of enum values denoting which features of the item need to be included in the MRSS
        # @var string
        self.extendedFeatures = extendedFeatures


    PROPERTY_LOADERS = {
        'extendedFeatures': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunObjectIdentifier.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunObjectIdentifier")
        vparams.addStringIfDefined("extendedFeatures", self.extendedFeatures)
        return vparams

    def getExtendedFeatures(self):
        return self.extendedFeatures

    def setExtendedFeatures(self, newExtendedFeatures):
        self.extendedFeatures = newExtendedFeatures


# @package Vidiun
# @subpackage Client
class VidiunExtendingItemMrssParameter(VidiunObjectBase):
    def __init__(self,
            xpath=NotImplemented,
            identifier=NotImplemented,
            extensionMode=NotImplemented):
        VidiunObjectBase.__init__(self)

        # XPath for the extending item
        # @var string
        self.xpath = xpath

        # Object identifier
        # @var VidiunObjectIdentifier
        self.identifier = identifier

        # Mode of extension - append to MRSS or replace the xpath content.
        # @var VidiunMrssExtensionMode
        self.extensionMode = extensionMode


    PROPERTY_LOADERS = {
        'xpath': getXmlNodeText, 
        'identifier': (VidiunObjectFactory.create, VidiunObjectIdentifier), 
        'extensionMode': (VidiunEnumsFactory.createInt, "VidiunMrssExtensionMode"), 
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunExtendingItemMrssParameter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunExtendingItemMrssParameter")
        vparams.addStringIfDefined("xpath", self.xpath)
        vparams.addObjectIfDefined("identifier", self.identifier)
        vparams.addIntEnumIfDefined("extensionMode", self.extensionMode)
        return vparams

    def getXpath(self):
        return self.xpath

    def setXpath(self, newXpath):
        self.xpath = newXpath

    def getIdentifier(self):
        return self.identifier

    def setIdentifier(self, newIdentifier):
        self.identifier = newIdentifier

    def getExtensionMode(self):
        return self.extensionMode

    def setExtensionMode(self, newExtensionMode):
        self.extensionMode = newExtensionMode


# @package Vidiun
# @subpackage Client
class VidiunPlayableEntry(VidiunBaseEntry):
    def __init__(self,
            id=NotImplemented,
            name=NotImplemented,
            description=NotImplemented,
            partnerId=NotImplemented,
            userId=NotImplemented,
            creatorId=NotImplemented,
            tags=NotImplemented,
            adminTags=NotImplemented,
            categories=NotImplemented,
            categoriesIds=NotImplemented,
            status=NotImplemented,
            moderationStatus=NotImplemented,
            moderationCount=NotImplemented,
            type=NotImplemented,
            createdAt=NotImplemented,
            updatedAt=NotImplemented,
            rank=NotImplemented,
            totalRank=NotImplemented,
            votes=NotImplemented,
            groupId=NotImplemented,
            partnerData=NotImplemented,
            downloadUrl=NotImplemented,
            searchText=NotImplemented,
            licenseType=NotImplemented,
            version=NotImplemented,
            thumbnailUrl=NotImplemented,
            accessControlId=NotImplemented,
            startDate=NotImplemented,
            endDate=NotImplemented,
            referenceId=NotImplemented,
            replacingEntryId=NotImplemented,
            replacedEntryId=NotImplemented,
            replacementStatus=NotImplemented,
            partnerSortValue=NotImplemented,
            conversionProfileId=NotImplemented,
            redirectEntryId=NotImplemented,
            rootEntryId=NotImplemented,
            parentEntryId=NotImplemented,
            operationAttributes=NotImplemented,
            entitledUsersEdit=NotImplemented,
            entitledUsersPublish=NotImplemented,
            capabilities=NotImplemented,
            templateEntryId=NotImplemented,
            plays=NotImplemented,
            views=NotImplemented,
            lastPlayedAt=NotImplemented,
            width=NotImplemented,
            height=NotImplemented,
            duration=NotImplemented,
            msDuration=NotImplemented,
            durationType=NotImplemented):
        VidiunBaseEntry.__init__(self,
            id,
            name,
            description,
            partnerId,
            userId,
            creatorId,
            tags,
            adminTags,
            categories,
            categoriesIds,
            status,
            moderationStatus,
            moderationCount,
            type,
            createdAt,
            updatedAt,
            rank,
            totalRank,
            votes,
            groupId,
            partnerData,
            downloadUrl,
            searchText,
            licenseType,
            version,
            thumbnailUrl,
            accessControlId,
            startDate,
            endDate,
            referenceId,
            replacingEntryId,
            replacedEntryId,
            replacementStatus,
            partnerSortValue,
            conversionProfileId,
            redirectEntryId,
            rootEntryId,
            parentEntryId,
            operationAttributes,
            entitledUsersEdit,
            entitledUsersPublish,
            capabilities,
            templateEntryId)

        # Number of plays
        # @var int
        # @readonly
        self.plays = plays

        # Number of views
        # @var int
        # @readonly
        self.views = views

        # The last time the entry was played
        # @var int
        # @readonly
        self.lastPlayedAt = lastPlayedAt

        # The width in pixels
        # @var int
        # @readonly
        self.width = width

        # The height in pixels
        # @var int
        # @readonly
        self.height = height

        # The duration in seconds
        # @var int
        # @readonly
        self.duration = duration

        # The duration in miliseconds
        # @var int
        self.msDuration = msDuration

        # The duration type (short for 0-4 mins, medium for 4-20 mins, long for 20+ mins)
        # @var VidiunDurationType
        # @readonly
        self.durationType = durationType


    PROPERTY_LOADERS = {
        'plays': getXmlNodeInt, 
        'views': getXmlNodeInt, 
        'lastPlayedAt': getXmlNodeInt, 
        'width': getXmlNodeInt, 
        'height': getXmlNodeInt, 
        'duration': getXmlNodeInt, 
        'msDuration': getXmlNodeInt, 
        'durationType': (VidiunEnumsFactory.createString, "VidiunDurationType"), 
    }

    def fromXml(self, node):
        VidiunBaseEntry.fromXml(self, node)
        self.fromXmlImpl(node, VidiunPlayableEntry.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunBaseEntry.toParams(self)
        vparams.put("objectType", "VidiunPlayableEntry")
        vparams.addIntIfDefined("msDuration", self.msDuration)
        return vparams

    def getPlays(self):
        return self.plays

    def getViews(self):
        return self.views

    def getLastPlayedAt(self):
        return self.lastPlayedAt

    def getWidth(self):
        return self.width

    def getHeight(self):
        return self.height

    def getDuration(self):
        return self.duration

    def getMsDuration(self):
        return self.msDuration

    def setMsDuration(self, newMsDuration):
        self.msDuration = newMsDuration

    def getDurationType(self):
        return self.durationType


# @package Vidiun
# @subpackage Client
class VidiunMediaEntry(VidiunPlayableEntry):
    def __init__(self,
            id=NotImplemented,
            name=NotImplemented,
            description=NotImplemented,
            partnerId=NotImplemented,
            userId=NotImplemented,
            creatorId=NotImplemented,
            tags=NotImplemented,
            adminTags=NotImplemented,
            categories=NotImplemented,
            categoriesIds=NotImplemented,
            status=NotImplemented,
            moderationStatus=NotImplemented,
            moderationCount=NotImplemented,
            type=NotImplemented,
            createdAt=NotImplemented,
            updatedAt=NotImplemented,
            rank=NotImplemented,
            totalRank=NotImplemented,
            votes=NotImplemented,
            groupId=NotImplemented,
            partnerData=NotImplemented,
            downloadUrl=NotImplemented,
            searchText=NotImplemented,
            licenseType=NotImplemented,
            version=NotImplemented,
            thumbnailUrl=NotImplemented,
            accessControlId=NotImplemented,
            startDate=NotImplemented,
            endDate=NotImplemented,
            referenceId=NotImplemented,
            replacingEntryId=NotImplemented,
            replacedEntryId=NotImplemented,
            replacementStatus=NotImplemented,
            partnerSortValue=NotImplemented,
            conversionProfileId=NotImplemented,
            redirectEntryId=NotImplemented,
            rootEntryId=NotImplemented,
            parentEntryId=NotImplemented,
            operationAttributes=NotImplemented,
            entitledUsersEdit=NotImplemented,
            entitledUsersPublish=NotImplemented,
            capabilities=NotImplemented,
            templateEntryId=NotImplemented,
            plays=NotImplemented,
            views=NotImplemented,
            lastPlayedAt=NotImplemented,
            width=NotImplemented,
            height=NotImplemented,
            duration=NotImplemented,
            msDuration=NotImplemented,
            durationType=NotImplemented,
            mediaType=NotImplemented,
            conversionQuality=NotImplemented,
            sourceType=NotImplemented,
            searchProviderType=NotImplemented,
            searchProviderId=NotImplemented,
            creditUserName=NotImplemented,
            creditUrl=NotImplemented,
            mediaDate=NotImplemented,
            dataUrl=NotImplemented,
            flavorParamsIds=NotImplemented,
            isTrimDisabled=NotImplemented):
        VidiunPlayableEntry.__init__(self,
            id,
            name,
            description,
            partnerId,
            userId,
            creatorId,
            tags,
            adminTags,
            categories,
            categoriesIds,
            status,
            moderationStatus,
            moderationCount,
            type,
            createdAt,
            updatedAt,
            rank,
            totalRank,
            votes,
            groupId,
            partnerData,
            downloadUrl,
            searchText,
            licenseType,
            version,
            thumbnailUrl,
            accessControlId,
            startDate,
            endDate,
            referenceId,
            replacingEntryId,
            replacedEntryId,
            replacementStatus,
            partnerSortValue,
            conversionProfileId,
            redirectEntryId,
            rootEntryId,
            parentEntryId,
            operationAttributes,
            entitledUsersEdit,
            entitledUsersPublish,
            capabilities,
            templateEntryId,
            plays,
            views,
            lastPlayedAt,
            width,
            height,
            duration,
            msDuration,
            durationType)

        # The media type of the entry
        # @var VidiunMediaType
        # @insertonly
        self.mediaType = mediaType

        # Override the default conversion quality
        # @var string
        # @insertonly
        self.conversionQuality = conversionQuality

        # The source type of the entry
        # @var VidiunSourceType
        # @insertonly
        self.sourceType = sourceType

        # The search provider type used to import this entry
        # @var VidiunSearchProviderType
        # @insertonly
        self.searchProviderType = searchProviderType

        # The ID of the media in the importing site
        # @var string
        # @insertonly
        self.searchProviderId = searchProviderId

        # The user name used for credits
        # @var string
        self.creditUserName = creditUserName

        # The URL for credits
        # @var string
        self.creditUrl = creditUrl

        # The media date extracted from EXIF data (For images) as Unix timestamp (In seconds)
        # @var int
        # @readonly
        self.mediaDate = mediaDate

        # The URL used for playback. This is not the download URL.
        # @var string
        # @readonly
        self.dataUrl = dataUrl

        # Comma separated flavor params ids that exists for this media entry
        # @var string
        # @readonly
        self.flavorParamsIds = flavorParamsIds

        # True if trim action is disabled for this entry
        # @var VidiunNullableBoolean
        # @readonly
        self.isTrimDisabled = isTrimDisabled


    PROPERTY_LOADERS = {
        'mediaType': (VidiunEnumsFactory.createInt, "VidiunMediaType"), 
        'conversionQuality': getXmlNodeText, 
        'sourceType': (VidiunEnumsFactory.createString, "VidiunSourceType"), 
        'searchProviderType': (VidiunEnumsFactory.createInt, "VidiunSearchProviderType"), 
        'searchProviderId': getXmlNodeText, 
        'creditUserName': getXmlNodeText, 
        'creditUrl': getXmlNodeText, 
        'mediaDate': getXmlNodeInt, 
        'dataUrl': getXmlNodeText, 
        'flavorParamsIds': getXmlNodeText, 
        'isTrimDisabled': (VidiunEnumsFactory.createInt, "VidiunNullableBoolean"), 
    }

    def fromXml(self, node):
        VidiunPlayableEntry.fromXml(self, node)
        self.fromXmlImpl(node, VidiunMediaEntry.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunPlayableEntry.toParams(self)
        vparams.put("objectType", "VidiunMediaEntry")
        vparams.addIntEnumIfDefined("mediaType", self.mediaType)
        vparams.addStringIfDefined("conversionQuality", self.conversionQuality)
        vparams.addStringEnumIfDefined("sourceType", self.sourceType)
        vparams.addIntEnumIfDefined("searchProviderType", self.searchProviderType)
        vparams.addStringIfDefined("searchProviderId", self.searchProviderId)
        vparams.addStringIfDefined("creditUserName", self.creditUserName)
        vparams.addStringIfDefined("creditUrl", self.creditUrl)
        return vparams

    def getMediaType(self):
        return self.mediaType

    def setMediaType(self, newMediaType):
        self.mediaType = newMediaType

    def getConversionQuality(self):
        return self.conversionQuality

    def setConversionQuality(self, newConversionQuality):
        self.conversionQuality = newConversionQuality

    def getSourceType(self):
        return self.sourceType

    def setSourceType(self, newSourceType):
        self.sourceType = newSourceType

    def getSearchProviderType(self):
        return self.searchProviderType

    def setSearchProviderType(self, newSearchProviderType):
        self.searchProviderType = newSearchProviderType

    def getSearchProviderId(self):
        return self.searchProviderId

    def setSearchProviderId(self, newSearchProviderId):
        self.searchProviderId = newSearchProviderId

    def getCreditUserName(self):
        return self.creditUserName

    def setCreditUserName(self, newCreditUserName):
        self.creditUserName = newCreditUserName

    def getCreditUrl(self):
        return self.creditUrl

    def setCreditUrl(self, newCreditUrl):
        self.creditUrl = newCreditUrl

    def getMediaDate(self):
        return self.mediaDate

    def getDataUrl(self):
        return self.dataUrl

    def getFlavorParamsIds(self):
        return self.flavorParamsIds

    def getIsTrimDisabled(self):
        return self.isTrimDisabled


# @package Vidiun
# @subpackage Client
class VidiunFeatureStatus(VidiunObjectBase):
    def __init__(self,
            type=NotImplemented,
            value=NotImplemented):
        VidiunObjectBase.__init__(self)

        # @var VidiunFeatureStatusType
        self.type = type

        # @var int
        self.value = value


    PROPERTY_LOADERS = {
        'type': (VidiunEnumsFactory.createInt, "VidiunFeatureStatusType"), 
        'value': getXmlNodeInt, 
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunFeatureStatus.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunFeatureStatus")
        vparams.addIntEnumIfDefined("type", self.type)
        vparams.addIntIfDefined("value", self.value)
        return vparams

    def getType(self):
        return self.type

    def setType(self, newType):
        self.type = newType

    def getValue(self):
        return self.value

    def setValue(self, newValue):
        self.value = newValue


# @package Vidiun
# @subpackage Client
class VidiunFileAsset(VidiunObjectBase):
    def __init__(self,
            id=NotImplemented,
            partnerId=NotImplemented,
            fileAssetObjectType=NotImplemented,
            objectId=NotImplemented,
            name=NotImplemented,
            systemName=NotImplemented,
            fileExt=NotImplemented,
            version=NotImplemented,
            createdAt=NotImplemented,
            updatedAt=NotImplemented,
            status=NotImplemented):
        VidiunObjectBase.__init__(self)

        # @var int
        # @readonly
        self.id = id

        # @var int
        # @readonly
        self.partnerId = partnerId

        # @var VidiunFileAssetObjectType
        # @insertonly
        self.fileAssetObjectType = fileAssetObjectType

        # @var string
        # @insertonly
        self.objectId = objectId

        # @var string
        self.name = name

        # @var string
        self.systemName = systemName

        # @var string
        self.fileExt = fileExt

        # @var int
        # @readonly
        self.version = version

        # @var int
        # @readonly
        self.createdAt = createdAt

        # @var int
        # @readonly
        self.updatedAt = updatedAt

        # @var VidiunFileAssetStatus
        # @readonly
        self.status = status


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'partnerId': getXmlNodeInt, 
        'fileAssetObjectType': (VidiunEnumsFactory.createString, "VidiunFileAssetObjectType"), 
        'objectId': getXmlNodeText, 
        'name': getXmlNodeText, 
        'systemName': getXmlNodeText, 
        'fileExt': getXmlNodeText, 
        'version': getXmlNodeInt, 
        'createdAt': getXmlNodeInt, 
        'updatedAt': getXmlNodeInt, 
        'status': (VidiunEnumsFactory.createString, "VidiunFileAssetStatus"), 
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunFileAsset.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunFileAsset")
        vparams.addStringEnumIfDefined("fileAssetObjectType", self.fileAssetObjectType)
        vparams.addStringIfDefined("objectId", self.objectId)
        vparams.addStringIfDefined("name", self.name)
        vparams.addStringIfDefined("systemName", self.systemName)
        vparams.addStringIfDefined("fileExt", self.fileExt)
        return vparams

    def getId(self):
        return self.id

    def getPartnerId(self):
        return self.partnerId

    def getFileAssetObjectType(self):
        return self.fileAssetObjectType

    def setFileAssetObjectType(self, newFileAssetObjectType):
        self.fileAssetObjectType = newFileAssetObjectType

    def getObjectId(self):
        return self.objectId

    def setObjectId(self, newObjectId):
        self.objectId = newObjectId

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName

    def getSystemName(self):
        return self.systemName

    def setSystemName(self, newSystemName):
        self.systemName = newSystemName

    def getFileExt(self):
        return self.fileExt

    def setFileExt(self, newFileExt):
        self.fileExt = newFileExt

    def getVersion(self):
        return self.version

    def getCreatedAt(self):
        return self.createdAt

    def getUpdatedAt(self):
        return self.updatedAt

    def getStatus(self):
        return self.status


# @package Vidiun
# @subpackage Client
class VidiunFlavorAsset(VidiunAsset):
    def __init__(self,
            id=NotImplemented,
            entryId=NotImplemented,
            partnerId=NotImplemented,
            version=NotImplemented,
            size=NotImplemented,
            tags=NotImplemented,
            fileExt=NotImplemented,
            createdAt=NotImplemented,
            updatedAt=NotImplemented,
            deletedAt=NotImplemented,
            description=NotImplemented,
            partnerData=NotImplemented,
            partnerDescription=NotImplemented,
            actualSourceAssetParamsIds=NotImplemented,
            flavorParamsId=NotImplemented,
            width=NotImplemented,
            height=NotImplemented,
            bitrate=NotImplemented,
            frameRate=NotImplemented,
            isOriginal=NotImplemented,
            isWeb=NotImplemented,
            containerFormat=NotImplemented,
            videoCodecId=NotImplemented,
            status=NotImplemented,
            language=NotImplemented):
        VidiunAsset.__init__(self,
            id,
            entryId,
            partnerId,
            version,
            size,
            tags,
            fileExt,
            createdAt,
            updatedAt,
            deletedAt,
            description,
            partnerData,
            partnerDescription,
            actualSourceAssetParamsIds)

        # The Flavor Params used to create this Flavor Asset
        # @var int
        # @insertonly
        self.flavorParamsId = flavorParamsId

        # The width of the Flavor Asset
        # @var int
        # @readonly
        self.width = width

        # The height of the Flavor Asset
        # @var int
        # @readonly
        self.height = height

        # The overall bitrate (in KBits) of the Flavor Asset
        # @var int
        # @readonly
        self.bitrate = bitrate

        # The frame rate (in FPS) of the Flavor Asset
        # @var float
        # @readonly
        self.frameRate = frameRate

        # True if this Flavor Asset is the original source
        # @var bool
        # @readonly
        self.isOriginal = isOriginal

        # True if this Flavor Asset is playable in VDP
        # @var bool
        # @readonly
        self.isWeb = isWeb

        # The container format
        # @var string
        # @readonly
        self.containerFormat = containerFormat

        # The video codec
        # @var string
        # @readonly
        self.videoCodecId = videoCodecId

        # The status of the Flavor Asset
        # @var VidiunFlavorAssetStatus
        # @readonly
        self.status = status

        # The language of the flavor asset
        # @var VidiunLanguage
        self.language = language


    PROPERTY_LOADERS = {
        'flavorParamsId': getXmlNodeInt, 
        'width': getXmlNodeInt, 
        'height': getXmlNodeInt, 
        'bitrate': getXmlNodeInt, 
        'frameRate': getXmlNodeFloat, 
        'isOriginal': getXmlNodeBool, 
        'isWeb': getXmlNodeBool, 
        'containerFormat': getXmlNodeText, 
        'videoCodecId': getXmlNodeText, 
        'status': (VidiunEnumsFactory.createInt, "VidiunFlavorAssetStatus"), 
        'language': (VidiunEnumsFactory.createString, "VidiunLanguage"), 
    }

    def fromXml(self, node):
        VidiunAsset.fromXml(self, node)
        self.fromXmlImpl(node, VidiunFlavorAsset.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunAsset.toParams(self)
        vparams.put("objectType", "VidiunFlavorAsset")
        vparams.addIntIfDefined("flavorParamsId", self.flavorParamsId)
        vparams.addStringEnumIfDefined("language", self.language)
        return vparams

    def getFlavorParamsId(self):
        return self.flavorParamsId

    def setFlavorParamsId(self, newFlavorParamsId):
        self.flavorParamsId = newFlavorParamsId

    def getWidth(self):
        return self.width

    def getHeight(self):
        return self.height

    def getBitrate(self):
        return self.bitrate

    def getFrameRate(self):
        return self.frameRate

    def getIsOriginal(self):
        return self.isOriginal

    def getIsWeb(self):
        return self.isWeb

    def getContainerFormat(self):
        return self.containerFormat

    def getVideoCodecId(self):
        return self.videoCodecId

    def getStatus(self):
        return self.status

    def getLanguage(self):
        return self.language

    def setLanguage(self, newLanguage):
        self.language = newLanguage


# @package Vidiun
# @subpackage Client
class VidiunFlavorAssetUrlOptions(VidiunObjectBase):
    def __init__(self,
            fileName=NotImplemented,
            referrer=NotImplemented):
        VidiunObjectBase.__init__(self)

        # The name of the downloaded file
        # @var string
        self.fileName = fileName

        # @var string
        self.referrer = referrer


    PROPERTY_LOADERS = {
        'fileName': getXmlNodeText, 
        'referrer': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunFlavorAssetUrlOptions.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunFlavorAssetUrlOptions")
        vparams.addStringIfDefined("fileName", self.fileName)
        vparams.addStringIfDefined("referrer", self.referrer)
        return vparams

    def getFileName(self):
        return self.fileName

    def setFileName(self, newFileName):
        self.fileName = newFileName

    def getReferrer(self):
        return self.referrer

    def setReferrer(self, newReferrer):
        self.referrer = newReferrer


# @package Vidiun
# @subpackage Client
class VidiunFlavorParams(VidiunAssetParams):
    def __init__(self,
            id=NotImplemented,
            partnerId=NotImplemented,
            name=NotImplemented,
            systemName=NotImplemented,
            description=NotImplemented,
            createdAt=NotImplemented,
            isSystemDefault=NotImplemented,
            tags=NotImplemented,
            requiredPermissions=NotImplemented,
            sourceRemoteStorageProfileId=NotImplemented,
            remoteStorageProfileIds=NotImplemented,
            mediaParserType=NotImplemented,
            sourceAssetParamsIds=NotImplemented,
            videoCodec=NotImplemented,
            videoBitrate=NotImplemented,
            audioCodec=NotImplemented,
            audioBitrate=NotImplemented,
            audioChannels=NotImplemented,
            audioSampleRate=NotImplemented,
            width=NotImplemented,
            height=NotImplemented,
            frameRate=NotImplemented,
            gopSize=NotImplemented,
            conversionEngines=NotImplemented,
            conversionEnginesExtraParams=NotImplemented,
            twoPass=NotImplemented,
            deinterlice=NotImplemented,
            rotate=NotImplemented,
            operators=NotImplemented,
            engineVersion=NotImplemented,
            format=NotImplemented,
            aspectRatioProcessingMode=NotImplemented,
            forceFrameToMultiplication16=NotImplemented,
            isGopInSec=NotImplemented,
            isAvoidVideoShrinkFramesizeToSource=NotImplemented,
            isAvoidVideoShrinkBitrateToSource=NotImplemented,
            isVideoFrameRateForLowBrAppleHls=NotImplemented,
            multiStream=NotImplemented,
            anamorphicPixels=NotImplemented,
            isAvoidForcedKeyFrames=NotImplemented,
            isCropIMX=NotImplemented,
            optimizationPolicy=NotImplemented,
            maxFrameRate=NotImplemented,
            videoConstantBitrate=NotImplemented,
            videoBitrateTolerance=NotImplemented,
            watermarkData=NotImplemented,
            subtitlesData=NotImplemented,
            isEncrypted=NotImplemented,
            contentAwareness=NotImplemented,
            clipOffset=NotImplemented,
            clipDuration=NotImplemented):
        VidiunAssetParams.__init__(self,
            id,
            partnerId,
            name,
            systemName,
            description,
            createdAt,
            isSystemDefault,
            tags,
            requiredPermissions,
            sourceRemoteStorageProfileId,
            remoteStorageProfileIds,
            mediaParserType,
            sourceAssetParamsIds)

        # The video codec of the Flavor Params
        # @var VidiunVideoCodec
        self.videoCodec = videoCodec

        # The video bitrate (in KBits) of the Flavor Params
        # @var int
        self.videoBitrate = videoBitrate

        # The audio codec of the Flavor Params
        # @var VidiunAudioCodec
        self.audioCodec = audioCodec

        # The audio bitrate (in KBits) of the Flavor Params
        # @var int
        self.audioBitrate = audioBitrate

        # The number of audio channels for "downmixing"
        # @var int
        self.audioChannels = audioChannels

        # The audio sample rate of the Flavor Params
        # @var int
        self.audioSampleRate = audioSampleRate

        # The desired width of the Flavor Params
        # @var int
        self.width = width

        # The desired height of the Flavor Params
        # @var int
        self.height = height

        # The frame rate of the Flavor Params
        # @var float
        self.frameRate = frameRate

        # The gop size of the Flavor Params
        # @var int
        self.gopSize = gopSize

        # The list of conversion engines (comma separated)
        # @var string
        self.conversionEngines = conversionEngines

        # The list of conversion engines extra params (separated with "|")
        # @var string
        self.conversionEnginesExtraParams = conversionEnginesExtraParams

        # @var bool
        self.twoPass = twoPass

        # @var int
        self.deinterlice = deinterlice

        # @var int
        self.rotate = rotate

        # @var string
        self.operators = operators

        # @var int
        self.engineVersion = engineVersion

        # The container format of the Flavor Params
        # @var VidiunContainerFormat
        self.format = format

        # @var int
        self.aspectRatioProcessingMode = aspectRatioProcessingMode

        # @var int
        self.forceFrameToMultiplication16 = forceFrameToMultiplication16

        # @var int
        self.isGopInSec = isGopInSec

        # @var int
        self.isAvoidVideoShrinkFramesizeToSource = isAvoidVideoShrinkFramesizeToSource

        # @var int
        self.isAvoidVideoShrinkBitrateToSource = isAvoidVideoShrinkBitrateToSource

        # @var int
        self.isVideoFrameRateForLowBrAppleHls = isVideoFrameRateForLowBrAppleHls

        # @var string
        self.multiStream = multiStream

        # @var float
        self.anamorphicPixels = anamorphicPixels

        # @var int
        self.isAvoidForcedKeyFrames = isAvoidForcedKeyFrames

        # @var int
        self.isCropIMX = isCropIMX

        # @var int
        self.optimizationPolicy = optimizationPolicy

        # @var int
        self.maxFrameRate = maxFrameRate

        # @var int
        self.videoConstantBitrate = videoConstantBitrate

        # @var int
        self.videoBitrateTolerance = videoBitrateTolerance

        # @var string
        self.watermarkData = watermarkData

        # @var string
        self.subtitlesData = subtitlesData

        # @var int
        self.isEncrypted = isEncrypted

        # @var float
        self.contentAwareness = contentAwareness

        # @var int
        self.clipOffset = clipOffset

        # @var int
        self.clipDuration = clipDuration


    PROPERTY_LOADERS = {
        'videoCodec': (VidiunEnumsFactory.createString, "VidiunVideoCodec"), 
        'videoBitrate': getXmlNodeInt, 
        'audioCodec': (VidiunEnumsFactory.createString, "VidiunAudioCodec"), 
        'audioBitrate': getXmlNodeInt, 
        'audioChannels': getXmlNodeInt, 
        'audioSampleRate': getXmlNodeInt, 
        'width': getXmlNodeInt, 
        'height': getXmlNodeInt, 
        'frameRate': getXmlNodeFloat, 
        'gopSize': getXmlNodeInt, 
        'conversionEngines': getXmlNodeText, 
        'conversionEnginesExtraParams': getXmlNodeText, 
        'twoPass': getXmlNodeBool, 
        'deinterlice': getXmlNodeInt, 
        'rotate': getXmlNodeInt, 
        'operators': getXmlNodeText, 
        'engineVersion': getXmlNodeInt, 
        'format': (VidiunEnumsFactory.createString, "VidiunContainerFormat"), 
        'aspectRatioProcessingMode': getXmlNodeInt, 
        'forceFrameToMultiplication16': getXmlNodeInt, 
        'isGopInSec': getXmlNodeInt, 
        'isAvoidVideoShrinkFramesizeToSource': getXmlNodeInt, 
        'isAvoidVideoShrinkBitrateToSource': getXmlNodeInt, 
        'isVideoFrameRateForLowBrAppleHls': getXmlNodeInt, 
        'multiStream': getXmlNodeText, 
        'anamorphicPixels': getXmlNodeFloat, 
        'isAvoidForcedKeyFrames': getXmlNodeInt, 
        'isCropIMX': getXmlNodeInt, 
        'optimizationPolicy': getXmlNodeInt, 
        'maxFrameRate': getXmlNodeInt, 
        'videoConstantBitrate': getXmlNodeInt, 
        'videoBitrateTolerance': getXmlNodeInt, 
        'watermarkData': getXmlNodeText, 
        'subtitlesData': getXmlNodeText, 
        'isEncrypted': getXmlNodeInt, 
        'contentAwareness': getXmlNodeFloat, 
        'clipOffset': getXmlNodeInt, 
        'clipDuration': getXmlNodeInt, 
    }

    def fromXml(self, node):
        VidiunAssetParams.fromXml(self, node)
        self.fromXmlImpl(node, VidiunFlavorParams.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunAssetParams.toParams(self)
        vparams.put("objectType", "VidiunFlavorParams")
        vparams.addStringEnumIfDefined("videoCodec", self.videoCodec)
        vparams.addIntIfDefined("videoBitrate", self.videoBitrate)
        vparams.addStringEnumIfDefined("audioCodec", self.audioCodec)
        vparams.addIntIfDefined("audioBitrate", self.audioBitrate)
        vparams.addIntIfDefined("audioChannels", self.audioChannels)
        vparams.addIntIfDefined("audioSampleRate", self.audioSampleRate)
        vparams.addIntIfDefined("width", self.width)
        vparams.addIntIfDefined("height", self.height)
        vparams.addFloatIfDefined("frameRate", self.frameRate)
        vparams.addIntIfDefined("gopSize", self.gopSize)
        vparams.addStringIfDefined("conversionEngines", self.conversionEngines)
        vparams.addStringIfDefined("conversionEnginesExtraParams", self.conversionEnginesExtraParams)
        vparams.addBoolIfDefined("twoPass", self.twoPass)
        vparams.addIntIfDefined("deinterlice", self.deinterlice)
        vparams.addIntIfDefined("rotate", self.rotate)
        vparams.addStringIfDefined("operators", self.operators)
        vparams.addIntIfDefined("engineVersion", self.engineVersion)
        vparams.addStringEnumIfDefined("format", self.format)
        vparams.addIntIfDefined("aspectRatioProcessingMode", self.aspectRatioProcessingMode)
        vparams.addIntIfDefined("forceFrameToMultiplication16", self.forceFrameToMultiplication16)
        vparams.addIntIfDefined("isGopInSec", self.isGopInSec)
        vparams.addIntIfDefined("isAvoidVideoShrinkFramesizeToSource", self.isAvoidVideoShrinkFramesizeToSource)
        vparams.addIntIfDefined("isAvoidVideoShrinkBitrateToSource", self.isAvoidVideoShrinkBitrateToSource)
        vparams.addIntIfDefined("isVideoFrameRateForLowBrAppleHls", self.isVideoFrameRateForLowBrAppleHls)
        vparams.addStringIfDefined("multiStream", self.multiStream)
        vparams.addFloatIfDefined("anamorphicPixels", self.anamorphicPixels)
        vparams.addIntIfDefined("isAvoidForcedKeyFrames", self.isAvoidForcedKeyFrames)
        vparams.addIntIfDefined("isCropIMX", self.isCropIMX)
        vparams.addIntIfDefined("optimizationPolicy", self.optimizationPolicy)
        vparams.addIntIfDefined("maxFrameRate", self.maxFrameRate)
        vparams.addIntIfDefined("videoConstantBitrate", self.videoConstantBitrate)
        vparams.addIntIfDefined("videoBitrateTolerance", self.videoBitrateTolerance)
        vparams.addStringIfDefined("watermarkData", self.watermarkData)
        vparams.addStringIfDefined("subtitlesData", self.subtitlesData)
        vparams.addIntIfDefined("isEncrypted", self.isEncrypted)
        vparams.addFloatIfDefined("contentAwareness", self.contentAwareness)
        vparams.addIntIfDefined("clipOffset", self.clipOffset)
        vparams.addIntIfDefined("clipDuration", self.clipDuration)
        return vparams

    def getVideoCodec(self):
        return self.videoCodec

    def setVideoCodec(self, newVideoCodec):
        self.videoCodec = newVideoCodec

    def getVideoBitrate(self):
        return self.videoBitrate

    def setVideoBitrate(self, newVideoBitrate):
        self.videoBitrate = newVideoBitrate

    def getAudioCodec(self):
        return self.audioCodec

    def setAudioCodec(self, newAudioCodec):
        self.audioCodec = newAudioCodec

    def getAudioBitrate(self):
        return self.audioBitrate

    def setAudioBitrate(self, newAudioBitrate):
        self.audioBitrate = newAudioBitrate

    def getAudioChannels(self):
        return self.audioChannels

    def setAudioChannels(self, newAudioChannels):
        self.audioChannels = newAudioChannels

    def getAudioSampleRate(self):
        return self.audioSampleRate

    def setAudioSampleRate(self, newAudioSampleRate):
        self.audioSampleRate = newAudioSampleRate

    def getWidth(self):
        return self.width

    def setWidth(self, newWidth):
        self.width = newWidth

    def getHeight(self):
        return self.height

    def setHeight(self, newHeight):
        self.height = newHeight

    def getFrameRate(self):
        return self.frameRate

    def setFrameRate(self, newFrameRate):
        self.frameRate = newFrameRate

    def getGopSize(self):
        return self.gopSize

    def setGopSize(self, newGopSize):
        self.gopSize = newGopSize

    def getConversionEngines(self):
        return self.conversionEngines

    def setConversionEngines(self, newConversionEngines):
        self.conversionEngines = newConversionEngines

    def getConversionEnginesExtraParams(self):
        return self.conversionEnginesExtraParams

    def setConversionEnginesExtraParams(self, newConversionEnginesExtraParams):
        self.conversionEnginesExtraParams = newConversionEnginesExtraParams

    def getTwoPass(self):
        return self.twoPass

    def setTwoPass(self, newTwoPass):
        self.twoPass = newTwoPass

    def getDeinterlice(self):
        return self.deinterlice

    def setDeinterlice(self, newDeinterlice):
        self.deinterlice = newDeinterlice

    def getRotate(self):
        return self.rotate

    def setRotate(self, newRotate):
        self.rotate = newRotate

    def getOperators(self):
        return self.operators

    def setOperators(self, newOperators):
        self.operators = newOperators

    def getEngineVersion(self):
        return self.engineVersion

    def setEngineVersion(self, newEngineVersion):
        self.engineVersion = newEngineVersion

    def getFormat(self):
        return self.format

    def setFormat(self, newFormat):
        self.format = newFormat

    def getAspectRatioProcessingMode(self):
        return self.aspectRatioProcessingMode

    def setAspectRatioProcessingMode(self, newAspectRatioProcessingMode):
        self.aspectRatioProcessingMode = newAspectRatioProcessingMode

    def getForceFrameToMultiplication16(self):
        return self.forceFrameToMultiplication16

    def setForceFrameToMultiplication16(self, newForceFrameToMultiplication16):
        self.forceFrameToMultiplication16 = newForceFrameToMultiplication16

    def getIsGopInSec(self):
        return self.isGopInSec

    def setIsGopInSec(self, newIsGopInSec):
        self.isGopInSec = newIsGopInSec

    def getIsAvoidVideoShrinkFramesizeToSource(self):
        return self.isAvoidVideoShrinkFramesizeToSource

    def setIsAvoidVideoShrinkFramesizeToSource(self, newIsAvoidVideoShrinkFramesizeToSource):
        self.isAvoidVideoShrinkFramesizeToSource = newIsAvoidVideoShrinkFramesizeToSource

    def getIsAvoidVideoShrinkBitrateToSource(self):
        return self.isAvoidVideoShrinkBitrateToSource

    def setIsAvoidVideoShrinkBitrateToSource(self, newIsAvoidVideoShrinkBitrateToSource):
        self.isAvoidVideoShrinkBitrateToSource = newIsAvoidVideoShrinkBitrateToSource

    def getIsVideoFrameRateForLowBrAppleHls(self):
        return self.isVideoFrameRateForLowBrAppleHls

    def setIsVideoFrameRateForLowBrAppleHls(self, newIsVideoFrameRateForLowBrAppleHls):
        self.isVideoFrameRateForLowBrAppleHls = newIsVideoFrameRateForLowBrAppleHls

    def getMultiStream(self):
        return self.multiStream

    def setMultiStream(self, newMultiStream):
        self.multiStream = newMultiStream

    def getAnamorphicPixels(self):
        return self.anamorphicPixels

    def setAnamorphicPixels(self, newAnamorphicPixels):
        self.anamorphicPixels = newAnamorphicPixels

    def getIsAvoidForcedKeyFrames(self):
        return self.isAvoidForcedKeyFrames

    def setIsAvoidForcedKeyFrames(self, newIsAvoidForcedKeyFrames):
        self.isAvoidForcedKeyFrames = newIsAvoidForcedKeyFrames

    def getIsCropIMX(self):
        return self.isCropIMX

    def setIsCropIMX(self, newIsCropIMX):
        self.isCropIMX = newIsCropIMX

    def getOptimizationPolicy(self):
        return self.optimizationPolicy

    def setOptimizationPolicy(self, newOptimizationPolicy):
        self.optimizationPolicy = newOptimizationPolicy

    def getMaxFrameRate(self):
        return self.maxFrameRate

    def setMaxFrameRate(self, newMaxFrameRate):
        self.maxFrameRate = newMaxFrameRate

    def getVideoConstantBitrate(self):
        return self.videoConstantBitrate

    def setVideoConstantBitrate(self, newVideoConstantBitrate):
        self.videoConstantBitrate = newVideoConstantBitrate

    def getVideoBitrateTolerance(self):
        return self.videoBitrateTolerance

    def setVideoBitrateTolerance(self, newVideoBitrateTolerance):
        self.videoBitrateTolerance = newVideoBitrateTolerance

    def getWatermarkData(self):
        return self.watermarkData

    def setWatermarkData(self, newWatermarkData):
        self.watermarkData = newWatermarkData

    def getSubtitlesData(self):
        return self.subtitlesData

    def setSubtitlesData(self, newSubtitlesData):
        self.subtitlesData = newSubtitlesData

    def getIsEncrypted(self):
        return self.isEncrypted

    def setIsEncrypted(self, newIsEncrypted):
        self.isEncrypted = newIsEncrypted

    def getContentAwareness(self):
        return self.contentAwareness

    def setContentAwareness(self, newContentAwareness):
        self.contentAwareness = newContentAwareness

    def getClipOffset(self):
        return self.clipOffset

    def setClipOffset(self, newClipOffset):
        self.clipOffset = newClipOffset

    def getClipDuration(self):
        return self.clipDuration

    def setClipDuration(self, newClipDuration):
        self.clipDuration = newClipDuration


# @package Vidiun
# @subpackage Client
class VidiunFlavorAssetWithParams(VidiunObjectBase):
    def __init__(self,
            flavorAsset=NotImplemented,
            flavorParams=NotImplemented,
            entryId=NotImplemented):
        VidiunObjectBase.__init__(self)

        # The Flavor Asset (Can be null when there are params without asset)
        # @var VidiunFlavorAsset
        self.flavorAsset = flavorAsset

        # The Flavor Params
        # @var VidiunFlavorParams
        self.flavorParams = flavorParams

        # The entry id
        # @var string
        self.entryId = entryId


    PROPERTY_LOADERS = {
        'flavorAsset': (VidiunObjectFactory.create, VidiunFlavorAsset), 
        'flavorParams': (VidiunObjectFactory.create, VidiunFlavorParams), 
        'entryId': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunFlavorAssetWithParams.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunFlavorAssetWithParams")
        vparams.addObjectIfDefined("flavorAsset", self.flavorAsset)
        vparams.addObjectIfDefined("flavorParams", self.flavorParams)
        vparams.addStringIfDefined("entryId", self.entryId)
        return vparams

    def getFlavorAsset(self):
        return self.flavorAsset

    def setFlavorAsset(self, newFlavorAsset):
        self.flavorAsset = newFlavorAsset

    def getFlavorParams(self):
        return self.flavorParams

    def setFlavorParams(self, newFlavorParams):
        self.flavorParams = newFlavorParams

    def getEntryId(self):
        return self.entryId

    def setEntryId(self, newEntryId):
        self.entryId = newEntryId


# @package Vidiun
# @subpackage Client
class VidiunFlavorParamsOutput(VidiunFlavorParams):
    def __init__(self,
            id=NotImplemented,
            partnerId=NotImplemented,
            name=NotImplemented,
            systemName=NotImplemented,
            description=NotImplemented,
            createdAt=NotImplemented,
            isSystemDefault=NotImplemented,
            tags=NotImplemented,
            requiredPermissions=NotImplemented,
            sourceRemoteStorageProfileId=NotImplemented,
            remoteStorageProfileIds=NotImplemented,
            mediaParserType=NotImplemented,
            sourceAssetParamsIds=NotImplemented,
            videoCodec=NotImplemented,
            videoBitrate=NotImplemented,
            audioCodec=NotImplemented,
            audioBitrate=NotImplemented,
            audioChannels=NotImplemented,
            audioSampleRate=NotImplemented,
            width=NotImplemented,
            height=NotImplemented,
            frameRate=NotImplemented,
            gopSize=NotImplemented,
            conversionEngines=NotImplemented,
            conversionEnginesExtraParams=NotImplemented,
            twoPass=NotImplemented,
            deinterlice=NotImplemented,
            rotate=NotImplemented,
            operators=NotImplemented,
            engineVersion=NotImplemented,
            format=NotImplemented,
            aspectRatioProcessingMode=NotImplemented,
            forceFrameToMultiplication16=NotImplemented,
            isGopInSec=NotImplemented,
            isAvoidVideoShrinkFramesizeToSource=NotImplemented,
            isAvoidVideoShrinkBitrateToSource=NotImplemented,
            isVideoFrameRateForLowBrAppleHls=NotImplemented,
            multiStream=NotImplemented,
            anamorphicPixels=NotImplemented,
            isAvoidForcedKeyFrames=NotImplemented,
            isCropIMX=NotImplemented,
            optimizationPolicy=NotImplemented,
            maxFrameRate=NotImplemented,
            videoConstantBitrate=NotImplemented,
            videoBitrateTolerance=NotImplemented,
            watermarkData=NotImplemented,
            subtitlesData=NotImplemented,
            isEncrypted=NotImplemented,
            contentAwareness=NotImplemented,
            clipOffset=NotImplemented,
            clipDuration=NotImplemented,
            flavorParamsId=NotImplemented,
            commandLinesStr=NotImplemented,
            flavorParamsVersion=NotImplemented,
            flavorAssetId=NotImplemented,
            flavorAssetVersion=NotImplemented,
            readyBehavior=NotImplemented):
        VidiunFlavorParams.__init__(self,
            id,
            partnerId,
            name,
            systemName,
            description,
            createdAt,
            isSystemDefault,
            tags,
            requiredPermissions,
            sourceRemoteStorageProfileId,
            remoteStorageProfileIds,
            mediaParserType,
            sourceAssetParamsIds,
            videoCodec,
            videoBitrate,
            audioCodec,
            audioBitrate,
            audioChannels,
            audioSampleRate,
            width,
            height,
            frameRate,
            gopSize,
            conversionEngines,
            conversionEnginesExtraParams,
            twoPass,
            deinterlice,
            rotate,
            operators,
            engineVersion,
            format,
            aspectRatioProcessingMode,
            forceFrameToMultiplication16,
            isGopInSec,
            isAvoidVideoShrinkFramesizeToSource,
            isAvoidVideoShrinkBitrateToSource,
            isVideoFrameRateForLowBrAppleHls,
            multiStream,
            anamorphicPixels,
            isAvoidForcedKeyFrames,
            isCropIMX,
            optimizationPolicy,
            maxFrameRate,
            videoConstantBitrate,
            videoBitrateTolerance,
            watermarkData,
            subtitlesData,
            isEncrypted,
            contentAwareness,
            clipOffset,
            clipDuration)

        # @var int
        self.flavorParamsId = flavorParamsId

        # @var string
        self.commandLinesStr = commandLinesStr

        # @var string
        self.flavorParamsVersion = flavorParamsVersion

        # @var string
        self.flavorAssetId = flavorAssetId

        # @var string
        self.flavorAssetVersion = flavorAssetVersion

        # @var int
        self.readyBehavior = readyBehavior


    PROPERTY_LOADERS = {
        'flavorParamsId': getXmlNodeInt, 
        'commandLinesStr': getXmlNodeText, 
        'flavorParamsVersion': getXmlNodeText, 
        'flavorAssetId': getXmlNodeText, 
        'flavorAssetVersion': getXmlNodeText, 
        'readyBehavior': getXmlNodeInt, 
    }

    def fromXml(self, node):
        VidiunFlavorParams.fromXml(self, node)
        self.fromXmlImpl(node, VidiunFlavorParamsOutput.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunFlavorParams.toParams(self)
        vparams.put("objectType", "VidiunFlavorParamsOutput")
        vparams.addIntIfDefined("flavorParamsId", self.flavorParamsId)
        vparams.addStringIfDefined("commandLinesStr", self.commandLinesStr)
        vparams.addStringIfDefined("flavorParamsVersion", self.flavorParamsVersion)
        vparams.addStringIfDefined("flavorAssetId", self.flavorAssetId)
        vparams.addStringIfDefined("flavorAssetVersion", self.flavorAssetVersion)
        vparams.addIntIfDefined("readyBehavior", self.readyBehavior)
        return vparams

    def getFlavorParamsId(self):
        return self.flavorParamsId

    def setFlavorParamsId(self, newFlavorParamsId):
        self.flavorParamsId = newFlavorParamsId

    def getCommandLinesStr(self):
        return self.commandLinesStr

    def setCommandLinesStr(self, newCommandLinesStr):
        self.commandLinesStr = newCommandLinesStr

    def getFlavorParamsVersion(self):
        return self.flavorParamsVersion

    def setFlavorParamsVersion(self, newFlavorParamsVersion):
        self.flavorParamsVersion = newFlavorParamsVersion

    def getFlavorAssetId(self):
        return self.flavorAssetId

    def setFlavorAssetId(self, newFlavorAssetId):
        self.flavorAssetId = newFlavorAssetId

    def getFlavorAssetVersion(self):
        return self.flavorAssetVersion

    def setFlavorAssetVersion(self, newFlavorAssetVersion):
        self.flavorAssetVersion = newFlavorAssetVersion

    def getReadyBehavior(self):
        return self.readyBehavior

    def setReadyBehavior(self, newReadyBehavior):
        self.readyBehavior = newReadyBehavior


# @package Vidiun
# @subpackage Client
class VidiunSchedulerStatus(VidiunObjectBase):
    def __init__(self,
            id=NotImplemented,
            schedulerConfiguredId=NotImplemented,
            workerConfiguredId=NotImplemented,
            workerType=NotImplemented,
            type=NotImplemented,
            value=NotImplemented,
            schedulerId=NotImplemented,
            workerId=NotImplemented):
        VidiunObjectBase.__init__(self)

        # The id of the Category
        # @var int
        # @readonly
        self.id = id

        # The configured id of the scheduler
        # @var int
        self.schedulerConfiguredId = schedulerConfiguredId

        # The configured id of the job worker
        # @var int
        self.workerConfiguredId = workerConfiguredId

        # The type of the job worker.
        # @var VidiunBatchJobType
        self.workerType = workerType

        # The status type
        # @var VidiunSchedulerStatusType
        self.type = type

        # The status value
        # @var int
        self.value = value

        # The id of the scheduler
        # @var int
        # @readonly
        self.schedulerId = schedulerId

        # The id of the worker
        # @var int
        # @readonly
        self.workerId = workerId


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'schedulerConfiguredId': getXmlNodeInt, 
        'workerConfiguredId': getXmlNodeInt, 
        'workerType': (VidiunEnumsFactory.createString, "VidiunBatchJobType"), 
        'type': (VidiunEnumsFactory.createInt, "VidiunSchedulerStatusType"), 
        'value': getXmlNodeInt, 
        'schedulerId': getXmlNodeInt, 
        'workerId': getXmlNodeInt, 
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunSchedulerStatus.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunSchedulerStatus")
        vparams.addIntIfDefined("schedulerConfiguredId", self.schedulerConfiguredId)
        vparams.addIntIfDefined("workerConfiguredId", self.workerConfiguredId)
        vparams.addStringEnumIfDefined("workerType", self.workerType)
        vparams.addIntEnumIfDefined("type", self.type)
        vparams.addIntIfDefined("value", self.value)
        return vparams

    def getId(self):
        return self.id

    def getSchedulerConfiguredId(self):
        return self.schedulerConfiguredId

    def setSchedulerConfiguredId(self, newSchedulerConfiguredId):
        self.schedulerConfiguredId = newSchedulerConfiguredId

    def getWorkerConfiguredId(self):
        return self.workerConfiguredId

    def setWorkerConfiguredId(self, newWorkerConfiguredId):
        self.workerConfiguredId = newWorkerConfiguredId

    def getWorkerType(self):
        return self.workerType

    def setWorkerType(self, newWorkerType):
        self.workerType = newWorkerType

    def getType(self):
        return self.type

    def setType(self, newType):
        self.type = newType

    def getValue(self):
        return self.value

    def setValue(self, newValue):
        self.value = newValue

    def getSchedulerId(self):
        return self.schedulerId

    def getWorkerId(self):
        return self.workerId


# @package Vidiun
# @subpackage Client
class VidiunSchedulerConfig(VidiunObjectBase):
    def __init__(self,
            id=NotImplemented,
            createdBy=NotImplemented,
            updatedBy=NotImplemented,
            commandId=NotImplemented,
            commandStatus=NotImplemented,
            schedulerId=NotImplemented,
            schedulerConfiguredId=NotImplemented,
            schedulerName=NotImplemented,
            workerId=NotImplemented,
            workerConfiguredId=NotImplemented,
            workerName=NotImplemented,
            variable=NotImplemented,
            variablePart=NotImplemented,
            value=NotImplemented):
        VidiunObjectBase.__init__(self)

        # The id of the Category
        # @var int
        # @readonly
        self.id = id

        # Creator name
        # @var string
        self.createdBy = createdBy

        # Updater name
        # @var string
        self.updatedBy = updatedBy

        # Id of the control panel command that created this config item
        # @var string
        self.commandId = commandId

        # The status of the control panel command
        # @var string
        self.commandStatus = commandStatus

        # The id of the scheduler
        # @var int
        self.schedulerId = schedulerId

        # The configured id of the scheduler
        # @var int
        self.schedulerConfiguredId = schedulerConfiguredId

        # The name of the scheduler
        # @var string
        self.schedulerName = schedulerName

        # The id of the job worker
        # @var int
        self.workerId = workerId

        # The configured id of the job worker
        # @var int
        self.workerConfiguredId = workerConfiguredId

        # The name of the job worker
        # @var string
        self.workerName = workerName

        # The name of the variable
        # @var string
        self.variable = variable

        # The part of the variable
        # @var string
        self.variablePart = variablePart

        # The value of the variable
        # @var string
        self.value = value


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'createdBy': getXmlNodeText, 
        'updatedBy': getXmlNodeText, 
        'commandId': getXmlNodeText, 
        'commandStatus': getXmlNodeText, 
        'schedulerId': getXmlNodeInt, 
        'schedulerConfiguredId': getXmlNodeInt, 
        'schedulerName': getXmlNodeText, 
        'workerId': getXmlNodeInt, 
        'workerConfiguredId': getXmlNodeInt, 
        'workerName': getXmlNodeText, 
        'variable': getXmlNodeText, 
        'variablePart': getXmlNodeText, 
        'value': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunSchedulerConfig.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunSchedulerConfig")
        vparams.addStringIfDefined("createdBy", self.createdBy)
        vparams.addStringIfDefined("updatedBy", self.updatedBy)
        vparams.addStringIfDefined("commandId", self.commandId)
        vparams.addStringIfDefined("commandStatus", self.commandStatus)
        vparams.addIntIfDefined("schedulerId", self.schedulerId)
        vparams.addIntIfDefined("schedulerConfiguredId", self.schedulerConfiguredId)
        vparams.addStringIfDefined("schedulerName", self.schedulerName)
        vparams.addIntIfDefined("workerId", self.workerId)
        vparams.addIntIfDefined("workerConfiguredId", self.workerConfiguredId)
        vparams.addStringIfDefined("workerName", self.workerName)
        vparams.addStringIfDefined("variable", self.variable)
        vparams.addStringIfDefined("variablePart", self.variablePart)
        vparams.addStringIfDefined("value", self.value)
        return vparams

    def getId(self):
        return self.id

    def getCreatedBy(self):
        return self.createdBy

    def setCreatedBy(self, newCreatedBy):
        self.createdBy = newCreatedBy

    def getUpdatedBy(self):
        return self.updatedBy

    def setUpdatedBy(self, newUpdatedBy):
        self.updatedBy = newUpdatedBy

    def getCommandId(self):
        return self.commandId

    def setCommandId(self, newCommandId):
        self.commandId = newCommandId

    def getCommandStatus(self):
        return self.commandStatus

    def setCommandStatus(self, newCommandStatus):
        self.commandStatus = newCommandStatus

    def getSchedulerId(self):
        return self.schedulerId

    def setSchedulerId(self, newSchedulerId):
        self.schedulerId = newSchedulerId

    def getSchedulerConfiguredId(self):
        return self.schedulerConfiguredId

    def setSchedulerConfiguredId(self, newSchedulerConfiguredId):
        self.schedulerConfiguredId = newSchedulerConfiguredId

    def getSchedulerName(self):
        return self.schedulerName

    def setSchedulerName(self, newSchedulerName):
        self.schedulerName = newSchedulerName

    def getWorkerId(self):
        return self.workerId

    def setWorkerId(self, newWorkerId):
        self.workerId = newWorkerId

    def getWorkerConfiguredId(self):
        return self.workerConfiguredId

    def setWorkerConfiguredId(self, newWorkerConfiguredId):
        self.workerConfiguredId = newWorkerConfiguredId

    def getWorkerName(self):
        return self.workerName

    def setWorkerName(self, newWorkerName):
        self.workerName = newWorkerName

    def getVariable(self):
        return self.variable

    def setVariable(self, newVariable):
        self.variable = newVariable

    def getVariablePart(self):
        return self.variablePart

    def setVariablePart(self, newVariablePart):
        self.variablePart = newVariablePart

    def getValue(self):
        return self.value

    def setValue(self, newValue):
        self.value = newValue


# @package Vidiun
# @subpackage Client
class VidiunSchedulerWorker(VidiunObjectBase):
    def __init__(self,
            id=NotImplemented,
            configuredId=NotImplemented,
            schedulerId=NotImplemented,
            schedulerConfiguredId=NotImplemented,
            type=NotImplemented,
            typeName=NotImplemented,
            name=NotImplemented,
            statuses=NotImplemented,
            configs=NotImplemented,
            lockedJobs=NotImplemented,
            avgWait=NotImplemented,
            avgWork=NotImplemented,
            lastStatus=NotImplemented,
            lastStatusStr=NotImplemented):
        VidiunObjectBase.__init__(self)

        # The id of the Worker
        # @var int
        # @readonly
        self.id = id

        # The id as configured in the batch config
        # @var int
        self.configuredId = configuredId

        # The id of the Scheduler
        # @var int
        self.schedulerId = schedulerId

        # The id of the scheduler as configured in the batch config
        # @var int
        self.schedulerConfiguredId = schedulerConfiguredId

        # The worker type
        # @var VidiunBatchJobType
        self.type = type

        # The friendly name of the type
        # @var string
        self.typeName = typeName

        # The scheduler name
        # @var string
        self.name = name

        # Array of the last statuses
        # @var array of VidiunSchedulerStatus
        self.statuses = statuses

        # Array of the last configs
        # @var array of VidiunSchedulerConfig
        self.configs = configs

        # Array of jobs that locked to this worker
        # @var array of VidiunBatchJob
        self.lockedJobs = lockedJobs

        # Avarage time between creation and queue time
        # @var int
        self.avgWait = avgWait

        # Avarage time between queue time end finish time
        # @var int
        self.avgWork = avgWork

        # last status time
        # @var int
        self.lastStatus = lastStatus

        # last status formated
        # @var string
        self.lastStatusStr = lastStatusStr


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'configuredId': getXmlNodeInt, 
        'schedulerId': getXmlNodeInt, 
        'schedulerConfiguredId': getXmlNodeInt, 
        'type': (VidiunEnumsFactory.createString, "VidiunBatchJobType"), 
        'typeName': getXmlNodeText, 
        'name': getXmlNodeText, 
        'statuses': (VidiunObjectFactory.createArray, VidiunSchedulerStatus), 
        'configs': (VidiunObjectFactory.createArray, VidiunSchedulerConfig), 
        'lockedJobs': (VidiunObjectFactory.createArray, VidiunBatchJob), 
        'avgWait': getXmlNodeInt, 
        'avgWork': getXmlNodeInt, 
        'lastStatus': getXmlNodeInt, 
        'lastStatusStr': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunSchedulerWorker.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunSchedulerWorker")
        vparams.addIntIfDefined("configuredId", self.configuredId)
        vparams.addIntIfDefined("schedulerId", self.schedulerId)
        vparams.addIntIfDefined("schedulerConfiguredId", self.schedulerConfiguredId)
        vparams.addStringEnumIfDefined("type", self.type)
        vparams.addStringIfDefined("typeName", self.typeName)
        vparams.addStringIfDefined("name", self.name)
        vparams.addArrayIfDefined("statuses", self.statuses)
        vparams.addArrayIfDefined("configs", self.configs)
        vparams.addArrayIfDefined("lockedJobs", self.lockedJobs)
        vparams.addIntIfDefined("avgWait", self.avgWait)
        vparams.addIntIfDefined("avgWork", self.avgWork)
        vparams.addIntIfDefined("lastStatus", self.lastStatus)
        vparams.addStringIfDefined("lastStatusStr", self.lastStatusStr)
        return vparams

    def getId(self):
        return self.id

    def getConfiguredId(self):
        return self.configuredId

    def setConfiguredId(self, newConfiguredId):
        self.configuredId = newConfiguredId

    def getSchedulerId(self):
        return self.schedulerId

    def setSchedulerId(self, newSchedulerId):
        self.schedulerId = newSchedulerId

    def getSchedulerConfiguredId(self):
        return self.schedulerConfiguredId

    def setSchedulerConfiguredId(self, newSchedulerConfiguredId):
        self.schedulerConfiguredId = newSchedulerConfiguredId

    def getType(self):
        return self.type

    def setType(self, newType):
        self.type = newType

    def getTypeName(self):
        return self.typeName

    def setTypeName(self, newTypeName):
        self.typeName = newTypeName

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName

    def getStatuses(self):
        return self.statuses

    def setStatuses(self, newStatuses):
        self.statuses = newStatuses

    def getConfigs(self):
        return self.configs

    def setConfigs(self, newConfigs):
        self.configs = newConfigs

    def getLockedJobs(self):
        return self.lockedJobs

    def setLockedJobs(self, newLockedJobs):
        self.lockedJobs = newLockedJobs

    def getAvgWait(self):
        return self.avgWait

    def setAvgWait(self, newAvgWait):
        self.avgWait = newAvgWait

    def getAvgWork(self):
        return self.avgWork

    def setAvgWork(self, newAvgWork):
        self.avgWork = newAvgWork

    def getLastStatus(self):
        return self.lastStatus

    def setLastStatus(self, newLastStatus):
        self.lastStatus = newLastStatus

    def getLastStatusStr(self):
        return self.lastStatusStr

    def setLastStatusStr(self, newLastStatusStr):
        self.lastStatusStr = newLastStatusStr


# @package Vidiun
# @subpackage Client
class VidiunScheduler(VidiunObjectBase):
    def __init__(self,
            id=NotImplemented,
            configuredId=NotImplemented,
            name=NotImplemented,
            host=NotImplemented,
            statuses=NotImplemented,
            configs=NotImplemented,
            workers=NotImplemented,
            createdAt=NotImplemented,
            lastStatus=NotImplemented,
            lastStatusStr=NotImplemented):
        VidiunObjectBase.__init__(self)

        # The id of the Scheduler
        # @var int
        # @readonly
        self.id = id

        # The id as configured in the batch config
        # @var int
        self.configuredId = configuredId

        # The scheduler name
        # @var string
        self.name = name

        # The host name
        # @var string
        self.host = host

        # Array of the last statuses
        # @var array of VidiunSchedulerStatus
        # @readonly
        self.statuses = statuses

        # Array of the last configs
        # @var array of VidiunSchedulerConfig
        # @readonly
        self.configs = configs

        # Array of the workers
        # @var array of VidiunSchedulerWorker
        # @readonly
        self.workers = workers

        # creation time
        # @var int
        # @readonly
        self.createdAt = createdAt

        # last status time
        # @var int
        # @readonly
        self.lastStatus = lastStatus

        # last status formated
        # @var string
        # @readonly
        self.lastStatusStr = lastStatusStr


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'configuredId': getXmlNodeInt, 
        'name': getXmlNodeText, 
        'host': getXmlNodeText, 
        'statuses': (VidiunObjectFactory.createArray, VidiunSchedulerStatus), 
        'configs': (VidiunObjectFactory.createArray, VidiunSchedulerConfig), 
        'workers': (VidiunObjectFactory.createArray, VidiunSchedulerWorker), 
        'createdAt': getXmlNodeInt, 
        'lastStatus': getXmlNodeInt, 
        'lastStatusStr': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunScheduler.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunScheduler")
        vparams.addIntIfDefined("configuredId", self.configuredId)
        vparams.addStringIfDefined("name", self.name)
        vparams.addStringIfDefined("host", self.host)
        return vparams

    def getId(self):
        return self.id

    def getConfiguredId(self):
        return self.configuredId

    def setConfiguredId(self, newConfiguredId):
        self.configuredId = newConfiguredId

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName

    def getHost(self):
        return self.host

    def setHost(self, newHost):
        self.host = newHost

    def getStatuses(self):
        return self.statuses

    def getConfigs(self):
        return self.configs

    def getWorkers(self):
        return self.workers

    def getCreatedAt(self):
        return self.createdAt

    def getLastStatus(self):
        return self.lastStatus

    def getLastStatusStr(self):
        return self.lastStatusStr


# @package Vidiun
# @subpackage Client
class VidiunGroupUser(VidiunObjectBase):
    def __init__(self,
            userId=NotImplemented,
            groupId=NotImplemented,
            status=NotImplemented,
            partnerId=NotImplemented,
            createdAt=NotImplemented,
            updatedAt=NotImplemented):
        VidiunObjectBase.__init__(self)

        # @var string
        # @insertonly
        self.userId = userId

        # @var string
        # @insertonly
        self.groupId = groupId

        # @var VidiunGroupUserStatus
        # @readonly
        self.status = status

        # @var int
        # @readonly
        self.partnerId = partnerId

        # Creation date as Unix timestamp (In seconds)
        # @var int
        # @readonly
        self.createdAt = createdAt

        # Last update date as Unix timestamp (In seconds)
        # @var int
        # @readonly
        self.updatedAt = updatedAt


    PROPERTY_LOADERS = {
        'userId': getXmlNodeText, 
        'groupId': getXmlNodeText, 
        'status': (VidiunEnumsFactory.createInt, "VidiunGroupUserStatus"), 
        'partnerId': getXmlNodeInt, 
        'createdAt': getXmlNodeInt, 
        'updatedAt': getXmlNodeInt, 
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunGroupUser.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunGroupUser")
        vparams.addStringIfDefined("userId", self.userId)
        vparams.addStringIfDefined("groupId", self.groupId)
        return vparams

    def getUserId(self):
        return self.userId

    def setUserId(self, newUserId):
        self.userId = newUserId

    def getGroupId(self):
        return self.groupId

    def setGroupId(self, newGroupId):
        self.groupId = newGroupId

    def getStatus(self):
        return self.status

    def getPartnerId(self):
        return self.partnerId

    def getCreatedAt(self):
        return self.createdAt

    def getUpdatedAt(self):
        return self.updatedAt


# @package Vidiun
# @subpackage Client
class VidiunObject(VidiunObjectBase):
    def __init__(self,
            relatedObjects=NotImplemented):
        VidiunObjectBase.__init__(self)

        # @var map
        # @readonly
        self.relatedObjects = relatedObjects


    PROPERTY_LOADERS = {
        'relatedObjects': (VidiunObjectFactory.create, map), 
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunObject.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunObject")
        return vparams

    def getRelatedObjects(self):
        return self.relatedObjects


# @package Vidiun
# @subpackage Client
class VidiunIntegerValue(VidiunValue):
    """An int representation to return an array of ints"""

    def __init__(self,
            description=NotImplemented,
            value=NotImplemented):
        VidiunValue.__init__(self,
            description)

        # @var int
        self.value = value


    PROPERTY_LOADERS = {
        'value': getXmlNodeInt, 
    }

    def fromXml(self, node):
        VidiunValue.fromXml(self, node)
        self.fromXmlImpl(node, VidiunIntegerValue.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunValue.toParams(self)
        vparams.put("objectType", "VidiunIntegerValue")
        vparams.addIntIfDefined("value", self.value)
        return vparams

    def getValue(self):
        return self.value

    def setValue(self, newValue):
        self.value = newValue


# @package Vidiun
# @subpackage Client
class VidiunLiveStreamConfiguration(VidiunObjectBase):
    """A representation of a live stream configuration"""

    def __init__(self,
            protocol=NotImplemented,
            url=NotImplemented,
            publishUrl=NotImplemented,
            backupUrl=NotImplemented,
            streamName=NotImplemented):
        VidiunObjectBase.__init__(self)

        # @var VidiunPlaybackProtocol
        self.protocol = protocol

        # @var string
        self.url = url

        # @var string
        self.publishUrl = publishUrl

        # @var string
        self.backupUrl = backupUrl

        # @var string
        self.streamName = streamName


    PROPERTY_LOADERS = {
        'protocol': (VidiunEnumsFactory.createString, "VidiunPlaybackProtocol"), 
        'url': getXmlNodeText, 
        'publishUrl': getXmlNodeText, 
        'backupUrl': getXmlNodeText, 
        'streamName': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunLiveStreamConfiguration.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunLiveStreamConfiguration")
        vparams.addStringEnumIfDefined("protocol", self.protocol)
        vparams.addStringIfDefined("url", self.url)
        vparams.addStringIfDefined("publishUrl", self.publishUrl)
        vparams.addStringIfDefined("backupUrl", self.backupUrl)
        vparams.addStringIfDefined("streamName", self.streamName)
        return vparams

    def getProtocol(self):
        return self.protocol

    def setProtocol(self, newProtocol):
        self.protocol = newProtocol

    def getUrl(self):
        return self.url

    def setUrl(self, newUrl):
        self.url = newUrl

    def getPublishUrl(self):
        return self.publishUrl

    def setPublishUrl(self, newPublishUrl):
        self.publishUrl = newPublishUrl

    def getBackupUrl(self):
        return self.backupUrl

    def setBackupUrl(self, newBackupUrl):
        self.backupUrl = newBackupUrl

    def getStreamName(self):
        return self.streamName

    def setStreamName(self, newStreamName):
        self.streamName = newStreamName


# @package Vidiun
# @subpackage Client
class VidiunLiveStreamPushPublishConfiguration(VidiunObjectBase):
    """Basic push-publish configuration for Vidiun live stream entry"""

    def __init__(self,
            publishUrl=NotImplemented,
            backupPublishUrl=NotImplemented,
            port=NotImplemented):
        VidiunObjectBase.__init__(self)

        # @var string
        self.publishUrl = publishUrl

        # @var string
        self.backupPublishUrl = backupPublishUrl

        # @var string
        self.port = port


    PROPERTY_LOADERS = {
        'publishUrl': getXmlNodeText, 
        'backupPublishUrl': getXmlNodeText, 
        'port': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunLiveStreamPushPublishConfiguration.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunLiveStreamPushPublishConfiguration")
        vparams.addStringIfDefined("publishUrl", self.publishUrl)
        vparams.addStringIfDefined("backupPublishUrl", self.backupPublishUrl)
        vparams.addStringIfDefined("port", self.port)
        return vparams

    def getPublishUrl(self):
        return self.publishUrl

    def setPublishUrl(self, newPublishUrl):
        self.publishUrl = newPublishUrl

    def getBackupPublishUrl(self):
        return self.backupPublishUrl

    def setBackupPublishUrl(self, newBackupPublishUrl):
        self.backupPublishUrl = newBackupPublishUrl

    def getPort(self):
        return self.port

    def setPort(self, newPort):
        self.port = newPort


# @package Vidiun
# @subpackage Client
class VidiunLiveEntryRecordingOptions(VidiunObjectBase):
    """A representation of a live stream recording entry configuration"""

    def __init__(self,
            shouldCopyEntitlement=NotImplemented,
            shouldCopyScheduling=NotImplemented,
            shouldCopyThumbnail=NotImplemented):
        VidiunObjectBase.__init__(self)

        # @var VidiunNullableBoolean
        self.shouldCopyEntitlement = shouldCopyEntitlement

        # @var VidiunNullableBoolean
        self.shouldCopyScheduling = shouldCopyScheduling

        # @var VidiunNullableBoolean
        self.shouldCopyThumbnail = shouldCopyThumbnail


    PROPERTY_LOADERS = {
        'shouldCopyEntitlement': (VidiunEnumsFactory.createInt, "VidiunNullableBoolean"), 
        'shouldCopyScheduling': (VidiunEnumsFactory.createInt, "VidiunNullableBoolean"), 
        'shouldCopyThumbnail': (VidiunEnumsFactory.createInt, "VidiunNullableBoolean"), 
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunLiveEntryRecordingOptions.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunLiveEntryRecordingOptions")
        vparams.addIntEnumIfDefined("shouldCopyEntitlement", self.shouldCopyEntitlement)
        vparams.addIntEnumIfDefined("shouldCopyScheduling", self.shouldCopyScheduling)
        vparams.addIntEnumIfDefined("shouldCopyThumbnail", self.shouldCopyThumbnail)
        return vparams

    def getShouldCopyEntitlement(self):
        return self.shouldCopyEntitlement

    def setShouldCopyEntitlement(self, newShouldCopyEntitlement):
        self.shouldCopyEntitlement = newShouldCopyEntitlement

    def getShouldCopyScheduling(self):
        return self.shouldCopyScheduling

    def setShouldCopyScheduling(self, newShouldCopyScheduling):
        self.shouldCopyScheduling = newShouldCopyScheduling

    def getShouldCopyThumbnail(self):
        return self.shouldCopyThumbnail

    def setShouldCopyThumbnail(self, newShouldCopyThumbnail):
        self.shouldCopyThumbnail = newShouldCopyThumbnail


# @package Vidiun
# @subpackage Client
class VidiunLiveEntry(VidiunMediaEntry):
    def __init__(self,
            id=NotImplemented,
            name=NotImplemented,
            description=NotImplemented,
            partnerId=NotImplemented,
            userId=NotImplemented,
            creatorId=NotImplemented,
            tags=NotImplemented,
            adminTags=NotImplemented,
            categories=NotImplemented,
            categoriesIds=NotImplemented,
            status=NotImplemented,
            moderationStatus=NotImplemented,
            moderationCount=NotImplemented,
            type=NotImplemented,
            createdAt=NotImplemented,
            updatedAt=NotImplemented,
            rank=NotImplemented,
            totalRank=NotImplemented,
            votes=NotImplemented,
            groupId=NotImplemented,
            partnerData=NotImplemented,
            downloadUrl=NotImplemented,
            searchText=NotImplemented,
            licenseType=NotImplemented,
            version=NotImplemented,
            thumbnailUrl=NotImplemented,
            accessControlId=NotImplemented,
            startDate=NotImplemented,
            endDate=NotImplemented,
            referenceId=NotImplemented,
            replacingEntryId=NotImplemented,
            replacedEntryId=NotImplemented,
            replacementStatus=NotImplemented,
            partnerSortValue=NotImplemented,
            conversionProfileId=NotImplemented,
            redirectEntryId=NotImplemented,
            rootEntryId=NotImplemented,
            parentEntryId=NotImplemented,
            operationAttributes=NotImplemented,
            entitledUsersEdit=NotImplemented,
            entitledUsersPublish=NotImplemented,
            capabilities=NotImplemented,
            templateEntryId=NotImplemented,
            plays=NotImplemented,
            views=NotImplemented,
            lastPlayedAt=NotImplemented,
            width=NotImplemented,
            height=NotImplemented,
            duration=NotImplemented,
            msDuration=NotImplemented,
            durationType=NotImplemented,
            mediaType=NotImplemented,
            conversionQuality=NotImplemented,
            sourceType=NotImplemented,
            searchProviderType=NotImplemented,
            searchProviderId=NotImplemented,
            creditUserName=NotImplemented,
            creditUrl=NotImplemented,
            mediaDate=NotImplemented,
            dataUrl=NotImplemented,
            flavorParamsIds=NotImplemented,
            isTrimDisabled=NotImplemented,
            offlineMessage=NotImplemented,
            recordStatus=NotImplemented,
            dvrStatus=NotImplemented,
            dvrWindow=NotImplemented,
            lastElapsedRecordingTime=NotImplemented,
            liveStreamConfigurations=NotImplemented,
            recordedEntryId=NotImplemented,
            pushPublishEnabled=NotImplemented,
            publishConfigurations=NotImplemented,
            firstBroadcast=NotImplemented,
            lastBroadcast=NotImplemented,
            currentBroadcastStartTime=NotImplemented,
            recordingOptions=NotImplemented,
            liveStatus=NotImplemented):
        VidiunMediaEntry.__init__(self,
            id,
            name,
            description,
            partnerId,
            userId,
            creatorId,
            tags,
            adminTags,
            categories,
            categoriesIds,
            status,
            moderationStatus,
            moderationCount,
            type,
            createdAt,
            updatedAt,
            rank,
            totalRank,
            votes,
            groupId,
            partnerData,
            downloadUrl,
            searchText,
            licenseType,
            version,
            thumbnailUrl,
            accessControlId,
            startDate,
            endDate,
            referenceId,
            replacingEntryId,
            replacedEntryId,
            replacementStatus,
            partnerSortValue,
            conversionProfileId,
            redirectEntryId,
            rootEntryId,
            parentEntryId,
            operationAttributes,
            entitledUsersEdit,
            entitledUsersPublish,
            capabilities,
            templateEntryId,
            plays,
            views,
            lastPlayedAt,
            width,
            height,
            duration,
            msDuration,
            durationType,
            mediaType,
            conversionQuality,
            sourceType,
            searchProviderType,
            searchProviderId,
            creditUserName,
            creditUrl,
            mediaDate,
            dataUrl,
            flavorParamsIds,
            isTrimDisabled)

        # The message to be presented when the stream is offline
        # @var string
        self.offlineMessage = offlineMessage

        # Recording Status Enabled/Disabled
        # @var VidiunRecordStatus
        self.recordStatus = recordStatus

        # DVR Status Enabled/Disabled
        # @var VidiunDVRStatus
        self.dvrStatus = dvrStatus

        # Window of time which the DVR allows for backwards scrubbing (in minutes)
        # @var int
        self.dvrWindow = dvrWindow

        # Elapsed recording time (in msec) up to the point where the live stream was last stopped (unpublished).
        # @var int
        self.lastElapsedRecordingTime = lastElapsedRecordingTime

        # Array of key value protocol->live stream url objects
        # @var array of VidiunLiveStreamConfiguration
        self.liveStreamConfigurations = liveStreamConfigurations

        # Recorded entry id
        # @var string
        self.recordedEntryId = recordedEntryId

        # Flag denoting whether entry should be published by the media server
        # @var VidiunLivePublishStatus
        self.pushPublishEnabled = pushPublishEnabled

        # Array of publish configurations
        # @var array of VidiunLiveStreamPushPublishConfiguration
        self.publishConfigurations = publishConfigurations

        # The first time in which the entry was broadcast
        # @var int
        # @readonly
        self.firstBroadcast = firstBroadcast

        # The Last time in which the entry was broadcast
        # @var int
        # @readonly
        self.lastBroadcast = lastBroadcast

        # The time (unix timestamp in milliseconds) in which the entry broadcast started or 0 when the entry is off the air
        # @var float
        self.currentBroadcastStartTime = currentBroadcastStartTime

        # @var VidiunLiveEntryRecordingOptions
        self.recordingOptions = recordingOptions

        # the status of the entry of type EntryServerNodeStatus
        # @var VidiunEntryServerNodeStatus
        # @readonly
        self.liveStatus = liveStatus


    PROPERTY_LOADERS = {
        'offlineMessage': getXmlNodeText, 
        'recordStatus': (VidiunEnumsFactory.createInt, "VidiunRecordStatus"), 
        'dvrStatus': (VidiunEnumsFactory.createInt, "VidiunDVRStatus"), 
        'dvrWindow': getXmlNodeInt, 
        'lastElapsedRecordingTime': getXmlNodeInt, 
        'liveStreamConfigurations': (VidiunObjectFactory.createArray, VidiunLiveStreamConfiguration), 
        'recordedEntryId': getXmlNodeText, 
        'pushPublishEnabled': (VidiunEnumsFactory.createInt, "VidiunLivePublishStatus"), 
        'publishConfigurations': (VidiunObjectFactory.createArray, VidiunLiveStreamPushPublishConfiguration), 
        'firstBroadcast': getXmlNodeInt, 
        'lastBroadcast': getXmlNodeInt, 
        'currentBroadcastStartTime': getXmlNodeFloat, 
        'recordingOptions': (VidiunObjectFactory.create, VidiunLiveEntryRecordingOptions), 
        'liveStatus': (VidiunEnumsFactory.createInt, "VidiunEntryServerNodeStatus"), 
    }

    def fromXml(self, node):
        VidiunMediaEntry.fromXml(self, node)
        self.fromXmlImpl(node, VidiunLiveEntry.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunMediaEntry.toParams(self)
        vparams.put("objectType", "VidiunLiveEntry")
        vparams.addStringIfDefined("offlineMessage", self.offlineMessage)
        vparams.addIntEnumIfDefined("recordStatus", self.recordStatus)
        vparams.addIntEnumIfDefined("dvrStatus", self.dvrStatus)
        vparams.addIntIfDefined("dvrWindow", self.dvrWindow)
        vparams.addIntIfDefined("lastElapsedRecordingTime", self.lastElapsedRecordingTime)
        vparams.addArrayIfDefined("liveStreamConfigurations", self.liveStreamConfigurations)
        vparams.addStringIfDefined("recordedEntryId", self.recordedEntryId)
        vparams.addIntEnumIfDefined("pushPublishEnabled", self.pushPublishEnabled)
        vparams.addArrayIfDefined("publishConfigurations", self.publishConfigurations)
        vparams.addFloatIfDefined("currentBroadcastStartTime", self.currentBroadcastStartTime)
        vparams.addObjectIfDefined("recordingOptions", self.recordingOptions)
        return vparams

    def getOfflineMessage(self):
        return self.offlineMessage

    def setOfflineMessage(self, newOfflineMessage):
        self.offlineMessage = newOfflineMessage

    def getRecordStatus(self):
        return self.recordStatus

    def setRecordStatus(self, newRecordStatus):
        self.recordStatus = newRecordStatus

    def getDvrStatus(self):
        return self.dvrStatus

    def setDvrStatus(self, newDvrStatus):
        self.dvrStatus = newDvrStatus

    def getDvrWindow(self):
        return self.dvrWindow

    def setDvrWindow(self, newDvrWindow):
        self.dvrWindow = newDvrWindow

    def getLastElapsedRecordingTime(self):
        return self.lastElapsedRecordingTime

    def setLastElapsedRecordingTime(self, newLastElapsedRecordingTime):
        self.lastElapsedRecordingTime = newLastElapsedRecordingTime

    def getLiveStreamConfigurations(self):
        return self.liveStreamConfigurations

    def setLiveStreamConfigurations(self, newLiveStreamConfigurations):
        self.liveStreamConfigurations = newLiveStreamConfigurations

    def getRecordedEntryId(self):
        return self.recordedEntryId

    def setRecordedEntryId(self, newRecordedEntryId):
        self.recordedEntryId = newRecordedEntryId

    def getPushPublishEnabled(self):
        return self.pushPublishEnabled

    def setPushPublishEnabled(self, newPushPublishEnabled):
        self.pushPublishEnabled = newPushPublishEnabled

    def getPublishConfigurations(self):
        return self.publishConfigurations

    def setPublishConfigurations(self, newPublishConfigurations):
        self.publishConfigurations = newPublishConfigurations

    def getFirstBroadcast(self):
        return self.firstBroadcast

    def getLastBroadcast(self):
        return self.lastBroadcast

    def getCurrentBroadcastStartTime(self):
        return self.currentBroadcastStartTime

    def setCurrentBroadcastStartTime(self, newCurrentBroadcastStartTime):
        self.currentBroadcastStartTime = newCurrentBroadcastStartTime

    def getRecordingOptions(self):
        return self.recordingOptions

    def setRecordingOptions(self, newRecordingOptions):
        self.recordingOptions = newRecordingOptions

    def getLiveStatus(self):
        return self.liveStatus


# @package Vidiun
# @subpackage Client
class VidiunLiveChannel(VidiunLiveEntry):
    def __init__(self,
            id=NotImplemented,
            name=NotImplemented,
            description=NotImplemented,
            partnerId=NotImplemented,
            userId=NotImplemented,
            creatorId=NotImplemented,
            tags=NotImplemented,
            adminTags=NotImplemented,
            categories=NotImplemented,
            categoriesIds=NotImplemented,
            status=NotImplemented,
            moderationStatus=NotImplemented,
            moderationCount=NotImplemented,
            type=NotImplemented,
            createdAt=NotImplemented,
            updatedAt=NotImplemented,
            rank=NotImplemented,
            totalRank=NotImplemented,
            votes=NotImplemented,
            groupId=NotImplemented,
            partnerData=NotImplemented,
            downloadUrl=NotImplemented,
            searchText=NotImplemented,
            licenseType=NotImplemented,
            version=NotImplemented,
            thumbnailUrl=NotImplemented,
            accessControlId=NotImplemented,
            startDate=NotImplemented,
            endDate=NotImplemented,
            referenceId=NotImplemented,
            replacingEntryId=NotImplemented,
            replacedEntryId=NotImplemented,
            replacementStatus=NotImplemented,
            partnerSortValue=NotImplemented,
            conversionProfileId=NotImplemented,
            redirectEntryId=NotImplemented,
            rootEntryId=NotImplemented,
            parentEntryId=NotImplemented,
            operationAttributes=NotImplemented,
            entitledUsersEdit=NotImplemented,
            entitledUsersPublish=NotImplemented,
            capabilities=NotImplemented,
            templateEntryId=NotImplemented,
            plays=NotImplemented,
            views=NotImplemented,
            lastPlayedAt=NotImplemented,
            width=NotImplemented,
            height=NotImplemented,
            duration=NotImplemented,
            msDuration=NotImplemented,
            durationType=NotImplemented,
            mediaType=NotImplemented,
            conversionQuality=NotImplemented,
            sourceType=NotImplemented,
            searchProviderType=NotImplemented,
            searchProviderId=NotImplemented,
            creditUserName=NotImplemented,
            creditUrl=NotImplemented,
            mediaDate=NotImplemented,
            dataUrl=NotImplemented,
            flavorParamsIds=NotImplemented,
            isTrimDisabled=NotImplemented,
            offlineMessage=NotImplemented,
            recordStatus=NotImplemented,
            dvrStatus=NotImplemented,
            dvrWindow=NotImplemented,
            lastElapsedRecordingTime=NotImplemented,
            liveStreamConfigurations=NotImplemented,
            recordedEntryId=NotImplemented,
            pushPublishEnabled=NotImplemented,
            publishConfigurations=NotImplemented,
            firstBroadcast=NotImplemented,
            lastBroadcast=NotImplemented,
            currentBroadcastStartTime=NotImplemented,
            recordingOptions=NotImplemented,
            liveStatus=NotImplemented,
            playlistId=NotImplemented,
            repeat=NotImplemented):
        VidiunLiveEntry.__init__(self,
            id,
            name,
            description,
            partnerId,
            userId,
            creatorId,
            tags,
            adminTags,
            categories,
            categoriesIds,
            status,
            moderationStatus,
            moderationCount,
            type,
            createdAt,
            updatedAt,
            rank,
            totalRank,
            votes,
            groupId,
            partnerData,
            downloadUrl,
            searchText,
            licenseType,
            version,
            thumbnailUrl,
            accessControlId,
            startDate,
            endDate,
            referenceId,
            replacingEntryId,
            replacedEntryId,
            replacementStatus,
            partnerSortValue,
            conversionProfileId,
            redirectEntryId,
            rootEntryId,
            parentEntryId,
            operationAttributes,
            entitledUsersEdit,
            entitledUsersPublish,
            capabilities,
            templateEntryId,
            plays,
            views,
            lastPlayedAt,
            width,
            height,
            duration,
            msDuration,
            durationType,
            mediaType,
            conversionQuality,
            sourceType,
            searchProviderType,
            searchProviderId,
            creditUserName,
            creditUrl,
            mediaDate,
            dataUrl,
            flavorParamsIds,
            isTrimDisabled,
            offlineMessage,
            recordStatus,
            dvrStatus,
            dvrWindow,
            lastElapsedRecordingTime,
            liveStreamConfigurations,
            recordedEntryId,
            pushPublishEnabled,
            publishConfigurations,
            firstBroadcast,
            lastBroadcast,
            currentBroadcastStartTime,
            recordingOptions,
            liveStatus)

        # Playlist id to be played
        # @var string
        self.playlistId = playlistId

        # Indicates that the segments should be repeated for ever
        # @var VidiunNullableBoolean
        self.repeat = repeat


    PROPERTY_LOADERS = {
        'playlistId': getXmlNodeText, 
        'repeat': (VidiunEnumsFactory.createInt, "VidiunNullableBoolean"), 
    }

    def fromXml(self, node):
        VidiunLiveEntry.fromXml(self, node)
        self.fromXmlImpl(node, VidiunLiveChannel.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunLiveEntry.toParams(self)
        vparams.put("objectType", "VidiunLiveChannel")
        vparams.addStringIfDefined("playlistId", self.playlistId)
        vparams.addIntEnumIfDefined("repeat", self.repeat)
        return vparams

    def getPlaylistId(self):
        return self.playlistId

    def setPlaylistId(self, newPlaylistId):
        self.playlistId = newPlaylistId

    def getRepeat(self):
        return self.repeat

    def setRepeat(self, newRepeat):
        self.repeat = newRepeat


# @package Vidiun
# @subpackage Client
class VidiunLiveChannelSegment(VidiunObjectBase):
    def __init__(self,
            id=NotImplemented,
            partnerId=NotImplemented,
            createdAt=NotImplemented,
            updatedAt=NotImplemented,
            name=NotImplemented,
            description=NotImplemented,
            tags=NotImplemented,
            type=NotImplemented,
            status=NotImplemented,
            channelId=NotImplemented,
            entryId=NotImplemented,
            triggerType=NotImplemented,
            triggerSegmentId=NotImplemented,
            startTime=NotImplemented,
            duration=NotImplemented):
        VidiunObjectBase.__init__(self)

        # Unique identifier
        # @var string
        # @readonly
        self.id = id

        # @var int
        # @readonly
        self.partnerId = partnerId

        # Segment creation date as Unix timestamp (In seconds)
        # @var int
        # @readonly
        self.createdAt = createdAt

        # Segment update date as Unix timestamp (In seconds)
        # @var int
        # @readonly
        self.updatedAt = updatedAt

        # Segment name
        # @var string
        self.name = name

        # Segment description
        # @var string
        self.description = description

        # Segment tags
        # @var string
        self.tags = tags

        # Segment could be associated with the main stream, as additional stream or as overlay
        # @var VidiunLiveChannelSegmentType
        self.type = type

        # @var VidiunLiveChannelSegmentStatus
        # @readonly
        self.status = status

        # Live channel id
        # @var string
        self.channelId = channelId

        # Entry id to be played
        # @var string
        self.entryId = entryId

        # Segment start time trigger type
        # @var VidiunLiveChannelSegmentTriggerType
        self.triggerType = triggerType

        # Live channel segment that the trigger relates to
        # @var string
        self.triggerSegmentId = triggerSegmentId

        # Segment play start time, in mili-seconds, according to trigger type
        # @var float
        self.startTime = startTime

        # Segment play duration time, in mili-seconds
        # @var float
        self.duration = duration


    PROPERTY_LOADERS = {
        'id': getXmlNodeText, 
        'partnerId': getXmlNodeInt, 
        'createdAt': getXmlNodeInt, 
        'updatedAt': getXmlNodeInt, 
        'name': getXmlNodeText, 
        'description': getXmlNodeText, 
        'tags': getXmlNodeText, 
        'type': (VidiunEnumsFactory.createString, "VidiunLiveChannelSegmentType"), 
        'status': (VidiunEnumsFactory.createString, "VidiunLiveChannelSegmentStatus"), 
        'channelId': getXmlNodeText, 
        'entryId': getXmlNodeText, 
        'triggerType': (VidiunEnumsFactory.createString, "VidiunLiveChannelSegmentTriggerType"), 
        'triggerSegmentId': getXmlNodeText, 
        'startTime': getXmlNodeFloat, 
        'duration': getXmlNodeFloat, 
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunLiveChannelSegment.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunLiveChannelSegment")
        vparams.addStringIfDefined("name", self.name)
        vparams.addStringIfDefined("description", self.description)
        vparams.addStringIfDefined("tags", self.tags)
        vparams.addStringEnumIfDefined("type", self.type)
        vparams.addStringIfDefined("channelId", self.channelId)
        vparams.addStringIfDefined("entryId", self.entryId)
        vparams.addStringEnumIfDefined("triggerType", self.triggerType)
        vparams.addStringIfDefined("triggerSegmentId", self.triggerSegmentId)
        vparams.addFloatIfDefined("startTime", self.startTime)
        vparams.addFloatIfDefined("duration", self.duration)
        return vparams

    def getId(self):
        return self.id

    def getPartnerId(self):
        return self.partnerId

    def getCreatedAt(self):
        return self.createdAt

    def getUpdatedAt(self):
        return self.updatedAt

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName

    def getDescription(self):
        return self.description

    def setDescription(self, newDescription):
        self.description = newDescription

    def getTags(self):
        return self.tags

    def setTags(self, newTags):
        self.tags = newTags

    def getType(self):
        return self.type

    def setType(self, newType):
        self.type = newType

    def getStatus(self):
        return self.status

    def getChannelId(self):
        return self.channelId

    def setChannelId(self, newChannelId):
        self.channelId = newChannelId

    def getEntryId(self):
        return self.entryId

    def setEntryId(self, newEntryId):
        self.entryId = newEntryId

    def getTriggerType(self):
        return self.triggerType

    def setTriggerType(self, newTriggerType):
        self.triggerType = newTriggerType

    def getTriggerSegmentId(self):
        return self.triggerSegmentId

    def setTriggerSegmentId(self, newTriggerSegmentId):
        self.triggerSegmentId = newTriggerSegmentId

    def getStartTime(self):
        return self.startTime

    def setStartTime(self, newStartTime):
        self.startTime = newStartTime

    def getDuration(self):
        return self.duration

    def setDuration(self, newDuration):
        self.duration = newDuration


# @package Vidiun
# @subpackage Client
class VidiunLiveReportExportParams(VidiunObjectBase):
    def __init__(self,
            entryIds=NotImplemented,
            recpientEmail=NotImplemented,
            timeZoneOffset=NotImplemented,
            applicationUrlTemplate=NotImplemented):
        VidiunObjectBase.__init__(self)

        # @var string
        self.entryIds = entryIds

        # @var string
        self.recpientEmail = recpientEmail

        # Time zone offset in minutes (between client to UTC)
        # @var int
        self.timeZoneOffset = timeZoneOffset

        # Optional argument that allows controlling the prefix of the exported csv url
        # @var string
        self.applicationUrlTemplate = applicationUrlTemplate


    PROPERTY_LOADERS = {
        'entryIds': getXmlNodeText, 
        'recpientEmail': getXmlNodeText, 
        'timeZoneOffset': getXmlNodeInt, 
        'applicationUrlTemplate': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunLiveReportExportParams.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunLiveReportExportParams")
        vparams.addStringIfDefined("entryIds", self.entryIds)
        vparams.addStringIfDefined("recpientEmail", self.recpientEmail)
        vparams.addIntIfDefined("timeZoneOffset", self.timeZoneOffset)
        vparams.addStringIfDefined("applicationUrlTemplate", self.applicationUrlTemplate)
        return vparams

    def getEntryIds(self):
        return self.entryIds

    def setEntryIds(self, newEntryIds):
        self.entryIds = newEntryIds

    def getRecpientEmail(self):
        return self.recpientEmail

    def setRecpientEmail(self, newRecpientEmail):
        self.recpientEmail = newRecpientEmail

    def getTimeZoneOffset(self):
        return self.timeZoneOffset

    def setTimeZoneOffset(self, newTimeZoneOffset):
        self.timeZoneOffset = newTimeZoneOffset

    def getApplicationUrlTemplate(self):
        return self.applicationUrlTemplate

    def setApplicationUrlTemplate(self, newApplicationUrlTemplate):
        self.applicationUrlTemplate = newApplicationUrlTemplate


# @package Vidiun
# @subpackage Client
class VidiunLiveReportExportResponse(VidiunObjectBase):
    def __init__(self,
            referenceJobId=NotImplemented,
            reportEmail=NotImplemented):
        VidiunObjectBase.__init__(self)

        # @var int
        self.referenceJobId = referenceJobId

        # @var string
        self.reportEmail = reportEmail


    PROPERTY_LOADERS = {
        'referenceJobId': getXmlNodeInt, 
        'reportEmail': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunLiveReportExportResponse.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunLiveReportExportResponse")
        vparams.addIntIfDefined("referenceJobId", self.referenceJobId)
        vparams.addStringIfDefined("reportEmail", self.reportEmail)
        return vparams

    def getReferenceJobId(self):
        return self.referenceJobId

    def setReferenceJobId(self, newReferenceJobId):
        self.referenceJobId = newReferenceJobId

    def getReportEmail(self):
        return self.reportEmail

    def setReportEmail(self, newReportEmail):
        self.reportEmail = newReportEmail


# @package Vidiun
# @subpackage Client
class VidiunLiveReportInputFilter(VidiunObjectBase):
    def __init__(self,
            entryIds=NotImplemented,
            fromTime=NotImplemented,
            toTime=NotImplemented,
            live=NotImplemented,
            orderBy=NotImplemented):
        VidiunObjectBase.__init__(self)

        # @var string
        self.entryIds = entryIds

        # @var int
        self.fromTime = fromTime

        # @var int
        self.toTime = toTime

        # @var VidiunNullableBoolean
        self.live = live

        # @var VidiunLiveReportOrderBy
        self.orderBy = orderBy


    PROPERTY_LOADERS = {
        'entryIds': getXmlNodeText, 
        'fromTime': getXmlNodeInt, 
        'toTime': getXmlNodeInt, 
        'live': (VidiunEnumsFactory.createInt, "VidiunNullableBoolean"), 
        'orderBy': (VidiunEnumsFactory.createString, "VidiunLiveReportOrderBy"), 
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunLiveReportInputFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunLiveReportInputFilter")
        vparams.addStringIfDefined("entryIds", self.entryIds)
        vparams.addIntIfDefined("fromTime", self.fromTime)
        vparams.addIntIfDefined("toTime", self.toTime)
        vparams.addIntEnumIfDefined("live", self.live)
        vparams.addStringEnumIfDefined("orderBy", self.orderBy)
        return vparams

    def getEntryIds(self):
        return self.entryIds

    def setEntryIds(self, newEntryIds):
        self.entryIds = newEntryIds

    def getFromTime(self):
        return self.fromTime

    def setFromTime(self, newFromTime):
        self.fromTime = newFromTime

    def getToTime(self):
        return self.toTime

    def setToTime(self, newToTime):
        self.toTime = newToTime

    def getLive(self):
        return self.live

    def setLive(self, newLive):
        self.live = newLive

    def getOrderBy(self):
        return self.orderBy

    def setOrderBy(self, newOrderBy):
        self.orderBy = newOrderBy


# @package Vidiun
# @subpackage Client
class VidiunLiveStats(VidiunObjectBase):
    def __init__(self,
            audience=NotImplemented,
            dvrAudience=NotImplemented,
            avgBitrate=NotImplemented,
            bufferTime=NotImplemented,
            plays=NotImplemented,
            secondsViewed=NotImplemented,
            startEvent=NotImplemented,
            timestamp=NotImplemented):
        VidiunObjectBase.__init__(self)

        # @var int
        self.audience = audience

        # @var int
        self.dvrAudience = dvrAudience

        # @var float
        self.avgBitrate = avgBitrate

        # @var int
        self.bufferTime = bufferTime

        # @var int
        self.plays = plays

        # @var int
        self.secondsViewed = secondsViewed

        # @var int
        self.startEvent = startEvent

        # @var int
        self.timestamp = timestamp


    PROPERTY_LOADERS = {
        'audience': getXmlNodeInt, 
        'dvrAudience': getXmlNodeInt, 
        'avgBitrate': getXmlNodeFloat, 
        'bufferTime': getXmlNodeInt, 
        'plays': getXmlNodeInt, 
        'secondsViewed': getXmlNodeInt, 
        'startEvent': getXmlNodeInt, 
        'timestamp': getXmlNodeInt, 
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunLiveStats.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunLiveStats")
        vparams.addIntIfDefined("audience", self.audience)
        vparams.addIntIfDefined("dvrAudience", self.dvrAudience)
        vparams.addFloatIfDefined("avgBitrate", self.avgBitrate)
        vparams.addIntIfDefined("bufferTime", self.bufferTime)
        vparams.addIntIfDefined("plays", self.plays)
        vparams.addIntIfDefined("secondsViewed", self.secondsViewed)
        vparams.addIntIfDefined("startEvent", self.startEvent)
        vparams.addIntIfDefined("timestamp", self.timestamp)
        return vparams

    def getAudience(self):
        return self.audience

    def setAudience(self, newAudience):
        self.audience = newAudience

    def getDvrAudience(self):
        return self.dvrAudience

    def setDvrAudience(self, newDvrAudience):
        self.dvrAudience = newDvrAudience

    def getAvgBitrate(self):
        return self.avgBitrate

    def setAvgBitrate(self, newAvgBitrate):
        self.avgBitrate = newAvgBitrate

    def getBufferTime(self):
        return self.bufferTime

    def setBufferTime(self, newBufferTime):
        self.bufferTime = newBufferTime

    def getPlays(self):
        return self.plays

    def setPlays(self, newPlays):
        self.plays = newPlays

    def getSecondsViewed(self):
        return self.secondsViewed

    def setSecondsViewed(self, newSecondsViewed):
        self.secondsViewed = newSecondsViewed

    def getStartEvent(self):
        return self.startEvent

    def setStartEvent(self, newStartEvent):
        self.startEvent = newStartEvent

    def getTimestamp(self):
        return self.timestamp

    def setTimestamp(self, newTimestamp):
        self.timestamp = newTimestamp


# @package Vidiun
# @subpackage Client
class VidiunLiveStatsEvent(VidiunObjectBase):
    """Will hold data from the Vidiun Player components to be passed on to the live analytics system"""

    def __init__(self,
            partnerId=NotImplemented,
            entryId=NotImplemented,
            eventType=NotImplemented,
            sessionId=NotImplemented,
            eventIndex=NotImplemented,
            bufferTime=NotImplemented,
            bitrate=NotImplemented,
            referrer=NotImplemented,
            isLive=NotImplemented,
            startTime=NotImplemented,
            deliveryType=NotImplemented):
        VidiunObjectBase.__init__(self)

        # @var int
        self.partnerId = partnerId

        # @var string
        self.entryId = entryId

        # an integer representing the type of event being sent from the player
        # @var VidiunLiveStatsEventType
        self.eventType = eventType

        # a unique string generated by the client that will represent the client-side session: the primary component will pass it on to other components that sprout from it
        # @var string
        self.sessionId = sessionId

        # incremental sequence of the event
        # @var int
        self.eventIndex = eventIndex

        # buffer time in seconds from the last 10 seconds
        # @var int
        self.bufferTime = bufferTime

        # bitrate used in the last 10 seconds
        # @var int
        self.bitrate = bitrate

        # the referrer of the client
        # @var string
        self.referrer = referrer

        # @var bool
        self.isLive = isLive

        # the event start time as string
        # @var string
        self.startTime = startTime

        # delivery type used for this stream
        # @var VidiunPlaybackProtocol
        self.deliveryType = deliveryType


    PROPERTY_LOADERS = {
        'partnerId': getXmlNodeInt, 
        'entryId': getXmlNodeText, 
        'eventType': (VidiunEnumsFactory.createInt, "VidiunLiveStatsEventType"), 
        'sessionId': getXmlNodeText, 
        'eventIndex': getXmlNodeInt, 
        'bufferTime': getXmlNodeInt, 
        'bitrate': getXmlNodeInt, 
        'referrer': getXmlNodeText, 
        'isLive': getXmlNodeBool, 
        'startTime': getXmlNodeText, 
        'deliveryType': (VidiunEnumsFactory.createString, "VidiunPlaybackProtocol"), 
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunLiveStatsEvent.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunLiveStatsEvent")
        vparams.addIntIfDefined("partnerId", self.partnerId)
        vparams.addStringIfDefined("entryId", self.entryId)
        vparams.addIntEnumIfDefined("eventType", self.eventType)
        vparams.addStringIfDefined("sessionId", self.sessionId)
        vparams.addIntIfDefined("eventIndex", self.eventIndex)
        vparams.addIntIfDefined("bufferTime", self.bufferTime)
        vparams.addIntIfDefined("bitrate", self.bitrate)
        vparams.addStringIfDefined("referrer", self.referrer)
        vparams.addBoolIfDefined("isLive", self.isLive)
        vparams.addStringIfDefined("startTime", self.startTime)
        vparams.addStringEnumIfDefined("deliveryType", self.deliveryType)
        return vparams

    def getPartnerId(self):
        return self.partnerId

    def setPartnerId(self, newPartnerId):
        self.partnerId = newPartnerId

    def getEntryId(self):
        return self.entryId

    def setEntryId(self, newEntryId):
        self.entryId = newEntryId

    def getEventType(self):
        return self.eventType

    def setEventType(self, newEventType):
        self.eventType = newEventType

    def getSessionId(self):
        return self.sessionId

    def setSessionId(self, newSessionId):
        self.sessionId = newSessionId

    def getEventIndex(self):
        return self.eventIndex

    def setEventIndex(self, newEventIndex):
        self.eventIndex = newEventIndex

    def getBufferTime(self):
        return self.bufferTime

    def setBufferTime(self, newBufferTime):
        self.bufferTime = newBufferTime

    def getBitrate(self):
        return self.bitrate

    def setBitrate(self, newBitrate):
        self.bitrate = newBitrate

    def getReferrer(self):
        return self.referrer

    def setReferrer(self, newReferrer):
        self.referrer = newReferrer

    def getIsLive(self):
        return self.isLive

    def setIsLive(self, newIsLive):
        self.isLive = newIsLive

    def getStartTime(self):
        return self.startTime

    def setStartTime(self, newStartTime):
        self.startTime = newStartTime

    def getDeliveryType(self):
        return self.deliveryType

    def setDeliveryType(self, newDeliveryType):
        self.deliveryType = newDeliveryType


# @package Vidiun
# @subpackage Client
class VidiunLiveStreamBitrate(VidiunObjectBase):
    def __init__(self,
            bitrate=NotImplemented,
            width=NotImplemented,
            height=NotImplemented,
            tags=NotImplemented):
        VidiunObjectBase.__init__(self)

        # @var int
        self.bitrate = bitrate

        # @var int
        self.width = width

        # @var int
        self.height = height

        # @var string
        self.tags = tags


    PROPERTY_LOADERS = {
        'bitrate': getXmlNodeInt, 
        'width': getXmlNodeInt, 
        'height': getXmlNodeInt, 
        'tags': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunLiveStreamBitrate.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunLiveStreamBitrate")
        vparams.addIntIfDefined("bitrate", self.bitrate)
        vparams.addIntIfDefined("width", self.width)
        vparams.addIntIfDefined("height", self.height)
        vparams.addStringIfDefined("tags", self.tags)
        return vparams

    def getBitrate(self):
        return self.bitrate

    def setBitrate(self, newBitrate):
        self.bitrate = newBitrate

    def getWidth(self):
        return self.width

    def setWidth(self, newWidth):
        self.width = newWidth

    def getHeight(self):
        return self.height

    def setHeight(self, newHeight):
        self.height = newHeight

    def getTags(self):
        return self.tags

    def setTags(self, newTags):
        self.tags = newTags


# @package Vidiun
# @subpackage Client
class VidiunLiveStreamEntry(VidiunLiveEntry):
    def __init__(self,
            id=NotImplemented,
            name=NotImplemented,
            description=NotImplemented,
            partnerId=NotImplemented,
            userId=NotImplemented,
            creatorId=NotImplemented,
            tags=NotImplemented,
            adminTags=NotImplemented,
            categories=NotImplemented,
            categoriesIds=NotImplemented,
            status=NotImplemented,
            moderationStatus=NotImplemented,
            moderationCount=NotImplemented,
            type=NotImplemented,
            createdAt=NotImplemented,
            updatedAt=NotImplemented,
            rank=NotImplemented,
            totalRank=NotImplemented,
            votes=NotImplemented,
            groupId=NotImplemented,
            partnerData=NotImplemented,
            downloadUrl=NotImplemented,
            searchText=NotImplemented,
            licenseType=NotImplemented,
            version=NotImplemented,
            thumbnailUrl=NotImplemented,
            accessControlId=NotImplemented,
            startDate=NotImplemented,
            endDate=NotImplemented,
            referenceId=NotImplemented,
            replacingEntryId=NotImplemented,
            replacedEntryId=NotImplemented,
            replacementStatus=NotImplemented,
            partnerSortValue=NotImplemented,
            conversionProfileId=NotImplemented,
            redirectEntryId=NotImplemented,
            rootEntryId=NotImplemented,
            parentEntryId=NotImplemented,
            operationAttributes=NotImplemented,
            entitledUsersEdit=NotImplemented,
            entitledUsersPublish=NotImplemented,
            capabilities=NotImplemented,
            templateEntryId=NotImplemented,
            plays=NotImplemented,
            views=NotImplemented,
            lastPlayedAt=NotImplemented,
            width=NotImplemented,
            height=NotImplemented,
            duration=NotImplemented,
            msDuration=NotImplemented,
            durationType=NotImplemented,
            mediaType=NotImplemented,
            conversionQuality=NotImplemented,
            sourceType=NotImplemented,
            searchProviderType=NotImplemented,
            searchProviderId=NotImplemented,
            creditUserName=NotImplemented,
            creditUrl=NotImplemented,
            mediaDate=NotImplemented,
            dataUrl=NotImplemented,
            flavorParamsIds=NotImplemented,
            isTrimDisabled=NotImplemented,
            offlineMessage=NotImplemented,
            recordStatus=NotImplemented,
            dvrStatus=NotImplemented,
            dvrWindow=NotImplemented,
            lastElapsedRecordingTime=NotImplemented,
            liveStreamConfigurations=NotImplemented,
            recordedEntryId=NotImplemented,
            pushPublishEnabled=NotImplemented,
            publishConfigurations=NotImplemented,
            firstBroadcast=NotImplemented,
            lastBroadcast=NotImplemented,
            currentBroadcastStartTime=NotImplemented,
            recordingOptions=NotImplemented,
            liveStatus=NotImplemented,
            streamRemoteId=NotImplemented,
            streamRemoteBackupId=NotImplemented,
            bitrates=NotImplemented,
            primaryBroadcastingUrl=NotImplemented,
            secondaryBroadcastingUrl=NotImplemented,
            primaryRtspBroadcastingUrl=NotImplemented,
            secondaryRtspBroadcastingUrl=NotImplemented,
            streamName=NotImplemented,
            streamUrl=NotImplemented,
            hlsStreamUrl=NotImplemented,
            urlManager=NotImplemented,
            encodingIP1=NotImplemented,
            encodingIP2=NotImplemented,
            streamPassword=NotImplemented,
            streamUsername=NotImplemented,
            primaryServerNodeId=NotImplemented):
        VidiunLiveEntry.__init__(self,
            id,
            name,
            description,
            partnerId,
            userId,
            creatorId,
            tags,
            adminTags,
            categories,
            categoriesIds,
            status,
            moderationStatus,
            moderationCount,
            type,
            createdAt,
            updatedAt,
            rank,
            totalRank,
            votes,
            groupId,
            partnerData,
            downloadUrl,
            searchText,
            licenseType,
            version,
            thumbnailUrl,
            accessControlId,
            startDate,
            endDate,
            referenceId,
            replacingEntryId,
            replacedEntryId,
            replacementStatus,
            partnerSortValue,
            conversionProfileId,
            redirectEntryId,
            rootEntryId,
            parentEntryId,
            operationAttributes,
            entitledUsersEdit,
            entitledUsersPublish,
            capabilities,
            templateEntryId,
            plays,
            views,
            lastPlayedAt,
            width,
            height,
            duration,
            msDuration,
            durationType,
            mediaType,
            conversionQuality,
            sourceType,
            searchProviderType,
            searchProviderId,
            creditUserName,
            creditUrl,
            mediaDate,
            dataUrl,
            flavorParamsIds,
            isTrimDisabled,
            offlineMessage,
            recordStatus,
            dvrStatus,
            dvrWindow,
            lastElapsedRecordingTime,
            liveStreamConfigurations,
            recordedEntryId,
            pushPublishEnabled,
            publishConfigurations,
            firstBroadcast,
            lastBroadcast,
            currentBroadcastStartTime,
            recordingOptions,
            liveStatus)

        # The stream id as provided by the provider
        # @var string
        # @readonly
        self.streamRemoteId = streamRemoteId

        # The backup stream id as provided by the provider
        # @var string
        # @readonly
        self.streamRemoteBackupId = streamRemoteBackupId

        # Array of supported bitrates
        # @var array of VidiunLiveStreamBitrate
        self.bitrates = bitrates

        # @var string
        self.primaryBroadcastingUrl = primaryBroadcastingUrl

        # @var string
        self.secondaryBroadcastingUrl = secondaryBroadcastingUrl

        # @var string
        self.primaryRtspBroadcastingUrl = primaryRtspBroadcastingUrl

        # @var string
        self.secondaryRtspBroadcastingUrl = secondaryRtspBroadcastingUrl

        # @var string
        self.streamName = streamName

        # The stream url
        # @var string
        self.streamUrl = streamUrl

        # HLS URL - URL for live stream playback on mobile device
        # @var string
        self.hlsStreamUrl = hlsStreamUrl

        # URL Manager to handle the live stream URL (for instance, add token)
        # @var string
        self.urlManager = urlManager

        # The broadcast primary ip
        # @var string
        self.encodingIP1 = encodingIP1

        # The broadcast secondary ip
        # @var string
        self.encodingIP2 = encodingIP2

        # The broadcast password
        # @var string
        self.streamPassword = streamPassword

        # The broadcast username
        # @var string
        # @readonly
        self.streamUsername = streamUsername

        # The Streams primary server node id
        # @var int
        # @readonly
        self.primaryServerNodeId = primaryServerNodeId


    PROPERTY_LOADERS = {
        'streamRemoteId': getXmlNodeText, 
        'streamRemoteBackupId': getXmlNodeText, 
        'bitrates': (VidiunObjectFactory.createArray, VidiunLiveStreamBitrate), 
        'primaryBroadcastingUrl': getXmlNodeText, 
        'secondaryBroadcastingUrl': getXmlNodeText, 
        'primaryRtspBroadcastingUrl': getXmlNodeText, 
        'secondaryRtspBroadcastingUrl': getXmlNodeText, 
        'streamName': getXmlNodeText, 
        'streamUrl': getXmlNodeText, 
        'hlsStreamUrl': getXmlNodeText, 
        'urlManager': getXmlNodeText, 
        'encodingIP1': getXmlNodeText, 
        'encodingIP2': getXmlNodeText, 
        'streamPassword': getXmlNodeText, 
        'streamUsername': getXmlNodeText, 
        'primaryServerNodeId': getXmlNodeInt, 
    }

    def fromXml(self, node):
        VidiunLiveEntry.fromXml(self, node)
        self.fromXmlImpl(node, VidiunLiveStreamEntry.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunLiveEntry.toParams(self)
        vparams.put("objectType", "VidiunLiveStreamEntry")
        vparams.addArrayIfDefined("bitrates", self.bitrates)
        vparams.addStringIfDefined("primaryBroadcastingUrl", self.primaryBroadcastingUrl)
        vparams.addStringIfDefined("secondaryBroadcastingUrl", self.secondaryBroadcastingUrl)
        vparams.addStringIfDefined("primaryRtspBroadcastingUrl", self.primaryRtspBroadcastingUrl)
        vparams.addStringIfDefined("secondaryRtspBroadcastingUrl", self.secondaryRtspBroadcastingUrl)
        vparams.addStringIfDefined("streamName", self.streamName)
        vparams.addStringIfDefined("streamUrl", self.streamUrl)
        vparams.addStringIfDefined("hlsStreamUrl", self.hlsStreamUrl)
        vparams.addStringIfDefined("urlManager", self.urlManager)
        vparams.addStringIfDefined("encodingIP1", self.encodingIP1)
        vparams.addStringIfDefined("encodingIP2", self.encodingIP2)
        vparams.addStringIfDefined("streamPassword", self.streamPassword)
        return vparams

    def getStreamRemoteId(self):
        return self.streamRemoteId

    def getStreamRemoteBackupId(self):
        return self.streamRemoteBackupId

    def getBitrates(self):
        return self.bitrates

    def setBitrates(self, newBitrates):
        self.bitrates = newBitrates

    def getPrimaryBroadcastingUrl(self):
        return self.primaryBroadcastingUrl

    def setPrimaryBroadcastingUrl(self, newPrimaryBroadcastingUrl):
        self.primaryBroadcastingUrl = newPrimaryBroadcastingUrl

    def getSecondaryBroadcastingUrl(self):
        return self.secondaryBroadcastingUrl

    def setSecondaryBroadcastingUrl(self, newSecondaryBroadcastingUrl):
        self.secondaryBroadcastingUrl = newSecondaryBroadcastingUrl

    def getPrimaryRtspBroadcastingUrl(self):
        return self.primaryRtspBroadcastingUrl

    def setPrimaryRtspBroadcastingUrl(self, newPrimaryRtspBroadcastingUrl):
        self.primaryRtspBroadcastingUrl = newPrimaryRtspBroadcastingUrl

    def getSecondaryRtspBroadcastingUrl(self):
        return self.secondaryRtspBroadcastingUrl

    def setSecondaryRtspBroadcastingUrl(self, newSecondaryRtspBroadcastingUrl):
        self.secondaryRtspBroadcastingUrl = newSecondaryRtspBroadcastingUrl

    def getStreamName(self):
        return self.streamName

    def setStreamName(self, newStreamName):
        self.streamName = newStreamName

    def getStreamUrl(self):
        return self.streamUrl

    def setStreamUrl(self, newStreamUrl):
        self.streamUrl = newStreamUrl

    def getHlsStreamUrl(self):
        return self.hlsStreamUrl

    def setHlsStreamUrl(self, newHlsStreamUrl):
        self.hlsStreamUrl = newHlsStreamUrl

    def getUrlManager(self):
        return self.urlManager

    def setUrlManager(self, newUrlManager):
        self.urlManager = newUrlManager

    def getEncodingIP1(self):
        return self.encodingIP1

    def setEncodingIP1(self, newEncodingIP1):
        self.encodingIP1 = newEncodingIP1

    def getEncodingIP2(self):
        return self.encodingIP2

    def setEncodingIP2(self, newEncodingIP2):
        self.encodingIP2 = newEncodingIP2

    def getStreamPassword(self):
        return self.streamPassword

    def setStreamPassword(self, newStreamPassword):
        self.streamPassword = newStreamPassword

    def getStreamUsername(self):
        return self.streamUsername

    def getPrimaryServerNodeId(self):
        return self.primaryServerNodeId


# @package Vidiun
# @subpackage Client
class VidiunLiveStreamParams(VidiunObjectBase):
    def __init__(self,
            bitrate=NotImplemented,
            flavorId=NotImplemented,
            width=NotImplemented,
            height=NotImplemented,
            codec=NotImplemented):
        VidiunObjectBase.__init__(self)

        # Bit rate of the stream. (i.e. 900)
        # @var int
        self.bitrate = bitrate

        # flavor asset id
        # @var string
        self.flavorId = flavorId

        # Stream's width
        # @var int
        self.width = width

        # Stream's height
        # @var int
        self.height = height

        # Live stream's codec
        # @var string
        self.codec = codec


    PROPERTY_LOADERS = {
        'bitrate': getXmlNodeInt, 
        'flavorId': getXmlNodeText, 
        'width': getXmlNodeInt, 
        'height': getXmlNodeInt, 
        'codec': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunLiveStreamParams.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunLiveStreamParams")
        vparams.addIntIfDefined("bitrate", self.bitrate)
        vparams.addStringIfDefined("flavorId", self.flavorId)
        vparams.addIntIfDefined("width", self.width)
        vparams.addIntIfDefined("height", self.height)
        vparams.addStringIfDefined("codec", self.codec)
        return vparams

    def getBitrate(self):
        return self.bitrate

    def setBitrate(self, newBitrate):
        self.bitrate = newBitrate

    def getFlavorId(self):
        return self.flavorId

    def setFlavorId(self, newFlavorId):
        self.flavorId = newFlavorId

    def getWidth(self):
        return self.width

    def setWidth(self, newWidth):
        self.width = newWidth

    def getHeight(self):
        return self.height

    def setHeight(self, newHeight):
        self.height = newHeight

    def getCodec(self):
        return self.codec

    def setCodec(self, newCodec):
        self.codec = newCodec


# @package Vidiun
# @subpackage Client
class VidiunBaseEntryBaseFilter(VidiunRelatedFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            idNotIn=NotImplemented,
            nameLike=NotImplemented,
            nameMultiLikeOr=NotImplemented,
            nameMultiLikeAnd=NotImplemented,
            nameEqual=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            userIdEqual=NotImplemented,
            userIdIn=NotImplemented,
            creatorIdEqual=NotImplemented,
            tagsLike=NotImplemented,
            tagsMultiLikeOr=NotImplemented,
            tagsMultiLikeAnd=NotImplemented,
            adminTagsLike=NotImplemented,
            adminTagsMultiLikeOr=NotImplemented,
            adminTagsMultiLikeAnd=NotImplemented,
            categoriesMatchAnd=NotImplemented,
            categoriesMatchOr=NotImplemented,
            categoriesNotContains=NotImplemented,
            categoriesIdsMatchAnd=NotImplemented,
            categoriesIdsMatchOr=NotImplemented,
            categoriesIdsNotContains=NotImplemented,
            categoriesIdsEmpty=NotImplemented,
            statusEqual=NotImplemented,
            statusNotEqual=NotImplemented,
            statusIn=NotImplemented,
            statusNotIn=NotImplemented,
            moderationStatusEqual=NotImplemented,
            moderationStatusNotEqual=NotImplemented,
            moderationStatusIn=NotImplemented,
            moderationStatusNotIn=NotImplemented,
            typeEqual=NotImplemented,
            typeIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            totalRankLessThanOrEqual=NotImplemented,
            totalRankGreaterThanOrEqual=NotImplemented,
            groupIdEqual=NotImplemented,
            searchTextMatchAnd=NotImplemented,
            searchTextMatchOr=NotImplemented,
            accessControlIdEqual=NotImplemented,
            accessControlIdIn=NotImplemented,
            startDateGreaterThanOrEqual=NotImplemented,
            startDateLessThanOrEqual=NotImplemented,
            startDateGreaterThanOrEqualOrNull=NotImplemented,
            startDateLessThanOrEqualOrNull=NotImplemented,
            endDateGreaterThanOrEqual=NotImplemented,
            endDateLessThanOrEqual=NotImplemented,
            endDateGreaterThanOrEqualOrNull=NotImplemented,
            endDateLessThanOrEqualOrNull=NotImplemented,
            referenceIdEqual=NotImplemented,
            referenceIdIn=NotImplemented,
            replacingEntryIdEqual=NotImplemented,
            replacingEntryIdIn=NotImplemented,
            replacedEntryIdEqual=NotImplemented,
            replacedEntryIdIn=NotImplemented,
            replacementStatusEqual=NotImplemented,
            replacementStatusIn=NotImplemented,
            partnerSortValueGreaterThanOrEqual=NotImplemented,
            partnerSortValueLessThanOrEqual=NotImplemented,
            rootEntryIdEqual=NotImplemented,
            rootEntryIdIn=NotImplemented,
            parentEntryIdEqual=NotImplemented,
            entitledUsersEditMatchAnd=NotImplemented,
            entitledUsersEditMatchOr=NotImplemented,
            entitledUsersPublishMatchAnd=NotImplemented,
            entitledUsersPublishMatchOr=NotImplemented,
            tagsNameMultiLikeOr=NotImplemented,
            tagsAdminTagsMultiLikeOr=NotImplemented,
            tagsAdminTagsNameMultiLikeOr=NotImplemented,
            tagsNameMultiLikeAnd=NotImplemented,
            tagsAdminTagsMultiLikeAnd=NotImplemented,
            tagsAdminTagsNameMultiLikeAnd=NotImplemented):
        VidiunRelatedFilter.__init__(self,
            orderBy,
            advancedSearch)

        # This filter should be in use for retrieving only a specific entry (identified by its entryId).
        # @var string
        self.idEqual = idEqual

        # This filter should be in use for retrieving few specific entries (string should include comma separated list of entryId strings).
        # @var string
        self.idIn = idIn

        # @var string
        self.idNotIn = idNotIn

        # This filter should be in use for retrieving specific entries. It should include only one string to search for in entry names (no wildcards, spaces are treated as part of the string).
        # @var string
        self.nameLike = nameLike

        # This filter should be in use for retrieving specific entries. It could include few (comma separated) strings for searching in entry names, while applying an OR logic to retrieve entries that contain at least one input string (no wildcards, spaces are treated as part of the string).
        # @var string
        self.nameMultiLikeOr = nameMultiLikeOr

        # This filter should be in use for retrieving specific entries. It could include few (comma separated) strings for searching in entry names, while applying an AND logic to retrieve entries that contain all input strings (no wildcards, spaces are treated as part of the string).
        # @var string
        self.nameMultiLikeAnd = nameMultiLikeAnd

        # This filter should be in use for retrieving entries with a specific name.
        # @var string
        self.nameEqual = nameEqual

        # This filter should be in use for retrieving only entries which were uploaded by/assigned to users of a specific Vidiun Partner (identified by Partner ID).
        # @var int
        self.partnerIdEqual = partnerIdEqual

        # This filter should be in use for retrieving only entries within Vidiun network which were uploaded by/assigned to users of few Vidiun Partners  (string should include comma separated list of PartnerIDs)
        # @var string
        self.partnerIdIn = partnerIdIn

        # This filter parameter should be in use for retrieving only entries, uploaded by/assigned to a specific user (identified by user Id).
        # @var string
        self.userIdEqual = userIdEqual

        # @var string
        self.userIdIn = userIdIn

        # @var string
        self.creatorIdEqual = creatorIdEqual

        # This filter should be in use for retrieving specific entries. It should include only one string to search for in entry tags (no wildcards, spaces are treated as part of the string).
        # @var string
        self.tagsLike = tagsLike

        # This filter should be in use for retrieving specific entries. It could include few (comma separated) strings for searching in entry tags, while applying an OR logic to retrieve entries that contain at least one input string (no wildcards, spaces are treated as part of the string).
        # @var string
        self.tagsMultiLikeOr = tagsMultiLikeOr

        # This filter should be in use for retrieving specific entries. It could include few (comma separated) strings for searching in entry tags, while applying an AND logic to retrieve entries that contain all input strings (no wildcards, spaces are treated as part of the string).
        # @var string
        self.tagsMultiLikeAnd = tagsMultiLikeAnd

        # This filter should be in use for retrieving specific entries. It should include only one string to search for in entry tags set by an ADMIN user (no wildcards, spaces are treated as part of the string).
        # @var string
        self.adminTagsLike = adminTagsLike

        # This filter should be in use for retrieving specific entries. It could include few (comma separated) strings for searching in entry tags, set by an ADMIN user, while applying an OR logic to retrieve entries that contain at least one input string (no wildcards, spaces are treated as part of the string).
        # @var string
        self.adminTagsMultiLikeOr = adminTagsMultiLikeOr

        # This filter should be in use for retrieving specific entries. It could include few (comma separated) strings for searching in entry tags, set by an ADMIN user, while applying an AND logic to retrieve entries that contain all input strings (no wildcards, spaces are treated as part of the string).
        # @var string
        self.adminTagsMultiLikeAnd = adminTagsMultiLikeAnd

        # @var string
        self.categoriesMatchAnd = categoriesMatchAnd

        # All entries within these categories or their child categories.
        # @var string
        self.categoriesMatchOr = categoriesMatchOr

        # @var string
        self.categoriesNotContains = categoriesNotContains

        # @var string
        self.categoriesIdsMatchAnd = categoriesIdsMatchAnd

        # All entries of the categories, excluding their child categories.
        # 	 To include entries of the child categories, use categoryAncestorIdIn, or categoriesMatchOr.
        # @var string
        self.categoriesIdsMatchOr = categoriesIdsMatchOr

        # @var string
        self.categoriesIdsNotContains = categoriesIdsNotContains

        # @var VidiunNullableBoolean
        self.categoriesIdsEmpty = categoriesIdsEmpty

        # This filter should be in use for retrieving only entries, at a specific {
        # @var VidiunEntryStatus
        self.statusEqual = statusEqual

        # This filter should be in use for retrieving only entries, not at a specific {
        # @var VidiunEntryStatus
        self.statusNotEqual = statusNotEqual

        # This filter should be in use for retrieving only entries, at few specific {
        # @var string
        self.statusIn = statusIn

        # This filter should be in use for retrieving only entries, not at few specific {
        # @var string
        self.statusNotIn = statusNotIn

        # @var VidiunEntryModerationStatus
        self.moderationStatusEqual = moderationStatusEqual

        # @var VidiunEntryModerationStatus
        self.moderationStatusNotEqual = moderationStatusNotEqual

        # @var string
        self.moderationStatusIn = moderationStatusIn

        # @var string
        self.moderationStatusNotIn = moderationStatusNotIn

        # @var VidiunEntryType
        self.typeEqual = typeEqual

        # This filter should be in use for retrieving entries of few {
        # @var string
        self.typeIn = typeIn

        # This filter parameter should be in use for retrieving only entries which were created at Vidiun system after a specific time/date (standard timestamp format).
        # @var int
        self.createdAtGreaterThanOrEqual = createdAtGreaterThanOrEqual

        # This filter parameter should be in use for retrieving only entries which were created at Vidiun system before a specific time/date (standard timestamp format).
        # @var int
        self.createdAtLessThanOrEqual = createdAtLessThanOrEqual

        # @var int
        self.updatedAtGreaterThanOrEqual = updatedAtGreaterThanOrEqual

        # @var int
        self.updatedAtLessThanOrEqual = updatedAtLessThanOrEqual

        # @var int
        self.totalRankLessThanOrEqual = totalRankLessThanOrEqual

        # @var int
        self.totalRankGreaterThanOrEqual = totalRankGreaterThanOrEqual

        # @var int
        self.groupIdEqual = groupIdEqual

        # This filter should be in use for retrieving specific entries while search match the input string within all of the following metadata attributes: name, description, tags, adminTags.
        # @var string
        self.searchTextMatchAnd = searchTextMatchAnd

        # This filter should be in use for retrieving specific entries while search match the input string within at least one of the following metadata attributes: name, description, tags, adminTags.
        # @var string
        self.searchTextMatchOr = searchTextMatchOr

        # @var int
        self.accessControlIdEqual = accessControlIdEqual

        # @var string
        self.accessControlIdIn = accessControlIdIn

        # @var int
        self.startDateGreaterThanOrEqual = startDateGreaterThanOrEqual

        # @var int
        self.startDateLessThanOrEqual = startDateLessThanOrEqual

        # @var int
        self.startDateGreaterThanOrEqualOrNull = startDateGreaterThanOrEqualOrNull

        # @var int
        self.startDateLessThanOrEqualOrNull = startDateLessThanOrEqualOrNull

        # @var int
        self.endDateGreaterThanOrEqual = endDateGreaterThanOrEqual

        # @var int
        self.endDateLessThanOrEqual = endDateLessThanOrEqual

        # @var int
        self.endDateGreaterThanOrEqualOrNull = endDateGreaterThanOrEqualOrNull

        # @var int
        self.endDateLessThanOrEqualOrNull = endDateLessThanOrEqualOrNull

        # @var string
        self.referenceIdEqual = referenceIdEqual

        # @var string
        self.referenceIdIn = referenceIdIn

        # @var string
        self.replacingEntryIdEqual = replacingEntryIdEqual

        # @var string
        self.replacingEntryIdIn = replacingEntryIdIn

        # @var string
        self.replacedEntryIdEqual = replacedEntryIdEqual

        # @var string
        self.replacedEntryIdIn = replacedEntryIdIn

        # @var VidiunEntryReplacementStatus
        self.replacementStatusEqual = replacementStatusEqual

        # @var string
        self.replacementStatusIn = replacementStatusIn

        # @var int
        self.partnerSortValueGreaterThanOrEqual = partnerSortValueGreaterThanOrEqual

        # @var int
        self.partnerSortValueLessThanOrEqual = partnerSortValueLessThanOrEqual

        # @var string
        self.rootEntryIdEqual = rootEntryIdEqual

        # @var string
        self.rootEntryIdIn = rootEntryIdIn

        # @var string
        self.parentEntryIdEqual = parentEntryIdEqual

        # @var string
        self.entitledUsersEditMatchAnd = entitledUsersEditMatchAnd

        # @var string
        self.entitledUsersEditMatchOr = entitledUsersEditMatchOr

        # @var string
        self.entitledUsersPublishMatchAnd = entitledUsersPublishMatchAnd

        # @var string
        self.entitledUsersPublishMatchOr = entitledUsersPublishMatchOr

        # @var string
        self.tagsNameMultiLikeOr = tagsNameMultiLikeOr

        # @var string
        self.tagsAdminTagsMultiLikeOr = tagsAdminTagsMultiLikeOr

        # @var string
        self.tagsAdminTagsNameMultiLikeOr = tagsAdminTagsNameMultiLikeOr

        # @var string
        self.tagsNameMultiLikeAnd = tagsNameMultiLikeAnd

        # @var string
        self.tagsAdminTagsMultiLikeAnd = tagsAdminTagsMultiLikeAnd

        # @var string
        self.tagsAdminTagsNameMultiLikeAnd = tagsAdminTagsNameMultiLikeAnd


    PROPERTY_LOADERS = {
        'idEqual': getXmlNodeText, 
        'idIn': getXmlNodeText, 
        'idNotIn': getXmlNodeText, 
        'nameLike': getXmlNodeText, 
        'nameMultiLikeOr': getXmlNodeText, 
        'nameMultiLikeAnd': getXmlNodeText, 
        'nameEqual': getXmlNodeText, 
        'partnerIdEqual': getXmlNodeInt, 
        'partnerIdIn': getXmlNodeText, 
        'userIdEqual': getXmlNodeText, 
        'userIdIn': getXmlNodeText, 
        'creatorIdEqual': getXmlNodeText, 
        'tagsLike': getXmlNodeText, 
        'tagsMultiLikeOr': getXmlNodeText, 
        'tagsMultiLikeAnd': getXmlNodeText, 
        'adminTagsLike': getXmlNodeText, 
        'adminTagsMultiLikeOr': getXmlNodeText, 
        'adminTagsMultiLikeAnd': getXmlNodeText, 
        'categoriesMatchAnd': getXmlNodeText, 
        'categoriesMatchOr': getXmlNodeText, 
        'categoriesNotContains': getXmlNodeText, 
        'categoriesIdsMatchAnd': getXmlNodeText, 
        'categoriesIdsMatchOr': getXmlNodeText, 
        'categoriesIdsNotContains': getXmlNodeText, 
        'categoriesIdsEmpty': (VidiunEnumsFactory.createInt, "VidiunNullableBoolean"), 
        'statusEqual': (VidiunEnumsFactory.createString, "VidiunEntryStatus"), 
        'statusNotEqual': (VidiunEnumsFactory.createString, "VidiunEntryStatus"), 
        'statusIn': getXmlNodeText, 
        'statusNotIn': getXmlNodeText, 
        'moderationStatusEqual': (VidiunEnumsFactory.createInt, "VidiunEntryModerationStatus"), 
        'moderationStatusNotEqual': (VidiunEnumsFactory.createInt, "VidiunEntryModerationStatus"), 
        'moderationStatusIn': getXmlNodeText, 
        'moderationStatusNotIn': getXmlNodeText, 
        'typeEqual': (VidiunEnumsFactory.createString, "VidiunEntryType"), 
        'typeIn': getXmlNodeText, 
        'createdAtGreaterThanOrEqual': getXmlNodeInt, 
        'createdAtLessThanOrEqual': getXmlNodeInt, 
        'updatedAtGreaterThanOrEqual': getXmlNodeInt, 
        'updatedAtLessThanOrEqual': getXmlNodeInt, 
        'totalRankLessThanOrEqual': getXmlNodeInt, 
        'totalRankGreaterThanOrEqual': getXmlNodeInt, 
        'groupIdEqual': getXmlNodeInt, 
        'searchTextMatchAnd': getXmlNodeText, 
        'searchTextMatchOr': getXmlNodeText, 
        'accessControlIdEqual': getXmlNodeInt, 
        'accessControlIdIn': getXmlNodeText, 
        'startDateGreaterThanOrEqual': getXmlNodeInt, 
        'startDateLessThanOrEqual': getXmlNodeInt, 
        'startDateGreaterThanOrEqualOrNull': getXmlNodeInt, 
        'startDateLessThanOrEqualOrNull': getXmlNodeInt, 
        'endDateGreaterThanOrEqual': getXmlNodeInt, 
        'endDateLessThanOrEqual': getXmlNodeInt, 
        'endDateGreaterThanOrEqualOrNull': getXmlNodeInt, 
        'endDateLessThanOrEqualOrNull': getXmlNodeInt, 
        'referenceIdEqual': getXmlNodeText, 
        'referenceIdIn': getXmlNodeText, 
        'replacingEntryIdEqual': getXmlNodeText, 
        'replacingEntryIdIn': getXmlNodeText, 
        'replacedEntryIdEqual': getXmlNodeText, 
        'replacedEntryIdIn': getXmlNodeText, 
        'replacementStatusEqual': (VidiunEnumsFactory.createString, "VidiunEntryReplacementStatus"), 
        'replacementStatusIn': getXmlNodeText, 
        'partnerSortValueGreaterThanOrEqual': getXmlNodeInt, 
        'partnerSortValueLessThanOrEqual': getXmlNodeInt, 
        'rootEntryIdEqual': getXmlNodeText, 
        'rootEntryIdIn': getXmlNodeText, 
        'parentEntryIdEqual': getXmlNodeText, 
        'entitledUsersEditMatchAnd': getXmlNodeText, 
        'entitledUsersEditMatchOr': getXmlNodeText, 
        'entitledUsersPublishMatchAnd': getXmlNodeText, 
        'entitledUsersPublishMatchOr': getXmlNodeText, 
        'tagsNameMultiLikeOr': getXmlNodeText, 
        'tagsAdminTagsMultiLikeOr': getXmlNodeText, 
        'tagsAdminTagsNameMultiLikeOr': getXmlNodeText, 
        'tagsNameMultiLikeAnd': getXmlNodeText, 
        'tagsAdminTagsMultiLikeAnd': getXmlNodeText, 
        'tagsAdminTagsNameMultiLikeAnd': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunRelatedFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunBaseEntryBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunRelatedFilter.toParams(self)
        vparams.put("objectType", "VidiunBaseEntryBaseFilter")
        vparams.addStringIfDefined("idEqual", self.idEqual)
        vparams.addStringIfDefined("idIn", self.idIn)
        vparams.addStringIfDefined("idNotIn", self.idNotIn)
        vparams.addStringIfDefined("nameLike", self.nameLike)
        vparams.addStringIfDefined("nameMultiLikeOr", self.nameMultiLikeOr)
        vparams.addStringIfDefined("nameMultiLikeAnd", self.nameMultiLikeAnd)
        vparams.addStringIfDefined("nameEqual", self.nameEqual)
        vparams.addIntIfDefined("partnerIdEqual", self.partnerIdEqual)
        vparams.addStringIfDefined("partnerIdIn", self.partnerIdIn)
        vparams.addStringIfDefined("userIdEqual", self.userIdEqual)
        vparams.addStringIfDefined("userIdIn", self.userIdIn)
        vparams.addStringIfDefined("creatorIdEqual", self.creatorIdEqual)
        vparams.addStringIfDefined("tagsLike", self.tagsLike)
        vparams.addStringIfDefined("tagsMultiLikeOr", self.tagsMultiLikeOr)
        vparams.addStringIfDefined("tagsMultiLikeAnd", self.tagsMultiLikeAnd)
        vparams.addStringIfDefined("adminTagsLike", self.adminTagsLike)
        vparams.addStringIfDefined("adminTagsMultiLikeOr", self.adminTagsMultiLikeOr)
        vparams.addStringIfDefined("adminTagsMultiLikeAnd", self.adminTagsMultiLikeAnd)
        vparams.addStringIfDefined("categoriesMatchAnd", self.categoriesMatchAnd)
        vparams.addStringIfDefined("categoriesMatchOr", self.categoriesMatchOr)
        vparams.addStringIfDefined("categoriesNotContains", self.categoriesNotContains)
        vparams.addStringIfDefined("categoriesIdsMatchAnd", self.categoriesIdsMatchAnd)
        vparams.addStringIfDefined("categoriesIdsMatchOr", self.categoriesIdsMatchOr)
        vparams.addStringIfDefined("categoriesIdsNotContains", self.categoriesIdsNotContains)
        vparams.addIntEnumIfDefined("categoriesIdsEmpty", self.categoriesIdsEmpty)
        vparams.addStringEnumIfDefined("statusEqual", self.statusEqual)
        vparams.addStringEnumIfDefined("statusNotEqual", self.statusNotEqual)
        vparams.addStringIfDefined("statusIn", self.statusIn)
        vparams.addStringIfDefined("statusNotIn", self.statusNotIn)
        vparams.addIntEnumIfDefined("moderationStatusEqual", self.moderationStatusEqual)
        vparams.addIntEnumIfDefined("moderationStatusNotEqual", self.moderationStatusNotEqual)
        vparams.addStringIfDefined("moderationStatusIn", self.moderationStatusIn)
        vparams.addStringIfDefined("moderationStatusNotIn", self.moderationStatusNotIn)
        vparams.addStringEnumIfDefined("typeEqual", self.typeEqual)
        vparams.addStringIfDefined("typeIn", self.typeIn)
        vparams.addIntIfDefined("createdAtGreaterThanOrEqual", self.createdAtGreaterThanOrEqual)
        vparams.addIntIfDefined("createdAtLessThanOrEqual", self.createdAtLessThanOrEqual)
        vparams.addIntIfDefined("updatedAtGreaterThanOrEqual", self.updatedAtGreaterThanOrEqual)
        vparams.addIntIfDefined("updatedAtLessThanOrEqual", self.updatedAtLessThanOrEqual)
        vparams.addIntIfDefined("totalRankLessThanOrEqual", self.totalRankLessThanOrEqual)
        vparams.addIntIfDefined("totalRankGreaterThanOrEqual", self.totalRankGreaterThanOrEqual)
        vparams.addIntIfDefined("groupIdEqual", self.groupIdEqual)
        vparams.addStringIfDefined("searchTextMatchAnd", self.searchTextMatchAnd)
        vparams.addStringIfDefined("searchTextMatchOr", self.searchTextMatchOr)
        vparams.addIntIfDefined("accessControlIdEqual", self.accessControlIdEqual)
        vparams.addStringIfDefined("accessControlIdIn", self.accessControlIdIn)
        vparams.addIntIfDefined("startDateGreaterThanOrEqual", self.startDateGreaterThanOrEqual)
        vparams.addIntIfDefined("startDateLessThanOrEqual", self.startDateLessThanOrEqual)
        vparams.addIntIfDefined("startDateGreaterThanOrEqualOrNull", self.startDateGreaterThanOrEqualOrNull)
        vparams.addIntIfDefined("startDateLessThanOrEqualOrNull", self.startDateLessThanOrEqualOrNull)
        vparams.addIntIfDefined("endDateGreaterThanOrEqual", self.endDateGreaterThanOrEqual)
        vparams.addIntIfDefined("endDateLessThanOrEqual", self.endDateLessThanOrEqual)
        vparams.addIntIfDefined("endDateGreaterThanOrEqualOrNull", self.endDateGreaterThanOrEqualOrNull)
        vparams.addIntIfDefined("endDateLessThanOrEqualOrNull", self.endDateLessThanOrEqualOrNull)
        vparams.addStringIfDefined("referenceIdEqual", self.referenceIdEqual)
        vparams.addStringIfDefined("referenceIdIn", self.referenceIdIn)
        vparams.addStringIfDefined("replacingEntryIdEqual", self.replacingEntryIdEqual)
        vparams.addStringIfDefined("replacingEntryIdIn", self.replacingEntryIdIn)
        vparams.addStringIfDefined("replacedEntryIdEqual", self.replacedEntryIdEqual)
        vparams.addStringIfDefined("replacedEntryIdIn", self.replacedEntryIdIn)
        vparams.addStringEnumIfDefined("replacementStatusEqual", self.replacementStatusEqual)
        vparams.addStringIfDefined("replacementStatusIn", self.replacementStatusIn)
        vparams.addIntIfDefined("partnerSortValueGreaterThanOrEqual", self.partnerSortValueGreaterThanOrEqual)
        vparams.addIntIfDefined("partnerSortValueLessThanOrEqual", self.partnerSortValueLessThanOrEqual)
        vparams.addStringIfDefined("rootEntryIdEqual", self.rootEntryIdEqual)
        vparams.addStringIfDefined("rootEntryIdIn", self.rootEntryIdIn)
        vparams.addStringIfDefined("parentEntryIdEqual", self.parentEntryIdEqual)
        vparams.addStringIfDefined("entitledUsersEditMatchAnd", self.entitledUsersEditMatchAnd)
        vparams.addStringIfDefined("entitledUsersEditMatchOr", self.entitledUsersEditMatchOr)
        vparams.addStringIfDefined("entitledUsersPublishMatchAnd", self.entitledUsersPublishMatchAnd)
        vparams.addStringIfDefined("entitledUsersPublishMatchOr", self.entitledUsersPublishMatchOr)
        vparams.addStringIfDefined("tagsNameMultiLikeOr", self.tagsNameMultiLikeOr)
        vparams.addStringIfDefined("tagsAdminTagsMultiLikeOr", self.tagsAdminTagsMultiLikeOr)
        vparams.addStringIfDefined("tagsAdminTagsNameMultiLikeOr", self.tagsAdminTagsNameMultiLikeOr)
        vparams.addStringIfDefined("tagsNameMultiLikeAnd", self.tagsNameMultiLikeAnd)
        vparams.addStringIfDefined("tagsAdminTagsMultiLikeAnd", self.tagsAdminTagsMultiLikeAnd)
        vparams.addStringIfDefined("tagsAdminTagsNameMultiLikeAnd", self.tagsAdminTagsNameMultiLikeAnd)
        return vparams

    def getIdEqual(self):
        return self.idEqual

    def setIdEqual(self, newIdEqual):
        self.idEqual = newIdEqual

    def getIdIn(self):
        return self.idIn

    def setIdIn(self, newIdIn):
        self.idIn = newIdIn

    def getIdNotIn(self):
        return self.idNotIn

    def setIdNotIn(self, newIdNotIn):
        self.idNotIn = newIdNotIn

    def getNameLike(self):
        return self.nameLike

    def setNameLike(self, newNameLike):
        self.nameLike = newNameLike

    def getNameMultiLikeOr(self):
        return self.nameMultiLikeOr

    def setNameMultiLikeOr(self, newNameMultiLikeOr):
        self.nameMultiLikeOr = newNameMultiLikeOr

    def getNameMultiLikeAnd(self):
        return self.nameMultiLikeAnd

    def setNameMultiLikeAnd(self, newNameMultiLikeAnd):
        self.nameMultiLikeAnd = newNameMultiLikeAnd

    def getNameEqual(self):
        return self.nameEqual

    def setNameEqual(self, newNameEqual):
        self.nameEqual = newNameEqual

    def getPartnerIdEqual(self):
        return self.partnerIdEqual

    def setPartnerIdEqual(self, newPartnerIdEqual):
        self.partnerIdEqual = newPartnerIdEqual

    def getPartnerIdIn(self):
        return self.partnerIdIn

    def setPartnerIdIn(self, newPartnerIdIn):
        self.partnerIdIn = newPartnerIdIn

    def getUserIdEqual(self):
        return self.userIdEqual

    def setUserIdEqual(self, newUserIdEqual):
        self.userIdEqual = newUserIdEqual

    def getUserIdIn(self):
        return self.userIdIn

    def setUserIdIn(self, newUserIdIn):
        self.userIdIn = newUserIdIn

    def getCreatorIdEqual(self):
        return self.creatorIdEqual

    def setCreatorIdEqual(self, newCreatorIdEqual):
        self.creatorIdEqual = newCreatorIdEqual

    def getTagsLike(self):
        return self.tagsLike

    def setTagsLike(self, newTagsLike):
        self.tagsLike = newTagsLike

    def getTagsMultiLikeOr(self):
        return self.tagsMultiLikeOr

    def setTagsMultiLikeOr(self, newTagsMultiLikeOr):
        self.tagsMultiLikeOr = newTagsMultiLikeOr

    def getTagsMultiLikeAnd(self):
        return self.tagsMultiLikeAnd

    def setTagsMultiLikeAnd(self, newTagsMultiLikeAnd):
        self.tagsMultiLikeAnd = newTagsMultiLikeAnd

    def getAdminTagsLike(self):
        return self.adminTagsLike

    def setAdminTagsLike(self, newAdminTagsLike):
        self.adminTagsLike = newAdminTagsLike

    def getAdminTagsMultiLikeOr(self):
        return self.adminTagsMultiLikeOr

    def setAdminTagsMultiLikeOr(self, newAdminTagsMultiLikeOr):
        self.adminTagsMultiLikeOr = newAdminTagsMultiLikeOr

    def getAdminTagsMultiLikeAnd(self):
        return self.adminTagsMultiLikeAnd

    def setAdminTagsMultiLikeAnd(self, newAdminTagsMultiLikeAnd):
        self.adminTagsMultiLikeAnd = newAdminTagsMultiLikeAnd

    def getCategoriesMatchAnd(self):
        return self.categoriesMatchAnd

    def setCategoriesMatchAnd(self, newCategoriesMatchAnd):
        self.categoriesMatchAnd = newCategoriesMatchAnd

    def getCategoriesMatchOr(self):
        return self.categoriesMatchOr

    def setCategoriesMatchOr(self, newCategoriesMatchOr):
        self.categoriesMatchOr = newCategoriesMatchOr

    def getCategoriesNotContains(self):
        return self.categoriesNotContains

    def setCategoriesNotContains(self, newCategoriesNotContains):
        self.categoriesNotContains = newCategoriesNotContains

    def getCategoriesIdsMatchAnd(self):
        return self.categoriesIdsMatchAnd

    def setCategoriesIdsMatchAnd(self, newCategoriesIdsMatchAnd):
        self.categoriesIdsMatchAnd = newCategoriesIdsMatchAnd

    def getCategoriesIdsMatchOr(self):
        return self.categoriesIdsMatchOr

    def setCategoriesIdsMatchOr(self, newCategoriesIdsMatchOr):
        self.categoriesIdsMatchOr = newCategoriesIdsMatchOr

    def getCategoriesIdsNotContains(self):
        return self.categoriesIdsNotContains

    def setCategoriesIdsNotContains(self, newCategoriesIdsNotContains):
        self.categoriesIdsNotContains = newCategoriesIdsNotContains

    def getCategoriesIdsEmpty(self):
        return self.categoriesIdsEmpty

    def setCategoriesIdsEmpty(self, newCategoriesIdsEmpty):
        self.categoriesIdsEmpty = newCategoriesIdsEmpty

    def getStatusEqual(self):
        return self.statusEqual

    def setStatusEqual(self, newStatusEqual):
        self.statusEqual = newStatusEqual

    def getStatusNotEqual(self):
        return self.statusNotEqual

    def setStatusNotEqual(self, newStatusNotEqual):
        self.statusNotEqual = newStatusNotEqual

    def getStatusIn(self):
        return self.statusIn

    def setStatusIn(self, newStatusIn):
        self.statusIn = newStatusIn

    def getStatusNotIn(self):
        return self.statusNotIn

    def setStatusNotIn(self, newStatusNotIn):
        self.statusNotIn = newStatusNotIn

    def getModerationStatusEqual(self):
        return self.moderationStatusEqual

    def setModerationStatusEqual(self, newModerationStatusEqual):
        self.moderationStatusEqual = newModerationStatusEqual

    def getModerationStatusNotEqual(self):
        return self.moderationStatusNotEqual

    def setModerationStatusNotEqual(self, newModerationStatusNotEqual):
        self.moderationStatusNotEqual = newModerationStatusNotEqual

    def getModerationStatusIn(self):
        return self.moderationStatusIn

    def setModerationStatusIn(self, newModerationStatusIn):
        self.moderationStatusIn = newModerationStatusIn

    def getModerationStatusNotIn(self):
        return self.moderationStatusNotIn

    def setModerationStatusNotIn(self, newModerationStatusNotIn):
        self.moderationStatusNotIn = newModerationStatusNotIn

    def getTypeEqual(self):
        return self.typeEqual

    def setTypeEqual(self, newTypeEqual):
        self.typeEqual = newTypeEqual

    def getTypeIn(self):
        return self.typeIn

    def setTypeIn(self, newTypeIn):
        self.typeIn = newTypeIn

    def getCreatedAtGreaterThanOrEqual(self):
        return self.createdAtGreaterThanOrEqual

    def setCreatedAtGreaterThanOrEqual(self, newCreatedAtGreaterThanOrEqual):
        self.createdAtGreaterThanOrEqual = newCreatedAtGreaterThanOrEqual

    def getCreatedAtLessThanOrEqual(self):
        return self.createdAtLessThanOrEqual

    def setCreatedAtLessThanOrEqual(self, newCreatedAtLessThanOrEqual):
        self.createdAtLessThanOrEqual = newCreatedAtLessThanOrEqual

    def getUpdatedAtGreaterThanOrEqual(self):
        return self.updatedAtGreaterThanOrEqual

    def setUpdatedAtGreaterThanOrEqual(self, newUpdatedAtGreaterThanOrEqual):
        self.updatedAtGreaterThanOrEqual = newUpdatedAtGreaterThanOrEqual

    def getUpdatedAtLessThanOrEqual(self):
        return self.updatedAtLessThanOrEqual

    def setUpdatedAtLessThanOrEqual(self, newUpdatedAtLessThanOrEqual):
        self.updatedAtLessThanOrEqual = newUpdatedAtLessThanOrEqual

    def getTotalRankLessThanOrEqual(self):
        return self.totalRankLessThanOrEqual

    def setTotalRankLessThanOrEqual(self, newTotalRankLessThanOrEqual):
        self.totalRankLessThanOrEqual = newTotalRankLessThanOrEqual

    def getTotalRankGreaterThanOrEqual(self):
        return self.totalRankGreaterThanOrEqual

    def setTotalRankGreaterThanOrEqual(self, newTotalRankGreaterThanOrEqual):
        self.totalRankGreaterThanOrEqual = newTotalRankGreaterThanOrEqual

    def getGroupIdEqual(self):
        return self.groupIdEqual

    def setGroupIdEqual(self, newGroupIdEqual):
        self.groupIdEqual = newGroupIdEqual

    def getSearchTextMatchAnd(self):
        return self.searchTextMatchAnd

    def setSearchTextMatchAnd(self, newSearchTextMatchAnd):
        self.searchTextMatchAnd = newSearchTextMatchAnd

    def getSearchTextMatchOr(self):
        return self.searchTextMatchOr

    def setSearchTextMatchOr(self, newSearchTextMatchOr):
        self.searchTextMatchOr = newSearchTextMatchOr

    def getAccessControlIdEqual(self):
        return self.accessControlIdEqual

    def setAccessControlIdEqual(self, newAccessControlIdEqual):
        self.accessControlIdEqual = newAccessControlIdEqual

    def getAccessControlIdIn(self):
        return self.accessControlIdIn

    def setAccessControlIdIn(self, newAccessControlIdIn):
        self.accessControlIdIn = newAccessControlIdIn

    def getStartDateGreaterThanOrEqual(self):
        return self.startDateGreaterThanOrEqual

    def setStartDateGreaterThanOrEqual(self, newStartDateGreaterThanOrEqual):
        self.startDateGreaterThanOrEqual = newStartDateGreaterThanOrEqual

    def getStartDateLessThanOrEqual(self):
        return self.startDateLessThanOrEqual

    def setStartDateLessThanOrEqual(self, newStartDateLessThanOrEqual):
        self.startDateLessThanOrEqual = newStartDateLessThanOrEqual

    def getStartDateGreaterThanOrEqualOrNull(self):
        return self.startDateGreaterThanOrEqualOrNull

    def setStartDateGreaterThanOrEqualOrNull(self, newStartDateGreaterThanOrEqualOrNull):
        self.startDateGreaterThanOrEqualOrNull = newStartDateGreaterThanOrEqualOrNull

    def getStartDateLessThanOrEqualOrNull(self):
        return self.startDateLessThanOrEqualOrNull

    def setStartDateLessThanOrEqualOrNull(self, newStartDateLessThanOrEqualOrNull):
        self.startDateLessThanOrEqualOrNull = newStartDateLessThanOrEqualOrNull

    def getEndDateGreaterThanOrEqual(self):
        return self.endDateGreaterThanOrEqual

    def setEndDateGreaterThanOrEqual(self, newEndDateGreaterThanOrEqual):
        self.endDateGreaterThanOrEqual = newEndDateGreaterThanOrEqual

    def getEndDateLessThanOrEqual(self):
        return self.endDateLessThanOrEqual

    def setEndDateLessThanOrEqual(self, newEndDateLessThanOrEqual):
        self.endDateLessThanOrEqual = newEndDateLessThanOrEqual

    def getEndDateGreaterThanOrEqualOrNull(self):
        return self.endDateGreaterThanOrEqualOrNull

    def setEndDateGreaterThanOrEqualOrNull(self, newEndDateGreaterThanOrEqualOrNull):
        self.endDateGreaterThanOrEqualOrNull = newEndDateGreaterThanOrEqualOrNull

    def getEndDateLessThanOrEqualOrNull(self):
        return self.endDateLessThanOrEqualOrNull

    def setEndDateLessThanOrEqualOrNull(self, newEndDateLessThanOrEqualOrNull):
        self.endDateLessThanOrEqualOrNull = newEndDateLessThanOrEqualOrNull

    def getReferenceIdEqual(self):
        return self.referenceIdEqual

    def setReferenceIdEqual(self, newReferenceIdEqual):
        self.referenceIdEqual = newReferenceIdEqual

    def getReferenceIdIn(self):
        return self.referenceIdIn

    def setReferenceIdIn(self, newReferenceIdIn):
        self.referenceIdIn = newReferenceIdIn

    def getReplacingEntryIdEqual(self):
        return self.replacingEntryIdEqual

    def setReplacingEntryIdEqual(self, newReplacingEntryIdEqual):
        self.replacingEntryIdEqual = newReplacingEntryIdEqual

    def getReplacingEntryIdIn(self):
        return self.replacingEntryIdIn

    def setReplacingEntryIdIn(self, newReplacingEntryIdIn):
        self.replacingEntryIdIn = newReplacingEntryIdIn

    def getReplacedEntryIdEqual(self):
        return self.replacedEntryIdEqual

    def setReplacedEntryIdEqual(self, newReplacedEntryIdEqual):
        self.replacedEntryIdEqual = newReplacedEntryIdEqual

    def getReplacedEntryIdIn(self):
        return self.replacedEntryIdIn

    def setReplacedEntryIdIn(self, newReplacedEntryIdIn):
        self.replacedEntryIdIn = newReplacedEntryIdIn

    def getReplacementStatusEqual(self):
        return self.replacementStatusEqual

    def setReplacementStatusEqual(self, newReplacementStatusEqual):
        self.replacementStatusEqual = newReplacementStatusEqual

    def getReplacementStatusIn(self):
        return self.replacementStatusIn

    def setReplacementStatusIn(self, newReplacementStatusIn):
        self.replacementStatusIn = newReplacementStatusIn

    def getPartnerSortValueGreaterThanOrEqual(self):
        return self.partnerSortValueGreaterThanOrEqual

    def setPartnerSortValueGreaterThanOrEqual(self, newPartnerSortValueGreaterThanOrEqual):
        self.partnerSortValueGreaterThanOrEqual = newPartnerSortValueGreaterThanOrEqual

    def getPartnerSortValueLessThanOrEqual(self):
        return self.partnerSortValueLessThanOrEqual

    def setPartnerSortValueLessThanOrEqual(self, newPartnerSortValueLessThanOrEqual):
        self.partnerSortValueLessThanOrEqual = newPartnerSortValueLessThanOrEqual

    def getRootEntryIdEqual(self):
        return self.rootEntryIdEqual

    def setRootEntryIdEqual(self, newRootEntryIdEqual):
        self.rootEntryIdEqual = newRootEntryIdEqual

    def getRootEntryIdIn(self):
        return self.rootEntryIdIn

    def setRootEntryIdIn(self, newRootEntryIdIn):
        self.rootEntryIdIn = newRootEntryIdIn

    def getParentEntryIdEqual(self):
        return self.parentEntryIdEqual

    def setParentEntryIdEqual(self, newParentEntryIdEqual):
        self.parentEntryIdEqual = newParentEntryIdEqual

    def getEntitledUsersEditMatchAnd(self):
        return self.entitledUsersEditMatchAnd

    def setEntitledUsersEditMatchAnd(self, newEntitledUsersEditMatchAnd):
        self.entitledUsersEditMatchAnd = newEntitledUsersEditMatchAnd

    def getEntitledUsersEditMatchOr(self):
        return self.entitledUsersEditMatchOr

    def setEntitledUsersEditMatchOr(self, newEntitledUsersEditMatchOr):
        self.entitledUsersEditMatchOr = newEntitledUsersEditMatchOr

    def getEntitledUsersPublishMatchAnd(self):
        return self.entitledUsersPublishMatchAnd

    def setEntitledUsersPublishMatchAnd(self, newEntitledUsersPublishMatchAnd):
        self.entitledUsersPublishMatchAnd = newEntitledUsersPublishMatchAnd

    def getEntitledUsersPublishMatchOr(self):
        return self.entitledUsersPublishMatchOr

    def setEntitledUsersPublishMatchOr(self, newEntitledUsersPublishMatchOr):
        self.entitledUsersPublishMatchOr = newEntitledUsersPublishMatchOr

    def getTagsNameMultiLikeOr(self):
        return self.tagsNameMultiLikeOr

    def setTagsNameMultiLikeOr(self, newTagsNameMultiLikeOr):
        self.tagsNameMultiLikeOr = newTagsNameMultiLikeOr

    def getTagsAdminTagsMultiLikeOr(self):
        return self.tagsAdminTagsMultiLikeOr

    def setTagsAdminTagsMultiLikeOr(self, newTagsAdminTagsMultiLikeOr):
        self.tagsAdminTagsMultiLikeOr = newTagsAdminTagsMultiLikeOr

    def getTagsAdminTagsNameMultiLikeOr(self):
        return self.tagsAdminTagsNameMultiLikeOr

    def setTagsAdminTagsNameMultiLikeOr(self, newTagsAdminTagsNameMultiLikeOr):
        self.tagsAdminTagsNameMultiLikeOr = newTagsAdminTagsNameMultiLikeOr

    def getTagsNameMultiLikeAnd(self):
        return self.tagsNameMultiLikeAnd

    def setTagsNameMultiLikeAnd(self, newTagsNameMultiLikeAnd):
        self.tagsNameMultiLikeAnd = newTagsNameMultiLikeAnd

    def getTagsAdminTagsMultiLikeAnd(self):
        return self.tagsAdminTagsMultiLikeAnd

    def setTagsAdminTagsMultiLikeAnd(self, newTagsAdminTagsMultiLikeAnd):
        self.tagsAdminTagsMultiLikeAnd = newTagsAdminTagsMultiLikeAnd

    def getTagsAdminTagsNameMultiLikeAnd(self):
        return self.tagsAdminTagsNameMultiLikeAnd

    def setTagsAdminTagsNameMultiLikeAnd(self, newTagsAdminTagsNameMultiLikeAnd):
        self.tagsAdminTagsNameMultiLikeAnd = newTagsAdminTagsNameMultiLikeAnd


# @package Vidiun
# @subpackage Client
class VidiunBaseEntryFilter(VidiunBaseEntryBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            idNotIn=NotImplemented,
            nameLike=NotImplemented,
            nameMultiLikeOr=NotImplemented,
            nameMultiLikeAnd=NotImplemented,
            nameEqual=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            userIdEqual=NotImplemented,
            userIdIn=NotImplemented,
            creatorIdEqual=NotImplemented,
            tagsLike=NotImplemented,
            tagsMultiLikeOr=NotImplemented,
            tagsMultiLikeAnd=NotImplemented,
            adminTagsLike=NotImplemented,
            adminTagsMultiLikeOr=NotImplemented,
            adminTagsMultiLikeAnd=NotImplemented,
            categoriesMatchAnd=NotImplemented,
            categoriesMatchOr=NotImplemented,
            categoriesNotContains=NotImplemented,
            categoriesIdsMatchAnd=NotImplemented,
            categoriesIdsMatchOr=NotImplemented,
            categoriesIdsNotContains=NotImplemented,
            categoriesIdsEmpty=NotImplemented,
            statusEqual=NotImplemented,
            statusNotEqual=NotImplemented,
            statusIn=NotImplemented,
            statusNotIn=NotImplemented,
            moderationStatusEqual=NotImplemented,
            moderationStatusNotEqual=NotImplemented,
            moderationStatusIn=NotImplemented,
            moderationStatusNotIn=NotImplemented,
            typeEqual=NotImplemented,
            typeIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            totalRankLessThanOrEqual=NotImplemented,
            totalRankGreaterThanOrEqual=NotImplemented,
            groupIdEqual=NotImplemented,
            searchTextMatchAnd=NotImplemented,
            searchTextMatchOr=NotImplemented,
            accessControlIdEqual=NotImplemented,
            accessControlIdIn=NotImplemented,
            startDateGreaterThanOrEqual=NotImplemented,
            startDateLessThanOrEqual=NotImplemented,
            startDateGreaterThanOrEqualOrNull=NotImplemented,
            startDateLessThanOrEqualOrNull=NotImplemented,
            endDateGreaterThanOrEqual=NotImplemented,
            endDateLessThanOrEqual=NotImplemented,
            endDateGreaterThanOrEqualOrNull=NotImplemented,
            endDateLessThanOrEqualOrNull=NotImplemented,
            referenceIdEqual=NotImplemented,
            referenceIdIn=NotImplemented,
            replacingEntryIdEqual=NotImplemented,
            replacingEntryIdIn=NotImplemented,
            replacedEntryIdEqual=NotImplemented,
            replacedEntryIdIn=NotImplemented,
            replacementStatusEqual=NotImplemented,
            replacementStatusIn=NotImplemented,
            partnerSortValueGreaterThanOrEqual=NotImplemented,
            partnerSortValueLessThanOrEqual=NotImplemented,
            rootEntryIdEqual=NotImplemented,
            rootEntryIdIn=NotImplemented,
            parentEntryIdEqual=NotImplemented,
            entitledUsersEditMatchAnd=NotImplemented,
            entitledUsersEditMatchOr=NotImplemented,
            entitledUsersPublishMatchAnd=NotImplemented,
            entitledUsersPublishMatchOr=NotImplemented,
            tagsNameMultiLikeOr=NotImplemented,
            tagsAdminTagsMultiLikeOr=NotImplemented,
            tagsAdminTagsNameMultiLikeOr=NotImplemented,
            tagsNameMultiLikeAnd=NotImplemented,
            tagsAdminTagsMultiLikeAnd=NotImplemented,
            tagsAdminTagsNameMultiLikeAnd=NotImplemented,
            freeText=NotImplemented,
            isRoot=NotImplemented,
            categoriesFullNameIn=NotImplemented,
            categoryAncestorIdIn=NotImplemented,
            redirectFromEntryId=NotImplemented):
        VidiunBaseEntryBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            idNotIn,
            nameLike,
            nameMultiLikeOr,
            nameMultiLikeAnd,
            nameEqual,
            partnerIdEqual,
            partnerIdIn,
            userIdEqual,
            userIdIn,
            creatorIdEqual,
            tagsLike,
            tagsMultiLikeOr,
            tagsMultiLikeAnd,
            adminTagsLike,
            adminTagsMultiLikeOr,
            adminTagsMultiLikeAnd,
            categoriesMatchAnd,
            categoriesMatchOr,
            categoriesNotContains,
            categoriesIdsMatchAnd,
            categoriesIdsMatchOr,
            categoriesIdsNotContains,
            categoriesIdsEmpty,
            statusEqual,
            statusNotEqual,
            statusIn,
            statusNotIn,
            moderationStatusEqual,
            moderationStatusNotEqual,
            moderationStatusIn,
            moderationStatusNotIn,
            typeEqual,
            typeIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            totalRankLessThanOrEqual,
            totalRankGreaterThanOrEqual,
            groupIdEqual,
            searchTextMatchAnd,
            searchTextMatchOr,
            accessControlIdEqual,
            accessControlIdIn,
            startDateGreaterThanOrEqual,
            startDateLessThanOrEqual,
            startDateGreaterThanOrEqualOrNull,
            startDateLessThanOrEqualOrNull,
            endDateGreaterThanOrEqual,
            endDateLessThanOrEqual,
            endDateGreaterThanOrEqualOrNull,
            endDateLessThanOrEqualOrNull,
            referenceIdEqual,
            referenceIdIn,
            replacingEntryIdEqual,
            replacingEntryIdIn,
            replacedEntryIdEqual,
            replacedEntryIdIn,
            replacementStatusEqual,
            replacementStatusIn,
            partnerSortValueGreaterThanOrEqual,
            partnerSortValueLessThanOrEqual,
            rootEntryIdEqual,
            rootEntryIdIn,
            parentEntryIdEqual,
            entitledUsersEditMatchAnd,
            entitledUsersEditMatchOr,
            entitledUsersPublishMatchAnd,
            entitledUsersPublishMatchOr,
            tagsNameMultiLikeOr,
            tagsAdminTagsMultiLikeOr,
            tagsAdminTagsNameMultiLikeOr,
            tagsNameMultiLikeAnd,
            tagsAdminTagsMultiLikeAnd,
            tagsAdminTagsNameMultiLikeAnd)

        # @var string
        self.freeText = freeText

        # @var VidiunNullableBoolean
        self.isRoot = isRoot

        # @var string
        self.categoriesFullNameIn = categoriesFullNameIn

        # All entries within this categoy or in child categories
        # @var string
        self.categoryAncestorIdIn = categoryAncestorIdIn

        # The id of the original entry
        # @var string
        self.redirectFromEntryId = redirectFromEntryId


    PROPERTY_LOADERS = {
        'freeText': getXmlNodeText, 
        'isRoot': (VidiunEnumsFactory.createInt, "VidiunNullableBoolean"), 
        'categoriesFullNameIn': getXmlNodeText, 
        'categoryAncestorIdIn': getXmlNodeText, 
        'redirectFromEntryId': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunBaseEntryBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunBaseEntryFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunBaseEntryBaseFilter.toParams(self)
        vparams.put("objectType", "VidiunBaseEntryFilter")
        vparams.addStringIfDefined("freeText", self.freeText)
        vparams.addIntEnumIfDefined("isRoot", self.isRoot)
        vparams.addStringIfDefined("categoriesFullNameIn", self.categoriesFullNameIn)
        vparams.addStringIfDefined("categoryAncestorIdIn", self.categoryAncestorIdIn)
        vparams.addStringIfDefined("redirectFromEntryId", self.redirectFromEntryId)
        return vparams

    def getFreeText(self):
        return self.freeText

    def setFreeText(self, newFreeText):
        self.freeText = newFreeText

    def getIsRoot(self):
        return self.isRoot

    def setIsRoot(self, newIsRoot):
        self.isRoot = newIsRoot

    def getCategoriesFullNameIn(self):
        return self.categoriesFullNameIn

    def setCategoriesFullNameIn(self, newCategoriesFullNameIn):
        self.categoriesFullNameIn = newCategoriesFullNameIn

    def getCategoryAncestorIdIn(self):
        return self.categoryAncestorIdIn

    def setCategoryAncestorIdIn(self, newCategoryAncestorIdIn):
        self.categoryAncestorIdIn = newCategoryAncestorIdIn

    def getRedirectFromEntryId(self):
        return self.redirectFromEntryId

    def setRedirectFromEntryId(self, newRedirectFromEntryId):
        self.redirectFromEntryId = newRedirectFromEntryId


# @package Vidiun
# @subpackage Client
class VidiunPlayableEntryBaseFilter(VidiunBaseEntryFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            idNotIn=NotImplemented,
            nameLike=NotImplemented,
            nameMultiLikeOr=NotImplemented,
            nameMultiLikeAnd=NotImplemented,
            nameEqual=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            userIdEqual=NotImplemented,
            userIdIn=NotImplemented,
            creatorIdEqual=NotImplemented,
            tagsLike=NotImplemented,
            tagsMultiLikeOr=NotImplemented,
            tagsMultiLikeAnd=NotImplemented,
            adminTagsLike=NotImplemented,
            adminTagsMultiLikeOr=NotImplemented,
            adminTagsMultiLikeAnd=NotImplemented,
            categoriesMatchAnd=NotImplemented,
            categoriesMatchOr=NotImplemented,
            categoriesNotContains=NotImplemented,
            categoriesIdsMatchAnd=NotImplemented,
            categoriesIdsMatchOr=NotImplemented,
            categoriesIdsNotContains=NotImplemented,
            categoriesIdsEmpty=NotImplemented,
            statusEqual=NotImplemented,
            statusNotEqual=NotImplemented,
            statusIn=NotImplemented,
            statusNotIn=NotImplemented,
            moderationStatusEqual=NotImplemented,
            moderationStatusNotEqual=NotImplemented,
            moderationStatusIn=NotImplemented,
            moderationStatusNotIn=NotImplemented,
            typeEqual=NotImplemented,
            typeIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            totalRankLessThanOrEqual=NotImplemented,
            totalRankGreaterThanOrEqual=NotImplemented,
            groupIdEqual=NotImplemented,
            searchTextMatchAnd=NotImplemented,
            searchTextMatchOr=NotImplemented,
            accessControlIdEqual=NotImplemented,
            accessControlIdIn=NotImplemented,
            startDateGreaterThanOrEqual=NotImplemented,
            startDateLessThanOrEqual=NotImplemented,
            startDateGreaterThanOrEqualOrNull=NotImplemented,
            startDateLessThanOrEqualOrNull=NotImplemented,
            endDateGreaterThanOrEqual=NotImplemented,
            endDateLessThanOrEqual=NotImplemented,
            endDateGreaterThanOrEqualOrNull=NotImplemented,
            endDateLessThanOrEqualOrNull=NotImplemented,
            referenceIdEqual=NotImplemented,
            referenceIdIn=NotImplemented,
            replacingEntryIdEqual=NotImplemented,
            replacingEntryIdIn=NotImplemented,
            replacedEntryIdEqual=NotImplemented,
            replacedEntryIdIn=NotImplemented,
            replacementStatusEqual=NotImplemented,
            replacementStatusIn=NotImplemented,
            partnerSortValueGreaterThanOrEqual=NotImplemented,
            partnerSortValueLessThanOrEqual=NotImplemented,
            rootEntryIdEqual=NotImplemented,
            rootEntryIdIn=NotImplemented,
            parentEntryIdEqual=NotImplemented,
            entitledUsersEditMatchAnd=NotImplemented,
            entitledUsersEditMatchOr=NotImplemented,
            entitledUsersPublishMatchAnd=NotImplemented,
            entitledUsersPublishMatchOr=NotImplemented,
            tagsNameMultiLikeOr=NotImplemented,
            tagsAdminTagsMultiLikeOr=NotImplemented,
            tagsAdminTagsNameMultiLikeOr=NotImplemented,
            tagsNameMultiLikeAnd=NotImplemented,
            tagsAdminTagsMultiLikeAnd=NotImplemented,
            tagsAdminTagsNameMultiLikeAnd=NotImplemented,
            freeText=NotImplemented,
            isRoot=NotImplemented,
            categoriesFullNameIn=NotImplemented,
            categoryAncestorIdIn=NotImplemented,
            redirectFromEntryId=NotImplemented,
            lastPlayedAtGreaterThanOrEqual=NotImplemented,
            lastPlayedAtLessThanOrEqual=NotImplemented,
            durationLessThan=NotImplemented,
            durationGreaterThan=NotImplemented,
            durationLessThanOrEqual=NotImplemented,
            durationGreaterThanOrEqual=NotImplemented,
            durationTypeMatchOr=NotImplemented):
        VidiunBaseEntryFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            idNotIn,
            nameLike,
            nameMultiLikeOr,
            nameMultiLikeAnd,
            nameEqual,
            partnerIdEqual,
            partnerIdIn,
            userIdEqual,
            userIdIn,
            creatorIdEqual,
            tagsLike,
            tagsMultiLikeOr,
            tagsMultiLikeAnd,
            adminTagsLike,
            adminTagsMultiLikeOr,
            adminTagsMultiLikeAnd,
            categoriesMatchAnd,
            categoriesMatchOr,
            categoriesNotContains,
            categoriesIdsMatchAnd,
            categoriesIdsMatchOr,
            categoriesIdsNotContains,
            categoriesIdsEmpty,
            statusEqual,
            statusNotEqual,
            statusIn,
            statusNotIn,
            moderationStatusEqual,
            moderationStatusNotEqual,
            moderationStatusIn,
            moderationStatusNotIn,
            typeEqual,
            typeIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            totalRankLessThanOrEqual,
            totalRankGreaterThanOrEqual,
            groupIdEqual,
            searchTextMatchAnd,
            searchTextMatchOr,
            accessControlIdEqual,
            accessControlIdIn,
            startDateGreaterThanOrEqual,
            startDateLessThanOrEqual,
            startDateGreaterThanOrEqualOrNull,
            startDateLessThanOrEqualOrNull,
            endDateGreaterThanOrEqual,
            endDateLessThanOrEqual,
            endDateGreaterThanOrEqualOrNull,
            endDateLessThanOrEqualOrNull,
            referenceIdEqual,
            referenceIdIn,
            replacingEntryIdEqual,
            replacingEntryIdIn,
            replacedEntryIdEqual,
            replacedEntryIdIn,
            replacementStatusEqual,
            replacementStatusIn,
            partnerSortValueGreaterThanOrEqual,
            partnerSortValueLessThanOrEqual,
            rootEntryIdEqual,
            rootEntryIdIn,
            parentEntryIdEqual,
            entitledUsersEditMatchAnd,
            entitledUsersEditMatchOr,
            entitledUsersPublishMatchAnd,
            entitledUsersPublishMatchOr,
            tagsNameMultiLikeOr,
            tagsAdminTagsMultiLikeOr,
            tagsAdminTagsNameMultiLikeOr,
            tagsNameMultiLikeAnd,
            tagsAdminTagsMultiLikeAnd,
            tagsAdminTagsNameMultiLikeAnd,
            freeText,
            isRoot,
            categoriesFullNameIn,
            categoryAncestorIdIn,
            redirectFromEntryId)

        # @var int
        self.lastPlayedAtGreaterThanOrEqual = lastPlayedAtGreaterThanOrEqual

        # @var int
        self.lastPlayedAtLessThanOrEqual = lastPlayedAtLessThanOrEqual

        # @var int
        self.durationLessThan = durationLessThan

        # @var int
        self.durationGreaterThan = durationGreaterThan

        # @var int
        self.durationLessThanOrEqual = durationLessThanOrEqual

        # @var int
        self.durationGreaterThanOrEqual = durationGreaterThanOrEqual

        # @var string
        self.durationTypeMatchOr = durationTypeMatchOr


    PROPERTY_LOADERS = {
        'lastPlayedAtGreaterThanOrEqual': getXmlNodeInt, 
        'lastPlayedAtLessThanOrEqual': getXmlNodeInt, 
        'durationLessThan': getXmlNodeInt, 
        'durationGreaterThan': getXmlNodeInt, 
        'durationLessThanOrEqual': getXmlNodeInt, 
        'durationGreaterThanOrEqual': getXmlNodeInt, 
        'durationTypeMatchOr': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunBaseEntryFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunPlayableEntryBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunBaseEntryFilter.toParams(self)
        vparams.put("objectType", "VidiunPlayableEntryBaseFilter")
        vparams.addIntIfDefined("lastPlayedAtGreaterThanOrEqual", self.lastPlayedAtGreaterThanOrEqual)
        vparams.addIntIfDefined("lastPlayedAtLessThanOrEqual", self.lastPlayedAtLessThanOrEqual)
        vparams.addIntIfDefined("durationLessThan", self.durationLessThan)
        vparams.addIntIfDefined("durationGreaterThan", self.durationGreaterThan)
        vparams.addIntIfDefined("durationLessThanOrEqual", self.durationLessThanOrEqual)
        vparams.addIntIfDefined("durationGreaterThanOrEqual", self.durationGreaterThanOrEqual)
        vparams.addStringIfDefined("durationTypeMatchOr", self.durationTypeMatchOr)
        return vparams

    def getLastPlayedAtGreaterThanOrEqual(self):
        return self.lastPlayedAtGreaterThanOrEqual

    def setLastPlayedAtGreaterThanOrEqual(self, newLastPlayedAtGreaterThanOrEqual):
        self.lastPlayedAtGreaterThanOrEqual = newLastPlayedAtGreaterThanOrEqual

    def getLastPlayedAtLessThanOrEqual(self):
        return self.lastPlayedAtLessThanOrEqual

    def setLastPlayedAtLessThanOrEqual(self, newLastPlayedAtLessThanOrEqual):
        self.lastPlayedAtLessThanOrEqual = newLastPlayedAtLessThanOrEqual

    def getDurationLessThan(self):
        return self.durationLessThan

    def setDurationLessThan(self, newDurationLessThan):
        self.durationLessThan = newDurationLessThan

    def getDurationGreaterThan(self):
        return self.durationGreaterThan

    def setDurationGreaterThan(self, newDurationGreaterThan):
        self.durationGreaterThan = newDurationGreaterThan

    def getDurationLessThanOrEqual(self):
        return self.durationLessThanOrEqual

    def setDurationLessThanOrEqual(self, newDurationLessThanOrEqual):
        self.durationLessThanOrEqual = newDurationLessThanOrEqual

    def getDurationGreaterThanOrEqual(self):
        return self.durationGreaterThanOrEqual

    def setDurationGreaterThanOrEqual(self, newDurationGreaterThanOrEqual):
        self.durationGreaterThanOrEqual = newDurationGreaterThanOrEqual

    def getDurationTypeMatchOr(self):
        return self.durationTypeMatchOr

    def setDurationTypeMatchOr(self, newDurationTypeMatchOr):
        self.durationTypeMatchOr = newDurationTypeMatchOr


# @package Vidiun
# @subpackage Client
class VidiunPlayableEntryFilter(VidiunPlayableEntryBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            idNotIn=NotImplemented,
            nameLike=NotImplemented,
            nameMultiLikeOr=NotImplemented,
            nameMultiLikeAnd=NotImplemented,
            nameEqual=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            userIdEqual=NotImplemented,
            userIdIn=NotImplemented,
            creatorIdEqual=NotImplemented,
            tagsLike=NotImplemented,
            tagsMultiLikeOr=NotImplemented,
            tagsMultiLikeAnd=NotImplemented,
            adminTagsLike=NotImplemented,
            adminTagsMultiLikeOr=NotImplemented,
            adminTagsMultiLikeAnd=NotImplemented,
            categoriesMatchAnd=NotImplemented,
            categoriesMatchOr=NotImplemented,
            categoriesNotContains=NotImplemented,
            categoriesIdsMatchAnd=NotImplemented,
            categoriesIdsMatchOr=NotImplemented,
            categoriesIdsNotContains=NotImplemented,
            categoriesIdsEmpty=NotImplemented,
            statusEqual=NotImplemented,
            statusNotEqual=NotImplemented,
            statusIn=NotImplemented,
            statusNotIn=NotImplemented,
            moderationStatusEqual=NotImplemented,
            moderationStatusNotEqual=NotImplemented,
            moderationStatusIn=NotImplemented,
            moderationStatusNotIn=NotImplemented,
            typeEqual=NotImplemented,
            typeIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            totalRankLessThanOrEqual=NotImplemented,
            totalRankGreaterThanOrEqual=NotImplemented,
            groupIdEqual=NotImplemented,
            searchTextMatchAnd=NotImplemented,
            searchTextMatchOr=NotImplemented,
            accessControlIdEqual=NotImplemented,
            accessControlIdIn=NotImplemented,
            startDateGreaterThanOrEqual=NotImplemented,
            startDateLessThanOrEqual=NotImplemented,
            startDateGreaterThanOrEqualOrNull=NotImplemented,
            startDateLessThanOrEqualOrNull=NotImplemented,
            endDateGreaterThanOrEqual=NotImplemented,
            endDateLessThanOrEqual=NotImplemented,
            endDateGreaterThanOrEqualOrNull=NotImplemented,
            endDateLessThanOrEqualOrNull=NotImplemented,
            referenceIdEqual=NotImplemented,
            referenceIdIn=NotImplemented,
            replacingEntryIdEqual=NotImplemented,
            replacingEntryIdIn=NotImplemented,
            replacedEntryIdEqual=NotImplemented,
            replacedEntryIdIn=NotImplemented,
            replacementStatusEqual=NotImplemented,
            replacementStatusIn=NotImplemented,
            partnerSortValueGreaterThanOrEqual=NotImplemented,
            partnerSortValueLessThanOrEqual=NotImplemented,
            rootEntryIdEqual=NotImplemented,
            rootEntryIdIn=NotImplemented,
            parentEntryIdEqual=NotImplemented,
            entitledUsersEditMatchAnd=NotImplemented,
            entitledUsersEditMatchOr=NotImplemented,
            entitledUsersPublishMatchAnd=NotImplemented,
            entitledUsersPublishMatchOr=NotImplemented,
            tagsNameMultiLikeOr=NotImplemented,
            tagsAdminTagsMultiLikeOr=NotImplemented,
            tagsAdminTagsNameMultiLikeOr=NotImplemented,
            tagsNameMultiLikeAnd=NotImplemented,
            tagsAdminTagsMultiLikeAnd=NotImplemented,
            tagsAdminTagsNameMultiLikeAnd=NotImplemented,
            freeText=NotImplemented,
            isRoot=NotImplemented,
            categoriesFullNameIn=NotImplemented,
            categoryAncestorIdIn=NotImplemented,
            redirectFromEntryId=NotImplemented,
            lastPlayedAtGreaterThanOrEqual=NotImplemented,
            lastPlayedAtLessThanOrEqual=NotImplemented,
            durationLessThan=NotImplemented,
            durationGreaterThan=NotImplemented,
            durationLessThanOrEqual=NotImplemented,
            durationGreaterThanOrEqual=NotImplemented,
            durationTypeMatchOr=NotImplemented):
        VidiunPlayableEntryBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            idNotIn,
            nameLike,
            nameMultiLikeOr,
            nameMultiLikeAnd,
            nameEqual,
            partnerIdEqual,
            partnerIdIn,
            userIdEqual,
            userIdIn,
            creatorIdEqual,
            tagsLike,
            tagsMultiLikeOr,
            tagsMultiLikeAnd,
            adminTagsLike,
            adminTagsMultiLikeOr,
            adminTagsMultiLikeAnd,
            categoriesMatchAnd,
            categoriesMatchOr,
            categoriesNotContains,
            categoriesIdsMatchAnd,
            categoriesIdsMatchOr,
            categoriesIdsNotContains,
            categoriesIdsEmpty,
            statusEqual,
            statusNotEqual,
            statusIn,
            statusNotIn,
            moderationStatusEqual,
            moderationStatusNotEqual,
            moderationStatusIn,
            moderationStatusNotIn,
            typeEqual,
            typeIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            totalRankLessThanOrEqual,
            totalRankGreaterThanOrEqual,
            groupIdEqual,
            searchTextMatchAnd,
            searchTextMatchOr,
            accessControlIdEqual,
            accessControlIdIn,
            startDateGreaterThanOrEqual,
            startDateLessThanOrEqual,
            startDateGreaterThanOrEqualOrNull,
            startDateLessThanOrEqualOrNull,
            endDateGreaterThanOrEqual,
            endDateLessThanOrEqual,
            endDateGreaterThanOrEqualOrNull,
            endDateLessThanOrEqualOrNull,
            referenceIdEqual,
            referenceIdIn,
            replacingEntryIdEqual,
            replacingEntryIdIn,
            replacedEntryIdEqual,
            replacedEntryIdIn,
            replacementStatusEqual,
            replacementStatusIn,
            partnerSortValueGreaterThanOrEqual,
            partnerSortValueLessThanOrEqual,
            rootEntryIdEqual,
            rootEntryIdIn,
            parentEntryIdEqual,
            entitledUsersEditMatchAnd,
            entitledUsersEditMatchOr,
            entitledUsersPublishMatchAnd,
            entitledUsersPublishMatchOr,
            tagsNameMultiLikeOr,
            tagsAdminTagsMultiLikeOr,
            tagsAdminTagsNameMultiLikeOr,
            tagsNameMultiLikeAnd,
            tagsAdminTagsMultiLikeAnd,
            tagsAdminTagsNameMultiLikeAnd,
            freeText,
            isRoot,
            categoriesFullNameIn,
            categoryAncestorIdIn,
            redirectFromEntryId,
            lastPlayedAtGreaterThanOrEqual,
            lastPlayedAtLessThanOrEqual,
            durationLessThan,
            durationGreaterThan,
            durationLessThanOrEqual,
            durationGreaterThanOrEqual,
            durationTypeMatchOr)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunPlayableEntryBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunPlayableEntryFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunPlayableEntryBaseFilter.toParams(self)
        vparams.put("objectType", "VidiunPlayableEntryFilter")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunMediaEntryBaseFilter(VidiunPlayableEntryFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            idNotIn=NotImplemented,
            nameLike=NotImplemented,
            nameMultiLikeOr=NotImplemented,
            nameMultiLikeAnd=NotImplemented,
            nameEqual=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            userIdEqual=NotImplemented,
            userIdIn=NotImplemented,
            creatorIdEqual=NotImplemented,
            tagsLike=NotImplemented,
            tagsMultiLikeOr=NotImplemented,
            tagsMultiLikeAnd=NotImplemented,
            adminTagsLike=NotImplemented,
            adminTagsMultiLikeOr=NotImplemented,
            adminTagsMultiLikeAnd=NotImplemented,
            categoriesMatchAnd=NotImplemented,
            categoriesMatchOr=NotImplemented,
            categoriesNotContains=NotImplemented,
            categoriesIdsMatchAnd=NotImplemented,
            categoriesIdsMatchOr=NotImplemented,
            categoriesIdsNotContains=NotImplemented,
            categoriesIdsEmpty=NotImplemented,
            statusEqual=NotImplemented,
            statusNotEqual=NotImplemented,
            statusIn=NotImplemented,
            statusNotIn=NotImplemented,
            moderationStatusEqual=NotImplemented,
            moderationStatusNotEqual=NotImplemented,
            moderationStatusIn=NotImplemented,
            moderationStatusNotIn=NotImplemented,
            typeEqual=NotImplemented,
            typeIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            totalRankLessThanOrEqual=NotImplemented,
            totalRankGreaterThanOrEqual=NotImplemented,
            groupIdEqual=NotImplemented,
            searchTextMatchAnd=NotImplemented,
            searchTextMatchOr=NotImplemented,
            accessControlIdEqual=NotImplemented,
            accessControlIdIn=NotImplemented,
            startDateGreaterThanOrEqual=NotImplemented,
            startDateLessThanOrEqual=NotImplemented,
            startDateGreaterThanOrEqualOrNull=NotImplemented,
            startDateLessThanOrEqualOrNull=NotImplemented,
            endDateGreaterThanOrEqual=NotImplemented,
            endDateLessThanOrEqual=NotImplemented,
            endDateGreaterThanOrEqualOrNull=NotImplemented,
            endDateLessThanOrEqualOrNull=NotImplemented,
            referenceIdEqual=NotImplemented,
            referenceIdIn=NotImplemented,
            replacingEntryIdEqual=NotImplemented,
            replacingEntryIdIn=NotImplemented,
            replacedEntryIdEqual=NotImplemented,
            replacedEntryIdIn=NotImplemented,
            replacementStatusEqual=NotImplemented,
            replacementStatusIn=NotImplemented,
            partnerSortValueGreaterThanOrEqual=NotImplemented,
            partnerSortValueLessThanOrEqual=NotImplemented,
            rootEntryIdEqual=NotImplemented,
            rootEntryIdIn=NotImplemented,
            parentEntryIdEqual=NotImplemented,
            entitledUsersEditMatchAnd=NotImplemented,
            entitledUsersEditMatchOr=NotImplemented,
            entitledUsersPublishMatchAnd=NotImplemented,
            entitledUsersPublishMatchOr=NotImplemented,
            tagsNameMultiLikeOr=NotImplemented,
            tagsAdminTagsMultiLikeOr=NotImplemented,
            tagsAdminTagsNameMultiLikeOr=NotImplemented,
            tagsNameMultiLikeAnd=NotImplemented,
            tagsAdminTagsMultiLikeAnd=NotImplemented,
            tagsAdminTagsNameMultiLikeAnd=NotImplemented,
            freeText=NotImplemented,
            isRoot=NotImplemented,
            categoriesFullNameIn=NotImplemented,
            categoryAncestorIdIn=NotImplemented,
            redirectFromEntryId=NotImplemented,
            lastPlayedAtGreaterThanOrEqual=NotImplemented,
            lastPlayedAtLessThanOrEqual=NotImplemented,
            durationLessThan=NotImplemented,
            durationGreaterThan=NotImplemented,
            durationLessThanOrEqual=NotImplemented,
            durationGreaterThanOrEqual=NotImplemented,
            durationTypeMatchOr=NotImplemented,
            mediaTypeEqual=NotImplemented,
            mediaTypeIn=NotImplemented,
            sourceTypeEqual=NotImplemented,
            sourceTypeNotEqual=NotImplemented,
            sourceTypeIn=NotImplemented,
            sourceTypeNotIn=NotImplemented,
            mediaDateGreaterThanOrEqual=NotImplemented,
            mediaDateLessThanOrEqual=NotImplemented,
            flavorParamsIdsMatchOr=NotImplemented,
            flavorParamsIdsMatchAnd=NotImplemented):
        VidiunPlayableEntryFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            idNotIn,
            nameLike,
            nameMultiLikeOr,
            nameMultiLikeAnd,
            nameEqual,
            partnerIdEqual,
            partnerIdIn,
            userIdEqual,
            userIdIn,
            creatorIdEqual,
            tagsLike,
            tagsMultiLikeOr,
            tagsMultiLikeAnd,
            adminTagsLike,
            adminTagsMultiLikeOr,
            adminTagsMultiLikeAnd,
            categoriesMatchAnd,
            categoriesMatchOr,
            categoriesNotContains,
            categoriesIdsMatchAnd,
            categoriesIdsMatchOr,
            categoriesIdsNotContains,
            categoriesIdsEmpty,
            statusEqual,
            statusNotEqual,
            statusIn,
            statusNotIn,
            moderationStatusEqual,
            moderationStatusNotEqual,
            moderationStatusIn,
            moderationStatusNotIn,
            typeEqual,
            typeIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            totalRankLessThanOrEqual,
            totalRankGreaterThanOrEqual,
            groupIdEqual,
            searchTextMatchAnd,
            searchTextMatchOr,
            accessControlIdEqual,
            accessControlIdIn,
            startDateGreaterThanOrEqual,
            startDateLessThanOrEqual,
            startDateGreaterThanOrEqualOrNull,
            startDateLessThanOrEqualOrNull,
            endDateGreaterThanOrEqual,
            endDateLessThanOrEqual,
            endDateGreaterThanOrEqualOrNull,
            endDateLessThanOrEqualOrNull,
            referenceIdEqual,
            referenceIdIn,
            replacingEntryIdEqual,
            replacingEntryIdIn,
            replacedEntryIdEqual,
            replacedEntryIdIn,
            replacementStatusEqual,
            replacementStatusIn,
            partnerSortValueGreaterThanOrEqual,
            partnerSortValueLessThanOrEqual,
            rootEntryIdEqual,
            rootEntryIdIn,
            parentEntryIdEqual,
            entitledUsersEditMatchAnd,
            entitledUsersEditMatchOr,
            entitledUsersPublishMatchAnd,
            entitledUsersPublishMatchOr,
            tagsNameMultiLikeOr,
            tagsAdminTagsMultiLikeOr,
            tagsAdminTagsNameMultiLikeOr,
            tagsNameMultiLikeAnd,
            tagsAdminTagsMultiLikeAnd,
            tagsAdminTagsNameMultiLikeAnd,
            freeText,
            isRoot,
            categoriesFullNameIn,
            categoryAncestorIdIn,
            redirectFromEntryId,
            lastPlayedAtGreaterThanOrEqual,
            lastPlayedAtLessThanOrEqual,
            durationLessThan,
            durationGreaterThan,
            durationLessThanOrEqual,
            durationGreaterThanOrEqual,
            durationTypeMatchOr)

        # @var VidiunMediaType
        self.mediaTypeEqual = mediaTypeEqual

        # @var string
        self.mediaTypeIn = mediaTypeIn

        # @var VidiunSourceType
        self.sourceTypeEqual = sourceTypeEqual

        # @var VidiunSourceType
        self.sourceTypeNotEqual = sourceTypeNotEqual

        # @var string
        self.sourceTypeIn = sourceTypeIn

        # @var string
        self.sourceTypeNotIn = sourceTypeNotIn

        # @var int
        self.mediaDateGreaterThanOrEqual = mediaDateGreaterThanOrEqual

        # @var int
        self.mediaDateLessThanOrEqual = mediaDateLessThanOrEqual

        # @var string
        self.flavorParamsIdsMatchOr = flavorParamsIdsMatchOr

        # @var string
        self.flavorParamsIdsMatchAnd = flavorParamsIdsMatchAnd


    PROPERTY_LOADERS = {
        'mediaTypeEqual': (VidiunEnumsFactory.createInt, "VidiunMediaType"), 
        'mediaTypeIn': getXmlNodeText, 
        'sourceTypeEqual': (VidiunEnumsFactory.createString, "VidiunSourceType"), 
        'sourceTypeNotEqual': (VidiunEnumsFactory.createString, "VidiunSourceType"), 
        'sourceTypeIn': getXmlNodeText, 
        'sourceTypeNotIn': getXmlNodeText, 
        'mediaDateGreaterThanOrEqual': getXmlNodeInt, 
        'mediaDateLessThanOrEqual': getXmlNodeInt, 
        'flavorParamsIdsMatchOr': getXmlNodeText, 
        'flavorParamsIdsMatchAnd': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunPlayableEntryFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunMediaEntryBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunPlayableEntryFilter.toParams(self)
        vparams.put("objectType", "VidiunMediaEntryBaseFilter")
        vparams.addIntEnumIfDefined("mediaTypeEqual", self.mediaTypeEqual)
        vparams.addStringIfDefined("mediaTypeIn", self.mediaTypeIn)
        vparams.addStringEnumIfDefined("sourceTypeEqual", self.sourceTypeEqual)
        vparams.addStringEnumIfDefined("sourceTypeNotEqual", self.sourceTypeNotEqual)
        vparams.addStringIfDefined("sourceTypeIn", self.sourceTypeIn)
        vparams.addStringIfDefined("sourceTypeNotIn", self.sourceTypeNotIn)
        vparams.addIntIfDefined("mediaDateGreaterThanOrEqual", self.mediaDateGreaterThanOrEqual)
        vparams.addIntIfDefined("mediaDateLessThanOrEqual", self.mediaDateLessThanOrEqual)
        vparams.addStringIfDefined("flavorParamsIdsMatchOr", self.flavorParamsIdsMatchOr)
        vparams.addStringIfDefined("flavorParamsIdsMatchAnd", self.flavorParamsIdsMatchAnd)
        return vparams

    def getMediaTypeEqual(self):
        return self.mediaTypeEqual

    def setMediaTypeEqual(self, newMediaTypeEqual):
        self.mediaTypeEqual = newMediaTypeEqual

    def getMediaTypeIn(self):
        return self.mediaTypeIn

    def setMediaTypeIn(self, newMediaTypeIn):
        self.mediaTypeIn = newMediaTypeIn

    def getSourceTypeEqual(self):
        return self.sourceTypeEqual

    def setSourceTypeEqual(self, newSourceTypeEqual):
        self.sourceTypeEqual = newSourceTypeEqual

    def getSourceTypeNotEqual(self):
        return self.sourceTypeNotEqual

    def setSourceTypeNotEqual(self, newSourceTypeNotEqual):
        self.sourceTypeNotEqual = newSourceTypeNotEqual

    def getSourceTypeIn(self):
        return self.sourceTypeIn

    def setSourceTypeIn(self, newSourceTypeIn):
        self.sourceTypeIn = newSourceTypeIn

    def getSourceTypeNotIn(self):
        return self.sourceTypeNotIn

    def setSourceTypeNotIn(self, newSourceTypeNotIn):
        self.sourceTypeNotIn = newSourceTypeNotIn

    def getMediaDateGreaterThanOrEqual(self):
        return self.mediaDateGreaterThanOrEqual

    def setMediaDateGreaterThanOrEqual(self, newMediaDateGreaterThanOrEqual):
        self.mediaDateGreaterThanOrEqual = newMediaDateGreaterThanOrEqual

    def getMediaDateLessThanOrEqual(self):
        return self.mediaDateLessThanOrEqual

    def setMediaDateLessThanOrEqual(self, newMediaDateLessThanOrEqual):
        self.mediaDateLessThanOrEqual = newMediaDateLessThanOrEqual

    def getFlavorParamsIdsMatchOr(self):
        return self.flavorParamsIdsMatchOr

    def setFlavorParamsIdsMatchOr(self, newFlavorParamsIdsMatchOr):
        self.flavorParamsIdsMatchOr = newFlavorParamsIdsMatchOr

    def getFlavorParamsIdsMatchAnd(self):
        return self.flavorParamsIdsMatchAnd

    def setFlavorParamsIdsMatchAnd(self, newFlavorParamsIdsMatchAnd):
        self.flavorParamsIdsMatchAnd = newFlavorParamsIdsMatchAnd


# @package Vidiun
# @subpackage Client
class VidiunMediaEntryFilter(VidiunMediaEntryBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            idNotIn=NotImplemented,
            nameLike=NotImplemented,
            nameMultiLikeOr=NotImplemented,
            nameMultiLikeAnd=NotImplemented,
            nameEqual=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            userIdEqual=NotImplemented,
            userIdIn=NotImplemented,
            creatorIdEqual=NotImplemented,
            tagsLike=NotImplemented,
            tagsMultiLikeOr=NotImplemented,
            tagsMultiLikeAnd=NotImplemented,
            adminTagsLike=NotImplemented,
            adminTagsMultiLikeOr=NotImplemented,
            adminTagsMultiLikeAnd=NotImplemented,
            categoriesMatchAnd=NotImplemented,
            categoriesMatchOr=NotImplemented,
            categoriesNotContains=NotImplemented,
            categoriesIdsMatchAnd=NotImplemented,
            categoriesIdsMatchOr=NotImplemented,
            categoriesIdsNotContains=NotImplemented,
            categoriesIdsEmpty=NotImplemented,
            statusEqual=NotImplemented,
            statusNotEqual=NotImplemented,
            statusIn=NotImplemented,
            statusNotIn=NotImplemented,
            moderationStatusEqual=NotImplemented,
            moderationStatusNotEqual=NotImplemented,
            moderationStatusIn=NotImplemented,
            moderationStatusNotIn=NotImplemented,
            typeEqual=NotImplemented,
            typeIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            totalRankLessThanOrEqual=NotImplemented,
            totalRankGreaterThanOrEqual=NotImplemented,
            groupIdEqual=NotImplemented,
            searchTextMatchAnd=NotImplemented,
            searchTextMatchOr=NotImplemented,
            accessControlIdEqual=NotImplemented,
            accessControlIdIn=NotImplemented,
            startDateGreaterThanOrEqual=NotImplemented,
            startDateLessThanOrEqual=NotImplemented,
            startDateGreaterThanOrEqualOrNull=NotImplemented,
            startDateLessThanOrEqualOrNull=NotImplemented,
            endDateGreaterThanOrEqual=NotImplemented,
            endDateLessThanOrEqual=NotImplemented,
            endDateGreaterThanOrEqualOrNull=NotImplemented,
            endDateLessThanOrEqualOrNull=NotImplemented,
            referenceIdEqual=NotImplemented,
            referenceIdIn=NotImplemented,
            replacingEntryIdEqual=NotImplemented,
            replacingEntryIdIn=NotImplemented,
            replacedEntryIdEqual=NotImplemented,
            replacedEntryIdIn=NotImplemented,
            replacementStatusEqual=NotImplemented,
            replacementStatusIn=NotImplemented,
            partnerSortValueGreaterThanOrEqual=NotImplemented,
            partnerSortValueLessThanOrEqual=NotImplemented,
            rootEntryIdEqual=NotImplemented,
            rootEntryIdIn=NotImplemented,
            parentEntryIdEqual=NotImplemented,
            entitledUsersEditMatchAnd=NotImplemented,
            entitledUsersEditMatchOr=NotImplemented,
            entitledUsersPublishMatchAnd=NotImplemented,
            entitledUsersPublishMatchOr=NotImplemented,
            tagsNameMultiLikeOr=NotImplemented,
            tagsAdminTagsMultiLikeOr=NotImplemented,
            tagsAdminTagsNameMultiLikeOr=NotImplemented,
            tagsNameMultiLikeAnd=NotImplemented,
            tagsAdminTagsMultiLikeAnd=NotImplemented,
            tagsAdminTagsNameMultiLikeAnd=NotImplemented,
            freeText=NotImplemented,
            isRoot=NotImplemented,
            categoriesFullNameIn=NotImplemented,
            categoryAncestorIdIn=NotImplemented,
            redirectFromEntryId=NotImplemented,
            lastPlayedAtGreaterThanOrEqual=NotImplemented,
            lastPlayedAtLessThanOrEqual=NotImplemented,
            durationLessThan=NotImplemented,
            durationGreaterThan=NotImplemented,
            durationLessThanOrEqual=NotImplemented,
            durationGreaterThanOrEqual=NotImplemented,
            durationTypeMatchOr=NotImplemented,
            mediaTypeEqual=NotImplemented,
            mediaTypeIn=NotImplemented,
            sourceTypeEqual=NotImplemented,
            sourceTypeNotEqual=NotImplemented,
            sourceTypeIn=NotImplemented,
            sourceTypeNotIn=NotImplemented,
            mediaDateGreaterThanOrEqual=NotImplemented,
            mediaDateLessThanOrEqual=NotImplemented,
            flavorParamsIdsMatchOr=NotImplemented,
            flavorParamsIdsMatchAnd=NotImplemented):
        VidiunMediaEntryBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            idNotIn,
            nameLike,
            nameMultiLikeOr,
            nameMultiLikeAnd,
            nameEqual,
            partnerIdEqual,
            partnerIdIn,
            userIdEqual,
            userIdIn,
            creatorIdEqual,
            tagsLike,
            tagsMultiLikeOr,
            tagsMultiLikeAnd,
            adminTagsLike,
            adminTagsMultiLikeOr,
            adminTagsMultiLikeAnd,
            categoriesMatchAnd,
            categoriesMatchOr,
            categoriesNotContains,
            categoriesIdsMatchAnd,
            categoriesIdsMatchOr,
            categoriesIdsNotContains,
            categoriesIdsEmpty,
            statusEqual,
            statusNotEqual,
            statusIn,
            statusNotIn,
            moderationStatusEqual,
            moderationStatusNotEqual,
            moderationStatusIn,
            moderationStatusNotIn,
            typeEqual,
            typeIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            totalRankLessThanOrEqual,
            totalRankGreaterThanOrEqual,
            groupIdEqual,
            searchTextMatchAnd,
            searchTextMatchOr,
            accessControlIdEqual,
            accessControlIdIn,
            startDateGreaterThanOrEqual,
            startDateLessThanOrEqual,
            startDateGreaterThanOrEqualOrNull,
            startDateLessThanOrEqualOrNull,
            endDateGreaterThanOrEqual,
            endDateLessThanOrEqual,
            endDateGreaterThanOrEqualOrNull,
            endDateLessThanOrEqualOrNull,
            referenceIdEqual,
            referenceIdIn,
            replacingEntryIdEqual,
            replacingEntryIdIn,
            replacedEntryIdEqual,
            replacedEntryIdIn,
            replacementStatusEqual,
            replacementStatusIn,
            partnerSortValueGreaterThanOrEqual,
            partnerSortValueLessThanOrEqual,
            rootEntryIdEqual,
            rootEntryIdIn,
            parentEntryIdEqual,
            entitledUsersEditMatchAnd,
            entitledUsersEditMatchOr,
            entitledUsersPublishMatchAnd,
            entitledUsersPublishMatchOr,
            tagsNameMultiLikeOr,
            tagsAdminTagsMultiLikeOr,
            tagsAdminTagsNameMultiLikeOr,
            tagsNameMultiLikeAnd,
            tagsAdminTagsMultiLikeAnd,
            tagsAdminTagsNameMultiLikeAnd,
            freeText,
            isRoot,
            categoriesFullNameIn,
            categoryAncestorIdIn,
            redirectFromEntryId,
            lastPlayedAtGreaterThanOrEqual,
            lastPlayedAtLessThanOrEqual,
            durationLessThan,
            durationGreaterThan,
            durationLessThanOrEqual,
            durationGreaterThanOrEqual,
            durationTypeMatchOr,
            mediaTypeEqual,
            mediaTypeIn,
            sourceTypeEqual,
            sourceTypeNotEqual,
            sourceTypeIn,
            sourceTypeNotIn,
            mediaDateGreaterThanOrEqual,
            mediaDateLessThanOrEqual,
            flavorParamsIdsMatchOr,
            flavorParamsIdsMatchAnd)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunMediaEntryBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunMediaEntryFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunMediaEntryBaseFilter.toParams(self)
        vparams.put("objectType", "VidiunMediaEntryFilter")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunMediaEntryFilterForPlaylist(VidiunMediaEntryFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            idNotIn=NotImplemented,
            nameLike=NotImplemented,
            nameMultiLikeOr=NotImplemented,
            nameMultiLikeAnd=NotImplemented,
            nameEqual=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            userIdEqual=NotImplemented,
            userIdIn=NotImplemented,
            creatorIdEqual=NotImplemented,
            tagsLike=NotImplemented,
            tagsMultiLikeOr=NotImplemented,
            tagsMultiLikeAnd=NotImplemented,
            adminTagsLike=NotImplemented,
            adminTagsMultiLikeOr=NotImplemented,
            adminTagsMultiLikeAnd=NotImplemented,
            categoriesMatchAnd=NotImplemented,
            categoriesMatchOr=NotImplemented,
            categoriesNotContains=NotImplemented,
            categoriesIdsMatchAnd=NotImplemented,
            categoriesIdsMatchOr=NotImplemented,
            categoriesIdsNotContains=NotImplemented,
            categoriesIdsEmpty=NotImplemented,
            statusEqual=NotImplemented,
            statusNotEqual=NotImplemented,
            statusIn=NotImplemented,
            statusNotIn=NotImplemented,
            moderationStatusEqual=NotImplemented,
            moderationStatusNotEqual=NotImplemented,
            moderationStatusIn=NotImplemented,
            moderationStatusNotIn=NotImplemented,
            typeEqual=NotImplemented,
            typeIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            totalRankLessThanOrEqual=NotImplemented,
            totalRankGreaterThanOrEqual=NotImplemented,
            groupIdEqual=NotImplemented,
            searchTextMatchAnd=NotImplemented,
            searchTextMatchOr=NotImplemented,
            accessControlIdEqual=NotImplemented,
            accessControlIdIn=NotImplemented,
            startDateGreaterThanOrEqual=NotImplemented,
            startDateLessThanOrEqual=NotImplemented,
            startDateGreaterThanOrEqualOrNull=NotImplemented,
            startDateLessThanOrEqualOrNull=NotImplemented,
            endDateGreaterThanOrEqual=NotImplemented,
            endDateLessThanOrEqual=NotImplemented,
            endDateGreaterThanOrEqualOrNull=NotImplemented,
            endDateLessThanOrEqualOrNull=NotImplemented,
            referenceIdEqual=NotImplemented,
            referenceIdIn=NotImplemented,
            replacingEntryIdEqual=NotImplemented,
            replacingEntryIdIn=NotImplemented,
            replacedEntryIdEqual=NotImplemented,
            replacedEntryIdIn=NotImplemented,
            replacementStatusEqual=NotImplemented,
            replacementStatusIn=NotImplemented,
            partnerSortValueGreaterThanOrEqual=NotImplemented,
            partnerSortValueLessThanOrEqual=NotImplemented,
            rootEntryIdEqual=NotImplemented,
            rootEntryIdIn=NotImplemented,
            parentEntryIdEqual=NotImplemented,
            entitledUsersEditMatchAnd=NotImplemented,
            entitledUsersEditMatchOr=NotImplemented,
            entitledUsersPublishMatchAnd=NotImplemented,
            entitledUsersPublishMatchOr=NotImplemented,
            tagsNameMultiLikeOr=NotImplemented,
            tagsAdminTagsMultiLikeOr=NotImplemented,
            tagsAdminTagsNameMultiLikeOr=NotImplemented,
            tagsNameMultiLikeAnd=NotImplemented,
            tagsAdminTagsMultiLikeAnd=NotImplemented,
            tagsAdminTagsNameMultiLikeAnd=NotImplemented,
            freeText=NotImplemented,
            isRoot=NotImplemented,
            categoriesFullNameIn=NotImplemented,
            categoryAncestorIdIn=NotImplemented,
            redirectFromEntryId=NotImplemented,
            lastPlayedAtGreaterThanOrEqual=NotImplemented,
            lastPlayedAtLessThanOrEqual=NotImplemented,
            durationLessThan=NotImplemented,
            durationGreaterThan=NotImplemented,
            durationLessThanOrEqual=NotImplemented,
            durationGreaterThanOrEqual=NotImplemented,
            durationTypeMatchOr=NotImplemented,
            mediaTypeEqual=NotImplemented,
            mediaTypeIn=NotImplemented,
            sourceTypeEqual=NotImplemented,
            sourceTypeNotEqual=NotImplemented,
            sourceTypeIn=NotImplemented,
            sourceTypeNotIn=NotImplemented,
            mediaDateGreaterThanOrEqual=NotImplemented,
            mediaDateLessThanOrEqual=NotImplemented,
            flavorParamsIdsMatchOr=NotImplemented,
            flavorParamsIdsMatchAnd=NotImplemented,
            limit=NotImplemented):
        VidiunMediaEntryFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            idNotIn,
            nameLike,
            nameMultiLikeOr,
            nameMultiLikeAnd,
            nameEqual,
            partnerIdEqual,
            partnerIdIn,
            userIdEqual,
            userIdIn,
            creatorIdEqual,
            tagsLike,
            tagsMultiLikeOr,
            tagsMultiLikeAnd,
            adminTagsLike,
            adminTagsMultiLikeOr,
            adminTagsMultiLikeAnd,
            categoriesMatchAnd,
            categoriesMatchOr,
            categoriesNotContains,
            categoriesIdsMatchAnd,
            categoriesIdsMatchOr,
            categoriesIdsNotContains,
            categoriesIdsEmpty,
            statusEqual,
            statusNotEqual,
            statusIn,
            statusNotIn,
            moderationStatusEqual,
            moderationStatusNotEqual,
            moderationStatusIn,
            moderationStatusNotIn,
            typeEqual,
            typeIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            totalRankLessThanOrEqual,
            totalRankGreaterThanOrEqual,
            groupIdEqual,
            searchTextMatchAnd,
            searchTextMatchOr,
            accessControlIdEqual,
            accessControlIdIn,
            startDateGreaterThanOrEqual,
            startDateLessThanOrEqual,
            startDateGreaterThanOrEqualOrNull,
            startDateLessThanOrEqualOrNull,
            endDateGreaterThanOrEqual,
            endDateLessThanOrEqual,
            endDateGreaterThanOrEqualOrNull,
            endDateLessThanOrEqualOrNull,
            referenceIdEqual,
            referenceIdIn,
            replacingEntryIdEqual,
            replacingEntryIdIn,
            replacedEntryIdEqual,
            replacedEntryIdIn,
            replacementStatusEqual,
            replacementStatusIn,
            partnerSortValueGreaterThanOrEqual,
            partnerSortValueLessThanOrEqual,
            rootEntryIdEqual,
            rootEntryIdIn,
            parentEntryIdEqual,
            entitledUsersEditMatchAnd,
            entitledUsersEditMatchOr,
            entitledUsersPublishMatchAnd,
            entitledUsersPublishMatchOr,
            tagsNameMultiLikeOr,
            tagsAdminTagsMultiLikeOr,
            tagsAdminTagsNameMultiLikeOr,
            tagsNameMultiLikeAnd,
            tagsAdminTagsMultiLikeAnd,
            tagsAdminTagsNameMultiLikeAnd,
            freeText,
            isRoot,
            categoriesFullNameIn,
            categoryAncestorIdIn,
            redirectFromEntryId,
            lastPlayedAtGreaterThanOrEqual,
            lastPlayedAtLessThanOrEqual,
            durationLessThan,
            durationGreaterThan,
            durationLessThanOrEqual,
            durationGreaterThanOrEqual,
            durationTypeMatchOr,
            mediaTypeEqual,
            mediaTypeIn,
            sourceTypeEqual,
            sourceTypeNotEqual,
            sourceTypeIn,
            sourceTypeNotIn,
            mediaDateGreaterThanOrEqual,
            mediaDateLessThanOrEqual,
            flavorParamsIdsMatchOr,
            flavorParamsIdsMatchAnd)

        # @var int
        self.limit = limit


    PROPERTY_LOADERS = {
        'limit': getXmlNodeInt, 
    }

    def fromXml(self, node):
        VidiunMediaEntryFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunMediaEntryFilterForPlaylist.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunMediaEntryFilter.toParams(self)
        vparams.put("objectType", "VidiunMediaEntryFilterForPlaylist")
        vparams.addIntIfDefined("limit", self.limit)
        return vparams

    def getLimit(self):
        return self.limit

    def setLimit(self, newLimit):
        self.limit = newLimit


# @package Vidiun
# @subpackage Client
class VidiunMediaInfo(VidiunObjectBase):
    def __init__(self,
            id=NotImplemented,
            flavorAssetId=NotImplemented,
            fileSize=NotImplemented,
            containerFormat=NotImplemented,
            containerId=NotImplemented,
            containerProfile=NotImplemented,
            containerDuration=NotImplemented,
            containerBitRate=NotImplemented,
            videoFormat=NotImplemented,
            videoCodecId=NotImplemented,
            videoDuration=NotImplemented,
            videoBitRate=NotImplemented,
            videoBitRateMode=NotImplemented,
            videoWidth=NotImplemented,
            videoHeight=NotImplemented,
            videoFrameRate=NotImplemented,
            videoDar=NotImplemented,
            videoRotation=NotImplemented,
            audioFormat=NotImplemented,
            audioCodecId=NotImplemented,
            audioDuration=NotImplemented,
            audioBitRate=NotImplemented,
            audioBitRateMode=NotImplemented,
            audioChannels=NotImplemented,
            audioSamplingRate=NotImplemented,
            audioResolution=NotImplemented,
            writingLib=NotImplemented,
            rawData=NotImplemented,
            multiStreamInfo=NotImplemented,
            scanType=NotImplemented,
            multiStream=NotImplemented,
            isFastStart=NotImplemented,
            contentStreams=NotImplemented,
            complexityValue=NotImplemented):
        VidiunObjectBase.__init__(self)

        # The id of the media info
        # @var int
        # @readonly
        self.id = id

        # The id of the related flavor asset
        # @var string
        self.flavorAssetId = flavorAssetId

        # The file size
        # @var int
        self.fileSize = fileSize

        # The container format
        # @var string
        self.containerFormat = containerFormat

        # The container id
        # @var string
        self.containerId = containerId

        # The container profile
        # @var string
        self.containerProfile = containerProfile

        # The container duration
        # @var int
        self.containerDuration = containerDuration

        # The container bit rate
        # @var int
        self.containerBitRate = containerBitRate

        # The video format
        # @var string
        self.videoFormat = videoFormat

        # The video codec id
        # @var string
        self.videoCodecId = videoCodecId

        # The video duration
        # @var int
        self.videoDuration = videoDuration

        # The video bit rate
        # @var int
        self.videoBitRate = videoBitRate

        # The video bit rate mode
        # @var VidiunBitRateMode
        self.videoBitRateMode = videoBitRateMode

        # The video width
        # @var int
        self.videoWidth = videoWidth

        # The video height
        # @var int
        self.videoHeight = videoHeight

        # The video frame rate
        # @var float
        self.videoFrameRate = videoFrameRate

        # The video display aspect ratio (dar)
        # @var float
        self.videoDar = videoDar

        # @var int
        self.videoRotation = videoRotation

        # The audio format
        # @var string
        self.audioFormat = audioFormat

        # The audio codec id
        # @var string
        self.audioCodecId = audioCodecId

        # The audio duration
        # @var int
        self.audioDuration = audioDuration

        # The audio bit rate
        # @var int
        self.audioBitRate = audioBitRate

        # The audio bit rate mode
        # @var VidiunBitRateMode
        self.audioBitRateMode = audioBitRateMode

        # The number of audio channels
        # @var int
        self.audioChannels = audioChannels

        # The audio sampling rate
        # @var int
        self.audioSamplingRate = audioSamplingRate

        # The audio resolution
        # @var int
        self.audioResolution = audioResolution

        # The writing library
        # @var string
        self.writingLib = writingLib

        # The data as returned by the mediainfo command line
        # @var string
        self.rawData = rawData

        # @var string
        self.multiStreamInfo = multiStreamInfo

        # @var int
        self.scanType = scanType

        # @var string
        self.multiStream = multiStream

        # @var int
        self.isFastStart = isFastStart

        # @var string
        self.contentStreams = contentStreams

        # @var int
        self.complexityValue = complexityValue


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'flavorAssetId': getXmlNodeText, 
        'fileSize': getXmlNodeInt, 
        'containerFormat': getXmlNodeText, 
        'containerId': getXmlNodeText, 
        'containerProfile': getXmlNodeText, 
        'containerDuration': getXmlNodeInt, 
        'containerBitRate': getXmlNodeInt, 
        'videoFormat': getXmlNodeText, 
        'videoCodecId': getXmlNodeText, 
        'videoDuration': getXmlNodeInt, 
        'videoBitRate': getXmlNodeInt, 
        'videoBitRateMode': (VidiunEnumsFactory.createInt, "VidiunBitRateMode"), 
        'videoWidth': getXmlNodeInt, 
        'videoHeight': getXmlNodeInt, 
        'videoFrameRate': getXmlNodeFloat, 
        'videoDar': getXmlNodeFloat, 
        'videoRotation': getXmlNodeInt, 
        'audioFormat': getXmlNodeText, 
        'audioCodecId': getXmlNodeText, 
        'audioDuration': getXmlNodeInt, 
        'audioBitRate': getXmlNodeInt, 
        'audioBitRateMode': (VidiunEnumsFactory.createInt, "VidiunBitRateMode"), 
        'audioChannels': getXmlNodeInt, 
        'audioSamplingRate': getXmlNodeInt, 
        'audioResolution': getXmlNodeInt, 
        'writingLib': getXmlNodeText, 
        'rawData': getXmlNodeText, 
        'multiStreamInfo': getXmlNodeText, 
        'scanType': getXmlNodeInt, 
        'multiStream': getXmlNodeText, 
        'isFastStart': getXmlNodeInt, 
        'contentStreams': getXmlNodeText, 
        'complexityValue': getXmlNodeInt, 
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunMediaInfo.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunMediaInfo")
        vparams.addStringIfDefined("flavorAssetId", self.flavorAssetId)
        vparams.addIntIfDefined("fileSize", self.fileSize)
        vparams.addStringIfDefined("containerFormat", self.containerFormat)
        vparams.addStringIfDefined("containerId", self.containerId)
        vparams.addStringIfDefined("containerProfile", self.containerProfile)
        vparams.addIntIfDefined("containerDuration", self.containerDuration)
        vparams.addIntIfDefined("containerBitRate", self.containerBitRate)
        vparams.addStringIfDefined("videoFormat", self.videoFormat)
        vparams.addStringIfDefined("videoCodecId", self.videoCodecId)
        vparams.addIntIfDefined("videoDuration", self.videoDuration)
        vparams.addIntIfDefined("videoBitRate", self.videoBitRate)
        vparams.addIntEnumIfDefined("videoBitRateMode", self.videoBitRateMode)
        vparams.addIntIfDefined("videoWidth", self.videoWidth)
        vparams.addIntIfDefined("videoHeight", self.videoHeight)
        vparams.addFloatIfDefined("videoFrameRate", self.videoFrameRate)
        vparams.addFloatIfDefined("videoDar", self.videoDar)
        vparams.addIntIfDefined("videoRotation", self.videoRotation)
        vparams.addStringIfDefined("audioFormat", self.audioFormat)
        vparams.addStringIfDefined("audioCodecId", self.audioCodecId)
        vparams.addIntIfDefined("audioDuration", self.audioDuration)
        vparams.addIntIfDefined("audioBitRate", self.audioBitRate)
        vparams.addIntEnumIfDefined("audioBitRateMode", self.audioBitRateMode)
        vparams.addIntIfDefined("audioChannels", self.audioChannels)
        vparams.addIntIfDefined("audioSamplingRate", self.audioSamplingRate)
        vparams.addIntIfDefined("audioResolution", self.audioResolution)
        vparams.addStringIfDefined("writingLib", self.writingLib)
        vparams.addStringIfDefined("rawData", self.rawData)
        vparams.addStringIfDefined("multiStreamInfo", self.multiStreamInfo)
        vparams.addIntIfDefined("scanType", self.scanType)
        vparams.addStringIfDefined("multiStream", self.multiStream)
        vparams.addIntIfDefined("isFastStart", self.isFastStart)
        vparams.addStringIfDefined("contentStreams", self.contentStreams)
        vparams.addIntIfDefined("complexityValue", self.complexityValue)
        return vparams

    def getId(self):
        return self.id

    def getFlavorAssetId(self):
        return self.flavorAssetId

    def setFlavorAssetId(self, newFlavorAssetId):
        self.flavorAssetId = newFlavorAssetId

    def getFileSize(self):
        return self.fileSize

    def setFileSize(self, newFileSize):
        self.fileSize = newFileSize

    def getContainerFormat(self):
        return self.containerFormat

    def setContainerFormat(self, newContainerFormat):
        self.containerFormat = newContainerFormat

    def getContainerId(self):
        return self.containerId

    def setContainerId(self, newContainerId):
        self.containerId = newContainerId

    def getContainerProfile(self):
        return self.containerProfile

    def setContainerProfile(self, newContainerProfile):
        self.containerProfile = newContainerProfile

    def getContainerDuration(self):
        return self.containerDuration

    def setContainerDuration(self, newContainerDuration):
        self.containerDuration = newContainerDuration

    def getContainerBitRate(self):
        return self.containerBitRate

    def setContainerBitRate(self, newContainerBitRate):
        self.containerBitRate = newContainerBitRate

    def getVideoFormat(self):
        return self.videoFormat

    def setVideoFormat(self, newVideoFormat):
        self.videoFormat = newVideoFormat

    def getVideoCodecId(self):
        return self.videoCodecId

    def setVideoCodecId(self, newVideoCodecId):
        self.videoCodecId = newVideoCodecId

    def getVideoDuration(self):
        return self.videoDuration

    def setVideoDuration(self, newVideoDuration):
        self.videoDuration = newVideoDuration

    def getVideoBitRate(self):
        return self.videoBitRate

    def setVideoBitRate(self, newVideoBitRate):
        self.videoBitRate = newVideoBitRate

    def getVideoBitRateMode(self):
        return self.videoBitRateMode

    def setVideoBitRateMode(self, newVideoBitRateMode):
        self.videoBitRateMode = newVideoBitRateMode

    def getVideoWidth(self):
        return self.videoWidth

    def setVideoWidth(self, newVideoWidth):
        self.videoWidth = newVideoWidth

    def getVideoHeight(self):
        return self.videoHeight

    def setVideoHeight(self, newVideoHeight):
        self.videoHeight = newVideoHeight

    def getVideoFrameRate(self):
        return self.videoFrameRate

    def setVideoFrameRate(self, newVideoFrameRate):
        self.videoFrameRate = newVideoFrameRate

    def getVideoDar(self):
        return self.videoDar

    def setVideoDar(self, newVideoDar):
        self.videoDar = newVideoDar

    def getVideoRotation(self):
        return self.videoRotation

    def setVideoRotation(self, newVideoRotation):
        self.videoRotation = newVideoRotation

    def getAudioFormat(self):
        return self.audioFormat

    def setAudioFormat(self, newAudioFormat):
        self.audioFormat = newAudioFormat

    def getAudioCodecId(self):
        return self.audioCodecId

    def setAudioCodecId(self, newAudioCodecId):
        self.audioCodecId = newAudioCodecId

    def getAudioDuration(self):
        return self.audioDuration

    def setAudioDuration(self, newAudioDuration):
        self.audioDuration = newAudioDuration

    def getAudioBitRate(self):
        return self.audioBitRate

    def setAudioBitRate(self, newAudioBitRate):
        self.audioBitRate = newAudioBitRate

    def getAudioBitRateMode(self):
        return self.audioBitRateMode

    def setAudioBitRateMode(self, newAudioBitRateMode):
        self.audioBitRateMode = newAudioBitRateMode

    def getAudioChannels(self):
        return self.audioChannels

    def setAudioChannels(self, newAudioChannels):
        self.audioChannels = newAudioChannels

    def getAudioSamplingRate(self):
        return self.audioSamplingRate

    def setAudioSamplingRate(self, newAudioSamplingRate):
        self.audioSamplingRate = newAudioSamplingRate

    def getAudioResolution(self):
        return self.audioResolution

    def setAudioResolution(self, newAudioResolution):
        self.audioResolution = newAudioResolution

    def getWritingLib(self):
        return self.writingLib

    def setWritingLib(self, newWritingLib):
        self.writingLib = newWritingLib

    def getRawData(self):
        return self.rawData

    def setRawData(self, newRawData):
        self.rawData = newRawData

    def getMultiStreamInfo(self):
        return self.multiStreamInfo

    def setMultiStreamInfo(self, newMultiStreamInfo):
        self.multiStreamInfo = newMultiStreamInfo

    def getScanType(self):
        return self.scanType

    def setScanType(self, newScanType):
        self.scanType = newScanType

    def getMultiStream(self):
        return self.multiStream

    def setMultiStream(self, newMultiStream):
        self.multiStream = newMultiStream

    def getIsFastStart(self):
        return self.isFastStart

    def setIsFastStart(self, newIsFastStart):
        self.isFastStart = newIsFastStart

    def getContentStreams(self):
        return self.contentStreams

    def setContentStreams(self, newContentStreams):
        self.contentStreams = newContentStreams

    def getComplexityValue(self):
        return self.complexityValue

    def setComplexityValue(self, newComplexityValue):
        self.complexityValue = newComplexityValue


# @package Vidiun
# @subpackage Client
class VidiunMixEntry(VidiunPlayableEntry):
    def __init__(self,
            id=NotImplemented,
            name=NotImplemented,
            description=NotImplemented,
            partnerId=NotImplemented,
            userId=NotImplemented,
            creatorId=NotImplemented,
            tags=NotImplemented,
            adminTags=NotImplemented,
            categories=NotImplemented,
            categoriesIds=NotImplemented,
            status=NotImplemented,
            moderationStatus=NotImplemented,
            moderationCount=NotImplemented,
            type=NotImplemented,
            createdAt=NotImplemented,
            updatedAt=NotImplemented,
            rank=NotImplemented,
            totalRank=NotImplemented,
            votes=NotImplemented,
            groupId=NotImplemented,
            partnerData=NotImplemented,
            downloadUrl=NotImplemented,
            searchText=NotImplemented,
            licenseType=NotImplemented,
            version=NotImplemented,
            thumbnailUrl=NotImplemented,
            accessControlId=NotImplemented,
            startDate=NotImplemented,
            endDate=NotImplemented,
            referenceId=NotImplemented,
            replacingEntryId=NotImplemented,
            replacedEntryId=NotImplemented,
            replacementStatus=NotImplemented,
            partnerSortValue=NotImplemented,
            conversionProfileId=NotImplemented,
            redirectEntryId=NotImplemented,
            rootEntryId=NotImplemented,
            parentEntryId=NotImplemented,
            operationAttributes=NotImplemented,
            entitledUsersEdit=NotImplemented,
            entitledUsersPublish=NotImplemented,
            capabilities=NotImplemented,
            templateEntryId=NotImplemented,
            plays=NotImplemented,
            views=NotImplemented,
            lastPlayedAt=NotImplemented,
            width=NotImplemented,
            height=NotImplemented,
            duration=NotImplemented,
            msDuration=NotImplemented,
            durationType=NotImplemented,
            hasRealThumbnail=NotImplemented,
            editorType=NotImplemented,
            dataContent=NotImplemented):
        VidiunPlayableEntry.__init__(self,
            id,
            name,
            description,
            partnerId,
            userId,
            creatorId,
            tags,
            adminTags,
            categories,
            categoriesIds,
            status,
            moderationStatus,
            moderationCount,
            type,
            createdAt,
            updatedAt,
            rank,
            totalRank,
            votes,
            groupId,
            partnerData,
            downloadUrl,
            searchText,
            licenseType,
            version,
            thumbnailUrl,
            accessControlId,
            startDate,
            endDate,
            referenceId,
            replacingEntryId,
            replacedEntryId,
            replacementStatus,
            partnerSortValue,
            conversionProfileId,
            redirectEntryId,
            rootEntryId,
            parentEntryId,
            operationAttributes,
            entitledUsersEdit,
            entitledUsersPublish,
            capabilities,
            templateEntryId,
            plays,
            views,
            lastPlayedAt,
            width,
            height,
            duration,
            msDuration,
            durationType)

        # Indicates whether the user has submited a real thumbnail to the mix (Not the one that was generated automaticaly)
        # @var bool
        # @readonly
        self.hasRealThumbnail = hasRealThumbnail

        # The editor type used to edit the metadata
        # @var VidiunEditorType
        self.editorType = editorType

        # The xml data of the mix
        # @var string
        self.dataContent = dataContent


    PROPERTY_LOADERS = {
        'hasRealThumbnail': getXmlNodeBool, 
        'editorType': (VidiunEnumsFactory.createInt, "VidiunEditorType"), 
        'dataContent': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunPlayableEntry.fromXml(self, node)
        self.fromXmlImpl(node, VidiunMixEntry.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunPlayableEntry.toParams(self)
        vparams.put("objectType", "VidiunMixEntry")
        vparams.addIntEnumIfDefined("editorType", self.editorType)
        vparams.addStringIfDefined("dataContent", self.dataContent)
        return vparams

    def getHasRealThumbnail(self):
        return self.hasRealThumbnail

    def getEditorType(self):
        return self.editorType

    def setEditorType(self, newEditorType):
        self.editorType = newEditorType

    def getDataContent(self):
        return self.dataContent

    def setDataContent(self, newDataContent):
        self.dataContent = newDataContent


# @package Vidiun
# @subpackage Client
class VidiunModerationFlag(VidiunObjectBase):
    def __init__(self,
            id=NotImplemented,
            partnerId=NotImplemented,
            userId=NotImplemented,
            moderationObjectType=NotImplemented,
            flaggedEntryId=NotImplemented,
            flaggedUserId=NotImplemented,
            status=NotImplemented,
            comments=NotImplemented,
            flagType=NotImplemented,
            createdAt=NotImplemented,
            updatedAt=NotImplemented):
        VidiunObjectBase.__init__(self)

        # Moderation flag id
        # @var int
        # @readonly
        self.id = id

        # @var int
        # @readonly
        self.partnerId = partnerId

        # The user id that added the moderation flag
        # @var string
        # @readonly
        self.userId = userId

        # The type of the moderation flag (entry or user)
        # @var VidiunModerationObjectType
        # @readonly
        self.moderationObjectType = moderationObjectType

        # If moderation flag is set for entry, this is the flagged entry id
        # @var string
        self.flaggedEntryId = flaggedEntryId

        # If moderation flag is set for user, this is the flagged user id
        # @var string
        self.flaggedUserId = flaggedUserId

        # The moderation flag status
        # @var VidiunModerationFlagStatus
        # @readonly
        self.status = status

        # The comment that was added to the flag
        # @var string
        self.comments = comments

        # @var VidiunModerationFlagType
        self.flagType = flagType

        # @var int
        # @readonly
        self.createdAt = createdAt

        # @var int
        # @readonly
        self.updatedAt = updatedAt


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'partnerId': getXmlNodeInt, 
        'userId': getXmlNodeText, 
        'moderationObjectType': (VidiunEnumsFactory.createString, "VidiunModerationObjectType"), 
        'flaggedEntryId': getXmlNodeText, 
        'flaggedUserId': getXmlNodeText, 
        'status': (VidiunEnumsFactory.createString, "VidiunModerationFlagStatus"), 
        'comments': getXmlNodeText, 
        'flagType': (VidiunEnumsFactory.createInt, "VidiunModerationFlagType"), 
        'createdAt': getXmlNodeInt, 
        'updatedAt': getXmlNodeInt, 
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunModerationFlag.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunModerationFlag")
        vparams.addStringIfDefined("flaggedEntryId", self.flaggedEntryId)
        vparams.addStringIfDefined("flaggedUserId", self.flaggedUserId)
        vparams.addStringIfDefined("comments", self.comments)
        vparams.addIntEnumIfDefined("flagType", self.flagType)
        return vparams

    def getId(self):
        return self.id

    def getPartnerId(self):
        return self.partnerId

    def getUserId(self):
        return self.userId

    def getModerationObjectType(self):
        return self.moderationObjectType

    def getFlaggedEntryId(self):
        return self.flaggedEntryId

    def setFlaggedEntryId(self, newFlaggedEntryId):
        self.flaggedEntryId = newFlaggedEntryId

    def getFlaggedUserId(self):
        return self.flaggedUserId

    def setFlaggedUserId(self, newFlaggedUserId):
        self.flaggedUserId = newFlaggedUserId

    def getStatus(self):
        return self.status

    def getComments(self):
        return self.comments

    def setComments(self, newComments):
        self.comments = newComments

    def getFlagType(self):
        return self.flagType

    def setFlagType(self, newFlagType):
        self.flagType = newFlagType

    def getCreatedAt(self):
        return self.createdAt

    def getUpdatedAt(self):
        return self.updatedAt


# @package Vidiun
# @subpackage Client
class VidiunPartnerStatistics(VidiunObjectBase):
    def __init__(self,
            packageBandwidthAndStorage=NotImplemented,
            hosting=NotImplemented,
            bandwidth=NotImplemented,
            usage=NotImplemented,
            usagePercent=NotImplemented,
            reachedLimitDate=NotImplemented):
        VidiunObjectBase.__init__(self)

        # Package total allowed bandwidth and storage
        # @var int
        # @readonly
        self.packageBandwidthAndStorage = packageBandwidthAndStorage

        # Partner total hosting in GB on the disk
        # @var float
        # @readonly
        self.hosting = hosting

        # Partner total bandwidth in GB
        # @var float
        # @readonly
        self.bandwidth = bandwidth

        # total usage in GB - including bandwidth and storage
        # @var int
        # @readonly
        self.usage = usage

        # Percent of usage out of partner's package. if usage is 5GB and package is 10GB, this value will be 50
        # @var float
        # @readonly
        self.usagePercent = usagePercent

        # date when partner reached the limit of his package (timestamp)
        # @var int
        # @readonly
        self.reachedLimitDate = reachedLimitDate


    PROPERTY_LOADERS = {
        'packageBandwidthAndStorage': getXmlNodeInt, 
        'hosting': getXmlNodeFloat, 
        'bandwidth': getXmlNodeFloat, 
        'usage': getXmlNodeInt, 
        'usagePercent': getXmlNodeFloat, 
        'reachedLimitDate': getXmlNodeInt, 
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunPartnerStatistics.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunPartnerStatistics")
        return vparams

    def getPackageBandwidthAndStorage(self):
        return self.packageBandwidthAndStorage

    def getHosting(self):
        return self.hosting

    def getBandwidth(self):
        return self.bandwidth

    def getUsage(self):
        return self.usage

    def getUsagePercent(self):
        return self.usagePercent

    def getReachedLimitDate(self):
        return self.reachedLimitDate


# @package Vidiun
# @subpackage Client
class VidiunPartnerUsage(VidiunObjectBase):
    def __init__(self,
            hostingGB=NotImplemented,
            Percent=NotImplemented,
            packageBW=NotImplemented,
            usageGB=NotImplemented,
            reachedLimitDate=NotImplemented,
            usageGraph=NotImplemented):
        VidiunObjectBase.__init__(self)

        # Partner total hosting in GB on the disk
        # @var float
        # @readonly
        self.hostingGB = hostingGB

        # percent of usage out of partner's package. if usageGB is 5 and package is 10GB, this value will be 50
        # @var float
        # @readonly
        self.Percent = Percent

        # package total BW - actually this is usage, which represents BW+storage
        # @var int
        # @readonly
        self.packageBW = packageBW

        # total usage in GB - including bandwidth and storage
        # @var float
        # @readonly
        self.usageGB = usageGB

        # date when partner reached the limit of his package (timestamp)
        # @var int
        # @readonly
        self.reachedLimitDate = reachedLimitDate

        # a semi-colon separated list of comma-separated key-values to represent a usage graph.
        # 	 keys could be 1-12 for a year view (1,1.2;2,1.1;3,0.9;...;12,1.4;)
        # 	 keys could be 1-[28,29,30,31] depending on the requested month, for a daily view in a given month (1,0.4;2,0.2;...;31,0.1;)
        # @var string
        # @readonly
        self.usageGraph = usageGraph


    PROPERTY_LOADERS = {
        'hostingGB': getXmlNodeFloat, 
        'Percent': getXmlNodeFloat, 
        'packageBW': getXmlNodeInt, 
        'usageGB': getXmlNodeFloat, 
        'reachedLimitDate': getXmlNodeInt, 
        'usageGraph': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunPartnerUsage.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunPartnerUsage")
        return vparams

    def getHostingGB(self):
        return self.hostingGB

    def getPercent(self):
        return self.Percent

    def getPackageBW(self):
        return self.packageBW

    def getUsageGB(self):
        return self.usageGB

    def getReachedLimitDate(self):
        return self.reachedLimitDate

    def getUsageGraph(self):
        return self.usageGraph


# @package Vidiun
# @subpackage Client
class VidiunPermission(VidiunObjectBase):
    def __init__(self,
            id=NotImplemented,
            type=NotImplemented,
            name=NotImplemented,
            friendlyName=NotImplemented,
            description=NotImplemented,
            status=NotImplemented,
            partnerId=NotImplemented,
            dependsOnPermissionNames=NotImplemented,
            tags=NotImplemented,
            permissionItemsIds=NotImplemented,
            createdAt=NotImplemented,
            updatedAt=NotImplemented,
            partnerGroup=NotImplemented):
        VidiunObjectBase.__init__(self)

        # @var int
        # @readonly
        self.id = id

        # @var VidiunPermissionType
        # @readonly
        self.type = type

        # @var string
        self.name = name

        # @var string
        self.friendlyName = friendlyName

        # @var string
        self.description = description

        # @var VidiunPermissionStatus
        self.status = status

        # @var int
        # @readonly
        self.partnerId = partnerId

        # @var string
        self.dependsOnPermissionNames = dependsOnPermissionNames

        # @var string
        self.tags = tags

        # @var string
        self.permissionItemsIds = permissionItemsIds

        # @var int
        # @readonly
        self.createdAt = createdAt

        # @var int
        # @readonly
        self.updatedAt = updatedAt

        # @var string
        self.partnerGroup = partnerGroup


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'type': (VidiunEnumsFactory.createInt, "VidiunPermissionType"), 
        'name': getXmlNodeText, 
        'friendlyName': getXmlNodeText, 
        'description': getXmlNodeText, 
        'status': (VidiunEnumsFactory.createInt, "VidiunPermissionStatus"), 
        'partnerId': getXmlNodeInt, 
        'dependsOnPermissionNames': getXmlNodeText, 
        'tags': getXmlNodeText, 
        'permissionItemsIds': getXmlNodeText, 
        'createdAt': getXmlNodeInt, 
        'updatedAt': getXmlNodeInt, 
        'partnerGroup': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunPermission.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunPermission")
        vparams.addStringIfDefined("name", self.name)
        vparams.addStringIfDefined("friendlyName", self.friendlyName)
        vparams.addStringIfDefined("description", self.description)
        vparams.addIntEnumIfDefined("status", self.status)
        vparams.addStringIfDefined("dependsOnPermissionNames", self.dependsOnPermissionNames)
        vparams.addStringIfDefined("tags", self.tags)
        vparams.addStringIfDefined("permissionItemsIds", self.permissionItemsIds)
        vparams.addStringIfDefined("partnerGroup", self.partnerGroup)
        return vparams

    def getId(self):
        return self.id

    def getType(self):
        return self.type

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName

    def getFriendlyName(self):
        return self.friendlyName

    def setFriendlyName(self, newFriendlyName):
        self.friendlyName = newFriendlyName

    def getDescription(self):
        return self.description

    def setDescription(self, newDescription):
        self.description = newDescription

    def getStatus(self):
        return self.status

    def setStatus(self, newStatus):
        self.status = newStatus

    def getPartnerId(self):
        return self.partnerId

    def getDependsOnPermissionNames(self):
        return self.dependsOnPermissionNames

    def setDependsOnPermissionNames(self, newDependsOnPermissionNames):
        self.dependsOnPermissionNames = newDependsOnPermissionNames

    def getTags(self):
        return self.tags

    def setTags(self, newTags):
        self.tags = newTags

    def getPermissionItemsIds(self):
        return self.permissionItemsIds

    def setPermissionItemsIds(self, newPermissionItemsIds):
        self.permissionItemsIds = newPermissionItemsIds

    def getCreatedAt(self):
        return self.createdAt

    def getUpdatedAt(self):
        return self.updatedAt

    def getPartnerGroup(self):
        return self.partnerGroup

    def setPartnerGroup(self, newPartnerGroup):
        self.partnerGroup = newPartnerGroup


# @package Vidiun
# @subpackage Client
class VidiunPermissionItem(VidiunObjectBase):
    def __init__(self,
            id=NotImplemented,
            type=NotImplemented,
            partnerId=NotImplemented,
            tags=NotImplemented,
            createdAt=NotImplemented,
            updatedAt=NotImplemented):
        VidiunObjectBase.__init__(self)

        # @var int
        # @readonly
        self.id = id

        # @var VidiunPermissionItemType
        # @readonly
        self.type = type

        # @var int
        # @readonly
        self.partnerId = partnerId

        # @var string
        self.tags = tags

        # @var int
        # @readonly
        self.createdAt = createdAt

        # @var int
        # @readonly
        self.updatedAt = updatedAt


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'type': (VidiunEnumsFactory.createString, "VidiunPermissionItemType"), 
        'partnerId': getXmlNodeInt, 
        'tags': getXmlNodeText, 
        'createdAt': getXmlNodeInt, 
        'updatedAt': getXmlNodeInt, 
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunPermissionItem.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunPermissionItem")
        vparams.addStringIfDefined("tags", self.tags)
        return vparams

    def getId(self):
        return self.id

    def getType(self):
        return self.type

    def getPartnerId(self):
        return self.partnerId

    def getTags(self):
        return self.tags

    def setTags(self, newTags):
        self.tags = newTags

    def getCreatedAt(self):
        return self.createdAt

    def getUpdatedAt(self):
        return self.updatedAt


# @package Vidiun
# @subpackage Client
class VidiunPlaylist(VidiunBaseEntry):
    def __init__(self,
            id=NotImplemented,
            name=NotImplemented,
            description=NotImplemented,
            partnerId=NotImplemented,
            userId=NotImplemented,
            creatorId=NotImplemented,
            tags=NotImplemented,
            adminTags=NotImplemented,
            categories=NotImplemented,
            categoriesIds=NotImplemented,
            status=NotImplemented,
            moderationStatus=NotImplemented,
            moderationCount=NotImplemented,
            type=NotImplemented,
            createdAt=NotImplemented,
            updatedAt=NotImplemented,
            rank=NotImplemented,
            totalRank=NotImplemented,
            votes=NotImplemented,
            groupId=NotImplemented,
            partnerData=NotImplemented,
            downloadUrl=NotImplemented,
            searchText=NotImplemented,
            licenseType=NotImplemented,
            version=NotImplemented,
            thumbnailUrl=NotImplemented,
            accessControlId=NotImplemented,
            startDate=NotImplemented,
            endDate=NotImplemented,
            referenceId=NotImplemented,
            replacingEntryId=NotImplemented,
            replacedEntryId=NotImplemented,
            replacementStatus=NotImplemented,
            partnerSortValue=NotImplemented,
            conversionProfileId=NotImplemented,
            redirectEntryId=NotImplemented,
            rootEntryId=NotImplemented,
            parentEntryId=NotImplemented,
            operationAttributes=NotImplemented,
            entitledUsersEdit=NotImplemented,
            entitledUsersPublish=NotImplemented,
            capabilities=NotImplemented,
            templateEntryId=NotImplemented,
            playlistContent=NotImplemented,
            filters=NotImplemented,
            totalResults=NotImplemented,
            playlistType=NotImplemented,
            plays=NotImplemented,
            views=NotImplemented,
            duration=NotImplemented,
            executeUrl=NotImplemented):
        VidiunBaseEntry.__init__(self,
            id,
            name,
            description,
            partnerId,
            userId,
            creatorId,
            tags,
            adminTags,
            categories,
            categoriesIds,
            status,
            moderationStatus,
            moderationCount,
            type,
            createdAt,
            updatedAt,
            rank,
            totalRank,
            votes,
            groupId,
            partnerData,
            downloadUrl,
            searchText,
            licenseType,
            version,
            thumbnailUrl,
            accessControlId,
            startDate,
            endDate,
            referenceId,
            replacingEntryId,
            replacedEntryId,
            replacementStatus,
            partnerSortValue,
            conversionProfileId,
            redirectEntryId,
            rootEntryId,
            parentEntryId,
            operationAttributes,
            entitledUsersEdit,
            entitledUsersPublish,
            capabilities,
            templateEntryId)

        # Content of the playlist - 
        # 	 XML if the playlistType is dynamic 
        # 	 text if the playlistType is static 
        # 	 url if the playlistType is mRss
        # @var string
        self.playlistContent = playlistContent

        # @var array of VidiunMediaEntryFilterForPlaylist
        self.filters = filters

        # Maximum count of results to be returned in playlist execution
        # @var int
        self.totalResults = totalResults

        # Type of playlist
        # @var VidiunPlaylistType
        self.playlistType = playlistType

        # Number of plays
        # @var int
        # @readonly
        self.plays = plays

        # Number of views
        # @var int
        # @readonly
        self.views = views

        # The duration in seconds
        # @var int
        # @readonly
        self.duration = duration

        # The url for this playlist
        # @var string
        # @readonly
        self.executeUrl = executeUrl


    PROPERTY_LOADERS = {
        'playlistContent': getXmlNodeText, 
        'filters': (VidiunObjectFactory.createArray, VidiunMediaEntryFilterForPlaylist), 
        'totalResults': getXmlNodeInt, 
        'playlistType': (VidiunEnumsFactory.createInt, "VidiunPlaylistType"), 
        'plays': getXmlNodeInt, 
        'views': getXmlNodeInt, 
        'duration': getXmlNodeInt, 
        'executeUrl': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunBaseEntry.fromXml(self, node)
        self.fromXmlImpl(node, VidiunPlaylist.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunBaseEntry.toParams(self)
        vparams.put("objectType", "VidiunPlaylist")
        vparams.addStringIfDefined("playlistContent", self.playlistContent)
        vparams.addArrayIfDefined("filters", self.filters)
        vparams.addIntIfDefined("totalResults", self.totalResults)
        vparams.addIntEnumIfDefined("playlistType", self.playlistType)
        return vparams

    def getPlaylistContent(self):
        return self.playlistContent

    def setPlaylistContent(self, newPlaylistContent):
        self.playlistContent = newPlaylistContent

    def getFilters(self):
        return self.filters

    def setFilters(self, newFilters):
        self.filters = newFilters

    def getTotalResults(self):
        return self.totalResults

    def setTotalResults(self, newTotalResults):
        self.totalResults = newTotalResults

    def getPlaylistType(self):
        return self.playlistType

    def setPlaylistType(self, newPlaylistType):
        self.playlistType = newPlaylistType

    def getPlays(self):
        return self.plays

    def getViews(self):
        return self.views

    def getDuration(self):
        return self.duration

    def getExecuteUrl(self):
        return self.executeUrl


# @package Vidiun
# @subpackage Client
class VidiunPluginData(VidiunObjectBase):
    def __init__(self):
        VidiunObjectBase.__init__(self)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunPluginData.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunPluginData")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunRemotePath(VidiunObjectBase):
    def __init__(self,
            storageProfileId=NotImplemented,
            uri=NotImplemented):
        VidiunObjectBase.__init__(self)

        # @var int
        # @readonly
        self.storageProfileId = storageProfileId

        # @var string
        # @readonly
        self.uri = uri


    PROPERTY_LOADERS = {
        'storageProfileId': getXmlNodeInt, 
        'uri': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunRemotePath.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunRemotePath")
        return vparams

    def getStorageProfileId(self):
        return self.storageProfileId

    def getUri(self):
        return self.uri


# @package Vidiun
# @subpackage Client
class VidiunUrlResource(VidiunContentResource):
    """Used to ingest media that is available on remote server and accessible using the supplied URL, media file will be downloaded using import job in order to make the asset ready."""

    def __init__(self,
            url=NotImplemented,
            forceAsyncDownload=NotImplemented):
        VidiunContentResource.__init__(self)

        # Remote URL, FTP, HTTP or HTTPS
        # @var string
        self.url = url

        # Force Import Job
        # @var bool
        self.forceAsyncDownload = forceAsyncDownload


    PROPERTY_LOADERS = {
        'url': getXmlNodeText, 
        'forceAsyncDownload': getXmlNodeBool, 
    }

    def fromXml(self, node):
        VidiunContentResource.fromXml(self, node)
        self.fromXmlImpl(node, VidiunUrlResource.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunContentResource.toParams(self)
        vparams.put("objectType", "VidiunUrlResource")
        vparams.addStringIfDefined("url", self.url)
        vparams.addBoolIfDefined("forceAsyncDownload", self.forceAsyncDownload)
        return vparams

    def getUrl(self):
        return self.url

    def setUrl(self, newUrl):
        self.url = newUrl

    def getForceAsyncDownload(self):
        return self.forceAsyncDownload

    def setForceAsyncDownload(self, newForceAsyncDownload):
        self.forceAsyncDownload = newForceAsyncDownload


# @package Vidiun
# @subpackage Client
class VidiunRemoteStorageResource(VidiunUrlResource):
    """Used to ingest media that is available on remote server and accessible using the supplied URL, the media file won't be downloaded but a file sync object of URL type will point to the media URL."""

    def __init__(self,
            url=NotImplemented,
            forceAsyncDownload=NotImplemented,
            storageProfileId=NotImplemented):
        VidiunUrlResource.__init__(self,
            url,
            forceAsyncDownload)

        # ID of storage profile to be associated with the created file sync, used for file serving URL composing.
        # @var int
        self.storageProfileId = storageProfileId


    PROPERTY_LOADERS = {
        'storageProfileId': getXmlNodeInt, 
    }

    def fromXml(self, node):
        VidiunUrlResource.fromXml(self, node)
        self.fromXmlImpl(node, VidiunRemoteStorageResource.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunUrlResource.toParams(self)
        vparams.put("objectType", "VidiunRemoteStorageResource")
        vparams.addIntIfDefined("storageProfileId", self.storageProfileId)
        return vparams

    def getStorageProfileId(self):
        return self.storageProfileId

    def setStorageProfileId(self, newStorageProfileId):
        self.storageProfileId = newStorageProfileId


# @package Vidiun
# @subpackage Client
class VidiunReport(VidiunObjectBase):
    def __init__(self,
            id=NotImplemented,
            partnerId=NotImplemented,
            name=NotImplemented,
            systemName=NotImplemented,
            description=NotImplemented,
            query=NotImplemented,
            createdAt=NotImplemented,
            updatedAt=NotImplemented):
        VidiunObjectBase.__init__(self)

        # Report id
        # @var int
        # @readonly
        self.id = id

        # Partner id associated with the report
        # @var int
        self.partnerId = partnerId

        # Report name
        # @var string
        self.name = name

        # Used to identify system reports in a friendly way
        # @var string
        self.systemName = systemName

        # Report description
        # @var string
        self.description = description

        # Report query
        # @var string
        self.query = query

        # Creation date as Unix timestamp (In seconds)
        # @var int
        # @readonly
        self.createdAt = createdAt

        # Last update date as Unix timestamp (In seconds)
        # @var int
        # @readonly
        self.updatedAt = updatedAt


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'partnerId': getXmlNodeInt, 
        'name': getXmlNodeText, 
        'systemName': getXmlNodeText, 
        'description': getXmlNodeText, 
        'query': getXmlNodeText, 
        'createdAt': getXmlNodeInt, 
        'updatedAt': getXmlNodeInt, 
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunReport.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunReport")
        vparams.addIntIfDefined("partnerId", self.partnerId)
        vparams.addStringIfDefined("name", self.name)
        vparams.addStringIfDefined("systemName", self.systemName)
        vparams.addStringIfDefined("description", self.description)
        vparams.addStringIfDefined("query", self.query)
        return vparams

    def getId(self):
        return self.id

    def getPartnerId(self):
        return self.partnerId

    def setPartnerId(self, newPartnerId):
        self.partnerId = newPartnerId

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName

    def getSystemName(self):
        return self.systemName

    def setSystemName(self, newSystemName):
        self.systemName = newSystemName

    def getDescription(self):
        return self.description

    def setDescription(self, newDescription):
        self.description = newDescription

    def getQuery(self):
        return self.query

    def setQuery(self, newQuery):
        self.query = newQuery

    def getCreatedAt(self):
        return self.createdAt

    def getUpdatedAt(self):
        return self.updatedAt


# @package Vidiun
# @subpackage Client
class VidiunReportBaseTotal(VidiunObjectBase):
    def __init__(self,
            id=NotImplemented,
            data=NotImplemented):
        VidiunObjectBase.__init__(self)

        # @var string
        self.id = id

        # @var string
        self.data = data


    PROPERTY_LOADERS = {
        'id': getXmlNodeText, 
        'data': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunReportBaseTotal.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunReportBaseTotal")
        vparams.addStringIfDefined("id", self.id)
        vparams.addStringIfDefined("data", self.data)
        return vparams

    def getId(self):
        return self.id

    def setId(self, newId):
        self.id = newId

    def getData(self):
        return self.data

    def setData(self, newData):
        self.data = newData


# @package Vidiun
# @subpackage Client
class VidiunReportGraph(VidiunObjectBase):
    def __init__(self,
            id=NotImplemented,
            data=NotImplemented):
        VidiunObjectBase.__init__(self)

        # @var string
        self.id = id

        # @var string
        self.data = data


    PROPERTY_LOADERS = {
        'id': getXmlNodeText, 
        'data': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunReportGraph.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunReportGraph")
        vparams.addStringIfDefined("id", self.id)
        vparams.addStringIfDefined("data", self.data)
        return vparams

    def getId(self):
        return self.id

    def setId(self, newId):
        self.id = newId

    def getData(self):
        return self.data

    def setData(self, newData):
        self.data = newData


# @package Vidiun
# @subpackage Client
class VidiunReportInputBaseFilter(VidiunObjectBase):
    def __init__(self,
            fromDate=NotImplemented,
            toDate=NotImplemented,
            fromDay=NotImplemented,
            toDay=NotImplemented):
        VidiunObjectBase.__init__(self)

        # Start date as Unix timestamp (In seconds)
        # @var int
        self.fromDate = fromDate

        # End date as Unix timestamp (In seconds)
        # @var int
        self.toDate = toDate

        # Start day as string (YYYYMMDD)
        # @var string
        self.fromDay = fromDay

        # End date as string (YYYYMMDD)
        # @var string
        self.toDay = toDay


    PROPERTY_LOADERS = {
        'fromDate': getXmlNodeInt, 
        'toDate': getXmlNodeInt, 
        'fromDay': getXmlNodeText, 
        'toDay': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunReportInputBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunReportInputBaseFilter")
        vparams.addIntIfDefined("fromDate", self.fromDate)
        vparams.addIntIfDefined("toDate", self.toDate)
        vparams.addStringIfDefined("fromDay", self.fromDay)
        vparams.addStringIfDefined("toDay", self.toDay)
        return vparams

    def getFromDate(self):
        return self.fromDate

    def setFromDate(self, newFromDate):
        self.fromDate = newFromDate

    def getToDate(self):
        return self.toDate

    def setToDate(self, newToDate):
        self.toDate = newToDate

    def getFromDay(self):
        return self.fromDay

    def setFromDay(self, newFromDay):
        self.fromDay = newFromDay

    def getToDay(self):
        return self.toDay

    def setToDay(self, newToDay):
        self.toDay = newToDay


# @package Vidiun
# @subpackage Client
class VidiunReportResponse(VidiunObjectBase):
    def __init__(self,
            columns=NotImplemented,
            results=NotImplemented):
        VidiunObjectBase.__init__(self)

        # @var string
        self.columns = columns

        # @var array of VidiunString
        self.results = results


    PROPERTY_LOADERS = {
        'columns': getXmlNodeText, 
        'results': (VidiunObjectFactory.createArray, VidiunString), 
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunReportResponse.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunReportResponse")
        vparams.addStringIfDefined("columns", self.columns)
        vparams.addArrayIfDefined("results", self.results)
        return vparams

    def getColumns(self):
        return self.columns

    def setColumns(self, newColumns):
        self.columns = newColumns

    def getResults(self):
        return self.results

    def setResults(self, newResults):
        self.results = newResults


# @package Vidiun
# @subpackage Client
class VidiunReportTable(VidiunObjectBase):
    def __init__(self,
            header=NotImplemented,
            data=NotImplemented,
            totalCount=NotImplemented):
        VidiunObjectBase.__init__(self)

        # @var string
        # @readonly
        self.header = header

        # @var string
        # @readonly
        self.data = data

        # @var int
        # @readonly
        self.totalCount = totalCount


    PROPERTY_LOADERS = {
        'header': getXmlNodeText, 
        'data': getXmlNodeText, 
        'totalCount': getXmlNodeInt, 
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunReportTable.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunReportTable")
        return vparams

    def getHeader(self):
        return self.header

    def getData(self):
        return self.data

    def getTotalCount(self):
        return self.totalCount


# @package Vidiun
# @subpackage Client
class VidiunReportTotal(VidiunObjectBase):
    def __init__(self,
            header=NotImplemented,
            data=NotImplemented):
        VidiunObjectBase.__init__(self)

        # @var string
        self.header = header

        # @var string
        self.data = data


    PROPERTY_LOADERS = {
        'header': getXmlNodeText, 
        'data': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunReportTotal.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunReportTotal")
        vparams.addStringIfDefined("header", self.header)
        vparams.addStringIfDefined("data", self.data)
        return vparams

    def getHeader(self):
        return self.header

    def setHeader(self, newHeader):
        self.header = newHeader

    def getData(self):
        return self.data

    def setData(self, newData):
        self.data = newData


# @package Vidiun
# @subpackage Client
class VidiunRequestConfiguration(VidiunObjectBase):
    """Define client request optional configurations
     /"""

    def __init__(self,
            partnerId=NotImplemented,
            ks=NotImplemented,
            responseProfile=NotImplemented):
        VidiunObjectBase.__init__(self)

        # Impersonated partner id
        # @var int
        self.partnerId = partnerId

        # Vidiun API session
        # @var string
        self.ks = ks

        # Response profile - this attribute will be automatically unset after every API call.
        # @var VidiunBaseResponseProfile
        self.responseProfile = responseProfile


    PROPERTY_LOADERS = {
        'partnerId': getXmlNodeInt, 
        'ks': getXmlNodeText, 
        'responseProfile': (VidiunObjectFactory.create, VidiunBaseResponseProfile), 
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunRequestConfiguration.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunRequestConfiguration")
        vparams.addIntIfDefined("partnerId", self.partnerId)
        vparams.addStringIfDefined("ks", self.ks)
        vparams.addObjectIfDefined("responseProfile", self.responseProfile)
        return vparams

    def getPartnerId(self):
        return self.partnerId

    def setPartnerId(self, newPartnerId):
        self.partnerId = newPartnerId

    def getVs(self):
        return self.ks

    def setVs(self, newVs):
        self.ks = newVs

    def getResponseProfile(self):
        return self.responseProfile

    def setResponseProfile(self, newResponseProfile):
        self.responseProfile = newResponseProfile


# @package Vidiun
# @subpackage Client
class VidiunResponseProfile(VidiunDetachedResponseProfile):
    def __init__(self,
            name=NotImplemented,
            type=NotImplemented,
            fields=NotImplemented,
            filter=NotImplemented,
            pager=NotImplemented,
            relatedProfiles=NotImplemented,
            mappings=NotImplemented,
            id=NotImplemented,
            systemName=NotImplemented,
            partnerId=NotImplemented,
            createdAt=NotImplemented,
            updatedAt=NotImplemented,
            status=NotImplemented,
            version=NotImplemented):
        VidiunDetachedResponseProfile.__init__(self,
            name,
            type,
            fields,
            filter,
            pager,
            relatedProfiles,
            mappings)

        # Auto generated numeric identifier
        # @var int
        # @readonly
        self.id = id

        # Unique system name
        # @var string
        self.systemName = systemName

        # @var int
        # @readonly
        self.partnerId = partnerId

        # Creation time as Unix timestamp (In seconds)
        # @var int
        # @readonly
        self.createdAt = createdAt

        # Update time as Unix timestamp (In seconds)
        # @var int
        # @readonly
        self.updatedAt = updatedAt

        # @var VidiunResponseProfileStatus
        # @readonly
        self.status = status

        # @var int
        # @readonly
        self.version = version


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'systemName': getXmlNodeText, 
        'partnerId': getXmlNodeInt, 
        'createdAt': getXmlNodeInt, 
        'updatedAt': getXmlNodeInt, 
        'status': (VidiunEnumsFactory.createInt, "VidiunResponseProfileStatus"), 
        'version': getXmlNodeInt, 
    }

    def fromXml(self, node):
        VidiunDetachedResponseProfile.fromXml(self, node)
        self.fromXmlImpl(node, VidiunResponseProfile.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunDetachedResponseProfile.toParams(self)
        vparams.put("objectType", "VidiunResponseProfile")
        vparams.addStringIfDefined("systemName", self.systemName)
        return vparams

    def getId(self):
        return self.id

    def getSystemName(self):
        return self.systemName

    def setSystemName(self, newSystemName):
        self.systemName = newSystemName

    def getPartnerId(self):
        return self.partnerId

    def getCreatedAt(self):
        return self.createdAt

    def getUpdatedAt(self):
        return self.updatedAt

    def getStatus(self):
        return self.status

    def getVersion(self):
        return self.version


# @package Vidiun
# @subpackage Client
class VidiunResponseProfileCacheRecalculateOptions(VidiunObjectBase):
    def __init__(self,
            limit=NotImplemented,
            cachedObjectType=NotImplemented,
            objectId=NotImplemented,
            startObjectKey=NotImplemented,
            endObjectKey=NotImplemented,
            jobCreatedAt=NotImplemented,
            isFirstLoop=NotImplemented):
        VidiunObjectBase.__init__(self)

        # Maximum number of keys to recalculate
        # @var int
        self.limit = limit

        # Class name
        # @var string
        self.cachedObjectType = cachedObjectType

        # @var string
        self.objectId = objectId

        # @var string
        self.startObjectKey = startObjectKey

        # @var string
        self.endObjectKey = endObjectKey

        # @var int
        self.jobCreatedAt = jobCreatedAt

        # @var bool
        self.isFirstLoop = isFirstLoop


    PROPERTY_LOADERS = {
        'limit': getXmlNodeInt, 
        'cachedObjectType': getXmlNodeText, 
        'objectId': getXmlNodeText, 
        'startObjectKey': getXmlNodeText, 
        'endObjectKey': getXmlNodeText, 
        'jobCreatedAt': getXmlNodeInt, 
        'isFirstLoop': getXmlNodeBool, 
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunResponseProfileCacheRecalculateOptions.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunResponseProfileCacheRecalculateOptions")
        vparams.addIntIfDefined("limit", self.limit)
        vparams.addStringIfDefined("cachedObjectType", self.cachedObjectType)
        vparams.addStringIfDefined("objectId", self.objectId)
        vparams.addStringIfDefined("startObjectKey", self.startObjectKey)
        vparams.addStringIfDefined("endObjectKey", self.endObjectKey)
        vparams.addIntIfDefined("jobCreatedAt", self.jobCreatedAt)
        vparams.addBoolIfDefined("isFirstLoop", self.isFirstLoop)
        return vparams

    def getLimit(self):
        return self.limit

    def setLimit(self, newLimit):
        self.limit = newLimit

    def getCachedObjectType(self):
        return self.cachedObjectType

    def setCachedObjectType(self, newCachedObjectType):
        self.cachedObjectType = newCachedObjectType

    def getObjectId(self):
        return self.objectId

    def setObjectId(self, newObjectId):
        self.objectId = newObjectId

    def getStartObjectKey(self):
        return self.startObjectKey

    def setStartObjectKey(self, newStartObjectKey):
        self.startObjectKey = newStartObjectKey

    def getEndObjectKey(self):
        return self.endObjectKey

    def setEndObjectKey(self, newEndObjectKey):
        self.endObjectKey = newEndObjectKey

    def getJobCreatedAt(self):
        return self.jobCreatedAt

    def setJobCreatedAt(self, newJobCreatedAt):
        self.jobCreatedAt = newJobCreatedAt

    def getIsFirstLoop(self):
        return self.isFirstLoop

    def setIsFirstLoop(self, newIsFirstLoop):
        self.isFirstLoop = newIsFirstLoop


# @package Vidiun
# @subpackage Client
class VidiunResponseProfileCacheRecalculateResults(VidiunObjectBase):
    def __init__(self,
            lastObjectKey=NotImplemented,
            recalculated=NotImplemented):
        VidiunObjectBase.__init__(self)

        # Last recalculated id
        # @var string
        self.lastObjectKey = lastObjectKey

        # Number of recalculated keys
        # @var int
        self.recalculated = recalculated


    PROPERTY_LOADERS = {
        'lastObjectKey': getXmlNodeText, 
        'recalculated': getXmlNodeInt, 
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunResponseProfileCacheRecalculateResults.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunResponseProfileCacheRecalculateResults")
        vparams.addStringIfDefined("lastObjectKey", self.lastObjectKey)
        vparams.addIntIfDefined("recalculated", self.recalculated)
        return vparams

    def getLastObjectKey(self):
        return self.lastObjectKey

    def setLastObjectKey(self, newLastObjectKey):
        self.lastObjectKey = newLastObjectKey

    def getRecalculated(self):
        return self.recalculated

    def setRecalculated(self, newRecalculated):
        self.recalculated = newRecalculated


# @package Vidiun
# @subpackage Client
class VidiunScope(VidiunObjectBase):
    def __init__(self):
        VidiunObjectBase.__init__(self)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunScope.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunScope")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunSearch(VidiunObjectBase):
    def __init__(self,
            keyWords=NotImplemented,
            searchSource=NotImplemented,
            mediaType=NotImplemented,
            extraData=NotImplemented,
            authData=NotImplemented):
        VidiunObjectBase.__init__(self)

        # @var string
        self.keyWords = keyWords

        # @var VidiunSearchProviderType
        self.searchSource = searchSource

        # @var VidiunMediaType
        self.mediaType = mediaType

        # Use this field to pass dynamic data for searching
        # 	 For example - if you set this field to "mymovies_$partner_id"
        # 	 The $partner_id will be automatically replcaed with your real partner Id
        # @var string
        self.extraData = extraData

        # @var string
        self.authData = authData


    PROPERTY_LOADERS = {
        'keyWords': getXmlNodeText, 
        'searchSource': (VidiunEnumsFactory.createInt, "VidiunSearchProviderType"), 
        'mediaType': (VidiunEnumsFactory.createInt, "VidiunMediaType"), 
        'extraData': getXmlNodeText, 
        'authData': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunSearch.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunSearch")
        vparams.addStringIfDefined("keyWords", self.keyWords)
        vparams.addIntEnumIfDefined("searchSource", self.searchSource)
        vparams.addIntEnumIfDefined("mediaType", self.mediaType)
        vparams.addStringIfDefined("extraData", self.extraData)
        vparams.addStringIfDefined("authData", self.authData)
        return vparams

    def getKeyWords(self):
        return self.keyWords

    def setKeyWords(self, newKeyWords):
        self.keyWords = newKeyWords

    def getSearchSource(self):
        return self.searchSource

    def setSearchSource(self, newSearchSource):
        self.searchSource = newSearchSource

    def getMediaType(self):
        return self.mediaType

    def setMediaType(self, newMediaType):
        self.mediaType = newMediaType

    def getExtraData(self):
        return self.extraData

    def setExtraData(self, newExtraData):
        self.extraData = newExtraData

    def getAuthData(self):
        return self.authData

    def setAuthData(self, newAuthData):
        self.authData = newAuthData


# @package Vidiun
# @subpackage Client
class VidiunSearchAuthData(VidiunObjectBase):
    def __init__(self,
            authData=NotImplemented,
            loginUrl=NotImplemented,
            message=NotImplemented):
        VidiunObjectBase.__init__(self)

        # The authentication data that further should be used for search
        # @var string
        self.authData = authData

        # Login URL when user need to sign-in and authorize the search
        # @var string
        self.loginUrl = loginUrl

        # Information when there was an error
        # @var string
        self.message = message


    PROPERTY_LOADERS = {
        'authData': getXmlNodeText, 
        'loginUrl': getXmlNodeText, 
        'message': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunSearchAuthData.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunSearchAuthData")
        vparams.addStringIfDefined("authData", self.authData)
        vparams.addStringIfDefined("loginUrl", self.loginUrl)
        vparams.addStringIfDefined("message", self.message)
        return vparams

    def getAuthData(self):
        return self.authData

    def setAuthData(self, newAuthData):
        self.authData = newAuthData

    def getLoginUrl(self):
        return self.loginUrl

    def setLoginUrl(self, newLoginUrl):
        self.loginUrl = newLoginUrl

    def getMessage(self):
        return self.message

    def setMessage(self, newMessage):
        self.message = newMessage


# @package Vidiun
# @subpackage Client
class VidiunSearchResult(VidiunSearch):
    def __init__(self,
            keyWords=NotImplemented,
            searchSource=NotImplemented,
            mediaType=NotImplemented,
            extraData=NotImplemented,
            authData=NotImplemented,
            id=NotImplemented,
            title=NotImplemented,
            thumbUrl=NotImplemented,
            description=NotImplemented,
            tags=NotImplemented,
            url=NotImplemented,
            sourceLink=NotImplemented,
            credit=NotImplemented,
            licenseType=NotImplemented,
            flashPlaybackType=NotImplemented,
            fileExt=NotImplemented):
        VidiunSearch.__init__(self,
            keyWords,
            searchSource,
            mediaType,
            extraData,
            authData)

        # @var string
        self.id = id

        # @var string
        self.title = title

        # @var string
        self.thumbUrl = thumbUrl

        # @var string
        self.description = description

        # @var string
        self.tags = tags

        # @var string
        self.url = url

        # @var string
        self.sourceLink = sourceLink

        # @var string
        self.credit = credit

        # @var VidiunLicenseType
        self.licenseType = licenseType

        # @var string
        self.flashPlaybackType = flashPlaybackType

        # @var string
        self.fileExt = fileExt


    PROPERTY_LOADERS = {
        'id': getXmlNodeText, 
        'title': getXmlNodeText, 
        'thumbUrl': getXmlNodeText, 
        'description': getXmlNodeText, 
        'tags': getXmlNodeText, 
        'url': getXmlNodeText, 
        'sourceLink': getXmlNodeText, 
        'credit': getXmlNodeText, 
        'licenseType': (VidiunEnumsFactory.createInt, "VidiunLicenseType"), 
        'flashPlaybackType': getXmlNodeText, 
        'fileExt': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunSearch.fromXml(self, node)
        self.fromXmlImpl(node, VidiunSearchResult.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunSearch.toParams(self)
        vparams.put("objectType", "VidiunSearchResult")
        vparams.addStringIfDefined("id", self.id)
        vparams.addStringIfDefined("title", self.title)
        vparams.addStringIfDefined("thumbUrl", self.thumbUrl)
        vparams.addStringIfDefined("description", self.description)
        vparams.addStringIfDefined("tags", self.tags)
        vparams.addStringIfDefined("url", self.url)
        vparams.addStringIfDefined("sourceLink", self.sourceLink)
        vparams.addStringIfDefined("credit", self.credit)
        vparams.addIntEnumIfDefined("licenseType", self.licenseType)
        vparams.addStringIfDefined("flashPlaybackType", self.flashPlaybackType)
        vparams.addStringIfDefined("fileExt", self.fileExt)
        return vparams

    def getId(self):
        return self.id

    def setId(self, newId):
        self.id = newId

    def getTitle(self):
        return self.title

    def setTitle(self, newTitle):
        self.title = newTitle

    def getThumbUrl(self):
        return self.thumbUrl

    def setThumbUrl(self, newThumbUrl):
        self.thumbUrl = newThumbUrl

    def getDescription(self):
        return self.description

    def setDescription(self, newDescription):
        self.description = newDescription

    def getTags(self):
        return self.tags

    def setTags(self, newTags):
        self.tags = newTags

    def getUrl(self):
        return self.url

    def setUrl(self, newUrl):
        self.url = newUrl

    def getSourceLink(self):
        return self.sourceLink

    def setSourceLink(self, newSourceLink):
        self.sourceLink = newSourceLink

    def getCredit(self):
        return self.credit

    def setCredit(self, newCredit):
        self.credit = newCredit

    def getLicenseType(self):
        return self.licenseType

    def setLicenseType(self, newLicenseType):
        self.licenseType = newLicenseType

    def getFlashPlaybackType(self):
        return self.flashPlaybackType

    def setFlashPlaybackType(self, newFlashPlaybackType):
        self.flashPlaybackType = newFlashPlaybackType

    def getFileExt(self):
        return self.fileExt

    def setFileExt(self, newFileExt):
        self.fileExt = newFileExt


# @package Vidiun
# @subpackage Client
class VidiunSearchResultResponse(VidiunObjectBase):
    def __init__(self,
            objects=NotImplemented,
            needMediaInfo=NotImplemented):
        VidiunObjectBase.__init__(self)

        # @var array of VidiunSearchResult
        # @readonly
        self.objects = objects

        # @var bool
        # @readonly
        self.needMediaInfo = needMediaInfo


    PROPERTY_LOADERS = {
        'objects': (VidiunObjectFactory.createArray, VidiunSearchResult), 
        'needMediaInfo': getXmlNodeBool, 
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunSearchResultResponse.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunSearchResultResponse")
        return vparams

    def getObjects(self):
        return self.objects

    def getNeedMediaInfo(self):
        return self.needMediaInfo


# @package Vidiun
# @subpackage Client
class VidiunServerNode(VidiunObjectBase):
    def __init__(self,
            id=NotImplemented,
            partnerId=NotImplemented,
            createdAt=NotImplemented,
            updatedAt=NotImplemented,
            heartbeatTime=NotImplemented,
            name=NotImplemented,
            systemName=NotImplemented,
            description=NotImplemented,
            hostName=NotImplemented,
            status=NotImplemented,
            type=NotImplemented,
            tags=NotImplemented,
            dc=NotImplemented,
            parentId=NotImplemented):
        VidiunObjectBase.__init__(self)

        # @var int
        # @readonly
        self.id = id

        # @var int
        # @readonly
        self.partnerId = partnerId

        # @var int
        # @readonly
        self.createdAt = createdAt

        # @var int
        # @readonly
        self.updatedAt = updatedAt

        # @var int
        # @readonly
        self.heartbeatTime = heartbeatTime

        # serverNode name
        # @var string
        self.name = name

        # serverNode uniqe system name
        # @var string
        self.systemName = systemName

        # @var string
        self.description = description

        # serverNode hostName
        # @var string
        self.hostName = hostName

        # @var VidiunServerNodeStatus
        # @readonly
        self.status = status

        # @var VidiunServerNodeType
        # @readonly
        self.type = type

        # serverNode tags
        # @var string
        self.tags = tags

        # DC where the serverNode is located
        # @var int
        # @readonly
        self.dc = dc

        # Id of the parent serverNode
        # @var int
        self.parentId = parentId


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'partnerId': getXmlNodeInt, 
        'createdAt': getXmlNodeInt, 
        'updatedAt': getXmlNodeInt, 
        'heartbeatTime': getXmlNodeInt, 
        'name': getXmlNodeText, 
        'systemName': getXmlNodeText, 
        'description': getXmlNodeText, 
        'hostName': getXmlNodeText, 
        'status': (VidiunEnumsFactory.createInt, "VidiunServerNodeStatus"), 
        'type': (VidiunEnumsFactory.createString, "VidiunServerNodeType"), 
        'tags': getXmlNodeText, 
        'dc': getXmlNodeInt, 
        'parentId': getXmlNodeInt, 
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunServerNode.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunServerNode")
        vparams.addStringIfDefined("name", self.name)
        vparams.addStringIfDefined("systemName", self.systemName)
        vparams.addStringIfDefined("description", self.description)
        vparams.addStringIfDefined("hostName", self.hostName)
        vparams.addStringIfDefined("tags", self.tags)
        vparams.addIntIfDefined("parentId", self.parentId)
        return vparams

    def getId(self):
        return self.id

    def getPartnerId(self):
        return self.partnerId

    def getCreatedAt(self):
        return self.createdAt

    def getUpdatedAt(self):
        return self.updatedAt

    def getHeartbeatTime(self):
        return self.heartbeatTime

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName

    def getSystemName(self):
        return self.systemName

    def setSystemName(self, newSystemName):
        self.systemName = newSystemName

    def getDescription(self):
        return self.description

    def setDescription(self, newDescription):
        self.description = newDescription

    def getHostName(self):
        return self.hostName

    def setHostName(self, newHostName):
        self.hostName = newHostName

    def getStatus(self):
        return self.status

    def getType(self):
        return self.type

    def getTags(self):
        return self.tags

    def setTags(self, newTags):
        self.tags = newTags

    def getDc(self):
        return self.dc

    def getParentId(self):
        return self.parentId

    def setParentId(self, newParentId):
        self.parentId = newParentId


# @package Vidiun
# @subpackage Client
class VidiunSessionInfo(VidiunObjectBase):
    def __init__(self,
            ks=NotImplemented,
            sessionType=NotImplemented,
            partnerId=NotImplemented,
            userId=NotImplemented,
            expiry=NotImplemented,
            privileges=NotImplemented):
        VidiunObjectBase.__init__(self)

        # @var string
        # @readonly
        self.ks = ks

        # @var VidiunSessionType
        # @readonly
        self.sessionType = sessionType

        # @var int
        # @readonly
        self.partnerId = partnerId

        # @var string
        # @readonly
        self.userId = userId

        # @var int
        # @readonly
        self.expiry = expiry

        # @var string
        # @readonly
        self.privileges = privileges


    PROPERTY_LOADERS = {
        'ks': getXmlNodeText, 
        'sessionType': (VidiunEnumsFactory.createInt, "VidiunSessionType"), 
        'partnerId': getXmlNodeInt, 
        'userId': getXmlNodeText, 
        'expiry': getXmlNodeInt, 
        'privileges': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunSessionInfo.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunSessionInfo")
        return vparams

    def getVs(self):
        return self.ks

    def getSessionType(self):
        return self.sessionType

    def getPartnerId(self):
        return self.partnerId

    def getUserId(self):
        return self.userId

    def getExpiry(self):
        return self.expiry

    def getPrivileges(self):
        return self.privileges


# @package Vidiun
# @subpackage Client
class VidiunSourceFileSyncDescriptor(VidiunFileSyncDescriptor):
    def __init__(self,
            fileSyncLocalPath=NotImplemented,
            fileSyncRemoteUrl=NotImplemented,
            fileSyncObjectSubType=NotImplemented,
            actualFileSyncLocalPath=NotImplemented,
            assetId=NotImplemented,
            assetParamsId=NotImplemented):
        VidiunFileSyncDescriptor.__init__(self,
            fileSyncLocalPath,
            fileSyncRemoteUrl,
            fileSyncObjectSubType)

        # The translated path as used by the scheduler
        # @var string
        self.actualFileSyncLocalPath = actualFileSyncLocalPath

        # @var string
        self.assetId = assetId

        # @var int
        self.assetParamsId = assetParamsId


    PROPERTY_LOADERS = {
        'actualFileSyncLocalPath': getXmlNodeText, 
        'assetId': getXmlNodeText, 
        'assetParamsId': getXmlNodeInt, 
    }

    def fromXml(self, node):
        VidiunFileSyncDescriptor.fromXml(self, node)
        self.fromXmlImpl(node, VidiunSourceFileSyncDescriptor.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunFileSyncDescriptor.toParams(self)
        vparams.put("objectType", "VidiunSourceFileSyncDescriptor")
        vparams.addStringIfDefined("actualFileSyncLocalPath", self.actualFileSyncLocalPath)
        vparams.addStringIfDefined("assetId", self.assetId)
        vparams.addIntIfDefined("assetParamsId", self.assetParamsId)
        return vparams

    def getActualFileSyncLocalPath(self):
        return self.actualFileSyncLocalPath

    def setActualFileSyncLocalPath(self, newActualFileSyncLocalPath):
        self.actualFileSyncLocalPath = newActualFileSyncLocalPath

    def getAssetId(self):
        return self.assetId

    def setAssetId(self, newAssetId):
        self.assetId = newAssetId

    def getAssetParamsId(self):
        return self.assetParamsId

    def setAssetParamsId(self, newAssetParamsId):
        self.assetParamsId = newAssetParamsId


# @package Vidiun
# @subpackage Client
class VidiunStartWidgetSessionResponse(VidiunObjectBase):
    def __init__(self,
            partnerId=NotImplemented,
            ks=NotImplemented,
            userId=NotImplemented):
        VidiunObjectBase.__init__(self)

        # @var int
        # @readonly
        self.partnerId = partnerId

        # @var string
        # @readonly
        self.ks = ks

        # @var string
        # @readonly
        self.userId = userId


    PROPERTY_LOADERS = {
        'partnerId': getXmlNodeInt, 
        'ks': getXmlNodeText, 
        'userId': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunStartWidgetSessionResponse.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunStartWidgetSessionResponse")
        return vparams

    def getPartnerId(self):
        return self.partnerId

    def getVs(self):
        return self.ks

    def getUserId(self):
        return self.userId


# @package Vidiun
# @subpackage Client
class VidiunStatsEvent(VidiunObjectBase):
    """Will hold data from the Vidiun UI components to be passed on to the reports and analytics system"""

    def __init__(self,
            clientVer=NotImplemented,
            eventType=NotImplemented,
            eventTimestamp=NotImplemented,
            sessionId=NotImplemented,
            partnerId=NotImplemented,
            entryId=NotImplemented,
            uniqueViewer=NotImplemented,
            widgetId=NotImplemented,
            uiconfId=NotImplemented,
            userId=NotImplemented,
            currentPoint=NotImplemented,
            duration=NotImplemented,
            userIp=NotImplemented,
            processDuration=NotImplemented,
            controlId=NotImplemented,
            seek=NotImplemented,
            newPoint=NotImplemented,
            referrer=NotImplemented,
            isFirstInSession=NotImplemented,
            applicationId=NotImplemented,
            contextId=NotImplemented,
            featureType=NotImplemented):
        VidiunObjectBase.__init__(self)

        # @var string
        self.clientVer = clientVer

        # @var VidiunStatsEventType
        self.eventType = eventType

        # the client's timestamp of this event
        # @var float
        self.eventTimestamp = eventTimestamp

        # a unique string generated by the client that will represent the client-side session: the primary component will pass it on to other components that sprout from it
        # @var string
        self.sessionId = sessionId

        # @var int
        self.partnerId = partnerId

        # @var string
        self.entryId = entryId

        # the UV cookie - creates in the operational system and should be passed on ofr every event
        # @var string
        self.uniqueViewer = uniqueViewer

        # @var string
        self.widgetId = widgetId

        # @var int
        self.uiconfId = uiconfId

        # the partner's user id
        # @var string
        self.userId = userId

        # the timestamp along the video when the event happend
        # @var int
        self.currentPoint = currentPoint

        # the duration of the video in milliseconds - will make it much faster than quering the db for each entry
        # @var int
        self.duration = duration

        # will be retrieved from the request of the user
        # @var string
        # @readonly
        self.userIp = userIp

        # the time in milliseconds the event took
        # @var int
        self.processDuration = processDuration

        # the id of the GUI control - will be used in the future to better understand what the user clicked
        # @var string
        self.controlId = controlId

        # true if the user ever used seek in this session
        # @var bool
        self.seek = seek

        # timestamp of the new point on the timeline of the video after the user seeks
        # @var int
        self.newPoint = newPoint

        # the referrer of the client
        # @var string
        self.referrer = referrer

        # will indicate if the event is thrown for the first video in the session
        # @var bool
        self.isFirstInSession = isFirstInSession

        # vidiun application name
        # @var string
        self.applicationId = applicationId

        # @var int
        self.contextId = contextId

        # @var VidiunStatsFeatureType
        self.featureType = featureType


    PROPERTY_LOADERS = {
        'clientVer': getXmlNodeText, 
        'eventType': (VidiunEnumsFactory.createInt, "VidiunStatsEventType"), 
        'eventTimestamp': getXmlNodeFloat, 
        'sessionId': getXmlNodeText, 
        'partnerId': getXmlNodeInt, 
        'entryId': getXmlNodeText, 
        'uniqueViewer': getXmlNodeText, 
        'widgetId': getXmlNodeText, 
        'uiconfId': getXmlNodeInt, 
        'userId': getXmlNodeText, 
        'currentPoint': getXmlNodeInt, 
        'duration': getXmlNodeInt, 
        'userIp': getXmlNodeText, 
        'processDuration': getXmlNodeInt, 
        'controlId': getXmlNodeText, 
        'seek': getXmlNodeBool, 
        'newPoint': getXmlNodeInt, 
        'referrer': getXmlNodeText, 
        'isFirstInSession': getXmlNodeBool, 
        'applicationId': getXmlNodeText, 
        'contextId': getXmlNodeInt, 
        'featureType': (VidiunEnumsFactory.createInt, "VidiunStatsFeatureType"), 
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunStatsEvent.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunStatsEvent")
        vparams.addStringIfDefined("clientVer", self.clientVer)
        vparams.addIntEnumIfDefined("eventType", self.eventType)
        vparams.addFloatIfDefined("eventTimestamp", self.eventTimestamp)
        vparams.addStringIfDefined("sessionId", self.sessionId)
        vparams.addIntIfDefined("partnerId", self.partnerId)
        vparams.addStringIfDefined("entryId", self.entryId)
        vparams.addStringIfDefined("uniqueViewer", self.uniqueViewer)
        vparams.addStringIfDefined("widgetId", self.widgetId)
        vparams.addIntIfDefined("uiconfId", self.uiconfId)
        vparams.addStringIfDefined("userId", self.userId)
        vparams.addIntIfDefined("currentPoint", self.currentPoint)
        vparams.addIntIfDefined("duration", self.duration)
        vparams.addIntIfDefined("processDuration", self.processDuration)
        vparams.addStringIfDefined("controlId", self.controlId)
        vparams.addBoolIfDefined("seek", self.seek)
        vparams.addIntIfDefined("newPoint", self.newPoint)
        vparams.addStringIfDefined("referrer", self.referrer)
        vparams.addBoolIfDefined("isFirstInSession", self.isFirstInSession)
        vparams.addStringIfDefined("applicationId", self.applicationId)
        vparams.addIntIfDefined("contextId", self.contextId)
        vparams.addIntEnumIfDefined("featureType", self.featureType)
        return vparams

    def getClientVer(self):
        return self.clientVer

    def setClientVer(self, newClientVer):
        self.clientVer = newClientVer

    def getEventType(self):
        return self.eventType

    def setEventType(self, newEventType):
        self.eventType = newEventType

    def getEventTimestamp(self):
        return self.eventTimestamp

    def setEventTimestamp(self, newEventTimestamp):
        self.eventTimestamp = newEventTimestamp

    def getSessionId(self):
        return self.sessionId

    def setSessionId(self, newSessionId):
        self.sessionId = newSessionId

    def getPartnerId(self):
        return self.partnerId

    def setPartnerId(self, newPartnerId):
        self.partnerId = newPartnerId

    def getEntryId(self):
        return self.entryId

    def setEntryId(self, newEntryId):
        self.entryId = newEntryId

    def getUniqueViewer(self):
        return self.uniqueViewer

    def setUniqueViewer(self, newUniqueViewer):
        self.uniqueViewer = newUniqueViewer

    def getWidgetId(self):
        return self.widgetId

    def setWidgetId(self, newWidgetId):
        self.widgetId = newWidgetId

    def getUiconfId(self):
        return self.uiconfId

    def setUiconfId(self, newUiconfId):
        self.uiconfId = newUiconfId

    def getUserId(self):
        return self.userId

    def setUserId(self, newUserId):
        self.userId = newUserId

    def getCurrentPoint(self):
        return self.currentPoint

    def setCurrentPoint(self, newCurrentPoint):
        self.currentPoint = newCurrentPoint

    def getDuration(self):
        return self.duration

    def setDuration(self, newDuration):
        self.duration = newDuration

    def getUserIp(self):
        return self.userIp

    def getProcessDuration(self):
        return self.processDuration

    def setProcessDuration(self, newProcessDuration):
        self.processDuration = newProcessDuration

    def getControlId(self):
        return self.controlId

    def setControlId(self, newControlId):
        self.controlId = newControlId

    def getSeek(self):
        return self.seek

    def setSeek(self, newSeek):
        self.seek = newSeek

    def getNewPoint(self):
        return self.newPoint

    def setNewPoint(self, newNewPoint):
        self.newPoint = newNewPoint

    def getReferrer(self):
        return self.referrer

    def setReferrer(self, newReferrer):
        self.referrer = newReferrer

    def getIsFirstInSession(self):
        return self.isFirstInSession

    def setIsFirstInSession(self, newIsFirstInSession):
        self.isFirstInSession = newIsFirstInSession

    def getApplicationId(self):
        return self.applicationId

    def setApplicationId(self, newApplicationId):
        self.applicationId = newApplicationId

    def getContextId(self):
        return self.contextId

    def setContextId(self, newContextId):
        self.contextId = newContextId

    def getFeatureType(self):
        return self.featureType

    def setFeatureType(self, newFeatureType):
        self.featureType = newFeatureType


# @package Vidiun
# @subpackage Client
class VidiunStatsVmcEvent(VidiunObjectBase):
    """Will hold data from the Vidiun UI components to be passed on to the reports and analytics system"""

    def __init__(self,
            clientVer=NotImplemented,
            vmcEventActionPath=NotImplemented,
            vmcEventType=NotImplemented,
            eventTimestamp=NotImplemented,
            sessionId=NotImplemented,
            partnerId=NotImplemented,
            entryId=NotImplemented,
            widgetId=NotImplemented,
            uiconfId=NotImplemented,
            userId=NotImplemented,
            userIp=NotImplemented):
        VidiunObjectBase.__init__(self)

        # @var string
        self.clientVer = clientVer

        # @var string
        self.vmcEventActionPath = vmcEventActionPath

        # @var VidiunStatsVmcEventType
        self.vmcEventType = vmcEventType

        # the client's timestamp of this event
        # @var float
        self.eventTimestamp = eventTimestamp

        # a unique string generated by the client that will represent the client-side session: the primary component will pass it on to other components that sprout from it
        # @var string
        self.sessionId = sessionId

        # @var int
        self.partnerId = partnerId

        # @var string
        self.entryId = entryId

        # @var string
        self.widgetId = widgetId

        # @var int
        self.uiconfId = uiconfId

        # the partner's user id
        # @var string
        self.userId = userId

        # will be retrieved from the request of the user
        # @var string
        # @readonly
        self.userIp = userIp


    PROPERTY_LOADERS = {
        'clientVer': getXmlNodeText, 
        'vmcEventActionPath': getXmlNodeText, 
        'vmcEventType': (VidiunEnumsFactory.createInt, "VidiunStatsVmcEventType"), 
        'eventTimestamp': getXmlNodeFloat, 
        'sessionId': getXmlNodeText, 
        'partnerId': getXmlNodeInt, 
        'entryId': getXmlNodeText, 
        'widgetId': getXmlNodeText, 
        'uiconfId': getXmlNodeInt, 
        'userId': getXmlNodeText, 
        'userIp': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunStatsVmcEvent.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunStatsVmcEvent")
        vparams.addStringIfDefined("clientVer", self.clientVer)
        vparams.addStringIfDefined("vmcEventActionPath", self.vmcEventActionPath)
        vparams.addIntEnumIfDefined("vmcEventType", self.vmcEventType)
        vparams.addFloatIfDefined("eventTimestamp", self.eventTimestamp)
        vparams.addStringIfDefined("sessionId", self.sessionId)
        vparams.addIntIfDefined("partnerId", self.partnerId)
        vparams.addStringIfDefined("entryId", self.entryId)
        vparams.addStringIfDefined("widgetId", self.widgetId)
        vparams.addIntIfDefined("uiconfId", self.uiconfId)
        vparams.addStringIfDefined("userId", self.userId)
        return vparams

    def getClientVer(self):
        return self.clientVer

    def setClientVer(self, newClientVer):
        self.clientVer = newClientVer

    def getVmcEventActionPath(self):
        return self.vmcEventActionPath

    def setVmcEventActionPath(self, newVmcEventActionPath):
        self.vmcEventActionPath = newVmcEventActionPath

    def getVmcEventType(self):
        return self.vmcEventType

    def setVmcEventType(self, newVmcEventType):
        self.vmcEventType = newVmcEventType

    def getEventTimestamp(self):
        return self.eventTimestamp

    def setEventTimestamp(self, newEventTimestamp):
        self.eventTimestamp = newEventTimestamp

    def getSessionId(self):
        return self.sessionId

    def setSessionId(self, newSessionId):
        self.sessionId = newSessionId

    def getPartnerId(self):
        return self.partnerId

    def setPartnerId(self, newPartnerId):
        self.partnerId = newPartnerId

    def getEntryId(self):
        return self.entryId

    def setEntryId(self, newEntryId):
        self.entryId = newEntryId

    def getWidgetId(self):
        return self.widgetId

    def setWidgetId(self, newWidgetId):
        self.widgetId = newWidgetId

    def getUiconfId(self):
        return self.uiconfId

    def setUiconfId(self, newUiconfId):
        self.uiconfId = newUiconfId

    def getUserId(self):
        return self.userId

    def setUserId(self, newUserId):
        self.userId = newUserId

    def getUserIp(self):
        return self.userIp


# @package Vidiun
# @subpackage Client
class VidiunStorageProfile(VidiunObjectBase):
    def __init__(self,
            id=NotImplemented,
            createdAt=NotImplemented,
            updatedAt=NotImplemented,
            partnerId=NotImplemented,
            name=NotImplemented,
            systemName=NotImplemented,
            desciption=NotImplemented,
            status=NotImplemented,
            protocol=NotImplemented,
            storageUrl=NotImplemented,
            storageBaseDir=NotImplemented,
            storageUsername=NotImplemented,
            storagePassword=NotImplemented,
            storageFtpPassiveMode=NotImplemented,
            minFileSize=NotImplemented,
            maxFileSize=NotImplemented,
            flavorParamsIds=NotImplemented,
            maxConcurrentConnections=NotImplemented,
            pathManagerClass=NotImplemented,
            pathManagerParams=NotImplemented,
            trigger=NotImplemented,
            deliveryPriority=NotImplemented,
            deliveryStatus=NotImplemented,
            readyBehavior=NotImplemented,
            allowAutoDelete=NotImplemented,
            createFileLink=NotImplemented,
            rules=NotImplemented,
            deliveryProfileIds=NotImplemented,
            privateKey=NotImplemented,
            publicKey=NotImplemented,
            passPhrase=NotImplemented):
        VidiunObjectBase.__init__(self)

        # @var int
        # @readonly
        self.id = id

        # @var int
        # @readonly
        self.createdAt = createdAt

        # @var int
        # @readonly
        self.updatedAt = updatedAt

        # @var int
        # @readonly
        self.partnerId = partnerId

        # @var string
        self.name = name

        # @var string
        self.systemName = systemName

        # @var string
        self.desciption = desciption

        # @var VidiunStorageProfileStatus
        self.status = status

        # @var VidiunStorageProfileProtocol
        self.protocol = protocol

        # @var string
        self.storageUrl = storageUrl

        # @var string
        self.storageBaseDir = storageBaseDir

        # @var string
        self.storageUsername = storageUsername

        # @var string
        self.storagePassword = storagePassword

        # @var bool
        self.storageFtpPassiveMode = storageFtpPassiveMode

        # @var int
        self.minFileSize = minFileSize

        # @var int
        self.maxFileSize = maxFileSize

        # @var string
        self.flavorParamsIds = flavorParamsIds

        # @var int
        self.maxConcurrentConnections = maxConcurrentConnections

        # @var string
        self.pathManagerClass = pathManagerClass

        # @var array of VidiunKeyValue
        self.pathManagerParams = pathManagerParams

        # No need to create enum for temp field
        # @var int
        self.trigger = trigger

        # Delivery Priority
        # @var int
        self.deliveryPriority = deliveryPriority

        # @var VidiunStorageProfileDeliveryStatus
        self.deliveryStatus = deliveryStatus

        # @var VidiunStorageProfileReadyBehavior
        self.readyBehavior = readyBehavior

        # Flag sugnifying that the storage exported content should be deleted when soure entry is deleted
        # @var int
        self.allowAutoDelete = allowAutoDelete

        # Indicates to the local file transfer manager to create a link to the file instead of copying it
        # @var bool
        self.createFileLink = createFileLink

        # Holds storage profile export rules
        # @var array of VidiunRule
        self.rules = rules

        # Delivery profile ids
        # @var array of VidiunKeyValue
        self.deliveryProfileIds = deliveryProfileIds

        # @var string
        self.privateKey = privateKey

        # @var string
        self.publicKey = publicKey

        # @var string
        self.passPhrase = passPhrase


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'createdAt': getXmlNodeInt, 
        'updatedAt': getXmlNodeInt, 
        'partnerId': getXmlNodeInt, 
        'name': getXmlNodeText, 
        'systemName': getXmlNodeText, 
        'desciption': getXmlNodeText, 
        'status': (VidiunEnumsFactory.createInt, "VidiunStorageProfileStatus"), 
        'protocol': (VidiunEnumsFactory.createString, "VidiunStorageProfileProtocol"), 
        'storageUrl': getXmlNodeText, 
        'storageBaseDir': getXmlNodeText, 
        'storageUsername': getXmlNodeText, 
        'storagePassword': getXmlNodeText, 
        'storageFtpPassiveMode': getXmlNodeBool, 
        'minFileSize': getXmlNodeInt, 
        'maxFileSize': getXmlNodeInt, 
        'flavorParamsIds': getXmlNodeText, 
        'maxConcurrentConnections': getXmlNodeInt, 
        'pathManagerClass': getXmlNodeText, 
        'pathManagerParams': (VidiunObjectFactory.createArray, VidiunKeyValue), 
        'trigger': getXmlNodeInt, 
        'deliveryPriority': getXmlNodeInt, 
        'deliveryStatus': (VidiunEnumsFactory.createInt, "VidiunStorageProfileDeliveryStatus"), 
        'readyBehavior': (VidiunEnumsFactory.createInt, "VidiunStorageProfileReadyBehavior"), 
        'allowAutoDelete': getXmlNodeInt, 
        'createFileLink': getXmlNodeBool, 
        'rules': (VidiunObjectFactory.createArray, VidiunRule), 
        'deliveryProfileIds': (VidiunObjectFactory.createArray, VidiunKeyValue), 
        'privateKey': getXmlNodeText, 
        'publicKey': getXmlNodeText, 
        'passPhrase': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunStorageProfile.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunStorageProfile")
        vparams.addStringIfDefined("name", self.name)
        vparams.addStringIfDefined("systemName", self.systemName)
        vparams.addStringIfDefined("desciption", self.desciption)
        vparams.addIntEnumIfDefined("status", self.status)
        vparams.addStringEnumIfDefined("protocol", self.protocol)
        vparams.addStringIfDefined("storageUrl", self.storageUrl)
        vparams.addStringIfDefined("storageBaseDir", self.storageBaseDir)
        vparams.addStringIfDefined("storageUsername", self.storageUsername)
        vparams.addStringIfDefined("storagePassword", self.storagePassword)
        vparams.addBoolIfDefined("storageFtpPassiveMode", self.storageFtpPassiveMode)
        vparams.addIntIfDefined("minFileSize", self.minFileSize)
        vparams.addIntIfDefined("maxFileSize", self.maxFileSize)
        vparams.addStringIfDefined("flavorParamsIds", self.flavorParamsIds)
        vparams.addIntIfDefined("maxConcurrentConnections", self.maxConcurrentConnections)
        vparams.addStringIfDefined("pathManagerClass", self.pathManagerClass)
        vparams.addArrayIfDefined("pathManagerParams", self.pathManagerParams)
        vparams.addIntIfDefined("trigger", self.trigger)
        vparams.addIntIfDefined("deliveryPriority", self.deliveryPriority)
        vparams.addIntEnumIfDefined("deliveryStatus", self.deliveryStatus)
        vparams.addIntEnumIfDefined("readyBehavior", self.readyBehavior)
        vparams.addIntIfDefined("allowAutoDelete", self.allowAutoDelete)
        vparams.addBoolIfDefined("createFileLink", self.createFileLink)
        vparams.addArrayIfDefined("rules", self.rules)
        vparams.addArrayIfDefined("deliveryProfileIds", self.deliveryProfileIds)
        vparams.addStringIfDefined("privateKey", self.privateKey)
        vparams.addStringIfDefined("publicKey", self.publicKey)
        vparams.addStringIfDefined("passPhrase", self.passPhrase)
        return vparams

    def getId(self):
        return self.id

    def getCreatedAt(self):
        return self.createdAt

    def getUpdatedAt(self):
        return self.updatedAt

    def getPartnerId(self):
        return self.partnerId

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName

    def getSystemName(self):
        return self.systemName

    def setSystemName(self, newSystemName):
        self.systemName = newSystemName

    def getDesciption(self):
        return self.desciption

    def setDesciption(self, newDesciption):
        self.desciption = newDesciption

    def getStatus(self):
        return self.status

    def setStatus(self, newStatus):
        self.status = newStatus

    def getProtocol(self):
        return self.protocol

    def setProtocol(self, newProtocol):
        self.protocol = newProtocol

    def getStorageUrl(self):
        return self.storageUrl

    def setStorageUrl(self, newStorageUrl):
        self.storageUrl = newStorageUrl

    def getStorageBaseDir(self):
        return self.storageBaseDir

    def setStorageBaseDir(self, newStorageBaseDir):
        self.storageBaseDir = newStorageBaseDir

    def getStorageUsername(self):
        return self.storageUsername

    def setStorageUsername(self, newStorageUsername):
        self.storageUsername = newStorageUsername

    def getStoragePassword(self):
        return self.storagePassword

    def setStoragePassword(self, newStoragePassword):
        self.storagePassword = newStoragePassword

    def getStorageFtpPassiveMode(self):
        return self.storageFtpPassiveMode

    def setStorageFtpPassiveMode(self, newStorageFtpPassiveMode):
        self.storageFtpPassiveMode = newStorageFtpPassiveMode

    def getMinFileSize(self):
        return self.minFileSize

    def setMinFileSize(self, newMinFileSize):
        self.minFileSize = newMinFileSize

    def getMaxFileSize(self):
        return self.maxFileSize

    def setMaxFileSize(self, newMaxFileSize):
        self.maxFileSize = newMaxFileSize

    def getFlavorParamsIds(self):
        return self.flavorParamsIds

    def setFlavorParamsIds(self, newFlavorParamsIds):
        self.flavorParamsIds = newFlavorParamsIds

    def getMaxConcurrentConnections(self):
        return self.maxConcurrentConnections

    def setMaxConcurrentConnections(self, newMaxConcurrentConnections):
        self.maxConcurrentConnections = newMaxConcurrentConnections

    def getPathManagerClass(self):
        return self.pathManagerClass

    def setPathManagerClass(self, newPathManagerClass):
        self.pathManagerClass = newPathManagerClass

    def getPathManagerParams(self):
        return self.pathManagerParams

    def setPathManagerParams(self, newPathManagerParams):
        self.pathManagerParams = newPathManagerParams

    def getTrigger(self):
        return self.trigger

    def setTrigger(self, newTrigger):
        self.trigger = newTrigger

    def getDeliveryPriority(self):
        return self.deliveryPriority

    def setDeliveryPriority(self, newDeliveryPriority):
        self.deliveryPriority = newDeliveryPriority

    def getDeliveryStatus(self):
        return self.deliveryStatus

    def setDeliveryStatus(self, newDeliveryStatus):
        self.deliveryStatus = newDeliveryStatus

    def getReadyBehavior(self):
        return self.readyBehavior

    def setReadyBehavior(self, newReadyBehavior):
        self.readyBehavior = newReadyBehavior

    def getAllowAutoDelete(self):
        return self.allowAutoDelete

    def setAllowAutoDelete(self, newAllowAutoDelete):
        self.allowAutoDelete = newAllowAutoDelete

    def getCreateFileLink(self):
        return self.createFileLink

    def setCreateFileLink(self, newCreateFileLink):
        self.createFileLink = newCreateFileLink

    def getRules(self):
        return self.rules

    def setRules(self, newRules):
        self.rules = newRules

    def getDeliveryProfileIds(self):
        return self.deliveryProfileIds

    def setDeliveryProfileIds(self, newDeliveryProfileIds):
        self.deliveryProfileIds = newDeliveryProfileIds

    def getPrivateKey(self):
        return self.privateKey

    def setPrivateKey(self, newPrivateKey):
        self.privateKey = newPrivateKey

    def getPublicKey(self):
        return self.publicKey

    def setPublicKey(self, newPublicKey):
        self.publicKey = newPublicKey

    def getPassPhrase(self):
        return self.passPhrase

    def setPassPhrase(self, newPassPhrase):
        self.passPhrase = newPassPhrase


# @package Vidiun
# @subpackage Client
class VidiunSyndicationFeedEntryCount(VidiunObjectBase):
    def __init__(self,
            totalEntryCount=NotImplemented,
            actualEntryCount=NotImplemented,
            requireTranscodingCount=NotImplemented):
        VidiunObjectBase.__init__(self)

        # the total count of entries that should appear in the feed without flavor filtering
        # @var int
        self.totalEntryCount = totalEntryCount

        # count of entries that will appear in the feed (including all relevant filters)
        # @var int
        self.actualEntryCount = actualEntryCount

        # count of entries that requires transcoding in order to be included in feed
        # @var int
        self.requireTranscodingCount = requireTranscodingCount


    PROPERTY_LOADERS = {
        'totalEntryCount': getXmlNodeInt, 
        'actualEntryCount': getXmlNodeInt, 
        'requireTranscodingCount': getXmlNodeInt, 
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunSyndicationFeedEntryCount.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunSyndicationFeedEntryCount")
        vparams.addIntIfDefined("totalEntryCount", self.totalEntryCount)
        vparams.addIntIfDefined("actualEntryCount", self.actualEntryCount)
        vparams.addIntIfDefined("requireTranscodingCount", self.requireTranscodingCount)
        return vparams

    def getTotalEntryCount(self):
        return self.totalEntryCount

    def setTotalEntryCount(self, newTotalEntryCount):
        self.totalEntryCount = newTotalEntryCount

    def getActualEntryCount(self):
        return self.actualEntryCount

    def setActualEntryCount(self, newActualEntryCount):
        self.actualEntryCount = newActualEntryCount

    def getRequireTranscodingCount(self):
        return self.requireTranscodingCount

    def setRequireTranscodingCount(self, newRequireTranscodingCount):
        self.requireTranscodingCount = newRequireTranscodingCount


# @package Vidiun
# @subpackage Client
class VidiunThumbAsset(VidiunAsset):
    def __init__(self,
            id=NotImplemented,
            entryId=NotImplemented,
            partnerId=NotImplemented,
            version=NotImplemented,
            size=NotImplemented,
            tags=NotImplemented,
            fileExt=NotImplemented,
            createdAt=NotImplemented,
            updatedAt=NotImplemented,
            deletedAt=NotImplemented,
            description=NotImplemented,
            partnerData=NotImplemented,
            partnerDescription=NotImplemented,
            actualSourceAssetParamsIds=NotImplemented,
            thumbParamsId=NotImplemented,
            width=NotImplemented,
            height=NotImplemented,
            status=NotImplemented):
        VidiunAsset.__init__(self,
            id,
            entryId,
            partnerId,
            version,
            size,
            tags,
            fileExt,
            createdAt,
            updatedAt,
            deletedAt,
            description,
            partnerData,
            partnerDescription,
            actualSourceAssetParamsIds)

        # The Flavor Params used to create this Flavor Asset
        # @var int
        # @insertonly
        self.thumbParamsId = thumbParamsId

        # The width of the Flavor Asset
        # @var int
        # @readonly
        self.width = width

        # The height of the Flavor Asset
        # @var int
        # @readonly
        self.height = height

        # The status of the asset
        # @var VidiunThumbAssetStatus
        # @readonly
        self.status = status


    PROPERTY_LOADERS = {
        'thumbParamsId': getXmlNodeInt, 
        'width': getXmlNodeInt, 
        'height': getXmlNodeInt, 
        'status': (VidiunEnumsFactory.createInt, "VidiunThumbAssetStatus"), 
    }

    def fromXml(self, node):
        VidiunAsset.fromXml(self, node)
        self.fromXmlImpl(node, VidiunThumbAsset.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunAsset.toParams(self)
        vparams.put("objectType", "VidiunThumbAsset")
        vparams.addIntIfDefined("thumbParamsId", self.thumbParamsId)
        return vparams

    def getThumbParamsId(self):
        return self.thumbParamsId

    def setThumbParamsId(self, newThumbParamsId):
        self.thumbParamsId = newThumbParamsId

    def getWidth(self):
        return self.width

    def getHeight(self):
        return self.height

    def getStatus(self):
        return self.status


# @package Vidiun
# @subpackage Client
class VidiunThumbParams(VidiunAssetParams):
    def __init__(self,
            id=NotImplemented,
            partnerId=NotImplemented,
            name=NotImplemented,
            systemName=NotImplemented,
            description=NotImplemented,
            createdAt=NotImplemented,
            isSystemDefault=NotImplemented,
            tags=NotImplemented,
            requiredPermissions=NotImplemented,
            sourceRemoteStorageProfileId=NotImplemented,
            remoteStorageProfileIds=NotImplemented,
            mediaParserType=NotImplemented,
            sourceAssetParamsIds=NotImplemented,
            cropType=NotImplemented,
            quality=NotImplemented,
            cropX=NotImplemented,
            cropY=NotImplemented,
            cropWidth=NotImplemented,
            cropHeight=NotImplemented,
            videoOffset=NotImplemented,
            width=NotImplemented,
            height=NotImplemented,
            scaleWidth=NotImplemented,
            scaleHeight=NotImplemented,
            backgroundColor=NotImplemented,
            sourceParamsId=NotImplemented,
            format=NotImplemented,
            density=NotImplemented,
            stripProfiles=NotImplemented,
            videoOffsetInPercentage=NotImplemented):
        VidiunAssetParams.__init__(self,
            id,
            partnerId,
            name,
            systemName,
            description,
            createdAt,
            isSystemDefault,
            tags,
            requiredPermissions,
            sourceRemoteStorageProfileId,
            remoteStorageProfileIds,
            mediaParserType,
            sourceAssetParamsIds)

        # @var VidiunThumbCropType
        self.cropType = cropType

        # @var int
        self.quality = quality

        # @var int
        self.cropX = cropX

        # @var int
        self.cropY = cropY

        # @var int
        self.cropWidth = cropWidth

        # @var int
        self.cropHeight = cropHeight

        # @var float
        self.videoOffset = videoOffset

        # @var int
        self.width = width

        # @var int
        self.height = height

        # @var float
        self.scaleWidth = scaleWidth

        # @var float
        self.scaleHeight = scaleHeight

        # Hexadecimal value
        # @var string
        self.backgroundColor = backgroundColor

        # Id of the flavor params or the thumbnail params to be used as source for the thumbnail creation
        # @var int
        self.sourceParamsId = sourceParamsId

        # The container format of the Flavor Params
        # @var VidiunContainerFormat
        self.format = format

        # The image density (dpi) for example: 72 or 96
        # @var int
        self.density = density

        # Strip profiles and comments
        # @var bool
        self.stripProfiles = stripProfiles

        # Create thumbnail from the videoLengthpercentage second
        # @var int
        self.videoOffsetInPercentage = videoOffsetInPercentage


    PROPERTY_LOADERS = {
        'cropType': (VidiunEnumsFactory.createInt, "VidiunThumbCropType"), 
        'quality': getXmlNodeInt, 
        'cropX': getXmlNodeInt, 
        'cropY': getXmlNodeInt, 
        'cropWidth': getXmlNodeInt, 
        'cropHeight': getXmlNodeInt, 
        'videoOffset': getXmlNodeFloat, 
        'width': getXmlNodeInt, 
        'height': getXmlNodeInt, 
        'scaleWidth': getXmlNodeFloat, 
        'scaleHeight': getXmlNodeFloat, 
        'backgroundColor': getXmlNodeText, 
        'sourceParamsId': getXmlNodeInt, 
        'format': (VidiunEnumsFactory.createString, "VidiunContainerFormat"), 
        'density': getXmlNodeInt, 
        'stripProfiles': getXmlNodeBool, 
        'videoOffsetInPercentage': getXmlNodeInt, 
    }

    def fromXml(self, node):
        VidiunAssetParams.fromXml(self, node)
        self.fromXmlImpl(node, VidiunThumbParams.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunAssetParams.toParams(self)
        vparams.put("objectType", "VidiunThumbParams")
        vparams.addIntEnumIfDefined("cropType", self.cropType)
        vparams.addIntIfDefined("quality", self.quality)
        vparams.addIntIfDefined("cropX", self.cropX)
        vparams.addIntIfDefined("cropY", self.cropY)
        vparams.addIntIfDefined("cropWidth", self.cropWidth)
        vparams.addIntIfDefined("cropHeight", self.cropHeight)
        vparams.addFloatIfDefined("videoOffset", self.videoOffset)
        vparams.addIntIfDefined("width", self.width)
        vparams.addIntIfDefined("height", self.height)
        vparams.addFloatIfDefined("scaleWidth", self.scaleWidth)
        vparams.addFloatIfDefined("scaleHeight", self.scaleHeight)
        vparams.addStringIfDefined("backgroundColor", self.backgroundColor)
        vparams.addIntIfDefined("sourceParamsId", self.sourceParamsId)
        vparams.addStringEnumIfDefined("format", self.format)
        vparams.addIntIfDefined("density", self.density)
        vparams.addBoolIfDefined("stripProfiles", self.stripProfiles)
        vparams.addIntIfDefined("videoOffsetInPercentage", self.videoOffsetInPercentage)
        return vparams

    def getCropType(self):
        return self.cropType

    def setCropType(self, newCropType):
        self.cropType = newCropType

    def getQuality(self):
        return self.quality

    def setQuality(self, newQuality):
        self.quality = newQuality

    def getCropX(self):
        return self.cropX

    def setCropX(self, newCropX):
        self.cropX = newCropX

    def getCropY(self):
        return self.cropY

    def setCropY(self, newCropY):
        self.cropY = newCropY

    def getCropWidth(self):
        return self.cropWidth

    def setCropWidth(self, newCropWidth):
        self.cropWidth = newCropWidth

    def getCropHeight(self):
        return self.cropHeight

    def setCropHeight(self, newCropHeight):
        self.cropHeight = newCropHeight

    def getVideoOffset(self):
        return self.videoOffset

    def setVideoOffset(self, newVideoOffset):
        self.videoOffset = newVideoOffset

    def getWidth(self):
        return self.width

    def setWidth(self, newWidth):
        self.width = newWidth

    def getHeight(self):
        return self.height

    def setHeight(self, newHeight):
        self.height = newHeight

    def getScaleWidth(self):
        return self.scaleWidth

    def setScaleWidth(self, newScaleWidth):
        self.scaleWidth = newScaleWidth

    def getScaleHeight(self):
        return self.scaleHeight

    def setScaleHeight(self, newScaleHeight):
        self.scaleHeight = newScaleHeight

    def getBackgroundColor(self):
        return self.backgroundColor

    def setBackgroundColor(self, newBackgroundColor):
        self.backgroundColor = newBackgroundColor

    def getSourceParamsId(self):
        return self.sourceParamsId

    def setSourceParamsId(self, newSourceParamsId):
        self.sourceParamsId = newSourceParamsId

    def getFormat(self):
        return self.format

    def setFormat(self, newFormat):
        self.format = newFormat

    def getDensity(self):
        return self.density

    def setDensity(self, newDensity):
        self.density = newDensity

    def getStripProfiles(self):
        return self.stripProfiles

    def setStripProfiles(self, newStripProfiles):
        self.stripProfiles = newStripProfiles

    def getVideoOffsetInPercentage(self):
        return self.videoOffsetInPercentage

    def setVideoOffsetInPercentage(self, newVideoOffsetInPercentage):
        self.videoOffsetInPercentage = newVideoOffsetInPercentage


# @package Vidiun
# @subpackage Client
class VidiunThumbParamsOutput(VidiunThumbParams):
    def __init__(self,
            id=NotImplemented,
            partnerId=NotImplemented,
            name=NotImplemented,
            systemName=NotImplemented,
            description=NotImplemented,
            createdAt=NotImplemented,
            isSystemDefault=NotImplemented,
            tags=NotImplemented,
            requiredPermissions=NotImplemented,
            sourceRemoteStorageProfileId=NotImplemented,
            remoteStorageProfileIds=NotImplemented,
            mediaParserType=NotImplemented,
            sourceAssetParamsIds=NotImplemented,
            cropType=NotImplemented,
            quality=NotImplemented,
            cropX=NotImplemented,
            cropY=NotImplemented,
            cropWidth=NotImplemented,
            cropHeight=NotImplemented,
            videoOffset=NotImplemented,
            width=NotImplemented,
            height=NotImplemented,
            scaleWidth=NotImplemented,
            scaleHeight=NotImplemented,
            backgroundColor=NotImplemented,
            sourceParamsId=NotImplemented,
            format=NotImplemented,
            density=NotImplemented,
            stripProfiles=NotImplemented,
            videoOffsetInPercentage=NotImplemented,
            thumbParamsId=NotImplemented,
            thumbParamsVersion=NotImplemented,
            thumbAssetId=NotImplemented,
            thumbAssetVersion=NotImplemented,
            rotate=NotImplemented):
        VidiunThumbParams.__init__(self,
            id,
            partnerId,
            name,
            systemName,
            description,
            createdAt,
            isSystemDefault,
            tags,
            requiredPermissions,
            sourceRemoteStorageProfileId,
            remoteStorageProfileIds,
            mediaParserType,
            sourceAssetParamsIds,
            cropType,
            quality,
            cropX,
            cropY,
            cropWidth,
            cropHeight,
            videoOffset,
            width,
            height,
            scaleWidth,
            scaleHeight,
            backgroundColor,
            sourceParamsId,
            format,
            density,
            stripProfiles,
            videoOffsetInPercentage)

        # @var int
        self.thumbParamsId = thumbParamsId

        # @var string
        self.thumbParamsVersion = thumbParamsVersion

        # @var string
        self.thumbAssetId = thumbAssetId

        # @var string
        self.thumbAssetVersion = thumbAssetVersion

        # @var int
        self.rotate = rotate


    PROPERTY_LOADERS = {
        'thumbParamsId': getXmlNodeInt, 
        'thumbParamsVersion': getXmlNodeText, 
        'thumbAssetId': getXmlNodeText, 
        'thumbAssetVersion': getXmlNodeText, 
        'rotate': getXmlNodeInt, 
    }

    def fromXml(self, node):
        VidiunThumbParams.fromXml(self, node)
        self.fromXmlImpl(node, VidiunThumbParamsOutput.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunThumbParams.toParams(self)
        vparams.put("objectType", "VidiunThumbParamsOutput")
        vparams.addIntIfDefined("thumbParamsId", self.thumbParamsId)
        vparams.addStringIfDefined("thumbParamsVersion", self.thumbParamsVersion)
        vparams.addStringIfDefined("thumbAssetId", self.thumbAssetId)
        vparams.addStringIfDefined("thumbAssetVersion", self.thumbAssetVersion)
        vparams.addIntIfDefined("rotate", self.rotate)
        return vparams

    def getThumbParamsId(self):
        return self.thumbParamsId

    def setThumbParamsId(self, newThumbParamsId):
        self.thumbParamsId = newThumbParamsId

    def getThumbParamsVersion(self):
        return self.thumbParamsVersion

    def setThumbParamsVersion(self, newThumbParamsVersion):
        self.thumbParamsVersion = newThumbParamsVersion

    def getThumbAssetId(self):
        return self.thumbAssetId

    def setThumbAssetId(self, newThumbAssetId):
        self.thumbAssetId = newThumbAssetId

    def getThumbAssetVersion(self):
        return self.thumbAssetVersion

    def setThumbAssetVersion(self, newThumbAssetVersion):
        self.thumbAssetVersion = newThumbAssetVersion

    def getRotate(self):
        return self.rotate

    def setRotate(self, newRotate):
        self.rotate = newRotate


# @package Vidiun
# @subpackage Client
class VidiunThumbnailServeOptions(VidiunObjectBase):
    def __init__(self,
            download=NotImplemented,
            referrer=NotImplemented):
        VidiunObjectBase.__init__(self)

        # @var bool
        self.download = download

        # @var string
        self.referrer = referrer


    PROPERTY_LOADERS = {
        'download': getXmlNodeBool, 
        'referrer': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunThumbnailServeOptions.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunThumbnailServeOptions")
        vparams.addBoolIfDefined("download", self.download)
        vparams.addStringIfDefined("referrer", self.referrer)
        return vparams

    def getDownload(self):
        return self.download

    def setDownload(self, newDownload):
        self.download = newDownload

    def getReferrer(self):
        return self.referrer

    def setReferrer(self, newReferrer):
        self.referrer = newReferrer


# @package Vidiun
# @subpackage Client
class VidiunUiConf(VidiunObjectBase):
    def __init__(self,
            id=NotImplemented,
            name=NotImplemented,
            description=NotImplemented,
            partnerId=NotImplemented,
            objType=NotImplemented,
            objTypeAsString=NotImplemented,
            width=NotImplemented,
            height=NotImplemented,
            htmlParams=NotImplemented,
            swfUrl=NotImplemented,
            confFilePath=NotImplemented,
            confFile=NotImplemented,
            confFileFeatures=NotImplemented,
            config=NotImplemented,
            confVars=NotImplemented,
            useCdn=NotImplemented,
            tags=NotImplemented,
            swfUrlVersion=NotImplemented,
            createdAt=NotImplemented,
            updatedAt=NotImplemented,
            creationMode=NotImplemented,
            html5Url=NotImplemented,
            version=NotImplemented,
            partnerTags=NotImplemented):
        VidiunObjectBase.__init__(self)

        # @var int
        # @readonly
        self.id = id

        # Name of the uiConf, this is not a primary key
        # @var string
        self.name = name

        # @var string
        self.description = description

        # @var int
        # @readonly
        self.partnerId = partnerId

        # @var VidiunUiConfObjType
        self.objType = objType

        # @var string
        # @readonly
        self.objTypeAsString = objTypeAsString

        # @var int
        self.width = width

        # @var int
        self.height = height

        # @var string
        self.htmlParams = htmlParams

        # @var string
        self.swfUrl = swfUrl

        # @var string
        # @readonly
        self.confFilePath = confFilePath

        # @var string
        self.confFile = confFile

        # @var string
        self.confFileFeatures = confFileFeatures

        # @var string
        self.config = config

        # @var string
        self.confVars = confVars

        # @var bool
        self.useCdn = useCdn

        # @var string
        self.tags = tags

        # @var string
        self.swfUrlVersion = swfUrlVersion

        # Entry creation date as Unix timestamp (In seconds)
        # @var int
        # @readonly
        self.createdAt = createdAt

        # Entry creation date as Unix timestamp (In seconds)
        # @var int
        # @readonly
        self.updatedAt = updatedAt

        # @var VidiunUiConfCreationMode
        self.creationMode = creationMode

        # @var string
        self.html5Url = html5Url

        # UiConf version
        # @var string
        # @readonly
        self.version = version

        # @var string
        self.partnerTags = partnerTags


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'name': getXmlNodeText, 
        'description': getXmlNodeText, 
        'partnerId': getXmlNodeInt, 
        'objType': (VidiunEnumsFactory.createInt, "VidiunUiConfObjType"), 
        'objTypeAsString': getXmlNodeText, 
        'width': getXmlNodeInt, 
        'height': getXmlNodeInt, 
        'htmlParams': getXmlNodeText, 
        'swfUrl': getXmlNodeText, 
        'confFilePath': getXmlNodeText, 
        'confFile': getXmlNodeText, 
        'confFileFeatures': getXmlNodeText, 
        'config': getXmlNodeText, 
        'confVars': getXmlNodeText, 
        'useCdn': getXmlNodeBool, 
        'tags': getXmlNodeText, 
        'swfUrlVersion': getXmlNodeText, 
        'createdAt': getXmlNodeInt, 
        'updatedAt': getXmlNodeInt, 
        'creationMode': (VidiunEnumsFactory.createInt, "VidiunUiConfCreationMode"), 
        'html5Url': getXmlNodeText, 
        'version': getXmlNodeText, 
        'partnerTags': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunUiConf.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunUiConf")
        vparams.addStringIfDefined("name", self.name)
        vparams.addStringIfDefined("description", self.description)
        vparams.addIntEnumIfDefined("objType", self.objType)
        vparams.addIntIfDefined("width", self.width)
        vparams.addIntIfDefined("height", self.height)
        vparams.addStringIfDefined("htmlParams", self.htmlParams)
        vparams.addStringIfDefined("swfUrl", self.swfUrl)
        vparams.addStringIfDefined("confFile", self.confFile)
        vparams.addStringIfDefined("confFileFeatures", self.confFileFeatures)
        vparams.addStringIfDefined("config", self.config)
        vparams.addStringIfDefined("confVars", self.confVars)
        vparams.addBoolIfDefined("useCdn", self.useCdn)
        vparams.addStringIfDefined("tags", self.tags)
        vparams.addStringIfDefined("swfUrlVersion", self.swfUrlVersion)
        vparams.addIntEnumIfDefined("creationMode", self.creationMode)
        vparams.addStringIfDefined("html5Url", self.html5Url)
        vparams.addStringIfDefined("partnerTags", self.partnerTags)
        return vparams

    def getId(self):
        return self.id

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName

    def getDescription(self):
        return self.description

    def setDescription(self, newDescription):
        self.description = newDescription

    def getPartnerId(self):
        return self.partnerId

    def getObjType(self):
        return self.objType

    def setObjType(self, newObjType):
        self.objType = newObjType

    def getObjTypeAsString(self):
        return self.objTypeAsString

    def getWidth(self):
        return self.width

    def setWidth(self, newWidth):
        self.width = newWidth

    def getHeight(self):
        return self.height

    def setHeight(self, newHeight):
        self.height = newHeight

    def getHtmlParams(self):
        return self.htmlParams

    def setHtmlParams(self, newHtmlParams):
        self.htmlParams = newHtmlParams

    def getSwfUrl(self):
        return self.swfUrl

    def setSwfUrl(self, newSwfUrl):
        self.swfUrl = newSwfUrl

    def getConfFilePath(self):
        return self.confFilePath

    def getConfFile(self):
        return self.confFile

    def setConfFile(self, newConfFile):
        self.confFile = newConfFile

    def getConfFileFeatures(self):
        return self.confFileFeatures

    def setConfFileFeatures(self, newConfFileFeatures):
        self.confFileFeatures = newConfFileFeatures

    def getConfig(self):
        return self.config

    def setConfig(self, newConfig):
        self.config = newConfig

    def getConfVars(self):
        return self.confVars

    def setConfVars(self, newConfVars):
        self.confVars = newConfVars

    def getUseCdn(self):
        return self.useCdn

    def setUseCdn(self, newUseCdn):
        self.useCdn = newUseCdn

    def getTags(self):
        return self.tags

    def setTags(self, newTags):
        self.tags = newTags

    def getSwfUrlVersion(self):
        return self.swfUrlVersion

    def setSwfUrlVersion(self, newSwfUrlVersion):
        self.swfUrlVersion = newSwfUrlVersion

    def getCreatedAt(self):
        return self.createdAt

    def getUpdatedAt(self):
        return self.updatedAt

    def getCreationMode(self):
        return self.creationMode

    def setCreationMode(self, newCreationMode):
        self.creationMode = newCreationMode

    def getHtml5Url(self):
        return self.html5Url

    def setHtml5Url(self, newHtml5Url):
        self.html5Url = newHtml5Url

    def getVersion(self):
        return self.version

    def getPartnerTags(self):
        return self.partnerTags

    def setPartnerTags(self, newPartnerTags):
        self.partnerTags = newPartnerTags


# @package Vidiun
# @subpackage Client
class VidiunUiConfTypeInfo(VidiunObjectBase):
    """Info about uiconf type"""

    def __init__(self,
            type=NotImplemented,
            versions=NotImplemented,
            directory=NotImplemented,
            filename=NotImplemented):
        VidiunObjectBase.__init__(self)

        # UiConf Type
        # @var VidiunUiConfObjType
        self.type = type

        # Available versions
        # @var array of VidiunString
        self.versions = versions

        # The direcotry this type is saved at
        # @var string
        self.directory = directory

        # Filename for this UiConf type
        # @var string
        self.filename = filename


    PROPERTY_LOADERS = {
        'type': (VidiunEnumsFactory.createInt, "VidiunUiConfObjType"), 
        'versions': (VidiunObjectFactory.createArray, VidiunString), 
        'directory': getXmlNodeText, 
        'filename': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunUiConfTypeInfo.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunUiConfTypeInfo")
        vparams.addIntEnumIfDefined("type", self.type)
        vparams.addArrayIfDefined("versions", self.versions)
        vparams.addStringIfDefined("directory", self.directory)
        vparams.addStringIfDefined("filename", self.filename)
        return vparams

    def getType(self):
        return self.type

    def setType(self, newType):
        self.type = newType

    def getVersions(self):
        return self.versions

    def setVersions(self, newVersions):
        self.versions = newVersions

    def getDirectory(self):
        return self.directory

    def setDirectory(self, newDirectory):
        self.directory = newDirectory

    def getFilename(self):
        return self.filename

    def setFilename(self, newFilename):
        self.filename = newFilename


# @package Vidiun
# @subpackage Client
class VidiunUploadResponse(VidiunObjectBase):
    def __init__(self,
            uploadTokenId=NotImplemented,
            fileSize=NotImplemented,
            errorCode=NotImplemented,
            errorDescription=NotImplemented):
        VidiunObjectBase.__init__(self)

        # @var string
        self.uploadTokenId = uploadTokenId

        # @var int
        self.fileSize = fileSize

        # @var VidiunUploadErrorCode
        self.errorCode = errorCode

        # @var string
        self.errorDescription = errorDescription


    PROPERTY_LOADERS = {
        'uploadTokenId': getXmlNodeText, 
        'fileSize': getXmlNodeInt, 
        'errorCode': (VidiunEnumsFactory.createInt, "VidiunUploadErrorCode"), 
        'errorDescription': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunUploadResponse.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunUploadResponse")
        vparams.addStringIfDefined("uploadTokenId", self.uploadTokenId)
        vparams.addIntIfDefined("fileSize", self.fileSize)
        vparams.addIntEnumIfDefined("errorCode", self.errorCode)
        vparams.addStringIfDefined("errorDescription", self.errorDescription)
        return vparams

    def getUploadTokenId(self):
        return self.uploadTokenId

    def setUploadTokenId(self, newUploadTokenId):
        self.uploadTokenId = newUploadTokenId

    def getFileSize(self):
        return self.fileSize

    def setFileSize(self, newFileSize):
        self.fileSize = newFileSize

    def getErrorCode(self):
        return self.errorCode

    def setErrorCode(self, newErrorCode):
        self.errorCode = newErrorCode

    def getErrorDescription(self):
        return self.errorDescription

    def setErrorDescription(self, newErrorDescription):
        self.errorDescription = newErrorDescription


# @package Vidiun
# @subpackage Client
class VidiunUploadToken(VidiunObjectBase):
    def __init__(self,
            id=NotImplemented,
            partnerId=NotImplemented,
            userId=NotImplemented,
            status=NotImplemented,
            fileName=NotImplemented,
            fileSize=NotImplemented,
            uploadedFileSize=NotImplemented,
            createdAt=NotImplemented,
            updatedAt=NotImplemented):
        VidiunObjectBase.__init__(self)

        # Upload token unique ID
        # @var string
        # @readonly
        self.id = id

        # Partner ID of the upload token
        # @var int
        # @readonly
        self.partnerId = partnerId

        # User id for the upload token
        # @var string
        # @readonly
        self.userId = userId

        # Status of the upload token
        # @var VidiunUploadTokenStatus
        # @readonly
        self.status = status

        # Name of the file for the upload token, can be empty when the upload token is created and will be updated internally after the file is uploaded
        # @var string
        # @insertonly
        self.fileName = fileName

        # File size in bytes, can be empty when the upload token is created and will be updated internally after the file is uploaded
        # @var float
        # @insertonly
        self.fileSize = fileSize

        # Uploaded file size in bytes, can be used to identify how many bytes were uploaded before resuming
        # @var float
        # @readonly
        self.uploadedFileSize = uploadedFileSize

        # Creation date as Unix timestamp (In seconds)
        # @var int
        # @readonly
        self.createdAt = createdAt

        # Last update date as Unix timestamp (In seconds)
        # @var int
        # @readonly
        self.updatedAt = updatedAt


    PROPERTY_LOADERS = {
        'id': getXmlNodeText, 
        'partnerId': getXmlNodeInt, 
        'userId': getXmlNodeText, 
        'status': (VidiunEnumsFactory.createInt, "VidiunUploadTokenStatus"), 
        'fileName': getXmlNodeText, 
        'fileSize': getXmlNodeFloat, 
        'uploadedFileSize': getXmlNodeFloat, 
        'createdAt': getXmlNodeInt, 
        'updatedAt': getXmlNodeInt, 
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunUploadToken.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunUploadToken")
        vparams.addStringIfDefined("fileName", self.fileName)
        vparams.addFloatIfDefined("fileSize", self.fileSize)
        return vparams

    def getId(self):
        return self.id

    def getPartnerId(self):
        return self.partnerId

    def getUserId(self):
        return self.userId

    def getStatus(self):
        return self.status

    def getFileName(self):
        return self.fileName

    def setFileName(self, newFileName):
        self.fileName = newFileName

    def getFileSize(self):
        return self.fileSize

    def setFileSize(self, newFileSize):
        self.fileSize = newFileSize

    def getUploadedFileSize(self):
        return self.uploadedFileSize

    def getCreatedAt(self):
        return self.createdAt

    def getUpdatedAt(self):
        return self.updatedAt


# @package Vidiun
# @subpackage Client
class VidiunUser(VidiunObjectBase):
    def __init__(self,
            id=NotImplemented,
            partnerId=NotImplemented,
            type=NotImplemented,
            screenName=NotImplemented,
            fullName=NotImplemented,
            email=NotImplemented,
            dateOfBirth=NotImplemented,
            country=NotImplemented,
            state=NotImplemented,
            city=NotImplemented,
            zip=NotImplemented,
            thumbnailUrl=NotImplemented,
            description=NotImplemented,
            tags=NotImplemented,
            adminTags=NotImplemented,
            gender=NotImplemented,
            status=NotImplemented,
            createdAt=NotImplemented,
            updatedAt=NotImplemented,
            partnerData=NotImplemented,
            indexedPartnerDataInt=NotImplemented,
            indexedPartnerDataString=NotImplemented,
            storageSize=NotImplemented,
            password=NotImplemented,
            firstName=NotImplemented,
            lastName=NotImplemented,
            isAdmin=NotImplemented,
            language=NotImplemented,
            lastLoginTime=NotImplemented,
            statusUpdatedAt=NotImplemented,
            deletedAt=NotImplemented,
            loginEnabled=NotImplemented,
            roleIds=NotImplemented,
            roleNames=NotImplemented,
            isAccountOwner=NotImplemented,
            allowedPartnerIds=NotImplemented,
            allowedPartnerPackages=NotImplemented):
        VidiunObjectBase.__init__(self)

        # @var string
        self.id = id

        # @var int
        # @readonly
        self.partnerId = partnerId

        # @var VidiunUserType
        self.type = type

        # @var string
        self.screenName = screenName

        # @var string
        self.fullName = fullName

        # @var string
        self.email = email

        # @var int
        self.dateOfBirth = dateOfBirth

        # @var string
        self.country = country

        # @var string
        self.state = state

        # @var string
        self.city = city

        # @var string
        self.zip = zip

        # @var string
        self.thumbnailUrl = thumbnailUrl

        # @var string
        self.description = description

        # @var string
        self.tags = tags

        # Admin tags can be updated only by using an admin session
        # @var string
        self.adminTags = adminTags

        # @var VidiunGender
        self.gender = gender

        # @var VidiunUserStatus
        self.status = status

        # Creation date as Unix timestamp (In seconds)
        # @var int
        # @readonly
        self.createdAt = createdAt

        # Last update date as Unix timestamp (In seconds)
        # @var int
        # @readonly
        self.updatedAt = updatedAt

        # Can be used to store various partner related data as a string
        # @var string
        self.partnerData = partnerData

        # @var int
        self.indexedPartnerDataInt = indexedPartnerDataInt

        # @var string
        self.indexedPartnerDataString = indexedPartnerDataString

        # @var int
        # @readonly
        self.storageSize = storageSize

        # @var string
        # @insertonly
        self.password = password

        # @var string
        self.firstName = firstName

        # @var string
        self.lastName = lastName

        # @var bool
        self.isAdmin = isAdmin

        # @var VidiunLanguageCode
        self.language = language

        # @var int
        # @readonly
        self.lastLoginTime = lastLoginTime

        # @var int
        # @readonly
        self.statusUpdatedAt = statusUpdatedAt

        # @var int
        # @readonly
        self.deletedAt = deletedAt

        # @var bool
        # @readonly
        self.loginEnabled = loginEnabled

        # @var string
        self.roleIds = roleIds

        # @var string
        # @readonly
        self.roleNames = roleNames

        # @var bool
        # @readonly
        self.isAccountOwner = isAccountOwner

        # @var string
        self.allowedPartnerIds = allowedPartnerIds

        # @var string
        self.allowedPartnerPackages = allowedPartnerPackages


    PROPERTY_LOADERS = {
        'id': getXmlNodeText, 
        'partnerId': getXmlNodeInt, 
        'type': (VidiunEnumsFactory.createInt, "VidiunUserType"), 
        'screenName': getXmlNodeText, 
        'fullName': getXmlNodeText, 
        'email': getXmlNodeText, 
        'dateOfBirth': getXmlNodeInt, 
        'country': getXmlNodeText, 
        'state': getXmlNodeText, 
        'city': getXmlNodeText, 
        'zip': getXmlNodeText, 
        'thumbnailUrl': getXmlNodeText, 
        'description': getXmlNodeText, 
        'tags': getXmlNodeText, 
        'adminTags': getXmlNodeText, 
        'gender': (VidiunEnumsFactory.createInt, "VidiunGender"), 
        'status': (VidiunEnumsFactory.createInt, "VidiunUserStatus"), 
        'createdAt': getXmlNodeInt, 
        'updatedAt': getXmlNodeInt, 
        'partnerData': getXmlNodeText, 
        'indexedPartnerDataInt': getXmlNodeInt, 
        'indexedPartnerDataString': getXmlNodeText, 
        'storageSize': getXmlNodeInt, 
        'password': getXmlNodeText, 
        'firstName': getXmlNodeText, 
        'lastName': getXmlNodeText, 
        'isAdmin': getXmlNodeBool, 
        'language': (VidiunEnumsFactory.createString, "VidiunLanguageCode"), 
        'lastLoginTime': getXmlNodeInt, 
        'statusUpdatedAt': getXmlNodeInt, 
        'deletedAt': getXmlNodeInt, 
        'loginEnabled': getXmlNodeBool, 
        'roleIds': getXmlNodeText, 
        'roleNames': getXmlNodeText, 
        'isAccountOwner': getXmlNodeBool, 
        'allowedPartnerIds': getXmlNodeText, 
        'allowedPartnerPackages': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunUser.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunUser")
        vparams.addStringIfDefined("id", self.id)
        vparams.addIntEnumIfDefined("type", self.type)
        vparams.addStringIfDefined("screenName", self.screenName)
        vparams.addStringIfDefined("fullName", self.fullName)
        vparams.addStringIfDefined("email", self.email)
        vparams.addIntIfDefined("dateOfBirth", self.dateOfBirth)
        vparams.addStringIfDefined("country", self.country)
        vparams.addStringIfDefined("state", self.state)
        vparams.addStringIfDefined("city", self.city)
        vparams.addStringIfDefined("zip", self.zip)
        vparams.addStringIfDefined("thumbnailUrl", self.thumbnailUrl)
        vparams.addStringIfDefined("description", self.description)
        vparams.addStringIfDefined("tags", self.tags)
        vparams.addStringIfDefined("adminTags", self.adminTags)
        vparams.addIntEnumIfDefined("gender", self.gender)
        vparams.addIntEnumIfDefined("status", self.status)
        vparams.addStringIfDefined("partnerData", self.partnerData)
        vparams.addIntIfDefined("indexedPartnerDataInt", self.indexedPartnerDataInt)
        vparams.addStringIfDefined("indexedPartnerDataString", self.indexedPartnerDataString)
        vparams.addStringIfDefined("password", self.password)
        vparams.addStringIfDefined("firstName", self.firstName)
        vparams.addStringIfDefined("lastName", self.lastName)
        vparams.addBoolIfDefined("isAdmin", self.isAdmin)
        vparams.addStringEnumIfDefined("language", self.language)
        vparams.addStringIfDefined("roleIds", self.roleIds)
        vparams.addStringIfDefined("allowedPartnerIds", self.allowedPartnerIds)
        vparams.addStringIfDefined("allowedPartnerPackages", self.allowedPartnerPackages)
        return vparams

    def getId(self):
        return self.id

    def setId(self, newId):
        self.id = newId

    def getPartnerId(self):
        return self.partnerId

    def getType(self):
        return self.type

    def setType(self, newType):
        self.type = newType

    def getScreenName(self):
        return self.screenName

    def setScreenName(self, newScreenName):
        self.screenName = newScreenName

    def getFullName(self):
        return self.fullName

    def setFullName(self, newFullName):
        self.fullName = newFullName

    def getEmail(self):
        return self.email

    def setEmail(self, newEmail):
        self.email = newEmail

    def getDateOfBirth(self):
        return self.dateOfBirth

    def setDateOfBirth(self, newDateOfBirth):
        self.dateOfBirth = newDateOfBirth

    def getCountry(self):
        return self.country

    def setCountry(self, newCountry):
        self.country = newCountry

    def getState(self):
        return self.state

    def setState(self, newState):
        self.state = newState

    def getCity(self):
        return self.city

    def setCity(self, newCity):
        self.city = newCity

    def getZip(self):
        return self.zip

    def setZip(self, newZip):
        self.zip = newZip

    def getThumbnailUrl(self):
        return self.thumbnailUrl

    def setThumbnailUrl(self, newThumbnailUrl):
        self.thumbnailUrl = newThumbnailUrl

    def getDescription(self):
        return self.description

    def setDescription(self, newDescription):
        self.description = newDescription

    def getTags(self):
        return self.tags

    def setTags(self, newTags):
        self.tags = newTags

    def getAdminTags(self):
        return self.adminTags

    def setAdminTags(self, newAdminTags):
        self.adminTags = newAdminTags

    def getGender(self):
        return self.gender

    def setGender(self, newGender):
        self.gender = newGender

    def getStatus(self):
        return self.status

    def setStatus(self, newStatus):
        self.status = newStatus

    def getCreatedAt(self):
        return self.createdAt

    def getUpdatedAt(self):
        return self.updatedAt

    def getPartnerData(self):
        return self.partnerData

    def setPartnerData(self, newPartnerData):
        self.partnerData = newPartnerData

    def getIndexedPartnerDataInt(self):
        return self.indexedPartnerDataInt

    def setIndexedPartnerDataInt(self, newIndexedPartnerDataInt):
        self.indexedPartnerDataInt = newIndexedPartnerDataInt

    def getIndexedPartnerDataString(self):
        return self.indexedPartnerDataString

    def setIndexedPartnerDataString(self, newIndexedPartnerDataString):
        self.indexedPartnerDataString = newIndexedPartnerDataString

    def getStorageSize(self):
        return self.storageSize

    def getPassword(self):
        return self.password

    def setPassword(self, newPassword):
        self.password = newPassword

    def getFirstName(self):
        return self.firstName

    def setFirstName(self, newFirstName):
        self.firstName = newFirstName

    def getLastName(self):
        return self.lastName

    def setLastName(self, newLastName):
        self.lastName = newLastName

    def getIsAdmin(self):
        return self.isAdmin

    def setIsAdmin(self, newIsAdmin):
        self.isAdmin = newIsAdmin

    def getLanguage(self):
        return self.language

    def setLanguage(self, newLanguage):
        self.language = newLanguage

    def getLastLoginTime(self):
        return self.lastLoginTime

    def getStatusUpdatedAt(self):
        return self.statusUpdatedAt

    def getDeletedAt(self):
        return self.deletedAt

    def getLoginEnabled(self):
        return self.loginEnabled

    def getRoleIds(self):
        return self.roleIds

    def setRoleIds(self, newRoleIds):
        self.roleIds = newRoleIds

    def getRoleNames(self):
        return self.roleNames

    def getIsAccountOwner(self):
        return self.isAccountOwner

    def getAllowedPartnerIds(self):
        return self.allowedPartnerIds

    def setAllowedPartnerIds(self, newAllowedPartnerIds):
        self.allowedPartnerIds = newAllowedPartnerIds

    def getAllowedPartnerPackages(self):
        return self.allowedPartnerPackages

    def setAllowedPartnerPackages(self, newAllowedPartnerPackages):
        self.allowedPartnerPackages = newAllowedPartnerPackages


# @package Vidiun
# @subpackage Client
class VidiunUserEntry(VidiunObjectBase):
    def __init__(self,
            id=NotImplemented,
            entryId=NotImplemented,
            userId=NotImplemented,
            partnerId=NotImplemented,
            status=NotImplemented,
            createdAt=NotImplemented,
            updatedAt=NotImplemented,
            type=NotImplemented):
        VidiunObjectBase.__init__(self)

        # unique auto-generated identifier
        # @var int
        # @readonly
        self.id = id

        # @var string
        # @insertonly
        self.entryId = entryId

        # @var string
        # @insertonly
        self.userId = userId

        # @var int
        # @readonly
        self.partnerId = partnerId

        # @var VidiunUserEntryStatus
        # @readonly
        self.status = status

        # @var int
        # @readonly
        self.createdAt = createdAt

        # @var int
        # @readonly
        self.updatedAt = updatedAt

        # @var VidiunUserEntryType
        # @readonly
        self.type = type


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'entryId': getXmlNodeText, 
        'userId': getXmlNodeText, 
        'partnerId': getXmlNodeInt, 
        'status': (VidiunEnumsFactory.createString, "VidiunUserEntryStatus"), 
        'createdAt': getXmlNodeInt, 
        'updatedAt': getXmlNodeInt, 
        'type': (VidiunEnumsFactory.createString, "VidiunUserEntryType"), 
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunUserEntry.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunUserEntry")
        vparams.addStringIfDefined("entryId", self.entryId)
        vparams.addStringIfDefined("userId", self.userId)
        return vparams

    def getId(self):
        return self.id

    def getEntryId(self):
        return self.entryId

    def setEntryId(self, newEntryId):
        self.entryId = newEntryId

    def getUserId(self):
        return self.userId

    def setUserId(self, newUserId):
        self.userId = newUserId

    def getPartnerId(self):
        return self.partnerId

    def getStatus(self):
        return self.status

    def getCreatedAt(self):
        return self.createdAt

    def getUpdatedAt(self):
        return self.updatedAt

    def getType(self):
        return self.type


# @package Vidiun
# @subpackage Client
class VidiunUserLoginData(VidiunObjectBase):
    def __init__(self,
            id=NotImplemented,
            loginEmail=NotImplemented):
        VidiunObjectBase.__init__(self)

        # @var string
        self.id = id

        # @var string
        self.loginEmail = loginEmail


    PROPERTY_LOADERS = {
        'id': getXmlNodeText, 
        'loginEmail': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunUserLoginData.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunUserLoginData")
        vparams.addStringIfDefined("id", self.id)
        vparams.addStringIfDefined("loginEmail", self.loginEmail)
        return vparams

    def getId(self):
        return self.id

    def setId(self, newId):
        self.id = newId

    def getLoginEmail(self):
        return self.loginEmail

    def setLoginEmail(self, newLoginEmail):
        self.loginEmail = newLoginEmail


# @package Vidiun
# @subpackage Client
class VidiunUserRole(VidiunObjectBase):
    def __init__(self,
            id=NotImplemented,
            name=NotImplemented,
            systemName=NotImplemented,
            description=NotImplemented,
            status=NotImplemented,
            partnerId=NotImplemented,
            permissionNames=NotImplemented,
            tags=NotImplemented,
            createdAt=NotImplemented,
            updatedAt=NotImplemented):
        VidiunObjectBase.__init__(self)

        # @var int
        # @readonly
        self.id = id

        # @var string
        self.name = name

        # @var string
        self.systemName = systemName

        # @var string
        self.description = description

        # @var VidiunUserRoleStatus
        self.status = status

        # @var int
        # @readonly
        self.partnerId = partnerId

        # @var string
        self.permissionNames = permissionNames

        # @var string
        self.tags = tags

        # @var int
        # @readonly
        self.createdAt = createdAt

        # @var int
        # @readonly
        self.updatedAt = updatedAt


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'name': getXmlNodeText, 
        'systemName': getXmlNodeText, 
        'description': getXmlNodeText, 
        'status': (VidiunEnumsFactory.createInt, "VidiunUserRoleStatus"), 
        'partnerId': getXmlNodeInt, 
        'permissionNames': getXmlNodeText, 
        'tags': getXmlNodeText, 
        'createdAt': getXmlNodeInt, 
        'updatedAt': getXmlNodeInt, 
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunUserRole.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunUserRole")
        vparams.addStringIfDefined("name", self.name)
        vparams.addStringIfDefined("systemName", self.systemName)
        vparams.addStringIfDefined("description", self.description)
        vparams.addIntEnumIfDefined("status", self.status)
        vparams.addStringIfDefined("permissionNames", self.permissionNames)
        vparams.addStringIfDefined("tags", self.tags)
        return vparams

    def getId(self):
        return self.id

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName

    def getSystemName(self):
        return self.systemName

    def setSystemName(self, newSystemName):
        self.systemName = newSystemName

    def getDescription(self):
        return self.description

    def setDescription(self, newDescription):
        self.description = newDescription

    def getStatus(self):
        return self.status

    def setStatus(self, newStatus):
        self.status = newStatus

    def getPartnerId(self):
        return self.partnerId

    def getPermissionNames(self):
        return self.permissionNames

    def setPermissionNames(self, newPermissionNames):
        self.permissionNames = newPermissionNames

    def getTags(self):
        return self.tags

    def setTags(self, newTags):
        self.tags = newTags

    def getCreatedAt(self):
        return self.createdAt

    def getUpdatedAt(self):
        return self.updatedAt


# @package Vidiun
# @subpackage Client
class VidiunWidget(VidiunObjectBase):
    def __init__(self,
            id=NotImplemented,
            sourceWidgetId=NotImplemented,
            rootWidgetId=NotImplemented,
            partnerId=NotImplemented,
            entryId=NotImplemented,
            uiConfId=NotImplemented,
            securityType=NotImplemented,
            securityPolicy=NotImplemented,
            createdAt=NotImplemented,
            updatedAt=NotImplemented,
            partnerData=NotImplemented,
            widgetHTML=NotImplemented,
            enforceEntitlement=NotImplemented,
            privacyContext=NotImplemented,
            addEmbedHtml5Support=NotImplemented,
            roles=NotImplemented):
        VidiunObjectBase.__init__(self)

        # @var string
        # @readonly
        self.id = id

        # @var string
        self.sourceWidgetId = sourceWidgetId

        # @var string
        # @readonly
        self.rootWidgetId = rootWidgetId

        # @var int
        # @readonly
        self.partnerId = partnerId

        # @var string
        self.entryId = entryId

        # @var int
        self.uiConfId = uiConfId

        # @var VidiunWidgetSecurityType
        self.securityType = securityType

        # @var int
        self.securityPolicy = securityPolicy

        # @var int
        # @readonly
        self.createdAt = createdAt

        # @var int
        # @readonly
        self.updatedAt = updatedAt

        # Can be used to store various partner related data as a string
        # @var string
        self.partnerData = partnerData

        # @var string
        # @readonly
        self.widgetHTML = widgetHTML

        # Should enforce entitlement on feed entries
        # @var bool
        self.enforceEntitlement = enforceEntitlement

        # Set privacy context for search entries that assiged to private and public categories within a category privacy context.
        # @var string
        self.privacyContext = privacyContext

        # Addes the HTML5 script line to the widget's embed code
        # @var bool
        self.addEmbedHtml5Support = addEmbedHtml5Support

        # @var string
        self.roles = roles


    PROPERTY_LOADERS = {
        'id': getXmlNodeText, 
        'sourceWidgetId': getXmlNodeText, 
        'rootWidgetId': getXmlNodeText, 
        'partnerId': getXmlNodeInt, 
        'entryId': getXmlNodeText, 
        'uiConfId': getXmlNodeInt, 
        'securityType': (VidiunEnumsFactory.createInt, "VidiunWidgetSecurityType"), 
        'securityPolicy': getXmlNodeInt, 
        'createdAt': getXmlNodeInt, 
        'updatedAt': getXmlNodeInt, 
        'partnerData': getXmlNodeText, 
        'widgetHTML': getXmlNodeText, 
        'enforceEntitlement': getXmlNodeBool, 
        'privacyContext': getXmlNodeText, 
        'addEmbedHtml5Support': getXmlNodeBool, 
        'roles': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, VidiunWidget.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectBase.toParams(self)
        vparams.put("objectType", "VidiunWidget")
        vparams.addStringIfDefined("sourceWidgetId", self.sourceWidgetId)
        vparams.addStringIfDefined("entryId", self.entryId)
        vparams.addIntIfDefined("uiConfId", self.uiConfId)
        vparams.addIntEnumIfDefined("securityType", self.securityType)
        vparams.addIntIfDefined("securityPolicy", self.securityPolicy)
        vparams.addStringIfDefined("partnerData", self.partnerData)
        vparams.addBoolIfDefined("enforceEntitlement", self.enforceEntitlement)
        vparams.addStringIfDefined("privacyContext", self.privacyContext)
        vparams.addBoolIfDefined("addEmbedHtml5Support", self.addEmbedHtml5Support)
        vparams.addStringIfDefined("roles", self.roles)
        return vparams

    def getId(self):
        return self.id

    def getSourceWidgetId(self):
        return self.sourceWidgetId

    def setSourceWidgetId(self, newSourceWidgetId):
        self.sourceWidgetId = newSourceWidgetId

    def getRootWidgetId(self):
        return self.rootWidgetId

    def getPartnerId(self):
        return self.partnerId

    def getEntryId(self):
        return self.entryId

    def setEntryId(self, newEntryId):
        self.entryId = newEntryId

    def getUiConfId(self):
        return self.uiConfId

    def setUiConfId(self, newUiConfId):
        self.uiConfId = newUiConfId

    def getSecurityType(self):
        return self.securityType

    def setSecurityType(self, newSecurityType):
        self.securityType = newSecurityType

    def getSecurityPolicy(self):
        return self.securityPolicy

    def setSecurityPolicy(self, newSecurityPolicy):
        self.securityPolicy = newSecurityPolicy

    def getCreatedAt(self):
        return self.createdAt

    def getUpdatedAt(self):
        return self.updatedAt

    def getPartnerData(self):
        return self.partnerData

    def setPartnerData(self, newPartnerData):
        self.partnerData = newPartnerData

    def getWidgetHTML(self):
        return self.widgetHTML

    def getEnforceEntitlement(self):
        return self.enforceEntitlement

    def setEnforceEntitlement(self, newEnforceEntitlement):
        self.enforceEntitlement = newEnforceEntitlement

    def getPrivacyContext(self):
        return self.privacyContext

    def setPrivacyContext(self, newPrivacyContext):
        self.privacyContext = newPrivacyContext

    def getAddEmbedHtml5Support(self):
        return self.addEmbedHtml5Support

    def setAddEmbedHtml5Support(self, newAddEmbedHtml5Support):
        self.addEmbedHtml5Support = newAddEmbedHtml5Support

    def getRoles(self):
        return self.roles

    def setRoles(self, newRoles):
        self.roles = newRoles


# @package Vidiun
# @subpackage Client
class VidiunBatchJobBaseFilter(VidiunFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idGreaterThanOrEqual=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            partnerIdNotIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            executionAttemptsGreaterThanOrEqual=NotImplemented,
            executionAttemptsLessThanOrEqual=NotImplemented,
            lockVersionGreaterThanOrEqual=NotImplemented,
            lockVersionLessThanOrEqual=NotImplemented,
            entryIdEqual=NotImplemented,
            jobTypeEqual=NotImplemented,
            jobTypeIn=NotImplemented,
            jobTypeNotIn=NotImplemented,
            jobSubTypeEqual=NotImplemented,
            jobSubTypeIn=NotImplemented,
            jobSubTypeNotIn=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented,
            statusNotIn=NotImplemented,
            priorityGreaterThanOrEqual=NotImplemented,
            priorityLessThanOrEqual=NotImplemented,
            priorityEqual=NotImplemented,
            priorityIn=NotImplemented,
            priorityNotIn=NotImplemented,
            batchVersionGreaterThanOrEqual=NotImplemented,
            batchVersionLessThanOrEqual=NotImplemented,
            batchVersionEqual=NotImplemented,
            queueTimeGreaterThanOrEqual=NotImplemented,
            queueTimeLessThanOrEqual=NotImplemented,
            finishTimeGreaterThanOrEqual=NotImplemented,
            finishTimeLessThanOrEqual=NotImplemented,
            errTypeEqual=NotImplemented,
            errTypeIn=NotImplemented,
            errTypeNotIn=NotImplemented,
            errNumberEqual=NotImplemented,
            errNumberIn=NotImplemented,
            errNumberNotIn=NotImplemented,
            estimatedEffortLessThan=NotImplemented,
            estimatedEffortGreaterThan=NotImplemented,
            urgencyLessThanOrEqual=NotImplemented,
            urgencyGreaterThanOrEqual=NotImplemented):
        VidiunFilter.__init__(self,
            orderBy,
            advancedSearch)

        # @var int
        self.idEqual = idEqual

        # @var int
        self.idGreaterThanOrEqual = idGreaterThanOrEqual

        # @var int
        self.partnerIdEqual = partnerIdEqual

        # @var string
        self.partnerIdIn = partnerIdIn

        # @var string
        self.partnerIdNotIn = partnerIdNotIn

        # @var int
        self.createdAtGreaterThanOrEqual = createdAtGreaterThanOrEqual

        # @var int
        self.createdAtLessThanOrEqual = createdAtLessThanOrEqual

        # @var int
        self.updatedAtGreaterThanOrEqual = updatedAtGreaterThanOrEqual

        # @var int
        self.updatedAtLessThanOrEqual = updatedAtLessThanOrEqual

        # @var int
        self.executionAttemptsGreaterThanOrEqual = executionAttemptsGreaterThanOrEqual

        # @var int
        self.executionAttemptsLessThanOrEqual = executionAttemptsLessThanOrEqual

        # @var int
        self.lockVersionGreaterThanOrEqual = lockVersionGreaterThanOrEqual

        # @var int
        self.lockVersionLessThanOrEqual = lockVersionLessThanOrEqual

        # @var string
        self.entryIdEqual = entryIdEqual

        # @var VidiunBatchJobType
        self.jobTypeEqual = jobTypeEqual

        # @var string
        self.jobTypeIn = jobTypeIn

        # @var string
        self.jobTypeNotIn = jobTypeNotIn

        # @var int
        self.jobSubTypeEqual = jobSubTypeEqual

        # @var string
        self.jobSubTypeIn = jobSubTypeIn

        # @var string
        self.jobSubTypeNotIn = jobSubTypeNotIn

        # @var VidiunBatchJobStatus
        self.statusEqual = statusEqual

        # @var string
        self.statusIn = statusIn

        # @var string
        self.statusNotIn = statusNotIn

        # @var int
        self.priorityGreaterThanOrEqual = priorityGreaterThanOrEqual

        # @var int
        self.priorityLessThanOrEqual = priorityLessThanOrEqual

        # @var int
        self.priorityEqual = priorityEqual

        # @var string
        self.priorityIn = priorityIn

        # @var string
        self.priorityNotIn = priorityNotIn

        # @var int
        self.batchVersionGreaterThanOrEqual = batchVersionGreaterThanOrEqual

        # @var int
        self.batchVersionLessThanOrEqual = batchVersionLessThanOrEqual

        # @var int
        self.batchVersionEqual = batchVersionEqual

        # @var int
        self.queueTimeGreaterThanOrEqual = queueTimeGreaterThanOrEqual

        # @var int
        self.queueTimeLessThanOrEqual = queueTimeLessThanOrEqual

        # @var int
        self.finishTimeGreaterThanOrEqual = finishTimeGreaterThanOrEqual

        # @var int
        self.finishTimeLessThanOrEqual = finishTimeLessThanOrEqual

        # @var VidiunBatchJobErrorTypes
        self.errTypeEqual = errTypeEqual

        # @var string
        self.errTypeIn = errTypeIn

        # @var string
        self.errTypeNotIn = errTypeNotIn

        # @var int
        self.errNumberEqual = errNumberEqual

        # @var string
        self.errNumberIn = errNumberIn

        # @var string
        self.errNumberNotIn = errNumberNotIn

        # @var int
        self.estimatedEffortLessThan = estimatedEffortLessThan

        # @var int
        self.estimatedEffortGreaterThan = estimatedEffortGreaterThan

        # @var int
        self.urgencyLessThanOrEqual = urgencyLessThanOrEqual

        # @var int
        self.urgencyGreaterThanOrEqual = urgencyGreaterThanOrEqual


    PROPERTY_LOADERS = {
        'idEqual': getXmlNodeInt, 
        'idGreaterThanOrEqual': getXmlNodeInt, 
        'partnerIdEqual': getXmlNodeInt, 
        'partnerIdIn': getXmlNodeText, 
        'partnerIdNotIn': getXmlNodeText, 
        'createdAtGreaterThanOrEqual': getXmlNodeInt, 
        'createdAtLessThanOrEqual': getXmlNodeInt, 
        'updatedAtGreaterThanOrEqual': getXmlNodeInt, 
        'updatedAtLessThanOrEqual': getXmlNodeInt, 
        'executionAttemptsGreaterThanOrEqual': getXmlNodeInt, 
        'executionAttemptsLessThanOrEqual': getXmlNodeInt, 
        'lockVersionGreaterThanOrEqual': getXmlNodeInt, 
        'lockVersionLessThanOrEqual': getXmlNodeInt, 
        'entryIdEqual': getXmlNodeText, 
        'jobTypeEqual': (VidiunEnumsFactory.createString, "VidiunBatchJobType"), 
        'jobTypeIn': getXmlNodeText, 
        'jobTypeNotIn': getXmlNodeText, 
        'jobSubTypeEqual': getXmlNodeInt, 
        'jobSubTypeIn': getXmlNodeText, 
        'jobSubTypeNotIn': getXmlNodeText, 
        'statusEqual': (VidiunEnumsFactory.createInt, "VidiunBatchJobStatus"), 
        'statusIn': getXmlNodeText, 
        'statusNotIn': getXmlNodeText, 
        'priorityGreaterThanOrEqual': getXmlNodeInt, 
        'priorityLessThanOrEqual': getXmlNodeInt, 
        'priorityEqual': getXmlNodeInt, 
        'priorityIn': getXmlNodeText, 
        'priorityNotIn': getXmlNodeText, 
        'batchVersionGreaterThanOrEqual': getXmlNodeInt, 
        'batchVersionLessThanOrEqual': getXmlNodeInt, 
        'batchVersionEqual': getXmlNodeInt, 
        'queueTimeGreaterThanOrEqual': getXmlNodeInt, 
        'queueTimeLessThanOrEqual': getXmlNodeInt, 
        'finishTimeGreaterThanOrEqual': getXmlNodeInt, 
        'finishTimeLessThanOrEqual': getXmlNodeInt, 
        'errTypeEqual': (VidiunEnumsFactory.createInt, "VidiunBatchJobErrorTypes"), 
        'errTypeIn': getXmlNodeText, 
        'errTypeNotIn': getXmlNodeText, 
        'errNumberEqual': getXmlNodeInt, 
        'errNumberIn': getXmlNodeText, 
        'errNumberNotIn': getXmlNodeText, 
        'estimatedEffortLessThan': getXmlNodeInt, 
        'estimatedEffortGreaterThan': getXmlNodeInt, 
        'urgencyLessThanOrEqual': getXmlNodeInt, 
        'urgencyGreaterThanOrEqual': getXmlNodeInt, 
    }

    def fromXml(self, node):
        VidiunFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunBatchJobBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunFilter.toParams(self)
        vparams.put("objectType", "VidiunBatchJobBaseFilter")
        vparams.addIntIfDefined("idEqual", self.idEqual)
        vparams.addIntIfDefined("idGreaterThanOrEqual", self.idGreaterThanOrEqual)
        vparams.addIntIfDefined("partnerIdEqual", self.partnerIdEqual)
        vparams.addStringIfDefined("partnerIdIn", self.partnerIdIn)
        vparams.addStringIfDefined("partnerIdNotIn", self.partnerIdNotIn)
        vparams.addIntIfDefined("createdAtGreaterThanOrEqual", self.createdAtGreaterThanOrEqual)
        vparams.addIntIfDefined("createdAtLessThanOrEqual", self.createdAtLessThanOrEqual)
        vparams.addIntIfDefined("updatedAtGreaterThanOrEqual", self.updatedAtGreaterThanOrEqual)
        vparams.addIntIfDefined("updatedAtLessThanOrEqual", self.updatedAtLessThanOrEqual)
        vparams.addIntIfDefined("executionAttemptsGreaterThanOrEqual", self.executionAttemptsGreaterThanOrEqual)
        vparams.addIntIfDefined("executionAttemptsLessThanOrEqual", self.executionAttemptsLessThanOrEqual)
        vparams.addIntIfDefined("lockVersionGreaterThanOrEqual", self.lockVersionGreaterThanOrEqual)
        vparams.addIntIfDefined("lockVersionLessThanOrEqual", self.lockVersionLessThanOrEqual)
        vparams.addStringIfDefined("entryIdEqual", self.entryIdEqual)
        vparams.addStringEnumIfDefined("jobTypeEqual", self.jobTypeEqual)
        vparams.addStringIfDefined("jobTypeIn", self.jobTypeIn)
        vparams.addStringIfDefined("jobTypeNotIn", self.jobTypeNotIn)
        vparams.addIntIfDefined("jobSubTypeEqual", self.jobSubTypeEqual)
        vparams.addStringIfDefined("jobSubTypeIn", self.jobSubTypeIn)
        vparams.addStringIfDefined("jobSubTypeNotIn", self.jobSubTypeNotIn)
        vparams.addIntEnumIfDefined("statusEqual", self.statusEqual)
        vparams.addStringIfDefined("statusIn", self.statusIn)
        vparams.addStringIfDefined("statusNotIn", self.statusNotIn)
        vparams.addIntIfDefined("priorityGreaterThanOrEqual", self.priorityGreaterThanOrEqual)
        vparams.addIntIfDefined("priorityLessThanOrEqual", self.priorityLessThanOrEqual)
        vparams.addIntIfDefined("priorityEqual", self.priorityEqual)
        vparams.addStringIfDefined("priorityIn", self.priorityIn)
        vparams.addStringIfDefined("priorityNotIn", self.priorityNotIn)
        vparams.addIntIfDefined("batchVersionGreaterThanOrEqual", self.batchVersionGreaterThanOrEqual)
        vparams.addIntIfDefined("batchVersionLessThanOrEqual", self.batchVersionLessThanOrEqual)
        vparams.addIntIfDefined("batchVersionEqual", self.batchVersionEqual)
        vparams.addIntIfDefined("queueTimeGreaterThanOrEqual", self.queueTimeGreaterThanOrEqual)
        vparams.addIntIfDefined("queueTimeLessThanOrEqual", self.queueTimeLessThanOrEqual)
        vparams.addIntIfDefined("finishTimeGreaterThanOrEqual", self.finishTimeGreaterThanOrEqual)
        vparams.addIntIfDefined("finishTimeLessThanOrEqual", self.finishTimeLessThanOrEqual)
        vparams.addIntEnumIfDefined("errTypeEqual", self.errTypeEqual)
        vparams.addStringIfDefined("errTypeIn", self.errTypeIn)
        vparams.addStringIfDefined("errTypeNotIn", self.errTypeNotIn)
        vparams.addIntIfDefined("errNumberEqual", self.errNumberEqual)
        vparams.addStringIfDefined("errNumberIn", self.errNumberIn)
        vparams.addStringIfDefined("errNumberNotIn", self.errNumberNotIn)
        vparams.addIntIfDefined("estimatedEffortLessThan", self.estimatedEffortLessThan)
        vparams.addIntIfDefined("estimatedEffortGreaterThan", self.estimatedEffortGreaterThan)
        vparams.addIntIfDefined("urgencyLessThanOrEqual", self.urgencyLessThanOrEqual)
        vparams.addIntIfDefined("urgencyGreaterThanOrEqual", self.urgencyGreaterThanOrEqual)
        return vparams

    def getIdEqual(self):
        return self.idEqual

    def setIdEqual(self, newIdEqual):
        self.idEqual = newIdEqual

    def getIdGreaterThanOrEqual(self):
        return self.idGreaterThanOrEqual

    def setIdGreaterThanOrEqual(self, newIdGreaterThanOrEqual):
        self.idGreaterThanOrEqual = newIdGreaterThanOrEqual

    def getPartnerIdEqual(self):
        return self.partnerIdEqual

    def setPartnerIdEqual(self, newPartnerIdEqual):
        self.partnerIdEqual = newPartnerIdEqual

    def getPartnerIdIn(self):
        return self.partnerIdIn

    def setPartnerIdIn(self, newPartnerIdIn):
        self.partnerIdIn = newPartnerIdIn

    def getPartnerIdNotIn(self):
        return self.partnerIdNotIn

    def setPartnerIdNotIn(self, newPartnerIdNotIn):
        self.partnerIdNotIn = newPartnerIdNotIn

    def getCreatedAtGreaterThanOrEqual(self):
        return self.createdAtGreaterThanOrEqual

    def setCreatedAtGreaterThanOrEqual(self, newCreatedAtGreaterThanOrEqual):
        self.createdAtGreaterThanOrEqual = newCreatedAtGreaterThanOrEqual

    def getCreatedAtLessThanOrEqual(self):
        return self.createdAtLessThanOrEqual

    def setCreatedAtLessThanOrEqual(self, newCreatedAtLessThanOrEqual):
        self.createdAtLessThanOrEqual = newCreatedAtLessThanOrEqual

    def getUpdatedAtGreaterThanOrEqual(self):
        return self.updatedAtGreaterThanOrEqual

    def setUpdatedAtGreaterThanOrEqual(self, newUpdatedAtGreaterThanOrEqual):
        self.updatedAtGreaterThanOrEqual = newUpdatedAtGreaterThanOrEqual

    def getUpdatedAtLessThanOrEqual(self):
        return self.updatedAtLessThanOrEqual

    def setUpdatedAtLessThanOrEqual(self, newUpdatedAtLessThanOrEqual):
        self.updatedAtLessThanOrEqual = newUpdatedAtLessThanOrEqual

    def getExecutionAttemptsGreaterThanOrEqual(self):
        return self.executionAttemptsGreaterThanOrEqual

    def setExecutionAttemptsGreaterThanOrEqual(self, newExecutionAttemptsGreaterThanOrEqual):
        self.executionAttemptsGreaterThanOrEqual = newExecutionAttemptsGreaterThanOrEqual

    def getExecutionAttemptsLessThanOrEqual(self):
        return self.executionAttemptsLessThanOrEqual

    def setExecutionAttemptsLessThanOrEqual(self, newExecutionAttemptsLessThanOrEqual):
        self.executionAttemptsLessThanOrEqual = newExecutionAttemptsLessThanOrEqual

    def getLockVersionGreaterThanOrEqual(self):
        return self.lockVersionGreaterThanOrEqual

    def setLockVersionGreaterThanOrEqual(self, newLockVersionGreaterThanOrEqual):
        self.lockVersionGreaterThanOrEqual = newLockVersionGreaterThanOrEqual

    def getLockVersionLessThanOrEqual(self):
        return self.lockVersionLessThanOrEqual

    def setLockVersionLessThanOrEqual(self, newLockVersionLessThanOrEqual):
        self.lockVersionLessThanOrEqual = newLockVersionLessThanOrEqual

    def getEntryIdEqual(self):
        return self.entryIdEqual

    def setEntryIdEqual(self, newEntryIdEqual):
        self.entryIdEqual = newEntryIdEqual

    def getJobTypeEqual(self):
        return self.jobTypeEqual

    def setJobTypeEqual(self, newJobTypeEqual):
        self.jobTypeEqual = newJobTypeEqual

    def getJobTypeIn(self):
        return self.jobTypeIn

    def setJobTypeIn(self, newJobTypeIn):
        self.jobTypeIn = newJobTypeIn

    def getJobTypeNotIn(self):
        return self.jobTypeNotIn

    def setJobTypeNotIn(self, newJobTypeNotIn):
        self.jobTypeNotIn = newJobTypeNotIn

    def getJobSubTypeEqual(self):
        return self.jobSubTypeEqual

    def setJobSubTypeEqual(self, newJobSubTypeEqual):
        self.jobSubTypeEqual = newJobSubTypeEqual

    def getJobSubTypeIn(self):
        return self.jobSubTypeIn

    def setJobSubTypeIn(self, newJobSubTypeIn):
        self.jobSubTypeIn = newJobSubTypeIn

    def getJobSubTypeNotIn(self):
        return self.jobSubTypeNotIn

    def setJobSubTypeNotIn(self, newJobSubTypeNotIn):
        self.jobSubTypeNotIn = newJobSubTypeNotIn

    def getStatusEqual(self):
        return self.statusEqual

    def setStatusEqual(self, newStatusEqual):
        self.statusEqual = newStatusEqual

    def getStatusIn(self):
        return self.statusIn

    def setStatusIn(self, newStatusIn):
        self.statusIn = newStatusIn

    def getStatusNotIn(self):
        return self.statusNotIn

    def setStatusNotIn(self, newStatusNotIn):
        self.statusNotIn = newStatusNotIn

    def getPriorityGreaterThanOrEqual(self):
        return self.priorityGreaterThanOrEqual

    def setPriorityGreaterThanOrEqual(self, newPriorityGreaterThanOrEqual):
        self.priorityGreaterThanOrEqual = newPriorityGreaterThanOrEqual

    def getPriorityLessThanOrEqual(self):
        return self.priorityLessThanOrEqual

    def setPriorityLessThanOrEqual(self, newPriorityLessThanOrEqual):
        self.priorityLessThanOrEqual = newPriorityLessThanOrEqual

    def getPriorityEqual(self):
        return self.priorityEqual

    def setPriorityEqual(self, newPriorityEqual):
        self.priorityEqual = newPriorityEqual

    def getPriorityIn(self):
        return self.priorityIn

    def setPriorityIn(self, newPriorityIn):
        self.priorityIn = newPriorityIn

    def getPriorityNotIn(self):
        return self.priorityNotIn

    def setPriorityNotIn(self, newPriorityNotIn):
        self.priorityNotIn = newPriorityNotIn

    def getBatchVersionGreaterThanOrEqual(self):
        return self.batchVersionGreaterThanOrEqual

    def setBatchVersionGreaterThanOrEqual(self, newBatchVersionGreaterThanOrEqual):
        self.batchVersionGreaterThanOrEqual = newBatchVersionGreaterThanOrEqual

    def getBatchVersionLessThanOrEqual(self):
        return self.batchVersionLessThanOrEqual

    def setBatchVersionLessThanOrEqual(self, newBatchVersionLessThanOrEqual):
        self.batchVersionLessThanOrEqual = newBatchVersionLessThanOrEqual

    def getBatchVersionEqual(self):
        return self.batchVersionEqual

    def setBatchVersionEqual(self, newBatchVersionEqual):
        self.batchVersionEqual = newBatchVersionEqual

    def getQueueTimeGreaterThanOrEqual(self):
        return self.queueTimeGreaterThanOrEqual

    def setQueueTimeGreaterThanOrEqual(self, newQueueTimeGreaterThanOrEqual):
        self.queueTimeGreaterThanOrEqual = newQueueTimeGreaterThanOrEqual

    def getQueueTimeLessThanOrEqual(self):
        return self.queueTimeLessThanOrEqual

    def setQueueTimeLessThanOrEqual(self, newQueueTimeLessThanOrEqual):
        self.queueTimeLessThanOrEqual = newQueueTimeLessThanOrEqual

    def getFinishTimeGreaterThanOrEqual(self):
        return self.finishTimeGreaterThanOrEqual

    def setFinishTimeGreaterThanOrEqual(self, newFinishTimeGreaterThanOrEqual):
        self.finishTimeGreaterThanOrEqual = newFinishTimeGreaterThanOrEqual

    def getFinishTimeLessThanOrEqual(self):
        return self.finishTimeLessThanOrEqual

    def setFinishTimeLessThanOrEqual(self, newFinishTimeLessThanOrEqual):
        self.finishTimeLessThanOrEqual = newFinishTimeLessThanOrEqual

    def getErrTypeEqual(self):
        return self.errTypeEqual

    def setErrTypeEqual(self, newErrTypeEqual):
        self.errTypeEqual = newErrTypeEqual

    def getErrTypeIn(self):
        return self.errTypeIn

    def setErrTypeIn(self, newErrTypeIn):
        self.errTypeIn = newErrTypeIn

    def getErrTypeNotIn(self):
        return self.errTypeNotIn

    def setErrTypeNotIn(self, newErrTypeNotIn):
        self.errTypeNotIn = newErrTypeNotIn

    def getErrNumberEqual(self):
        return self.errNumberEqual

    def setErrNumberEqual(self, newErrNumberEqual):
        self.errNumberEqual = newErrNumberEqual

    def getErrNumberIn(self):
        return self.errNumberIn

    def setErrNumberIn(self, newErrNumberIn):
        self.errNumberIn = newErrNumberIn

    def getErrNumberNotIn(self):
        return self.errNumberNotIn

    def setErrNumberNotIn(self, newErrNumberNotIn):
        self.errNumberNotIn = newErrNumberNotIn

    def getEstimatedEffortLessThan(self):
        return self.estimatedEffortLessThan

    def setEstimatedEffortLessThan(self, newEstimatedEffortLessThan):
        self.estimatedEffortLessThan = newEstimatedEffortLessThan

    def getEstimatedEffortGreaterThan(self):
        return self.estimatedEffortGreaterThan

    def setEstimatedEffortGreaterThan(self, newEstimatedEffortGreaterThan):
        self.estimatedEffortGreaterThan = newEstimatedEffortGreaterThan

    def getUrgencyLessThanOrEqual(self):
        return self.urgencyLessThanOrEqual

    def setUrgencyLessThanOrEqual(self, newUrgencyLessThanOrEqual):
        self.urgencyLessThanOrEqual = newUrgencyLessThanOrEqual

    def getUrgencyGreaterThanOrEqual(self):
        return self.urgencyGreaterThanOrEqual

    def setUrgencyGreaterThanOrEqual(self, newUrgencyGreaterThanOrEqual):
        self.urgencyGreaterThanOrEqual = newUrgencyGreaterThanOrEqual


# @package Vidiun
# @subpackage Client
class VidiunBatchJobFilter(VidiunBatchJobBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idGreaterThanOrEqual=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            partnerIdNotIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            executionAttemptsGreaterThanOrEqual=NotImplemented,
            executionAttemptsLessThanOrEqual=NotImplemented,
            lockVersionGreaterThanOrEqual=NotImplemented,
            lockVersionLessThanOrEqual=NotImplemented,
            entryIdEqual=NotImplemented,
            jobTypeEqual=NotImplemented,
            jobTypeIn=NotImplemented,
            jobTypeNotIn=NotImplemented,
            jobSubTypeEqual=NotImplemented,
            jobSubTypeIn=NotImplemented,
            jobSubTypeNotIn=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented,
            statusNotIn=NotImplemented,
            priorityGreaterThanOrEqual=NotImplemented,
            priorityLessThanOrEqual=NotImplemented,
            priorityEqual=NotImplemented,
            priorityIn=NotImplemented,
            priorityNotIn=NotImplemented,
            batchVersionGreaterThanOrEqual=NotImplemented,
            batchVersionLessThanOrEqual=NotImplemented,
            batchVersionEqual=NotImplemented,
            queueTimeGreaterThanOrEqual=NotImplemented,
            queueTimeLessThanOrEqual=NotImplemented,
            finishTimeGreaterThanOrEqual=NotImplemented,
            finishTimeLessThanOrEqual=NotImplemented,
            errTypeEqual=NotImplemented,
            errTypeIn=NotImplemented,
            errTypeNotIn=NotImplemented,
            errNumberEqual=NotImplemented,
            errNumberIn=NotImplemented,
            errNumberNotIn=NotImplemented,
            estimatedEffortLessThan=NotImplemented,
            estimatedEffortGreaterThan=NotImplemented,
            urgencyLessThanOrEqual=NotImplemented,
            urgencyGreaterThanOrEqual=NotImplemented):
        VidiunBatchJobBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idGreaterThanOrEqual,
            partnerIdEqual,
            partnerIdIn,
            partnerIdNotIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            executionAttemptsGreaterThanOrEqual,
            executionAttemptsLessThanOrEqual,
            lockVersionGreaterThanOrEqual,
            lockVersionLessThanOrEqual,
            entryIdEqual,
            jobTypeEqual,
            jobTypeIn,
            jobTypeNotIn,
            jobSubTypeEqual,
            jobSubTypeIn,
            jobSubTypeNotIn,
            statusEqual,
            statusIn,
            statusNotIn,
            priorityGreaterThanOrEqual,
            priorityLessThanOrEqual,
            priorityEqual,
            priorityIn,
            priorityNotIn,
            batchVersionGreaterThanOrEqual,
            batchVersionLessThanOrEqual,
            batchVersionEqual,
            queueTimeGreaterThanOrEqual,
            queueTimeLessThanOrEqual,
            finishTimeGreaterThanOrEqual,
            finishTimeLessThanOrEqual,
            errTypeEqual,
            errTypeIn,
            errTypeNotIn,
            errNumberEqual,
            errNumberIn,
            errNumberNotIn,
            estimatedEffortLessThan,
            estimatedEffortGreaterThan,
            urgencyLessThanOrEqual,
            urgencyGreaterThanOrEqual)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunBatchJobBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunBatchJobFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunBatchJobBaseFilter.toParams(self)
        vparams.put("objectType", "VidiunBatchJobFilter")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunAccessControlBlockAction(VidiunRuleAction):
    def __init__(self,
            type=NotImplemented):
        VidiunRuleAction.__init__(self,
            type)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunRuleAction.fromXml(self, node)
        self.fromXmlImpl(node, VidiunAccessControlBlockAction.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunRuleAction.toParams(self)
        vparams.put("objectType", "VidiunAccessControlBlockAction")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunAccessControlLimitDeliveryProfilesAction(VidiunRuleAction):
    def __init__(self,
            type=NotImplemented,
            deliveryProfileIds=NotImplemented,
            isBlockedList=NotImplemented):
        VidiunRuleAction.__init__(self,
            type)

        # Comma separated list of delivery profile ids
        # @var string
        self.deliveryProfileIds = deliveryProfileIds

        # @var bool
        self.isBlockedList = isBlockedList


    PROPERTY_LOADERS = {
        'deliveryProfileIds': getXmlNodeText, 
        'isBlockedList': getXmlNodeBool, 
    }

    def fromXml(self, node):
        VidiunRuleAction.fromXml(self, node)
        self.fromXmlImpl(node, VidiunAccessControlLimitDeliveryProfilesAction.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunRuleAction.toParams(self)
        vparams.put("objectType", "VidiunAccessControlLimitDeliveryProfilesAction")
        vparams.addStringIfDefined("deliveryProfileIds", self.deliveryProfileIds)
        vparams.addBoolIfDefined("isBlockedList", self.isBlockedList)
        return vparams

    def getDeliveryProfileIds(self):
        return self.deliveryProfileIds

    def setDeliveryProfileIds(self, newDeliveryProfileIds):
        self.deliveryProfileIds = newDeliveryProfileIds

    def getIsBlockedList(self):
        return self.isBlockedList

    def setIsBlockedList(self, newIsBlockedList):
        self.isBlockedList = newIsBlockedList


# @package Vidiun
# @subpackage Client
class VidiunAccessControlLimitFlavorsAction(VidiunRuleAction):
    def __init__(self,
            type=NotImplemented,
            flavorParamsIds=NotImplemented,
            isBlockedList=NotImplemented):
        VidiunRuleAction.__init__(self,
            type)

        # Comma separated list of flavor ids
        # @var string
        self.flavorParamsIds = flavorParamsIds

        # @var bool
        self.isBlockedList = isBlockedList


    PROPERTY_LOADERS = {
        'flavorParamsIds': getXmlNodeText, 
        'isBlockedList': getXmlNodeBool, 
    }

    def fromXml(self, node):
        VidiunRuleAction.fromXml(self, node)
        self.fromXmlImpl(node, VidiunAccessControlLimitFlavorsAction.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunRuleAction.toParams(self)
        vparams.put("objectType", "VidiunAccessControlLimitFlavorsAction")
        vparams.addStringIfDefined("flavorParamsIds", self.flavorParamsIds)
        vparams.addBoolIfDefined("isBlockedList", self.isBlockedList)
        return vparams

    def getFlavorParamsIds(self):
        return self.flavorParamsIds

    def setFlavorParamsIds(self, newFlavorParamsIds):
        self.flavorParamsIds = newFlavorParamsIds

    def getIsBlockedList(self):
        return self.isBlockedList

    def setIsBlockedList(self, newIsBlockedList):
        self.isBlockedList = newIsBlockedList


# @package Vidiun
# @subpackage Client
class VidiunAccessControlListResponse(VidiunListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        VidiunListResponse.__init__(self,
            totalCount)

        # @var array of VidiunAccessControl
        # @readonly
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (VidiunObjectFactory.createArray, VidiunAccessControl), 
    }

    def fromXml(self, node):
        VidiunListResponse.fromXml(self, node)
        self.fromXmlImpl(node, VidiunAccessControlListResponse.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunListResponse.toParams(self)
        vparams.put("objectType", "VidiunAccessControlListResponse")
        return vparams

    def getObjects(self):
        return self.objects


# @package Vidiun
# @subpackage Client
class VidiunAccessControlModifyRequestHostRegexAction(VidiunRuleAction):
    def __init__(self,
            type=NotImplemented,
            pattern=NotImplemented,
            replacement=NotImplemented):
        VidiunRuleAction.__init__(self,
            type)

        # Request host regex pattern
        # @var string
        self.pattern = pattern

        # Request host regex replacment
        # @var string
        self.replacement = replacement


    PROPERTY_LOADERS = {
        'pattern': getXmlNodeText, 
        'replacement': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunRuleAction.fromXml(self, node)
        self.fromXmlImpl(node, VidiunAccessControlModifyRequestHostRegexAction.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunRuleAction.toParams(self)
        vparams.put("objectType", "VidiunAccessControlModifyRequestHostRegexAction")
        vparams.addStringIfDefined("pattern", self.pattern)
        vparams.addStringIfDefined("replacement", self.replacement)
        return vparams

    def getPattern(self):
        return self.pattern

    def setPattern(self, newPattern):
        self.pattern = newPattern

    def getReplacement(self):
        return self.replacement

    def setReplacement(self, newReplacement):
        self.replacement = newReplacement


# @package Vidiun
# @subpackage Client
class VidiunAccessControlPreviewAction(VidiunRuleAction):
    def __init__(self,
            type=NotImplemented,
            limit=NotImplemented):
        VidiunRuleAction.__init__(self,
            type)

        # @var int
        self.limit = limit


    PROPERTY_LOADERS = {
        'limit': getXmlNodeInt, 
    }

    def fromXml(self, node):
        VidiunRuleAction.fromXml(self, node)
        self.fromXmlImpl(node, VidiunAccessControlPreviewAction.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunRuleAction.toParams(self)
        vparams.put("objectType", "VidiunAccessControlPreviewAction")
        vparams.addIntIfDefined("limit", self.limit)
        return vparams

    def getLimit(self):
        return self.limit

    def setLimit(self, newLimit):
        self.limit = newLimit


# @package Vidiun
# @subpackage Client
class VidiunAccessControlProfileListResponse(VidiunListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        VidiunListResponse.__init__(self,
            totalCount)

        # @var array of VidiunAccessControlProfile
        # @readonly
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (VidiunObjectFactory.createArray, VidiunAccessControlProfile), 
    }

    def fromXml(self, node):
        VidiunListResponse.fromXml(self, node)
        self.fromXmlImpl(node, VidiunAccessControlProfileListResponse.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunListResponse.toParams(self)
        vparams.put("objectType", "VidiunAccessControlProfileListResponse")
        return vparams

    def getObjects(self):
        return self.objects


# @package Vidiun
# @subpackage Client
class VidiunAccessControlServeRemoteEdgeServerAction(VidiunRuleAction):
    def __init__(self,
            type=NotImplemented,
            edgeServerIds=NotImplemented):
        VidiunRuleAction.__init__(self,
            type)

        # Comma separated list of edge servers playBack should be done from
        # @var string
        self.edgeServerIds = edgeServerIds


    PROPERTY_LOADERS = {
        'edgeServerIds': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunRuleAction.fromXml(self, node)
        self.fromXmlImpl(node, VidiunAccessControlServeRemoteEdgeServerAction.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunRuleAction.toParams(self)
        vparams.put("objectType", "VidiunAccessControlServeRemoteEdgeServerAction")
        vparams.addStringIfDefined("edgeServerIds", self.edgeServerIds)
        return vparams

    def getEdgeServerIds(self):
        return self.edgeServerIds

    def setEdgeServerIds(self, newEdgeServerIds):
        self.edgeServerIds = newEdgeServerIds


# @package Vidiun
# @subpackage Client
class VidiunAdminUser(VidiunUser):
    def __init__(self,
            id=NotImplemented,
            partnerId=NotImplemented,
            type=NotImplemented,
            screenName=NotImplemented,
            fullName=NotImplemented,
            email=NotImplemented,
            dateOfBirth=NotImplemented,
            country=NotImplemented,
            state=NotImplemented,
            city=NotImplemented,
            zip=NotImplemented,
            thumbnailUrl=NotImplemented,
            description=NotImplemented,
            tags=NotImplemented,
            adminTags=NotImplemented,
            gender=NotImplemented,
            status=NotImplemented,
            createdAt=NotImplemented,
            updatedAt=NotImplemented,
            partnerData=NotImplemented,
            indexedPartnerDataInt=NotImplemented,
            indexedPartnerDataString=NotImplemented,
            storageSize=NotImplemented,
            password=NotImplemented,
            firstName=NotImplemented,
            lastName=NotImplemented,
            isAdmin=NotImplemented,
            language=NotImplemented,
            lastLoginTime=NotImplemented,
            statusUpdatedAt=NotImplemented,
            deletedAt=NotImplemented,
            loginEnabled=NotImplemented,
            roleIds=NotImplemented,
            roleNames=NotImplemented,
            isAccountOwner=NotImplemented,
            allowedPartnerIds=NotImplemented,
            allowedPartnerPackages=NotImplemented):
        VidiunUser.__init__(self,
            id,
            partnerId,
            type,
            screenName,
            fullName,
            email,
            dateOfBirth,
            country,
            state,
            city,
            zip,
            thumbnailUrl,
            description,
            tags,
            adminTags,
            gender,
            status,
            createdAt,
            updatedAt,
            partnerData,
            indexedPartnerDataInt,
            indexedPartnerDataString,
            storageSize,
            password,
            firstName,
            lastName,
            isAdmin,
            language,
            lastLoginTime,
            statusUpdatedAt,
            deletedAt,
            loginEnabled,
            roleIds,
            roleNames,
            isAccountOwner,
            allowedPartnerIds,
            allowedPartnerPackages)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunUser.fromXml(self, node)
        self.fromXmlImpl(node, VidiunAdminUser.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunUser.toParams(self)
        vparams.put("objectType", "VidiunAdminUser")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunAmazonS3StorageProfile(VidiunStorageProfile):
    def __init__(self,
            id=NotImplemented,
            createdAt=NotImplemented,
            updatedAt=NotImplemented,
            partnerId=NotImplemented,
            name=NotImplemented,
            systemName=NotImplemented,
            desciption=NotImplemented,
            status=NotImplemented,
            protocol=NotImplemented,
            storageUrl=NotImplemented,
            storageBaseDir=NotImplemented,
            storageUsername=NotImplemented,
            storagePassword=NotImplemented,
            storageFtpPassiveMode=NotImplemented,
            minFileSize=NotImplemented,
            maxFileSize=NotImplemented,
            flavorParamsIds=NotImplemented,
            maxConcurrentConnections=NotImplemented,
            pathManagerClass=NotImplemented,
            pathManagerParams=NotImplemented,
            trigger=NotImplemented,
            deliveryPriority=NotImplemented,
            deliveryStatus=NotImplemented,
            readyBehavior=NotImplemented,
            allowAutoDelete=NotImplemented,
            createFileLink=NotImplemented,
            rules=NotImplemented,
            deliveryProfileIds=NotImplemented,
            privateKey=NotImplemented,
            publicKey=NotImplemented,
            passPhrase=NotImplemented,
            filesPermissionInS3=NotImplemented,
            s3Region=NotImplemented,
            sseType=NotImplemented,
            sseVmsKeyId=NotImplemented):
        VidiunStorageProfile.__init__(self,
            id,
            createdAt,
            updatedAt,
            partnerId,
            name,
            systemName,
            desciption,
            status,
            protocol,
            storageUrl,
            storageBaseDir,
            storageUsername,
            storagePassword,
            storageFtpPassiveMode,
            minFileSize,
            maxFileSize,
            flavorParamsIds,
            maxConcurrentConnections,
            pathManagerClass,
            pathManagerParams,
            trigger,
            deliveryPriority,
            deliveryStatus,
            readyBehavior,
            allowAutoDelete,
            createFileLink,
            rules,
            deliveryProfileIds,
            privateKey,
            publicKey,
            passPhrase)

        # @var VidiunAmazonS3StorageProfileFilesPermissionLevel
        self.filesPermissionInS3 = filesPermissionInS3

        # @var string
        self.s3Region = s3Region

        # @var string
        self.sseType = sseType

        # @var string
        self.sseVmsKeyId = sseVmsKeyId


    PROPERTY_LOADERS = {
        'filesPermissionInS3': (VidiunEnumsFactory.createString, "VidiunAmazonS3StorageProfileFilesPermissionLevel"), 
        's3Region': getXmlNodeText, 
        'sseType': getXmlNodeText, 
        'sseVmsKeyId': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunStorageProfile.fromXml(self, node)
        self.fromXmlImpl(node, VidiunAmazonS3StorageProfile.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunStorageProfile.toParams(self)
        vparams.put("objectType", "VidiunAmazonS3StorageProfile")
        vparams.addStringEnumIfDefined("filesPermissionInS3", self.filesPermissionInS3)
        vparams.addStringIfDefined("s3Region", self.s3Region)
        vparams.addStringIfDefined("sseType", self.sseType)
        vparams.addStringIfDefined("sseVmsKeyId", self.sseVmsKeyId)
        return vparams

    def getFilesPermissionInS3(self):
        return self.filesPermissionInS3

    def setFilesPermissionInS3(self, newFilesPermissionInS3):
        self.filesPermissionInS3 = newFilesPermissionInS3

    def getS3Region(self):
        return self.s3Region

    def setS3Region(self, newS3Region):
        self.s3Region = newS3Region

    def getSseType(self):
        return self.sseType

    def setSseType(self, newSseType):
        self.sseType = newSseType

    def getSseVmsKeyId(self):
        return self.sseVmsKeyId

    def setSseVmsKeyId(self, newSseVmsKeyId):
        self.sseVmsKeyId = newSseVmsKeyId


# @package Vidiun
# @subpackage Client
class VidiunApiActionPermissionItem(VidiunPermissionItem):
    def __init__(self,
            id=NotImplemented,
            type=NotImplemented,
            partnerId=NotImplemented,
            tags=NotImplemented,
            createdAt=NotImplemented,
            updatedAt=NotImplemented,
            service=NotImplemented,
            action=NotImplemented):
        VidiunPermissionItem.__init__(self,
            id,
            type,
            partnerId,
            tags,
            createdAt,
            updatedAt)

        # @var string
        self.service = service

        # @var string
        self.action = action


    PROPERTY_LOADERS = {
        'service': getXmlNodeText, 
        'action': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunPermissionItem.fromXml(self, node)
        self.fromXmlImpl(node, VidiunApiActionPermissionItem.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunPermissionItem.toParams(self)
        vparams.put("objectType", "VidiunApiActionPermissionItem")
        vparams.addStringIfDefined("service", self.service)
        vparams.addStringIfDefined("action", self.action)
        return vparams

    def getService(self):
        return self.service

    def setService(self, newService):
        self.service = newService

    def getAction(self):
        return self.action

    def setAction(self, newAction):
        self.action = newAction


# @package Vidiun
# @subpackage Client
class VidiunApiParameterPermissionItem(VidiunPermissionItem):
    def __init__(self,
            id=NotImplemented,
            type=NotImplemented,
            partnerId=NotImplemented,
            tags=NotImplemented,
            createdAt=NotImplemented,
            updatedAt=NotImplemented,
            object=NotImplemented,
            parameter=NotImplemented,
            action=NotImplemented):
        VidiunPermissionItem.__init__(self,
            id,
            type,
            partnerId,
            tags,
            createdAt,
            updatedAt)

        # @var string
        self.object = object

        # @var string
        self.parameter = parameter

        # @var VidiunApiParameterPermissionItemAction
        self.action = action


    PROPERTY_LOADERS = {
        'object': getXmlNodeText, 
        'parameter': getXmlNodeText, 
        'action': (VidiunEnumsFactory.createString, "VidiunApiParameterPermissionItemAction"), 
    }

    def fromXml(self, node):
        VidiunPermissionItem.fromXml(self, node)
        self.fromXmlImpl(node, VidiunApiParameterPermissionItem.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunPermissionItem.toParams(self)
        vparams.put("objectType", "VidiunApiParameterPermissionItem")
        vparams.addStringIfDefined("object", self.object)
        vparams.addStringIfDefined("parameter", self.parameter)
        vparams.addStringEnumIfDefined("action", self.action)
        return vparams

    def getObject(self):
        return self.object

    def setObject(self, newObject):
        self.object = newObject

    def getParameter(self):
        return self.parameter

    def setParameter(self, newParameter):
        self.parameter = newParameter

    def getAction(self):
        return self.action

    def setAction(self, newAction):
        self.action = newAction


# @package Vidiun
# @subpackage Client
class VidiunAppTokenBaseFilter(VidiunFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented):
        VidiunFilter.__init__(self,
            orderBy,
            advancedSearch)

        # @var string
        self.idEqual = idEqual

        # @var string
        self.idIn = idIn

        # @var int
        self.createdAtGreaterThanOrEqual = createdAtGreaterThanOrEqual

        # @var int
        self.createdAtLessThanOrEqual = createdAtLessThanOrEqual

        # @var int
        self.updatedAtGreaterThanOrEqual = updatedAtGreaterThanOrEqual

        # @var int
        self.updatedAtLessThanOrEqual = updatedAtLessThanOrEqual

        # @var VidiunAppTokenStatus
        self.statusEqual = statusEqual

        # @var string
        self.statusIn = statusIn


    PROPERTY_LOADERS = {
        'idEqual': getXmlNodeText, 
        'idIn': getXmlNodeText, 
        'createdAtGreaterThanOrEqual': getXmlNodeInt, 
        'createdAtLessThanOrEqual': getXmlNodeInt, 
        'updatedAtGreaterThanOrEqual': getXmlNodeInt, 
        'updatedAtLessThanOrEqual': getXmlNodeInt, 
        'statusEqual': (VidiunEnumsFactory.createInt, "VidiunAppTokenStatus"), 
        'statusIn': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunAppTokenBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunFilter.toParams(self)
        vparams.put("objectType", "VidiunAppTokenBaseFilter")
        vparams.addStringIfDefined("idEqual", self.idEqual)
        vparams.addStringIfDefined("idIn", self.idIn)
        vparams.addIntIfDefined("createdAtGreaterThanOrEqual", self.createdAtGreaterThanOrEqual)
        vparams.addIntIfDefined("createdAtLessThanOrEqual", self.createdAtLessThanOrEqual)
        vparams.addIntIfDefined("updatedAtGreaterThanOrEqual", self.updatedAtGreaterThanOrEqual)
        vparams.addIntIfDefined("updatedAtLessThanOrEqual", self.updatedAtLessThanOrEqual)
        vparams.addIntEnumIfDefined("statusEqual", self.statusEqual)
        vparams.addStringIfDefined("statusIn", self.statusIn)
        return vparams

    def getIdEqual(self):
        return self.idEqual

    def setIdEqual(self, newIdEqual):
        self.idEqual = newIdEqual

    def getIdIn(self):
        return self.idIn

    def setIdIn(self, newIdIn):
        self.idIn = newIdIn

    def getCreatedAtGreaterThanOrEqual(self):
        return self.createdAtGreaterThanOrEqual

    def setCreatedAtGreaterThanOrEqual(self, newCreatedAtGreaterThanOrEqual):
        self.createdAtGreaterThanOrEqual = newCreatedAtGreaterThanOrEqual

    def getCreatedAtLessThanOrEqual(self):
        return self.createdAtLessThanOrEqual

    def setCreatedAtLessThanOrEqual(self, newCreatedAtLessThanOrEqual):
        self.createdAtLessThanOrEqual = newCreatedAtLessThanOrEqual

    def getUpdatedAtGreaterThanOrEqual(self):
        return self.updatedAtGreaterThanOrEqual

    def setUpdatedAtGreaterThanOrEqual(self, newUpdatedAtGreaterThanOrEqual):
        self.updatedAtGreaterThanOrEqual = newUpdatedAtGreaterThanOrEqual

    def getUpdatedAtLessThanOrEqual(self):
        return self.updatedAtLessThanOrEqual

    def setUpdatedAtLessThanOrEqual(self, newUpdatedAtLessThanOrEqual):
        self.updatedAtLessThanOrEqual = newUpdatedAtLessThanOrEqual

    def getStatusEqual(self):
        return self.statusEqual

    def setStatusEqual(self, newStatusEqual):
        self.statusEqual = newStatusEqual

    def getStatusIn(self):
        return self.statusIn

    def setStatusIn(self, newStatusIn):
        self.statusIn = newStatusIn


# @package Vidiun
# @subpackage Client
class VidiunAppTokenListResponse(VidiunListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        VidiunListResponse.__init__(self,
            totalCount)

        # @var array of VidiunAppToken
        # @readonly
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (VidiunObjectFactory.createArray, VidiunAppToken), 
    }

    def fromXml(self, node):
        VidiunListResponse.fromXml(self, node)
        self.fromXmlImpl(node, VidiunAppTokenListResponse.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunListResponse.toParams(self)
        vparams.put("objectType", "VidiunAppTokenListResponse")
        return vparams

    def getObjects(self):
        return self.objects


# @package Vidiun
# @subpackage Client
class VidiunAssetParamsOutput(VidiunAssetParams):
    def __init__(self,
            id=NotImplemented,
            partnerId=NotImplemented,
            name=NotImplemented,
            systemName=NotImplemented,
            description=NotImplemented,
            createdAt=NotImplemented,
            isSystemDefault=NotImplemented,
            tags=NotImplemented,
            requiredPermissions=NotImplemented,
            sourceRemoteStorageProfileId=NotImplemented,
            remoteStorageProfileIds=NotImplemented,
            mediaParserType=NotImplemented,
            sourceAssetParamsIds=NotImplemented,
            assetParamsId=NotImplemented,
            assetParamsVersion=NotImplemented,
            assetId=NotImplemented,
            assetVersion=NotImplemented,
            readyBehavior=NotImplemented,
            format=NotImplemented):
        VidiunAssetParams.__init__(self,
            id,
            partnerId,
            name,
            systemName,
            description,
            createdAt,
            isSystemDefault,
            tags,
            requiredPermissions,
            sourceRemoteStorageProfileId,
            remoteStorageProfileIds,
            mediaParserType,
            sourceAssetParamsIds)

        # @var int
        self.assetParamsId = assetParamsId

        # @var string
        self.assetParamsVersion = assetParamsVersion

        # @var string
        self.assetId = assetId

        # @var string
        self.assetVersion = assetVersion

        # @var int
        self.readyBehavior = readyBehavior

        # The container format of the Flavor Params
        # @var VidiunContainerFormat
        self.format = format


    PROPERTY_LOADERS = {
        'assetParamsId': getXmlNodeInt, 
        'assetParamsVersion': getXmlNodeText, 
        'assetId': getXmlNodeText, 
        'assetVersion': getXmlNodeText, 
        'readyBehavior': getXmlNodeInt, 
        'format': (VidiunEnumsFactory.createString, "VidiunContainerFormat"), 
    }

    def fromXml(self, node):
        VidiunAssetParams.fromXml(self, node)
        self.fromXmlImpl(node, VidiunAssetParamsOutput.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunAssetParams.toParams(self)
        vparams.put("objectType", "VidiunAssetParamsOutput")
        vparams.addIntIfDefined("assetParamsId", self.assetParamsId)
        vparams.addStringIfDefined("assetParamsVersion", self.assetParamsVersion)
        vparams.addStringIfDefined("assetId", self.assetId)
        vparams.addStringIfDefined("assetVersion", self.assetVersion)
        vparams.addIntIfDefined("readyBehavior", self.readyBehavior)
        vparams.addStringEnumIfDefined("format", self.format)
        return vparams

    def getAssetParamsId(self):
        return self.assetParamsId

    def setAssetParamsId(self, newAssetParamsId):
        self.assetParamsId = newAssetParamsId

    def getAssetParamsVersion(self):
        return self.assetParamsVersion

    def setAssetParamsVersion(self, newAssetParamsVersion):
        self.assetParamsVersion = newAssetParamsVersion

    def getAssetId(self):
        return self.assetId

    def setAssetId(self, newAssetId):
        self.assetId = newAssetId

    def getAssetVersion(self):
        return self.assetVersion

    def setAssetVersion(self, newAssetVersion):
        self.assetVersion = newAssetVersion

    def getReadyBehavior(self):
        return self.readyBehavior

    def setReadyBehavior(self, newReadyBehavior):
        self.readyBehavior = newReadyBehavior

    def getFormat(self):
        return self.format

    def setFormat(self, newFormat):
        self.format = newFormat


# @package Vidiun
# @subpackage Client
class VidiunAssetPropertiesCompareCondition(VidiunCondition):
    def __init__(self,
            type=NotImplemented,
            description=NotImplemented,
            not_=NotImplemented,
            properties=NotImplemented):
        VidiunCondition.__init__(self,
            type,
            description,
            not_)

        # Array of key/value objects that holds the property and the value to find and compare on an asset object
        # @var array of VidiunKeyValue
        self.properties = properties


    PROPERTY_LOADERS = {
        'properties': (VidiunObjectFactory.createArray, VidiunKeyValue), 
    }

    def fromXml(self, node):
        VidiunCondition.fromXml(self, node)
        self.fromXmlImpl(node, VidiunAssetPropertiesCompareCondition.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunCondition.toParams(self)
        vparams.put("objectType", "VidiunAssetPropertiesCompareCondition")
        vparams.addArrayIfDefined("properties", self.properties)
        return vparams

    def getProperties(self):
        return self.properties

    def setProperties(self, newProperties):
        self.properties = newProperties


# @package Vidiun
# @subpackage Client
class VidiunAssetsParamsResourceContainers(VidiunResource):
    def __init__(self,
            resources=NotImplemented):
        VidiunResource.__init__(self)

        # Array of resources associated with asset params ids
        # @var array of VidiunAssetParamsResourceContainer
        self.resources = resources


    PROPERTY_LOADERS = {
        'resources': (VidiunObjectFactory.createArray, VidiunAssetParamsResourceContainer), 
    }

    def fromXml(self, node):
        VidiunResource.fromXml(self, node)
        self.fromXmlImpl(node, VidiunAssetsParamsResourceContainers.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunResource.toParams(self)
        vparams.put("objectType", "VidiunAssetsParamsResourceContainers")
        vparams.addArrayIfDefined("resources", self.resources)
        return vparams

    def getResources(self):
        return self.resources

    def setResources(self, newResources):
        self.resources = newResources


# @package Vidiun
# @subpackage Client
class VidiunAttributeCondition(VidiunSearchItem):
    def __init__(self,
            value=NotImplemented):
        VidiunSearchItem.__init__(self)

        # @var string
        self.value = value


    PROPERTY_LOADERS = {
        'value': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunSearchItem.fromXml(self, node)
        self.fromXmlImpl(node, VidiunAttributeCondition.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunSearchItem.toParams(self)
        vparams.put("objectType", "VidiunAttributeCondition")
        vparams.addStringIfDefined("value", self.value)
        return vparams

    def getValue(self):
        return self.value

    def setValue(self, newValue):
        self.value = newValue


# @package Vidiun
# @subpackage Client
class VidiunAuthenticatedCondition(VidiunCondition):
    def __init__(self,
            type=NotImplemented,
            description=NotImplemented,
            not_=NotImplemented,
            privileges=NotImplemented):
        VidiunCondition.__init__(self,
            type,
            description,
            not_)

        # The privelege needed to remove the restriction
        # @var array of VidiunStringValue
        self.privileges = privileges


    PROPERTY_LOADERS = {
        'privileges': (VidiunObjectFactory.createArray, VidiunStringValue), 
    }

    def fromXml(self, node):
        VidiunCondition.fromXml(self, node)
        self.fromXmlImpl(node, VidiunAuthenticatedCondition.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunCondition.toParams(self)
        vparams.put("objectType", "VidiunAuthenticatedCondition")
        vparams.addArrayIfDefined("privileges", self.privileges)
        return vparams

    def getPrivileges(self):
        return self.privileges

    def setPrivileges(self, newPrivileges):
        self.privileges = newPrivileges


# @package Vidiun
# @subpackage Client
class VidiunBaseEntryCloneOptionComponent(VidiunBaseEntryCloneOptionItem):
    def __init__(self,
            itemType=NotImplemented,
            rule=NotImplemented):
        VidiunBaseEntryCloneOptionItem.__init__(self)

        # @var VidiunBaseEntryCloneOptions
        self.itemType = itemType

        # condition rule (include/exclude)
        # @var VidiunCloneComponentSelectorType
        self.rule = rule


    PROPERTY_LOADERS = {
        'itemType': (VidiunEnumsFactory.createString, "VidiunBaseEntryCloneOptions"), 
        'rule': (VidiunEnumsFactory.createString, "VidiunCloneComponentSelectorType"), 
    }

    def fromXml(self, node):
        VidiunBaseEntryCloneOptionItem.fromXml(self, node)
        self.fromXmlImpl(node, VidiunBaseEntryCloneOptionComponent.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunBaseEntryCloneOptionItem.toParams(self)
        vparams.put("objectType", "VidiunBaseEntryCloneOptionComponent")
        vparams.addStringEnumIfDefined("itemType", self.itemType)
        vparams.addStringEnumIfDefined("rule", self.rule)
        return vparams

    def getItemType(self):
        return self.itemType

    def setItemType(self, newItemType):
        self.itemType = newItemType

    def getRule(self):
        return self.rule

    def setRule(self, newRule):
        self.rule = newRule


# @package Vidiun
# @subpackage Client
class VidiunBaseEntryListResponse(VidiunListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        VidiunListResponse.__init__(self,
            totalCount)

        # @var array of VidiunBaseEntry
        # @readonly
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (VidiunObjectFactory.createArray, VidiunBaseEntry), 
    }

    def fromXml(self, node):
        VidiunListResponse.fromXml(self, node)
        self.fromXmlImpl(node, VidiunBaseEntryListResponse.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunListResponse.toParams(self)
        vparams.put("objectType", "VidiunBaseEntryListResponse")
        return vparams

    def getObjects(self):
        return self.objects


# @package Vidiun
# @subpackage Client
class VidiunBaseSyndicationFeedBaseFilter(VidiunFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented):
        VidiunFilter.__init__(self,
            orderBy,
            advancedSearch)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunBaseSyndicationFeedBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunFilter.toParams(self)
        vparams.put("objectType", "VidiunBaseSyndicationFeedBaseFilter")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunBaseSyndicationFeedListResponse(VidiunListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        VidiunListResponse.__init__(self,
            totalCount)

        # @var array of VidiunBaseSyndicationFeed
        # @readonly
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (VidiunObjectFactory.createArray, VidiunBaseSyndicationFeed), 
    }

    def fromXml(self, node):
        VidiunListResponse.fromXml(self, node)
        self.fromXmlImpl(node, VidiunBaseSyndicationFeedListResponse.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunListResponse.toParams(self)
        vparams.put("objectType", "VidiunBaseSyndicationFeedListResponse")
        return vparams

    def getObjects(self):
        return self.objects


# @package Vidiun
# @subpackage Client
class VidiunBatchJobListResponse(VidiunListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        VidiunListResponse.__init__(self,
            totalCount)

        # @var array of VidiunBatchJob
        # @readonly
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (VidiunObjectFactory.createArray, VidiunBatchJob), 
    }

    def fromXml(self, node):
        VidiunListResponse.fromXml(self, node)
        self.fromXmlImpl(node, VidiunBatchJobListResponse.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunListResponse.toParams(self)
        vparams.put("objectType", "VidiunBatchJobListResponse")
        return vparams

    def getObjects(self):
        return self.objects


# @package Vidiun
# @subpackage Client
class VidiunBulkDownloadJobData(VidiunJobData):
    def __init__(self,
            entryIds=NotImplemented,
            flavorParamsId=NotImplemented,
            puserId=NotImplemented):
        VidiunJobData.__init__(self)

        # Comma separated list of entry ids
        # @var string
        self.entryIds = entryIds

        # Flavor params id to use for conversion
        # @var int
        self.flavorParamsId = flavorParamsId

        # The id of the requesting user
        # @var string
        self.puserId = puserId


    PROPERTY_LOADERS = {
        'entryIds': getXmlNodeText, 
        'flavorParamsId': getXmlNodeInt, 
        'puserId': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunJobData.fromXml(self, node)
        self.fromXmlImpl(node, VidiunBulkDownloadJobData.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunJobData.toParams(self)
        vparams.put("objectType", "VidiunBulkDownloadJobData")
        vparams.addStringIfDefined("entryIds", self.entryIds)
        vparams.addIntIfDefined("flavorParamsId", self.flavorParamsId)
        vparams.addStringIfDefined("puserId", self.puserId)
        return vparams

    def getEntryIds(self):
        return self.entryIds

    def setEntryIds(self, newEntryIds):
        self.entryIds = newEntryIds

    def getFlavorParamsId(self):
        return self.flavorParamsId

    def setFlavorParamsId(self, newFlavorParamsId):
        self.flavorParamsId = newFlavorParamsId

    def getPuserId(self):
        return self.puserId

    def setPuserId(self, newPuserId):
        self.puserId = newPuserId


# @package Vidiun
# @subpackage Client
class VidiunBulkUploadBaseFilter(VidiunFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            uploadedOnGreaterThanOrEqual=NotImplemented,
            uploadedOnLessThanOrEqual=NotImplemented,
            uploadedOnEqual=NotImplemented,
            statusIn=NotImplemented,
            statusEqual=NotImplemented,
            bulkUploadObjectTypeEqual=NotImplemented,
            bulkUploadObjectTypeIn=NotImplemented):
        VidiunFilter.__init__(self,
            orderBy,
            advancedSearch)

        # @var int
        self.uploadedOnGreaterThanOrEqual = uploadedOnGreaterThanOrEqual

        # @var int
        self.uploadedOnLessThanOrEqual = uploadedOnLessThanOrEqual

        # @var int
        self.uploadedOnEqual = uploadedOnEqual

        # @var string
        self.statusIn = statusIn

        # @var VidiunBatchJobStatus
        self.statusEqual = statusEqual

        # @var VidiunBulkUploadObjectType
        self.bulkUploadObjectTypeEqual = bulkUploadObjectTypeEqual

        # @var string
        self.bulkUploadObjectTypeIn = bulkUploadObjectTypeIn


    PROPERTY_LOADERS = {
        'uploadedOnGreaterThanOrEqual': getXmlNodeInt, 
        'uploadedOnLessThanOrEqual': getXmlNodeInt, 
        'uploadedOnEqual': getXmlNodeInt, 
        'statusIn': getXmlNodeText, 
        'statusEqual': (VidiunEnumsFactory.createInt, "VidiunBatchJobStatus"), 
        'bulkUploadObjectTypeEqual': (VidiunEnumsFactory.createString, "VidiunBulkUploadObjectType"), 
        'bulkUploadObjectTypeIn': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunBulkUploadBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunFilter.toParams(self)
        vparams.put("objectType", "VidiunBulkUploadBaseFilter")
        vparams.addIntIfDefined("uploadedOnGreaterThanOrEqual", self.uploadedOnGreaterThanOrEqual)
        vparams.addIntIfDefined("uploadedOnLessThanOrEqual", self.uploadedOnLessThanOrEqual)
        vparams.addIntIfDefined("uploadedOnEqual", self.uploadedOnEqual)
        vparams.addStringIfDefined("statusIn", self.statusIn)
        vparams.addIntEnumIfDefined("statusEqual", self.statusEqual)
        vparams.addStringEnumIfDefined("bulkUploadObjectTypeEqual", self.bulkUploadObjectTypeEqual)
        vparams.addStringIfDefined("bulkUploadObjectTypeIn", self.bulkUploadObjectTypeIn)
        return vparams

    def getUploadedOnGreaterThanOrEqual(self):
        return self.uploadedOnGreaterThanOrEqual

    def setUploadedOnGreaterThanOrEqual(self, newUploadedOnGreaterThanOrEqual):
        self.uploadedOnGreaterThanOrEqual = newUploadedOnGreaterThanOrEqual

    def getUploadedOnLessThanOrEqual(self):
        return self.uploadedOnLessThanOrEqual

    def setUploadedOnLessThanOrEqual(self, newUploadedOnLessThanOrEqual):
        self.uploadedOnLessThanOrEqual = newUploadedOnLessThanOrEqual

    def getUploadedOnEqual(self):
        return self.uploadedOnEqual

    def setUploadedOnEqual(self, newUploadedOnEqual):
        self.uploadedOnEqual = newUploadedOnEqual

    def getStatusIn(self):
        return self.statusIn

    def setStatusIn(self, newStatusIn):
        self.statusIn = newStatusIn

    def getStatusEqual(self):
        return self.statusEqual

    def setStatusEqual(self, newStatusEqual):
        self.statusEqual = newStatusEqual

    def getBulkUploadObjectTypeEqual(self):
        return self.bulkUploadObjectTypeEqual

    def setBulkUploadObjectTypeEqual(self, newBulkUploadObjectTypeEqual):
        self.bulkUploadObjectTypeEqual = newBulkUploadObjectTypeEqual

    def getBulkUploadObjectTypeIn(self):
        return self.bulkUploadObjectTypeIn

    def setBulkUploadObjectTypeIn(self, newBulkUploadObjectTypeIn):
        self.bulkUploadObjectTypeIn = newBulkUploadObjectTypeIn


# @package Vidiun
# @subpackage Client
class VidiunBulkUploadCategoryData(VidiunBulkUploadObjectData):
    """This class represents object-specific data passed to the 
     bulk upload job."""

    def __init__(self):
        VidiunBulkUploadObjectData.__init__(self)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunBulkUploadObjectData.fromXml(self, node)
        self.fromXmlImpl(node, VidiunBulkUploadCategoryData.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunBulkUploadObjectData.toParams(self)
        vparams.put("objectType", "VidiunBulkUploadCategoryData")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunBulkUploadCategoryEntryData(VidiunBulkUploadObjectData):
    """This class represents object-specific data passed to the 
     bulk upload job."""

    def __init__(self):
        VidiunBulkUploadObjectData.__init__(self)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunBulkUploadObjectData.fromXml(self, node)
        self.fromXmlImpl(node, VidiunBulkUploadCategoryEntryData.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunBulkUploadObjectData.toParams(self)
        vparams.put("objectType", "VidiunBulkUploadCategoryEntryData")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunBulkUploadCategoryUserData(VidiunBulkUploadObjectData):
    """This class represents object-specific data passed to the 
     bulk upload job."""

    def __init__(self):
        VidiunBulkUploadObjectData.__init__(self)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunBulkUploadObjectData.fromXml(self, node)
        self.fromXmlImpl(node, VidiunBulkUploadCategoryUserData.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunBulkUploadObjectData.toParams(self)
        vparams.put("objectType", "VidiunBulkUploadCategoryUserData")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunBulkUploadEntryData(VidiunBulkUploadObjectData):
    """This class represents object-specific data passed to the 
     bulk upload job."""

    def __init__(self,
            conversionProfileId=NotImplemented):
        VidiunBulkUploadObjectData.__init__(self)

        # Selected profile id for all bulk entries
        # @var int
        self.conversionProfileId = conversionProfileId


    PROPERTY_LOADERS = {
        'conversionProfileId': getXmlNodeInt, 
    }

    def fromXml(self, node):
        VidiunBulkUploadObjectData.fromXml(self, node)
        self.fromXmlImpl(node, VidiunBulkUploadEntryData.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunBulkUploadObjectData.toParams(self)
        vparams.put("objectType", "VidiunBulkUploadEntryData")
        vparams.addIntIfDefined("conversionProfileId", self.conversionProfileId)
        return vparams

    def getConversionProfileId(self):
        return self.conversionProfileId

    def setConversionProfileId(self, newConversionProfileId):
        self.conversionProfileId = newConversionProfileId


# @package Vidiun
# @subpackage Client
class VidiunBulkUploadJobData(VidiunJobData):
    def __init__(self,
            userId=NotImplemented,
            uploadedBy=NotImplemented,
            conversionProfileId=NotImplemented,
            resultsFileLocalPath=NotImplemented,
            resultsFileUrl=NotImplemented,
            numOfEntries=NotImplemented,
            numOfObjects=NotImplemented,
            filePath=NotImplemented,
            bulkUploadObjectType=NotImplemented,
            fileName=NotImplemented,
            objectData=NotImplemented,
            type=NotImplemented,
            emailRecipients=NotImplemented,
            numOfErrorObjects=NotImplemented):
        VidiunJobData.__init__(self)

        # @var string
        # @readonly
        self.userId = userId

        # The screen name of the user
        # @var string
        # @readonly
        self.uploadedBy = uploadedBy

        # Selected profile id for all bulk entries
        # @var int
        # @readonly
        self.conversionProfileId = conversionProfileId

        # Created by the API
        # @var string
        # @readonly
        self.resultsFileLocalPath = resultsFileLocalPath

        # Created by the API
        # @var string
        # @readonly
        self.resultsFileUrl = resultsFileUrl

        # Number of created entries
        # @var int
        # @readonly
        self.numOfEntries = numOfEntries

        # Number of created objects
        # @var int
        # @readonly
        self.numOfObjects = numOfObjects

        # The bulk upload file path
        # @var string
        # @readonly
        self.filePath = filePath

        # Type of object for bulk upload
        # @var VidiunBulkUploadObjectType
        # @readonly
        self.bulkUploadObjectType = bulkUploadObjectType

        # Friendly name of the file, used to be recognized later in the logs.
        # @var string
        self.fileName = fileName

        # Data pertaining to the objects being uploaded
        # @var VidiunBulkUploadObjectData
        # @readonly
        self.objectData = objectData

        # Type of bulk upload
        # @var VidiunBulkUploadType
        # @readonly
        self.type = type

        # Recipients of the email for bulk upload success/failure
        # @var string
        self.emailRecipients = emailRecipients

        # Number of objects that finished on error status
        # @var int
        self.numOfErrorObjects = numOfErrorObjects


    PROPERTY_LOADERS = {
        'userId': getXmlNodeText, 
        'uploadedBy': getXmlNodeText, 
        'conversionProfileId': getXmlNodeInt, 
        'resultsFileLocalPath': getXmlNodeText, 
        'resultsFileUrl': getXmlNodeText, 
        'numOfEntries': getXmlNodeInt, 
        'numOfObjects': getXmlNodeInt, 
        'filePath': getXmlNodeText, 
        'bulkUploadObjectType': (VidiunEnumsFactory.createString, "VidiunBulkUploadObjectType"), 
        'fileName': getXmlNodeText, 
        'objectData': (VidiunObjectFactory.create, VidiunBulkUploadObjectData), 
        'type': (VidiunEnumsFactory.createString, "VidiunBulkUploadType"), 
        'emailRecipients': getXmlNodeText, 
        'numOfErrorObjects': getXmlNodeInt, 
    }

    def fromXml(self, node):
        VidiunJobData.fromXml(self, node)
        self.fromXmlImpl(node, VidiunBulkUploadJobData.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunJobData.toParams(self)
        vparams.put("objectType", "VidiunBulkUploadJobData")
        vparams.addStringIfDefined("fileName", self.fileName)
        vparams.addStringIfDefined("emailRecipients", self.emailRecipients)
        vparams.addIntIfDefined("numOfErrorObjects", self.numOfErrorObjects)
        return vparams

    def getUserId(self):
        return self.userId

    def getUploadedBy(self):
        return self.uploadedBy

    def getConversionProfileId(self):
        return self.conversionProfileId

    def getResultsFileLocalPath(self):
        return self.resultsFileLocalPath

    def getResultsFileUrl(self):
        return self.resultsFileUrl

    def getNumOfEntries(self):
        return self.numOfEntries

    def getNumOfObjects(self):
        return self.numOfObjects

    def getFilePath(self):
        return self.filePath

    def getBulkUploadObjectType(self):
        return self.bulkUploadObjectType

    def getFileName(self):
        return self.fileName

    def setFileName(self, newFileName):
        self.fileName = newFileName

    def getObjectData(self):
        return self.objectData

    def getType(self):
        return self.type

    def getEmailRecipients(self):
        return self.emailRecipients

    def setEmailRecipients(self, newEmailRecipients):
        self.emailRecipients = newEmailRecipients

    def getNumOfErrorObjects(self):
        return self.numOfErrorObjects

    def setNumOfErrorObjects(self, newNumOfErrorObjects):
        self.numOfErrorObjects = newNumOfErrorObjects


# @package Vidiun
# @subpackage Client
class VidiunBulkUploadListResponse(VidiunListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        VidiunListResponse.__init__(self,
            totalCount)

        # @var array of VidiunBulkUpload
        # @readonly
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (VidiunObjectFactory.createArray, VidiunBulkUpload), 
    }

    def fromXml(self, node):
        VidiunListResponse.fromXml(self, node)
        self.fromXmlImpl(node, VidiunBulkUploadListResponse.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunListResponse.toParams(self)
        vparams.put("objectType", "VidiunBulkUploadListResponse")
        return vparams

    def getObjects(self):
        return self.objects


# @package Vidiun
# @subpackage Client
class VidiunBulkUploadResultCategory(VidiunBulkUploadResult):
    def __init__(self,
            id=NotImplemented,
            bulkUploadJobId=NotImplemented,
            lineIndex=NotImplemented,
            partnerId=NotImplemented,
            status=NotImplemented,
            action=NotImplemented,
            objectId=NotImplemented,
            objectStatus=NotImplemented,
            bulkUploadResultObjectType=NotImplemented,
            rowData=NotImplemented,
            partnerData=NotImplemented,
            objectErrorDescription=NotImplemented,
            pluginsData=NotImplemented,
            errorDescription=NotImplemented,
            errorCode=NotImplemented,
            errorType=NotImplemented,
            relativePath=NotImplemented,
            name=NotImplemented,
            referenceId=NotImplemented,
            description=NotImplemented,
            tags=NotImplemented,
            appearInList=NotImplemented,
            privacy=NotImplemented,
            inheritanceType=NotImplemented,
            userJoinPolicy=NotImplemented,
            defaultPermissionLevel=NotImplemented,
            owner=NotImplemented,
            contributionPolicy=NotImplemented,
            partnerSortValue=NotImplemented,
            moderation=NotImplemented):
        VidiunBulkUploadResult.__init__(self,
            id,
            bulkUploadJobId,
            lineIndex,
            partnerId,
            status,
            action,
            objectId,
            objectStatus,
            bulkUploadResultObjectType,
            rowData,
            partnerData,
            objectErrorDescription,
            pluginsData,
            errorDescription,
            errorCode,
            errorType)

        # @var string
        self.relativePath = relativePath

        # @var string
        self.name = name

        # @var string
        self.referenceId = referenceId

        # @var string
        self.description = description

        # @var string
        self.tags = tags

        # @var int
        self.appearInList = appearInList

        # @var int
        self.privacy = privacy

        # @var int
        self.inheritanceType = inheritanceType

        # @var int
        self.userJoinPolicy = userJoinPolicy

        # @var int
        self.defaultPermissionLevel = defaultPermissionLevel

        # @var string
        self.owner = owner

        # @var int
        self.contributionPolicy = contributionPolicy

        # @var int
        self.partnerSortValue = partnerSortValue

        # @var bool
        self.moderation = moderation


    PROPERTY_LOADERS = {
        'relativePath': getXmlNodeText, 
        'name': getXmlNodeText, 
        'referenceId': getXmlNodeText, 
        'description': getXmlNodeText, 
        'tags': getXmlNodeText, 
        'appearInList': getXmlNodeInt, 
        'privacy': getXmlNodeInt, 
        'inheritanceType': getXmlNodeInt, 
        'userJoinPolicy': getXmlNodeInt, 
        'defaultPermissionLevel': getXmlNodeInt, 
        'owner': getXmlNodeText, 
        'contributionPolicy': getXmlNodeInt, 
        'partnerSortValue': getXmlNodeInt, 
        'moderation': getXmlNodeBool, 
    }

    def fromXml(self, node):
        VidiunBulkUploadResult.fromXml(self, node)
        self.fromXmlImpl(node, VidiunBulkUploadResultCategory.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunBulkUploadResult.toParams(self)
        vparams.put("objectType", "VidiunBulkUploadResultCategory")
        vparams.addStringIfDefined("relativePath", self.relativePath)
        vparams.addStringIfDefined("name", self.name)
        vparams.addStringIfDefined("referenceId", self.referenceId)
        vparams.addStringIfDefined("description", self.description)
        vparams.addStringIfDefined("tags", self.tags)
        vparams.addIntIfDefined("appearInList", self.appearInList)
        vparams.addIntIfDefined("privacy", self.privacy)
        vparams.addIntIfDefined("inheritanceType", self.inheritanceType)
        vparams.addIntIfDefined("userJoinPolicy", self.userJoinPolicy)
        vparams.addIntIfDefined("defaultPermissionLevel", self.defaultPermissionLevel)
        vparams.addStringIfDefined("owner", self.owner)
        vparams.addIntIfDefined("contributionPolicy", self.contributionPolicy)
        vparams.addIntIfDefined("partnerSortValue", self.partnerSortValue)
        vparams.addBoolIfDefined("moderation", self.moderation)
        return vparams

    def getRelativePath(self):
        return self.relativePath

    def setRelativePath(self, newRelativePath):
        self.relativePath = newRelativePath

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName

    def getReferenceId(self):
        return self.referenceId

    def setReferenceId(self, newReferenceId):
        self.referenceId = newReferenceId

    def getDescription(self):
        return self.description

    def setDescription(self, newDescription):
        self.description = newDescription

    def getTags(self):
        return self.tags

    def setTags(self, newTags):
        self.tags = newTags

    def getAppearInList(self):
        return self.appearInList

    def setAppearInList(self, newAppearInList):
        self.appearInList = newAppearInList

    def getPrivacy(self):
        return self.privacy

    def setPrivacy(self, newPrivacy):
        self.privacy = newPrivacy

    def getInheritanceType(self):
        return self.inheritanceType

    def setInheritanceType(self, newInheritanceType):
        self.inheritanceType = newInheritanceType

    def getUserJoinPolicy(self):
        return self.userJoinPolicy

    def setUserJoinPolicy(self, newUserJoinPolicy):
        self.userJoinPolicy = newUserJoinPolicy

    def getDefaultPermissionLevel(self):
        return self.defaultPermissionLevel

    def setDefaultPermissionLevel(self, newDefaultPermissionLevel):
        self.defaultPermissionLevel = newDefaultPermissionLevel

    def getOwner(self):
        return self.owner

    def setOwner(self, newOwner):
        self.owner = newOwner

    def getContributionPolicy(self):
        return self.contributionPolicy

    def setContributionPolicy(self, newContributionPolicy):
        self.contributionPolicy = newContributionPolicy

    def getPartnerSortValue(self):
        return self.partnerSortValue

    def setPartnerSortValue(self, newPartnerSortValue):
        self.partnerSortValue = newPartnerSortValue

    def getModeration(self):
        return self.moderation

    def setModeration(self, newModeration):
        self.moderation = newModeration


# @package Vidiun
# @subpackage Client
class VidiunBulkUploadResultCategoryEntry(VidiunBulkUploadResult):
    def __init__(self,
            id=NotImplemented,
            bulkUploadJobId=NotImplemented,
            lineIndex=NotImplemented,
            partnerId=NotImplemented,
            status=NotImplemented,
            action=NotImplemented,
            objectId=NotImplemented,
            objectStatus=NotImplemented,
            bulkUploadResultObjectType=NotImplemented,
            rowData=NotImplemented,
            partnerData=NotImplemented,
            objectErrorDescription=NotImplemented,
            pluginsData=NotImplemented,
            errorDescription=NotImplemented,
            errorCode=NotImplemented,
            errorType=NotImplemented,
            categoryId=NotImplemented,
            entryId=NotImplemented):
        VidiunBulkUploadResult.__init__(self,
            id,
            bulkUploadJobId,
            lineIndex,
            partnerId,
            status,
            action,
            objectId,
            objectStatus,
            bulkUploadResultObjectType,
            rowData,
            partnerData,
            objectErrorDescription,
            pluginsData,
            errorDescription,
            errorCode,
            errorType)

        # @var int
        self.categoryId = categoryId

        # @var string
        self.entryId = entryId


    PROPERTY_LOADERS = {
        'categoryId': getXmlNodeInt, 
        'entryId': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunBulkUploadResult.fromXml(self, node)
        self.fromXmlImpl(node, VidiunBulkUploadResultCategoryEntry.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunBulkUploadResult.toParams(self)
        vparams.put("objectType", "VidiunBulkUploadResultCategoryEntry")
        vparams.addIntIfDefined("categoryId", self.categoryId)
        vparams.addStringIfDefined("entryId", self.entryId)
        return vparams

    def getCategoryId(self):
        return self.categoryId

    def setCategoryId(self, newCategoryId):
        self.categoryId = newCategoryId

    def getEntryId(self):
        return self.entryId

    def setEntryId(self, newEntryId):
        self.entryId = newEntryId


# @package Vidiun
# @subpackage Client
class VidiunBulkUploadResultCategoryUser(VidiunBulkUploadResult):
    def __init__(self,
            id=NotImplemented,
            bulkUploadJobId=NotImplemented,
            lineIndex=NotImplemented,
            partnerId=NotImplemented,
            status=NotImplemented,
            action=NotImplemented,
            objectId=NotImplemented,
            objectStatus=NotImplemented,
            bulkUploadResultObjectType=NotImplemented,
            rowData=NotImplemented,
            partnerData=NotImplemented,
            objectErrorDescription=NotImplemented,
            pluginsData=NotImplemented,
            errorDescription=NotImplemented,
            errorCode=NotImplemented,
            errorType=NotImplemented,
            categoryId=NotImplemented,
            categoryReferenceId=NotImplemented,
            userId=NotImplemented,
            permissionLevel=NotImplemented,
            updateMethod=NotImplemented,
            requiredObjectStatus=NotImplemented):
        VidiunBulkUploadResult.__init__(self,
            id,
            bulkUploadJobId,
            lineIndex,
            partnerId,
            status,
            action,
            objectId,
            objectStatus,
            bulkUploadResultObjectType,
            rowData,
            partnerData,
            objectErrorDescription,
            pluginsData,
            errorDescription,
            errorCode,
            errorType)

        # @var int
        self.categoryId = categoryId

        # @var string
        self.categoryReferenceId = categoryReferenceId

        # @var string
        self.userId = userId

        # @var int
        self.permissionLevel = permissionLevel

        # @var int
        self.updateMethod = updateMethod

        # @var int
        self.requiredObjectStatus = requiredObjectStatus


    PROPERTY_LOADERS = {
        'categoryId': getXmlNodeInt, 
        'categoryReferenceId': getXmlNodeText, 
        'userId': getXmlNodeText, 
        'permissionLevel': getXmlNodeInt, 
        'updateMethod': getXmlNodeInt, 
        'requiredObjectStatus': getXmlNodeInt, 
    }

    def fromXml(self, node):
        VidiunBulkUploadResult.fromXml(self, node)
        self.fromXmlImpl(node, VidiunBulkUploadResultCategoryUser.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunBulkUploadResult.toParams(self)
        vparams.put("objectType", "VidiunBulkUploadResultCategoryUser")
        vparams.addIntIfDefined("categoryId", self.categoryId)
        vparams.addStringIfDefined("categoryReferenceId", self.categoryReferenceId)
        vparams.addStringIfDefined("userId", self.userId)
        vparams.addIntIfDefined("permissionLevel", self.permissionLevel)
        vparams.addIntIfDefined("updateMethod", self.updateMethod)
        vparams.addIntIfDefined("requiredObjectStatus", self.requiredObjectStatus)
        return vparams

    def getCategoryId(self):
        return self.categoryId

    def setCategoryId(self, newCategoryId):
        self.categoryId = newCategoryId

    def getCategoryReferenceId(self):
        return self.categoryReferenceId

    def setCategoryReferenceId(self, newCategoryReferenceId):
        self.categoryReferenceId = newCategoryReferenceId

    def getUserId(self):
        return self.userId

    def setUserId(self, newUserId):
        self.userId = newUserId

    def getPermissionLevel(self):
        return self.permissionLevel

    def setPermissionLevel(self, newPermissionLevel):
        self.permissionLevel = newPermissionLevel

    def getUpdateMethod(self):
        return self.updateMethod

    def setUpdateMethod(self, newUpdateMethod):
        self.updateMethod = newUpdateMethod

    def getRequiredObjectStatus(self):
        return self.requiredObjectStatus

    def setRequiredObjectStatus(self, newRequiredObjectStatus):
        self.requiredObjectStatus = newRequiredObjectStatus


# @package Vidiun
# @subpackage Client
class VidiunBulkUploadResultEntry(VidiunBulkUploadResult):
    def __init__(self,
            id=NotImplemented,
            bulkUploadJobId=NotImplemented,
            lineIndex=NotImplemented,
            partnerId=NotImplemented,
            status=NotImplemented,
            action=NotImplemented,
            objectId=NotImplemented,
            objectStatus=NotImplemented,
            bulkUploadResultObjectType=NotImplemented,
            rowData=NotImplemented,
            partnerData=NotImplemented,
            objectErrorDescription=NotImplemented,
            pluginsData=NotImplemented,
            errorDescription=NotImplemented,
            errorCode=NotImplemented,
            errorType=NotImplemented,
            entryId=NotImplemented,
            title=NotImplemented,
            description=NotImplemented,
            tags=NotImplemented,
            url=NotImplemented,
            contentType=NotImplemented,
            conversionProfileId=NotImplemented,
            accessControlProfileId=NotImplemented,
            category=NotImplemented,
            scheduleStartDate=NotImplemented,
            scheduleEndDate=NotImplemented,
            entryStatus=NotImplemented,
            thumbnailUrl=NotImplemented,
            thumbnailSaved=NotImplemented,
            sshPrivateKey=NotImplemented,
            sshPublicKey=NotImplemented,
            sshKeyPassphrase=NotImplemented,
            creatorId=NotImplemented,
            entitledUsersEdit=NotImplemented,
            entitledUsersPublish=NotImplemented,
            ownerId=NotImplemented,
            referenceId=NotImplemented,
            templateEntryId=NotImplemented):
        VidiunBulkUploadResult.__init__(self,
            id,
            bulkUploadJobId,
            lineIndex,
            partnerId,
            status,
            action,
            objectId,
            objectStatus,
            bulkUploadResultObjectType,
            rowData,
            partnerData,
            objectErrorDescription,
            pluginsData,
            errorDescription,
            errorCode,
            errorType)

        # @var string
        self.entryId = entryId

        # @var string
        self.title = title

        # @var string
        self.description = description

        # @var string
        self.tags = tags

        # @var string
        self.url = url

        # @var string
        self.contentType = contentType

        # @var int
        self.conversionProfileId = conversionProfileId

        # @var int
        self.accessControlProfileId = accessControlProfileId

        # @var string
        self.category = category

        # @var int
        self.scheduleStartDate = scheduleStartDate

        # @var int
        self.scheduleEndDate = scheduleEndDate

        # @var int
        self.entryStatus = entryStatus

        # @var string
        self.thumbnailUrl = thumbnailUrl

        # @var bool
        self.thumbnailSaved = thumbnailSaved

        # @var string
        self.sshPrivateKey = sshPrivateKey

        # @var string
        self.sshPublicKey = sshPublicKey

        # @var string
        self.sshKeyPassphrase = sshKeyPassphrase

        # @var string
        self.creatorId = creatorId

        # @var string
        self.entitledUsersEdit = entitledUsersEdit

        # @var string
        self.entitledUsersPublish = entitledUsersPublish

        # @var string
        self.ownerId = ownerId

        # @var string
        self.referenceId = referenceId

        # @var string
        self.templateEntryId = templateEntryId


    PROPERTY_LOADERS = {
        'entryId': getXmlNodeText, 
        'title': getXmlNodeText, 
        'description': getXmlNodeText, 
        'tags': getXmlNodeText, 
        'url': getXmlNodeText, 
        'contentType': getXmlNodeText, 
        'conversionProfileId': getXmlNodeInt, 
        'accessControlProfileId': getXmlNodeInt, 
        'category': getXmlNodeText, 
        'scheduleStartDate': getXmlNodeInt, 
        'scheduleEndDate': getXmlNodeInt, 
        'entryStatus': getXmlNodeInt, 
        'thumbnailUrl': getXmlNodeText, 
        'thumbnailSaved': getXmlNodeBool, 
        'sshPrivateKey': getXmlNodeText, 
        'sshPublicKey': getXmlNodeText, 
        'sshKeyPassphrase': getXmlNodeText, 
        'creatorId': getXmlNodeText, 
        'entitledUsersEdit': getXmlNodeText, 
        'entitledUsersPublish': getXmlNodeText, 
        'ownerId': getXmlNodeText, 
        'referenceId': getXmlNodeText, 
        'templateEntryId': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunBulkUploadResult.fromXml(self, node)
        self.fromXmlImpl(node, VidiunBulkUploadResultEntry.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunBulkUploadResult.toParams(self)
        vparams.put("objectType", "VidiunBulkUploadResultEntry")
        vparams.addStringIfDefined("entryId", self.entryId)
        vparams.addStringIfDefined("title", self.title)
        vparams.addStringIfDefined("description", self.description)
        vparams.addStringIfDefined("tags", self.tags)
        vparams.addStringIfDefined("url", self.url)
        vparams.addStringIfDefined("contentType", self.contentType)
        vparams.addIntIfDefined("conversionProfileId", self.conversionProfileId)
        vparams.addIntIfDefined("accessControlProfileId", self.accessControlProfileId)
        vparams.addStringIfDefined("category", self.category)
        vparams.addIntIfDefined("scheduleStartDate", self.scheduleStartDate)
        vparams.addIntIfDefined("scheduleEndDate", self.scheduleEndDate)
        vparams.addIntIfDefined("entryStatus", self.entryStatus)
        vparams.addStringIfDefined("thumbnailUrl", self.thumbnailUrl)
        vparams.addBoolIfDefined("thumbnailSaved", self.thumbnailSaved)
        vparams.addStringIfDefined("sshPrivateKey", self.sshPrivateKey)
        vparams.addStringIfDefined("sshPublicKey", self.sshPublicKey)
        vparams.addStringIfDefined("sshKeyPassphrase", self.sshKeyPassphrase)
        vparams.addStringIfDefined("creatorId", self.creatorId)
        vparams.addStringIfDefined("entitledUsersEdit", self.entitledUsersEdit)
        vparams.addStringIfDefined("entitledUsersPublish", self.entitledUsersPublish)
        vparams.addStringIfDefined("ownerId", self.ownerId)
        vparams.addStringIfDefined("referenceId", self.referenceId)
        vparams.addStringIfDefined("templateEntryId", self.templateEntryId)
        return vparams

    def getEntryId(self):
        return self.entryId

    def setEntryId(self, newEntryId):
        self.entryId = newEntryId

    def getTitle(self):
        return self.title

    def setTitle(self, newTitle):
        self.title = newTitle

    def getDescription(self):
        return self.description

    def setDescription(self, newDescription):
        self.description = newDescription

    def getTags(self):
        return self.tags

    def setTags(self, newTags):
        self.tags = newTags

    def getUrl(self):
        return self.url

    def setUrl(self, newUrl):
        self.url = newUrl

    def getContentType(self):
        return self.contentType

    def setContentType(self, newContentType):
        self.contentType = newContentType

    def getConversionProfileId(self):
        return self.conversionProfileId

    def setConversionProfileId(self, newConversionProfileId):
        self.conversionProfileId = newConversionProfileId

    def getAccessControlProfileId(self):
        return self.accessControlProfileId

    def setAccessControlProfileId(self, newAccessControlProfileId):
        self.accessControlProfileId = newAccessControlProfileId

    def getCategory(self):
        return self.category

    def setCategory(self, newCategory):
        self.category = newCategory

    def getScheduleStartDate(self):
        return self.scheduleStartDate

    def setScheduleStartDate(self, newScheduleStartDate):
        self.scheduleStartDate = newScheduleStartDate

    def getScheduleEndDate(self):
        return self.scheduleEndDate

    def setScheduleEndDate(self, newScheduleEndDate):
        self.scheduleEndDate = newScheduleEndDate

    def getEntryStatus(self):
        return self.entryStatus

    def setEntryStatus(self, newEntryStatus):
        self.entryStatus = newEntryStatus

    def getThumbnailUrl(self):
        return self.thumbnailUrl

    def setThumbnailUrl(self, newThumbnailUrl):
        self.thumbnailUrl = newThumbnailUrl

    def getThumbnailSaved(self):
        return self.thumbnailSaved

    def setThumbnailSaved(self, newThumbnailSaved):
        self.thumbnailSaved = newThumbnailSaved

    def getSshPrivateKey(self):
        return self.sshPrivateKey

    def setSshPrivateKey(self, newSshPrivateKey):
        self.sshPrivateKey = newSshPrivateKey

    def getSshPublicKey(self):
        return self.sshPublicKey

    def setSshPublicKey(self, newSshPublicKey):
        self.sshPublicKey = newSshPublicKey

    def getSshKeyPassphrase(self):
        return self.sshKeyPassphrase

    def setSshKeyPassphrase(self, newSshKeyPassphrase):
        self.sshKeyPassphrase = newSshKeyPassphrase

    def getCreatorId(self):
        return self.creatorId

    def setCreatorId(self, newCreatorId):
        self.creatorId = newCreatorId

    def getEntitledUsersEdit(self):
        return self.entitledUsersEdit

    def setEntitledUsersEdit(self, newEntitledUsersEdit):
        self.entitledUsersEdit = newEntitledUsersEdit

    def getEntitledUsersPublish(self):
        return self.entitledUsersPublish

    def setEntitledUsersPublish(self, newEntitledUsersPublish):
        self.entitledUsersPublish = newEntitledUsersPublish

    def getOwnerId(self):
        return self.ownerId

    def setOwnerId(self, newOwnerId):
        self.ownerId = newOwnerId

    def getReferenceId(self):
        return self.referenceId

    def setReferenceId(self, newReferenceId):
        self.referenceId = newReferenceId

    def getTemplateEntryId(self):
        return self.templateEntryId

    def setTemplateEntryId(self, newTemplateEntryId):
        self.templateEntryId = newTemplateEntryId


# @package Vidiun
# @subpackage Client
class VidiunBulkUploadResultUser(VidiunBulkUploadResult):
    def __init__(self,
            id=NotImplemented,
            bulkUploadJobId=NotImplemented,
            lineIndex=NotImplemented,
            partnerId=NotImplemented,
            status=NotImplemented,
            action=NotImplemented,
            objectId=NotImplemented,
            objectStatus=NotImplemented,
            bulkUploadResultObjectType=NotImplemented,
            rowData=NotImplemented,
            partnerData=NotImplemented,
            objectErrorDescription=NotImplemented,
            pluginsData=NotImplemented,
            errorDescription=NotImplemented,
            errorCode=NotImplemented,
            errorType=NotImplemented,
            userId=NotImplemented,
            screenName=NotImplemented,
            email=NotImplemented,
            description=NotImplemented,
            tags=NotImplemented,
            dateOfBirth=NotImplemented,
            country=NotImplemented,
            state=NotImplemented,
            city=NotImplemented,
            zip=NotImplemented,
            gender=NotImplemented,
            firstName=NotImplemented,
            lastName=NotImplemented):
        VidiunBulkUploadResult.__init__(self,
            id,
            bulkUploadJobId,
            lineIndex,
            partnerId,
            status,
            action,
            objectId,
            objectStatus,
            bulkUploadResultObjectType,
            rowData,
            partnerData,
            objectErrorDescription,
            pluginsData,
            errorDescription,
            errorCode,
            errorType)

        # @var string
        self.userId = userId

        # @var string
        self.screenName = screenName

        # @var string
        self.email = email

        # @var string
        self.description = description

        # @var string
        self.tags = tags

        # @var int
        self.dateOfBirth = dateOfBirth

        # @var string
        self.country = country

        # @var string
        self.state = state

        # @var string
        self.city = city

        # @var string
        self.zip = zip

        # @var int
        self.gender = gender

        # @var string
        self.firstName = firstName

        # @var string
        self.lastName = lastName


    PROPERTY_LOADERS = {
        'userId': getXmlNodeText, 
        'screenName': getXmlNodeText, 
        'email': getXmlNodeText, 
        'description': getXmlNodeText, 
        'tags': getXmlNodeText, 
        'dateOfBirth': getXmlNodeInt, 
        'country': getXmlNodeText, 
        'state': getXmlNodeText, 
        'city': getXmlNodeText, 
        'zip': getXmlNodeText, 
        'gender': getXmlNodeInt, 
        'firstName': getXmlNodeText, 
        'lastName': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunBulkUploadResult.fromXml(self, node)
        self.fromXmlImpl(node, VidiunBulkUploadResultUser.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunBulkUploadResult.toParams(self)
        vparams.put("objectType", "VidiunBulkUploadResultUser")
        vparams.addStringIfDefined("userId", self.userId)
        vparams.addStringIfDefined("screenName", self.screenName)
        vparams.addStringIfDefined("email", self.email)
        vparams.addStringIfDefined("description", self.description)
        vparams.addStringIfDefined("tags", self.tags)
        vparams.addIntIfDefined("dateOfBirth", self.dateOfBirth)
        vparams.addStringIfDefined("country", self.country)
        vparams.addStringIfDefined("state", self.state)
        vparams.addStringIfDefined("city", self.city)
        vparams.addStringIfDefined("zip", self.zip)
        vparams.addIntIfDefined("gender", self.gender)
        vparams.addStringIfDefined("firstName", self.firstName)
        vparams.addStringIfDefined("lastName", self.lastName)
        return vparams

    def getUserId(self):
        return self.userId

    def setUserId(self, newUserId):
        self.userId = newUserId

    def getScreenName(self):
        return self.screenName

    def setScreenName(self, newScreenName):
        self.screenName = newScreenName

    def getEmail(self):
        return self.email

    def setEmail(self, newEmail):
        self.email = newEmail

    def getDescription(self):
        return self.description

    def setDescription(self, newDescription):
        self.description = newDescription

    def getTags(self):
        return self.tags

    def setTags(self, newTags):
        self.tags = newTags

    def getDateOfBirth(self):
        return self.dateOfBirth

    def setDateOfBirth(self, newDateOfBirth):
        self.dateOfBirth = newDateOfBirth

    def getCountry(self):
        return self.country

    def setCountry(self, newCountry):
        self.country = newCountry

    def getState(self):
        return self.state

    def setState(self, newState):
        self.state = newState

    def getCity(self):
        return self.city

    def setCity(self, newCity):
        self.city = newCity

    def getZip(self):
        return self.zip

    def setZip(self, newZip):
        self.zip = newZip

    def getGender(self):
        return self.gender

    def setGender(self, newGender):
        self.gender = newGender

    def getFirstName(self):
        return self.firstName

    def setFirstName(self, newFirstName):
        self.firstName = newFirstName

    def getLastName(self):
        return self.lastName

    def setLastName(self, newLastName):
        self.lastName = newLastName


# @package Vidiun
# @subpackage Client
class VidiunBulkUploadUserData(VidiunBulkUploadObjectData):
    """This class represents object-specific data passed to the 
     bulk upload job."""

    def __init__(self):
        VidiunBulkUploadObjectData.__init__(self)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunBulkUploadObjectData.fromXml(self, node)
        self.fromXmlImpl(node, VidiunBulkUploadUserData.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunBulkUploadObjectData.toParams(self)
        vparams.put("objectType", "VidiunBulkUploadUserData")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunCaptureThumbJobData(VidiunJobData):
    def __init__(self,
            srcFileSyncLocalPath=NotImplemented,
            actualSrcFileSyncLocalPath=NotImplemented,
            srcFileSyncRemoteUrl=NotImplemented,
            thumbParamsOutputId=NotImplemented,
            thumbAssetId=NotImplemented,
            srcAssetId=NotImplemented,
            srcAssetType=NotImplemented,
            thumbPath=NotImplemented):
        VidiunJobData.__init__(self)

        # @var string
        self.srcFileSyncLocalPath = srcFileSyncLocalPath

        # The translated path as used by the scheduler
        # @var string
        self.actualSrcFileSyncLocalPath = actualSrcFileSyncLocalPath

        # @var string
        self.srcFileSyncRemoteUrl = srcFileSyncRemoteUrl

        # @var int
        self.thumbParamsOutputId = thumbParamsOutputId

        # @var string
        self.thumbAssetId = thumbAssetId

        # @var string
        self.srcAssetId = srcAssetId

        # @var VidiunAssetType
        self.srcAssetType = srcAssetType

        # @var string
        self.thumbPath = thumbPath


    PROPERTY_LOADERS = {
        'srcFileSyncLocalPath': getXmlNodeText, 
        'actualSrcFileSyncLocalPath': getXmlNodeText, 
        'srcFileSyncRemoteUrl': getXmlNodeText, 
        'thumbParamsOutputId': getXmlNodeInt, 
        'thumbAssetId': getXmlNodeText, 
        'srcAssetId': getXmlNodeText, 
        'srcAssetType': (VidiunEnumsFactory.createString, "VidiunAssetType"), 
        'thumbPath': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunJobData.fromXml(self, node)
        self.fromXmlImpl(node, VidiunCaptureThumbJobData.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunJobData.toParams(self)
        vparams.put("objectType", "VidiunCaptureThumbJobData")
        vparams.addStringIfDefined("srcFileSyncLocalPath", self.srcFileSyncLocalPath)
        vparams.addStringIfDefined("actualSrcFileSyncLocalPath", self.actualSrcFileSyncLocalPath)
        vparams.addStringIfDefined("srcFileSyncRemoteUrl", self.srcFileSyncRemoteUrl)
        vparams.addIntIfDefined("thumbParamsOutputId", self.thumbParamsOutputId)
        vparams.addStringIfDefined("thumbAssetId", self.thumbAssetId)
        vparams.addStringIfDefined("srcAssetId", self.srcAssetId)
        vparams.addStringEnumIfDefined("srcAssetType", self.srcAssetType)
        vparams.addStringIfDefined("thumbPath", self.thumbPath)
        return vparams

    def getSrcFileSyncLocalPath(self):
        return self.srcFileSyncLocalPath

    def setSrcFileSyncLocalPath(self, newSrcFileSyncLocalPath):
        self.srcFileSyncLocalPath = newSrcFileSyncLocalPath

    def getActualSrcFileSyncLocalPath(self):
        return self.actualSrcFileSyncLocalPath

    def setActualSrcFileSyncLocalPath(self, newActualSrcFileSyncLocalPath):
        self.actualSrcFileSyncLocalPath = newActualSrcFileSyncLocalPath

    def getSrcFileSyncRemoteUrl(self):
        return self.srcFileSyncRemoteUrl

    def setSrcFileSyncRemoteUrl(self, newSrcFileSyncRemoteUrl):
        self.srcFileSyncRemoteUrl = newSrcFileSyncRemoteUrl

    def getThumbParamsOutputId(self):
        return self.thumbParamsOutputId

    def setThumbParamsOutputId(self, newThumbParamsOutputId):
        self.thumbParamsOutputId = newThumbParamsOutputId

    def getThumbAssetId(self):
        return self.thumbAssetId

    def setThumbAssetId(self, newThumbAssetId):
        self.thumbAssetId = newThumbAssetId

    def getSrcAssetId(self):
        return self.srcAssetId

    def setSrcAssetId(self, newSrcAssetId):
        self.srcAssetId = newSrcAssetId

    def getSrcAssetType(self):
        return self.srcAssetType

    def setSrcAssetType(self, newSrcAssetType):
        self.srcAssetType = newSrcAssetType

    def getThumbPath(self):
        return self.thumbPath

    def setThumbPath(self, newThumbPath):
        self.thumbPath = newThumbPath


# @package Vidiun
# @subpackage Client
class VidiunCategoryEntryAdvancedFilter(VidiunSearchItem):
    def __init__(self,
            categoriesMatchOr=NotImplemented,
            categoryEntryStatusIn=NotImplemented,
            orderBy=NotImplemented,
            categoryIdEqual=NotImplemented):
        VidiunSearchItem.__init__(self)

        # @var string
        self.categoriesMatchOr = categoriesMatchOr

        # @var string
        self.categoryEntryStatusIn = categoryEntryStatusIn

        # @var VidiunCategoryEntryAdvancedOrderBy
        self.orderBy = orderBy

        # @var int
        self.categoryIdEqual = categoryIdEqual


    PROPERTY_LOADERS = {
        'categoriesMatchOr': getXmlNodeText, 
        'categoryEntryStatusIn': getXmlNodeText, 
        'orderBy': (VidiunEnumsFactory.createString, "VidiunCategoryEntryAdvancedOrderBy"), 
        'categoryIdEqual': getXmlNodeInt, 
    }

    def fromXml(self, node):
        VidiunSearchItem.fromXml(self, node)
        self.fromXmlImpl(node, VidiunCategoryEntryAdvancedFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunSearchItem.toParams(self)
        vparams.put("objectType", "VidiunCategoryEntryAdvancedFilter")
        vparams.addStringIfDefined("categoriesMatchOr", self.categoriesMatchOr)
        vparams.addStringIfDefined("categoryEntryStatusIn", self.categoryEntryStatusIn)
        vparams.addStringEnumIfDefined("orderBy", self.orderBy)
        vparams.addIntIfDefined("categoryIdEqual", self.categoryIdEqual)
        return vparams

    def getCategoriesMatchOr(self):
        return self.categoriesMatchOr

    def setCategoriesMatchOr(self, newCategoriesMatchOr):
        self.categoriesMatchOr = newCategoriesMatchOr

    def getCategoryEntryStatusIn(self):
        return self.categoryEntryStatusIn

    def setCategoryEntryStatusIn(self, newCategoryEntryStatusIn):
        self.categoryEntryStatusIn = newCategoryEntryStatusIn

    def getOrderBy(self):
        return self.orderBy

    def setOrderBy(self, newOrderBy):
        self.orderBy = newOrderBy

    def getCategoryIdEqual(self):
        return self.categoryIdEqual

    def setCategoryIdEqual(self, newCategoryIdEqual):
        self.categoryIdEqual = newCategoryIdEqual


# @package Vidiun
# @subpackage Client
class VidiunCategoryEntryListResponse(VidiunListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        VidiunListResponse.__init__(self,
            totalCount)

        # @var array of VidiunCategoryEntry
        # @readonly
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (VidiunObjectFactory.createArray, VidiunCategoryEntry), 
    }

    def fromXml(self, node):
        VidiunListResponse.fromXml(self, node)
        self.fromXmlImpl(node, VidiunCategoryEntryListResponse.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunListResponse.toParams(self)
        vparams.put("objectType", "VidiunCategoryEntryListResponse")
        return vparams

    def getObjects(self):
        return self.objects


# @package Vidiun
# @subpackage Client
class VidiunCategoryIdentifier(VidiunObjectIdentifier):
    def __init__(self,
            extendedFeatures=NotImplemented,
            identifier=NotImplemented):
        VidiunObjectIdentifier.__init__(self,
            extendedFeatures)

        # Identifier of the object
        # @var VidiunCategoryIdentifierField
        self.identifier = identifier


    PROPERTY_LOADERS = {
        'identifier': (VidiunEnumsFactory.createString, "VidiunCategoryIdentifierField"), 
    }

    def fromXml(self, node):
        VidiunObjectIdentifier.fromXml(self, node)
        self.fromXmlImpl(node, VidiunCategoryIdentifier.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectIdentifier.toParams(self)
        vparams.put("objectType", "VidiunCategoryIdentifier")
        vparams.addStringEnumIfDefined("identifier", self.identifier)
        return vparams

    def getIdentifier(self):
        return self.identifier

    def setIdentifier(self, newIdentifier):
        self.identifier = newIdentifier


# @package Vidiun
# @subpackage Client
class VidiunCategoryListResponse(VidiunListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        VidiunListResponse.__init__(self,
            totalCount)

        # @var array of VidiunCategory
        # @readonly
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (VidiunObjectFactory.createArray, VidiunCategory), 
    }

    def fromXml(self, node):
        VidiunListResponse.fromXml(self, node)
        self.fromXmlImpl(node, VidiunCategoryListResponse.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunListResponse.toParams(self)
        vparams.put("objectType", "VidiunCategoryListResponse")
        return vparams

    def getObjects(self):
        return self.objects


# @package Vidiun
# @subpackage Client
class VidiunCategoryUserAdvancedFilter(VidiunSearchItem):
    def __init__(self,
            memberIdEq=NotImplemented,
            memberIdIn=NotImplemented,
            memberPermissionsMatchOr=NotImplemented,
            memberPermissionsMatchAnd=NotImplemented):
        VidiunSearchItem.__init__(self)

        # @var string
        self.memberIdEq = memberIdEq

        # @var string
        self.memberIdIn = memberIdIn

        # @var string
        self.memberPermissionsMatchOr = memberPermissionsMatchOr

        # @var string
        self.memberPermissionsMatchAnd = memberPermissionsMatchAnd


    PROPERTY_LOADERS = {
        'memberIdEq': getXmlNodeText, 
        'memberIdIn': getXmlNodeText, 
        'memberPermissionsMatchOr': getXmlNodeText, 
        'memberPermissionsMatchAnd': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunSearchItem.fromXml(self, node)
        self.fromXmlImpl(node, VidiunCategoryUserAdvancedFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunSearchItem.toParams(self)
        vparams.put("objectType", "VidiunCategoryUserAdvancedFilter")
        vparams.addStringIfDefined("memberIdEq", self.memberIdEq)
        vparams.addStringIfDefined("memberIdIn", self.memberIdIn)
        vparams.addStringIfDefined("memberPermissionsMatchOr", self.memberPermissionsMatchOr)
        vparams.addStringIfDefined("memberPermissionsMatchAnd", self.memberPermissionsMatchAnd)
        return vparams

    def getMemberIdEq(self):
        return self.memberIdEq

    def setMemberIdEq(self, newMemberIdEq):
        self.memberIdEq = newMemberIdEq

    def getMemberIdIn(self):
        return self.memberIdIn

    def setMemberIdIn(self, newMemberIdIn):
        self.memberIdIn = newMemberIdIn

    def getMemberPermissionsMatchOr(self):
        return self.memberPermissionsMatchOr

    def setMemberPermissionsMatchOr(self, newMemberPermissionsMatchOr):
        self.memberPermissionsMatchOr = newMemberPermissionsMatchOr

    def getMemberPermissionsMatchAnd(self):
        return self.memberPermissionsMatchAnd

    def setMemberPermissionsMatchAnd(self, newMemberPermissionsMatchAnd):
        self.memberPermissionsMatchAnd = newMemberPermissionsMatchAnd


# @package Vidiun
# @subpackage Client
class VidiunCategoryUserListResponse(VidiunListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        VidiunListResponse.__init__(self,
            totalCount)

        # @var array of VidiunCategoryUser
        # @readonly
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (VidiunObjectFactory.createArray, VidiunCategoryUser), 
    }

    def fromXml(self, node):
        VidiunListResponse.fromXml(self, node)
        self.fromXmlImpl(node, VidiunCategoryUserListResponse.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunListResponse.toParams(self)
        vparams.put("objectType", "VidiunCategoryUserListResponse")
        return vparams

    def getObjects(self):
        return self.objects


# @package Vidiun
# @subpackage Client
class VidiunClipAttributes(VidiunOperationAttributes):
    """Clip operation attributes"""

    def __init__(self,
            offset=NotImplemented,
            duration=NotImplemented):
        VidiunOperationAttributes.__init__(self)

        # Offset in milliseconds
        # @var int
        self.offset = offset

        # Duration in milliseconds
        # @var int
        self.duration = duration


    PROPERTY_LOADERS = {
        'offset': getXmlNodeInt, 
        'duration': getXmlNodeInt, 
    }

    def fromXml(self, node):
        VidiunOperationAttributes.fromXml(self, node)
        self.fromXmlImpl(node, VidiunClipAttributes.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunOperationAttributes.toParams(self)
        vparams.put("objectType", "VidiunClipAttributes")
        vparams.addIntIfDefined("offset", self.offset)
        vparams.addIntIfDefined("duration", self.duration)
        return vparams

    def getOffset(self):
        return self.offset

    def setOffset(self, newOffset):
        self.offset = newOffset

    def getDuration(self):
        return self.duration

    def setDuration(self, newDuration):
        self.duration = newDuration


# @package Vidiun
# @subpackage Client
class VidiunCompareCondition(VidiunCondition):
    def __init__(self,
            type=NotImplemented,
            description=NotImplemented,
            not_=NotImplemented,
            value=NotImplemented,
            comparison=NotImplemented):
        VidiunCondition.__init__(self,
            type,
            description,
            not_)

        # Value to evaluate against the field and operator
        # @var VidiunIntegerValue
        self.value = value

        # Comparing operator
        # @var VidiunSearchConditionComparison
        self.comparison = comparison


    PROPERTY_LOADERS = {
        'value': (VidiunObjectFactory.create, VidiunIntegerValue), 
        'comparison': (VidiunEnumsFactory.createString, "VidiunSearchConditionComparison"), 
    }

    def fromXml(self, node):
        VidiunCondition.fromXml(self, node)
        self.fromXmlImpl(node, VidiunCompareCondition.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunCondition.toParams(self)
        vparams.put("objectType", "VidiunCompareCondition")
        vparams.addObjectIfDefined("value", self.value)
        vparams.addStringEnumIfDefined("comparison", self.comparison)
        return vparams

    def getValue(self):
        return self.value

    def setValue(self, newValue):
        self.value = newValue

    def getComparison(self):
        return self.comparison

    def setComparison(self, newComparison):
        self.comparison = newComparison


# @package Vidiun
# @subpackage Client
class VidiunDataCenterContentResource(VidiunContentResource):
    def __init__(self):
        VidiunContentResource.__init__(self)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunContentResource.fromXml(self, node)
        self.fromXmlImpl(node, VidiunDataCenterContentResource.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunContentResource.toParams(self)
        vparams.put("objectType", "VidiunDataCenterContentResource")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunConcatAttributes(VidiunOperationAttributes):
    """Concat operation attributes"""

    def __init__(self,
            resource=NotImplemented):
        VidiunOperationAttributes.__init__(self)

        # The resource to be concatenated
        # @var VidiunDataCenterContentResource
        self.resource = resource


    PROPERTY_LOADERS = {
        'resource': (VidiunObjectFactory.create, VidiunDataCenterContentResource), 
    }

    def fromXml(self, node):
        VidiunOperationAttributes.fromXml(self, node)
        self.fromXmlImpl(node, VidiunConcatAttributes.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunOperationAttributes.toParams(self)
        vparams.put("objectType", "VidiunConcatAttributes")
        vparams.addObjectIfDefined("resource", self.resource)
        return vparams

    def getResource(self):
        return self.resource

    def setResource(self, newResource):
        self.resource = newResource


# @package Vidiun
# @subpackage Client
class VidiunConcatJobData(VidiunJobData):
    def __init__(self,
            srcFiles=NotImplemented,
            destFilePath=NotImplemented,
            flavorAssetId=NotImplemented,
            offset=NotImplemented,
            duration=NotImplemented,
            concatenatedDuration=NotImplemented):
        VidiunJobData.__init__(self)

        # Source files to be concatenated
        # @var array of VidiunString
        self.srcFiles = srcFiles

        # Output file
        # @var string
        self.destFilePath = destFilePath

        # Flavor asset to be ingested with the output
        # @var string
        self.flavorAssetId = flavorAssetId

        # Clipping offset in seconds
        # @var float
        self.offset = offset

        # Clipping duration in seconds
        # @var float
        self.duration = duration

        # duration of the concated video
        # @var float
        self.concatenatedDuration = concatenatedDuration


    PROPERTY_LOADERS = {
        'srcFiles': (VidiunObjectFactory.createArray, VidiunString), 
        'destFilePath': getXmlNodeText, 
        'flavorAssetId': getXmlNodeText, 
        'offset': getXmlNodeFloat, 
        'duration': getXmlNodeFloat, 
        'concatenatedDuration': getXmlNodeFloat, 
    }

    def fromXml(self, node):
        VidiunJobData.fromXml(self, node)
        self.fromXmlImpl(node, VidiunConcatJobData.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunJobData.toParams(self)
        vparams.put("objectType", "VidiunConcatJobData")
        vparams.addArrayIfDefined("srcFiles", self.srcFiles)
        vparams.addStringIfDefined("destFilePath", self.destFilePath)
        vparams.addStringIfDefined("flavorAssetId", self.flavorAssetId)
        vparams.addFloatIfDefined("offset", self.offset)
        vparams.addFloatIfDefined("duration", self.duration)
        vparams.addFloatIfDefined("concatenatedDuration", self.concatenatedDuration)
        return vparams

    def getSrcFiles(self):
        return self.srcFiles

    def setSrcFiles(self, newSrcFiles):
        self.srcFiles = newSrcFiles

    def getDestFilePath(self):
        return self.destFilePath

    def setDestFilePath(self, newDestFilePath):
        self.destFilePath = newDestFilePath

    def getFlavorAssetId(self):
        return self.flavorAssetId

    def setFlavorAssetId(self, newFlavorAssetId):
        self.flavorAssetId = newFlavorAssetId

    def getOffset(self):
        return self.offset

    def setOffset(self, newOffset):
        self.offset = newOffset

    def getDuration(self):
        return self.duration

    def setDuration(self, newDuration):
        self.duration = newDuration

    def getConcatenatedDuration(self):
        return self.concatenatedDuration

    def setConcatenatedDuration(self, newConcatenatedDuration):
        self.concatenatedDuration = newConcatenatedDuration


# @package Vidiun
# @subpackage Client
class VidiunControlPanelCommandBaseFilter(VidiunFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            createdByIdEqual=NotImplemented,
            typeEqual=NotImplemented,
            typeIn=NotImplemented,
            targetTypeEqual=NotImplemented,
            targetTypeIn=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented):
        VidiunFilter.__init__(self,
            orderBy,
            advancedSearch)

        # @var int
        self.idEqual = idEqual

        # @var string
        self.idIn = idIn

        # @var int
        self.createdAtGreaterThanOrEqual = createdAtGreaterThanOrEqual

        # @var int
        self.createdAtLessThanOrEqual = createdAtLessThanOrEqual

        # @var int
        self.createdByIdEqual = createdByIdEqual

        # @var VidiunControlPanelCommandType
        self.typeEqual = typeEqual

        # @var string
        self.typeIn = typeIn

        # @var VidiunControlPanelCommandTargetType
        self.targetTypeEqual = targetTypeEqual

        # @var string
        self.targetTypeIn = targetTypeIn

        # @var VidiunControlPanelCommandStatus
        self.statusEqual = statusEqual

        # @var string
        self.statusIn = statusIn


    PROPERTY_LOADERS = {
        'idEqual': getXmlNodeInt, 
        'idIn': getXmlNodeText, 
        'createdAtGreaterThanOrEqual': getXmlNodeInt, 
        'createdAtLessThanOrEqual': getXmlNodeInt, 
        'createdByIdEqual': getXmlNodeInt, 
        'typeEqual': (VidiunEnumsFactory.createInt, "VidiunControlPanelCommandType"), 
        'typeIn': getXmlNodeText, 
        'targetTypeEqual': (VidiunEnumsFactory.createInt, "VidiunControlPanelCommandTargetType"), 
        'targetTypeIn': getXmlNodeText, 
        'statusEqual': (VidiunEnumsFactory.createInt, "VidiunControlPanelCommandStatus"), 
        'statusIn': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunControlPanelCommandBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunFilter.toParams(self)
        vparams.put("objectType", "VidiunControlPanelCommandBaseFilter")
        vparams.addIntIfDefined("idEqual", self.idEqual)
        vparams.addStringIfDefined("idIn", self.idIn)
        vparams.addIntIfDefined("createdAtGreaterThanOrEqual", self.createdAtGreaterThanOrEqual)
        vparams.addIntIfDefined("createdAtLessThanOrEqual", self.createdAtLessThanOrEqual)
        vparams.addIntIfDefined("createdByIdEqual", self.createdByIdEqual)
        vparams.addIntEnumIfDefined("typeEqual", self.typeEqual)
        vparams.addStringIfDefined("typeIn", self.typeIn)
        vparams.addIntEnumIfDefined("targetTypeEqual", self.targetTypeEqual)
        vparams.addStringIfDefined("targetTypeIn", self.targetTypeIn)
        vparams.addIntEnumIfDefined("statusEqual", self.statusEqual)
        vparams.addStringIfDefined("statusIn", self.statusIn)
        return vparams

    def getIdEqual(self):
        return self.idEqual

    def setIdEqual(self, newIdEqual):
        self.idEqual = newIdEqual

    def getIdIn(self):
        return self.idIn

    def setIdIn(self, newIdIn):
        self.idIn = newIdIn

    def getCreatedAtGreaterThanOrEqual(self):
        return self.createdAtGreaterThanOrEqual

    def setCreatedAtGreaterThanOrEqual(self, newCreatedAtGreaterThanOrEqual):
        self.createdAtGreaterThanOrEqual = newCreatedAtGreaterThanOrEqual

    def getCreatedAtLessThanOrEqual(self):
        return self.createdAtLessThanOrEqual

    def setCreatedAtLessThanOrEqual(self, newCreatedAtLessThanOrEqual):
        self.createdAtLessThanOrEqual = newCreatedAtLessThanOrEqual

    def getCreatedByIdEqual(self):
        return self.createdByIdEqual

    def setCreatedByIdEqual(self, newCreatedByIdEqual):
        self.createdByIdEqual = newCreatedByIdEqual

    def getTypeEqual(self):
        return self.typeEqual

    def setTypeEqual(self, newTypeEqual):
        self.typeEqual = newTypeEqual

    def getTypeIn(self):
        return self.typeIn

    def setTypeIn(self, newTypeIn):
        self.typeIn = newTypeIn

    def getTargetTypeEqual(self):
        return self.targetTypeEqual

    def setTargetTypeEqual(self, newTargetTypeEqual):
        self.targetTypeEqual = newTargetTypeEqual

    def getTargetTypeIn(self):
        return self.targetTypeIn

    def setTargetTypeIn(self, newTargetTypeIn):
        self.targetTypeIn = newTargetTypeIn

    def getStatusEqual(self):
        return self.statusEqual

    def setStatusEqual(self, newStatusEqual):
        self.statusEqual = newStatusEqual

    def getStatusIn(self):
        return self.statusIn

    def setStatusIn(self, newStatusIn):
        self.statusIn = newStatusIn


# @package Vidiun
# @subpackage Client
class VidiunControlPanelCommandListResponse(VidiunListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        VidiunListResponse.__init__(self,
            totalCount)

        # @var array of VidiunControlPanelCommand
        # @readonly
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (VidiunObjectFactory.createArray, VidiunControlPanelCommand), 
    }

    def fromXml(self, node):
        VidiunListResponse.fromXml(self, node)
        self.fromXmlImpl(node, VidiunControlPanelCommandListResponse.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunListResponse.toParams(self)
        vparams.put("objectType", "VidiunControlPanelCommandListResponse")
        return vparams

    def getObjects(self):
        return self.objects


# @package Vidiun
# @subpackage Client
class VidiunConvartableJobData(VidiunJobData):
    def __init__(self,
            srcFileSyncLocalPath=NotImplemented,
            actualSrcFileSyncLocalPath=NotImplemented,
            srcFileSyncRemoteUrl=NotImplemented,
            srcFileSyncs=NotImplemented,
            engineVersion=NotImplemented,
            flavorParamsOutputId=NotImplemented,
            flavorParamsOutput=NotImplemented,
            mediaInfoId=NotImplemented,
            currentOperationSet=NotImplemented,
            currentOperationIndex=NotImplemented,
            pluginData=NotImplemented):
        VidiunJobData.__init__(self)

        # @var string
        self.srcFileSyncLocalPath = srcFileSyncLocalPath

        # The translated path as used by the scheduler
        # @var string
        self.actualSrcFileSyncLocalPath = actualSrcFileSyncLocalPath

        # @var string
        self.srcFileSyncRemoteUrl = srcFileSyncRemoteUrl

        # @var array of VidiunSourceFileSyncDescriptor
        self.srcFileSyncs = srcFileSyncs

        # @var int
        self.engineVersion = engineVersion

        # @var int
        self.flavorParamsOutputId = flavorParamsOutputId

        # @var VidiunFlavorParamsOutput
        self.flavorParamsOutput = flavorParamsOutput

        # @var int
        self.mediaInfoId = mediaInfoId

        # @var int
        self.currentOperationSet = currentOperationSet

        # @var int
        self.currentOperationIndex = currentOperationIndex

        # @var array of VidiunKeyValue
        self.pluginData = pluginData


    PROPERTY_LOADERS = {
        'srcFileSyncLocalPath': getXmlNodeText, 
        'actualSrcFileSyncLocalPath': getXmlNodeText, 
        'srcFileSyncRemoteUrl': getXmlNodeText, 
        'srcFileSyncs': (VidiunObjectFactory.createArray, VidiunSourceFileSyncDescriptor), 
        'engineVersion': getXmlNodeInt, 
        'flavorParamsOutputId': getXmlNodeInt, 
        'flavorParamsOutput': (VidiunObjectFactory.create, VidiunFlavorParamsOutput), 
        'mediaInfoId': getXmlNodeInt, 
        'currentOperationSet': getXmlNodeInt, 
        'currentOperationIndex': getXmlNodeInt, 
        'pluginData': (VidiunObjectFactory.createArray, VidiunKeyValue), 
    }

    def fromXml(self, node):
        VidiunJobData.fromXml(self, node)
        self.fromXmlImpl(node, VidiunConvartableJobData.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunJobData.toParams(self)
        vparams.put("objectType", "VidiunConvartableJobData")
        vparams.addStringIfDefined("srcFileSyncLocalPath", self.srcFileSyncLocalPath)
        vparams.addStringIfDefined("actualSrcFileSyncLocalPath", self.actualSrcFileSyncLocalPath)
        vparams.addStringIfDefined("srcFileSyncRemoteUrl", self.srcFileSyncRemoteUrl)
        vparams.addArrayIfDefined("srcFileSyncs", self.srcFileSyncs)
        vparams.addIntIfDefined("engineVersion", self.engineVersion)
        vparams.addIntIfDefined("flavorParamsOutputId", self.flavorParamsOutputId)
        vparams.addObjectIfDefined("flavorParamsOutput", self.flavorParamsOutput)
        vparams.addIntIfDefined("mediaInfoId", self.mediaInfoId)
        vparams.addIntIfDefined("currentOperationSet", self.currentOperationSet)
        vparams.addIntIfDefined("currentOperationIndex", self.currentOperationIndex)
        vparams.addArrayIfDefined("pluginData", self.pluginData)
        return vparams

    def getSrcFileSyncLocalPath(self):
        return self.srcFileSyncLocalPath

    def setSrcFileSyncLocalPath(self, newSrcFileSyncLocalPath):
        self.srcFileSyncLocalPath = newSrcFileSyncLocalPath

    def getActualSrcFileSyncLocalPath(self):
        return self.actualSrcFileSyncLocalPath

    def setActualSrcFileSyncLocalPath(self, newActualSrcFileSyncLocalPath):
        self.actualSrcFileSyncLocalPath = newActualSrcFileSyncLocalPath

    def getSrcFileSyncRemoteUrl(self):
        return self.srcFileSyncRemoteUrl

    def setSrcFileSyncRemoteUrl(self, newSrcFileSyncRemoteUrl):
        self.srcFileSyncRemoteUrl = newSrcFileSyncRemoteUrl

    def getSrcFileSyncs(self):
        return self.srcFileSyncs

    def setSrcFileSyncs(self, newSrcFileSyncs):
        self.srcFileSyncs = newSrcFileSyncs

    def getEngineVersion(self):
        return self.engineVersion

    def setEngineVersion(self, newEngineVersion):
        self.engineVersion = newEngineVersion

    def getFlavorParamsOutputId(self):
        return self.flavorParamsOutputId

    def setFlavorParamsOutputId(self, newFlavorParamsOutputId):
        self.flavorParamsOutputId = newFlavorParamsOutputId

    def getFlavorParamsOutput(self):
        return self.flavorParamsOutput

    def setFlavorParamsOutput(self, newFlavorParamsOutput):
        self.flavorParamsOutput = newFlavorParamsOutput

    def getMediaInfoId(self):
        return self.mediaInfoId

    def setMediaInfoId(self, newMediaInfoId):
        self.mediaInfoId = newMediaInfoId

    def getCurrentOperationSet(self):
        return self.currentOperationSet

    def setCurrentOperationSet(self, newCurrentOperationSet):
        self.currentOperationSet = newCurrentOperationSet

    def getCurrentOperationIndex(self):
        return self.currentOperationIndex

    def setCurrentOperationIndex(self, newCurrentOperationIndex):
        self.currentOperationIndex = newCurrentOperationIndex

    def getPluginData(self):
        return self.pluginData

    def setPluginData(self, newPluginData):
        self.pluginData = newPluginData


# @package Vidiun
# @subpackage Client
class VidiunConversionProfileAssetParamsListResponse(VidiunListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        VidiunListResponse.__init__(self,
            totalCount)

        # @var array of VidiunConversionProfileAssetParams
        # @readonly
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (VidiunObjectFactory.createArray, VidiunConversionProfileAssetParams), 
    }

    def fromXml(self, node):
        VidiunListResponse.fromXml(self, node)
        self.fromXmlImpl(node, VidiunConversionProfileAssetParamsListResponse.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunListResponse.toParams(self)
        vparams.put("objectType", "VidiunConversionProfileAssetParamsListResponse")
        return vparams

    def getObjects(self):
        return self.objects


# @package Vidiun
# @subpackage Client
class VidiunConversionProfileListResponse(VidiunListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        VidiunListResponse.__init__(self,
            totalCount)

        # @var array of VidiunConversionProfile
        # @readonly
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (VidiunObjectFactory.createArray, VidiunConversionProfile), 
    }

    def fromXml(self, node):
        VidiunListResponse.fromXml(self, node)
        self.fromXmlImpl(node, VidiunConversionProfileListResponse.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunListResponse.toParams(self)
        vparams.put("objectType", "VidiunConversionProfileListResponse")
        return vparams

    def getObjects(self):
        return self.objects


# @package Vidiun
# @subpackage Client
class VidiunConvertLiveSegmentJobData(VidiunJobData):
    def __init__(self,
            entryId=NotImplemented,
            assetId=NotImplemented,
            mediaServerIndex=NotImplemented,
            fileIndex=NotImplemented,
            srcFilePath=NotImplemented,
            destFilePath=NotImplemented,
            endTime=NotImplemented,
            destDataFilePath=NotImplemented):
        VidiunJobData.__init__(self)

        # Live stream entry id
        # @var string
        self.entryId = entryId

        # @var string
        self.assetId = assetId

        # Primary or secondary media server
        # @var VidiunEntryServerNodeType
        self.mediaServerIndex = mediaServerIndex

        # The index of the file within the entry
        # @var int
        self.fileIndex = fileIndex

        # The recorded live media
        # @var string
        self.srcFilePath = srcFilePath

        # The output file
        # @var string
        self.destFilePath = destFilePath

        # Duration of the live entry including all recorded segments including the current
        # @var float
        self.endTime = endTime

        # The data output file
        # @var string
        self.destDataFilePath = destDataFilePath


    PROPERTY_LOADERS = {
        'entryId': getXmlNodeText, 
        'assetId': getXmlNodeText, 
        'mediaServerIndex': (VidiunEnumsFactory.createString, "VidiunEntryServerNodeType"), 
        'fileIndex': getXmlNodeInt, 
        'srcFilePath': getXmlNodeText, 
        'destFilePath': getXmlNodeText, 
        'endTime': getXmlNodeFloat, 
        'destDataFilePath': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunJobData.fromXml(self, node)
        self.fromXmlImpl(node, VidiunConvertLiveSegmentJobData.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunJobData.toParams(self)
        vparams.put("objectType", "VidiunConvertLiveSegmentJobData")
        vparams.addStringIfDefined("entryId", self.entryId)
        vparams.addStringIfDefined("assetId", self.assetId)
        vparams.addStringEnumIfDefined("mediaServerIndex", self.mediaServerIndex)
        vparams.addIntIfDefined("fileIndex", self.fileIndex)
        vparams.addStringIfDefined("srcFilePath", self.srcFilePath)
        vparams.addStringIfDefined("destFilePath", self.destFilePath)
        vparams.addFloatIfDefined("endTime", self.endTime)
        vparams.addStringIfDefined("destDataFilePath", self.destDataFilePath)
        return vparams

    def getEntryId(self):
        return self.entryId

    def setEntryId(self, newEntryId):
        self.entryId = newEntryId

    def getAssetId(self):
        return self.assetId

    def setAssetId(self, newAssetId):
        self.assetId = newAssetId

    def getMediaServerIndex(self):
        return self.mediaServerIndex

    def setMediaServerIndex(self, newMediaServerIndex):
        self.mediaServerIndex = newMediaServerIndex

    def getFileIndex(self):
        return self.fileIndex

    def setFileIndex(self, newFileIndex):
        self.fileIndex = newFileIndex

    def getSrcFilePath(self):
        return self.srcFilePath

    def setSrcFilePath(self, newSrcFilePath):
        self.srcFilePath = newSrcFilePath

    def getDestFilePath(self):
        return self.destFilePath

    def setDestFilePath(self, newDestFilePath):
        self.destFilePath = newDestFilePath

    def getEndTime(self):
        return self.endTime

    def setEndTime(self, newEndTime):
        self.endTime = newEndTime

    def getDestDataFilePath(self):
        return self.destDataFilePath

    def setDestDataFilePath(self, newDestDataFilePath):
        self.destDataFilePath = newDestDataFilePath


# @package Vidiun
# @subpackage Client
class VidiunConvertProfileJobData(VidiunJobData):
    def __init__(self,
            inputFileSyncLocalPath=NotImplemented,
            thumbHeight=NotImplemented,
            thumbBitrate=NotImplemented):
        VidiunJobData.__init__(self)

        # @var string
        self.inputFileSyncLocalPath = inputFileSyncLocalPath

        # The height of last created thumbnail, will be used to comapare if this thumbnail is the best we can have
        # @var int
        self.thumbHeight = thumbHeight

        # The bit rate of last created thumbnail, will be used to comapare if this thumbnail is the best we can have
        # @var int
        self.thumbBitrate = thumbBitrate


    PROPERTY_LOADERS = {
        'inputFileSyncLocalPath': getXmlNodeText, 
        'thumbHeight': getXmlNodeInt, 
        'thumbBitrate': getXmlNodeInt, 
    }

    def fromXml(self, node):
        VidiunJobData.fromXml(self, node)
        self.fromXmlImpl(node, VidiunConvertProfileJobData.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunJobData.toParams(self)
        vparams.put("objectType", "VidiunConvertProfileJobData")
        vparams.addStringIfDefined("inputFileSyncLocalPath", self.inputFileSyncLocalPath)
        vparams.addIntIfDefined("thumbHeight", self.thumbHeight)
        vparams.addIntIfDefined("thumbBitrate", self.thumbBitrate)
        return vparams

    def getInputFileSyncLocalPath(self):
        return self.inputFileSyncLocalPath

    def setInputFileSyncLocalPath(self, newInputFileSyncLocalPath):
        self.inputFileSyncLocalPath = newInputFileSyncLocalPath

    def getThumbHeight(self):
        return self.thumbHeight

    def setThumbHeight(self, newThumbHeight):
        self.thumbHeight = newThumbHeight

    def getThumbBitrate(self):
        return self.thumbBitrate

    def setThumbBitrate(self, newThumbBitrate):
        self.thumbBitrate = newThumbBitrate


# @package Vidiun
# @subpackage Client
class VidiunCopyPartnerJobData(VidiunJobData):
    def __init__(self,
            fromPartnerId=NotImplemented,
            toPartnerId=NotImplemented):
        VidiunJobData.__init__(self)

        # Id of the partner to copy from
        # @var int
        self.fromPartnerId = fromPartnerId

        # Id of the partner to copy to
        # @var int
        self.toPartnerId = toPartnerId


    PROPERTY_LOADERS = {
        'fromPartnerId': getXmlNodeInt, 
        'toPartnerId': getXmlNodeInt, 
    }

    def fromXml(self, node):
        VidiunJobData.fromXml(self, node)
        self.fromXmlImpl(node, VidiunCopyPartnerJobData.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunJobData.toParams(self)
        vparams.put("objectType", "VidiunCopyPartnerJobData")
        vparams.addIntIfDefined("fromPartnerId", self.fromPartnerId)
        vparams.addIntIfDefined("toPartnerId", self.toPartnerId)
        return vparams

    def getFromPartnerId(self):
        return self.fromPartnerId

    def setFromPartnerId(self, newFromPartnerId):
        self.fromPartnerId = newFromPartnerId

    def getToPartnerId(self):
        return self.toPartnerId

    def setToPartnerId(self, newToPartnerId):
        self.toPartnerId = newToPartnerId


# @package Vidiun
# @subpackage Client
class VidiunCountryRestriction(VidiunBaseRestriction):
    def __init__(self,
            countryRestrictionType=NotImplemented,
            countryList=NotImplemented):
        VidiunBaseRestriction.__init__(self)

        # Country restriction type (Allow or deny)
        # @var VidiunCountryRestrictionType
        self.countryRestrictionType = countryRestrictionType

        # Comma separated list of country codes to allow to deny
        # @var string
        self.countryList = countryList


    PROPERTY_LOADERS = {
        'countryRestrictionType': (VidiunEnumsFactory.createInt, "VidiunCountryRestrictionType"), 
        'countryList': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunBaseRestriction.fromXml(self, node)
        self.fromXmlImpl(node, VidiunCountryRestriction.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunBaseRestriction.toParams(self)
        vparams.put("objectType", "VidiunCountryRestriction")
        vparams.addIntEnumIfDefined("countryRestrictionType", self.countryRestrictionType)
        vparams.addStringIfDefined("countryList", self.countryList)
        return vparams

    def getCountryRestrictionType(self):
        return self.countryRestrictionType

    def setCountryRestrictionType(self, newCountryRestrictionType):
        self.countryRestrictionType = newCountryRestrictionType

    def getCountryList(self):
        return self.countryList

    def setCountryList(self, newCountryList):
        self.countryList = newCountryList


# @package Vidiun
# @subpackage Client
class VidiunDataListResponse(VidiunListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        VidiunListResponse.__init__(self,
            totalCount)

        # @var array of VidiunDataEntry
        # @readonly
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (VidiunObjectFactory.createArray, VidiunDataEntry), 
    }

    def fromXml(self, node):
        VidiunListResponse.fromXml(self, node)
        self.fromXmlImpl(node, VidiunDataListResponse.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunListResponse.toParams(self)
        vparams.put("objectType", "VidiunDataListResponse")
        return vparams

    def getObjects(self):
        return self.objects


# @package Vidiun
# @subpackage Client
class VidiunDeleteFileJobData(VidiunJobData):
    def __init__(self,
            localFileSyncPath=NotImplemented):
        VidiunJobData.__init__(self)

        # @var string
        self.localFileSyncPath = localFileSyncPath


    PROPERTY_LOADERS = {
        'localFileSyncPath': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunJobData.fromXml(self, node)
        self.fromXmlImpl(node, VidiunDeleteFileJobData.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunJobData.toParams(self)
        vparams.put("objectType", "VidiunDeleteFileJobData")
        vparams.addStringIfDefined("localFileSyncPath", self.localFileSyncPath)
        return vparams

    def getLocalFileSyncPath(self):
        return self.localFileSyncPath

    def setLocalFileSyncPath(self, newLocalFileSyncPath):
        self.localFileSyncPath = newLocalFileSyncPath


# @package Vidiun
# @subpackage Client
class VidiunDeleteJobData(VidiunJobData):
    def __init__(self,
            filter=NotImplemented):
        VidiunJobData.__init__(self)

        # The filter should return the list of objects that need to be deleted.
        # @var VidiunFilter
        self.filter = filter


    PROPERTY_LOADERS = {
        'filter': (VidiunObjectFactory.create, VidiunFilter), 
    }

    def fromXml(self, node):
        VidiunJobData.fromXml(self, node)
        self.fromXmlImpl(node, VidiunDeleteJobData.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunJobData.toParams(self)
        vparams.put("objectType", "VidiunDeleteJobData")
        vparams.addObjectIfDefined("filter", self.filter)
        return vparams

    def getFilter(self):
        return self.filter

    def setFilter(self, newFilter):
        self.filter = newFilter


# @package Vidiun
# @subpackage Client
class VidiunDeliveryProfileAkamaiAppleHttpManifest(VidiunDeliveryProfile):
    def __init__(self,
            id=NotImplemented,
            partnerId=NotImplemented,
            name=NotImplemented,
            type=NotImplemented,
            systemName=NotImplemented,
            description=NotImplemented,
            createdAt=NotImplemented,
            updatedAt=NotImplemented,
            streamerType=NotImplemented,
            url=NotImplemented,
            hostName=NotImplemented,
            status=NotImplemented,
            recognizer=NotImplemented,
            tokenizer=NotImplemented,
            isDefault=NotImplemented,
            parentId=NotImplemented,
            mediaProtocols=NotImplemented,
            priority=NotImplemented,
            extraParams=NotImplemented,
            supportClipping=NotImplemented):
        VidiunDeliveryProfile.__init__(self,
            id,
            partnerId,
            name,
            type,
            systemName,
            description,
            createdAt,
            updatedAt,
            streamerType,
            url,
            hostName,
            status,
            recognizer,
            tokenizer,
            isDefault,
            parentId,
            mediaProtocols,
            priority,
            extraParams)

        # Should we use timing parameters - clipTo / seekFrom
        # @var bool
        self.supportClipping = supportClipping


    PROPERTY_LOADERS = {
        'supportClipping': getXmlNodeBool, 
    }

    def fromXml(self, node):
        VidiunDeliveryProfile.fromXml(self, node)
        self.fromXmlImpl(node, VidiunDeliveryProfileAkamaiAppleHttpManifest.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunDeliveryProfile.toParams(self)
        vparams.put("objectType", "VidiunDeliveryProfileAkamaiAppleHttpManifest")
        vparams.addBoolIfDefined("supportClipping", self.supportClipping)
        return vparams

    def getSupportClipping(self):
        return self.supportClipping

    def setSupportClipping(self, newSupportClipping):
        self.supportClipping = newSupportClipping


# @package Vidiun
# @subpackage Client
class VidiunDeliveryProfileAkamaiHds(VidiunDeliveryProfile):
    def __init__(self,
            id=NotImplemented,
            partnerId=NotImplemented,
            name=NotImplemented,
            type=NotImplemented,
            systemName=NotImplemented,
            description=NotImplemented,
            createdAt=NotImplemented,
            updatedAt=NotImplemented,
            streamerType=NotImplemented,
            url=NotImplemented,
            hostName=NotImplemented,
            status=NotImplemented,
            recognizer=NotImplemented,
            tokenizer=NotImplemented,
            isDefault=NotImplemented,
            parentId=NotImplemented,
            mediaProtocols=NotImplemented,
            priority=NotImplemented,
            extraParams=NotImplemented,
            supportClipping=NotImplemented):
        VidiunDeliveryProfile.__init__(self,
            id,
            partnerId,
            name,
            type,
            systemName,
            description,
            createdAt,
            updatedAt,
            streamerType,
            url,
            hostName,
            status,
            recognizer,
            tokenizer,
            isDefault,
            parentId,
            mediaProtocols,
            priority,
            extraParams)

        # Should we use timing parameters - clipTo / seekFrom
        # @var bool
        self.supportClipping = supportClipping


    PROPERTY_LOADERS = {
        'supportClipping': getXmlNodeBool, 
    }

    def fromXml(self, node):
        VidiunDeliveryProfile.fromXml(self, node)
        self.fromXmlImpl(node, VidiunDeliveryProfileAkamaiHds.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunDeliveryProfile.toParams(self)
        vparams.put("objectType", "VidiunDeliveryProfileAkamaiHds")
        vparams.addBoolIfDefined("supportClipping", self.supportClipping)
        return vparams

    def getSupportClipping(self):
        return self.supportClipping

    def setSupportClipping(self, newSupportClipping):
        self.supportClipping = newSupportClipping


# @package Vidiun
# @subpackage Client
class VidiunDeliveryProfileAkamaiHttp(VidiunDeliveryProfile):
    def __init__(self,
            id=NotImplemented,
            partnerId=NotImplemented,
            name=NotImplemented,
            type=NotImplemented,
            systemName=NotImplemented,
            description=NotImplemented,
            createdAt=NotImplemented,
            updatedAt=NotImplemented,
            streamerType=NotImplemented,
            url=NotImplemented,
            hostName=NotImplemented,
            status=NotImplemented,
            recognizer=NotImplemented,
            tokenizer=NotImplemented,
            isDefault=NotImplemented,
            parentId=NotImplemented,
            mediaProtocols=NotImplemented,
            priority=NotImplemented,
            extraParams=NotImplemented,
            useIntelliseek=NotImplemented):
        VidiunDeliveryProfile.__init__(self,
            id,
            partnerId,
            name,
            type,
            systemName,
            description,
            createdAt,
            updatedAt,
            streamerType,
            url,
            hostName,
            status,
            recognizer,
            tokenizer,
            isDefault,
            parentId,
            mediaProtocols,
            priority,
            extraParams)

        # Should we use intelliseek
        # @var bool
        self.useIntelliseek = useIntelliseek


    PROPERTY_LOADERS = {
        'useIntelliseek': getXmlNodeBool, 
    }

    def fromXml(self, node):
        VidiunDeliveryProfile.fromXml(self, node)
        self.fromXmlImpl(node, VidiunDeliveryProfileAkamaiHttp.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunDeliveryProfile.toParams(self)
        vparams.put("objectType", "VidiunDeliveryProfileAkamaiHttp")
        vparams.addBoolIfDefined("useIntelliseek", self.useIntelliseek)
        return vparams

    def getUseIntelliseek(self):
        return self.useIntelliseek

    def setUseIntelliseek(self, newUseIntelliseek):
        self.useIntelliseek = newUseIntelliseek


# @package Vidiun
# @subpackage Client
class VidiunDeliveryProfileBaseFilter(VidiunFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            streamerTypeEqual=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented):
        VidiunFilter.__init__(self,
            orderBy,
            advancedSearch)

        # @var int
        self.idEqual = idEqual

        # @var string
        self.idIn = idIn

        # @var int
        self.partnerIdEqual = partnerIdEqual

        # @var string
        self.partnerIdIn = partnerIdIn

        # @var string
        self.systemNameEqual = systemNameEqual

        # @var string
        self.systemNameIn = systemNameIn

        # @var int
        self.createdAtGreaterThanOrEqual = createdAtGreaterThanOrEqual

        # @var int
        self.createdAtLessThanOrEqual = createdAtLessThanOrEqual

        # @var int
        self.updatedAtGreaterThanOrEqual = updatedAtGreaterThanOrEqual

        # @var int
        self.updatedAtLessThanOrEqual = updatedAtLessThanOrEqual

        # @var VidiunPlaybackProtocol
        self.streamerTypeEqual = streamerTypeEqual

        # @var VidiunDeliveryStatus
        self.statusEqual = statusEqual

        # @var string
        self.statusIn = statusIn


    PROPERTY_LOADERS = {
        'idEqual': getXmlNodeInt, 
        'idIn': getXmlNodeText, 
        'partnerIdEqual': getXmlNodeInt, 
        'partnerIdIn': getXmlNodeText, 
        'systemNameEqual': getXmlNodeText, 
        'systemNameIn': getXmlNodeText, 
        'createdAtGreaterThanOrEqual': getXmlNodeInt, 
        'createdAtLessThanOrEqual': getXmlNodeInt, 
        'updatedAtGreaterThanOrEqual': getXmlNodeInt, 
        'updatedAtLessThanOrEqual': getXmlNodeInt, 
        'streamerTypeEqual': (VidiunEnumsFactory.createString, "VidiunPlaybackProtocol"), 
        'statusEqual': (VidiunEnumsFactory.createInt, "VidiunDeliveryStatus"), 
        'statusIn': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunDeliveryProfileBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunFilter.toParams(self)
        vparams.put("objectType", "VidiunDeliveryProfileBaseFilter")
        vparams.addIntIfDefined("idEqual", self.idEqual)
        vparams.addStringIfDefined("idIn", self.idIn)
        vparams.addIntIfDefined("partnerIdEqual", self.partnerIdEqual)
        vparams.addStringIfDefined("partnerIdIn", self.partnerIdIn)
        vparams.addStringIfDefined("systemNameEqual", self.systemNameEqual)
        vparams.addStringIfDefined("systemNameIn", self.systemNameIn)
        vparams.addIntIfDefined("createdAtGreaterThanOrEqual", self.createdAtGreaterThanOrEqual)
        vparams.addIntIfDefined("createdAtLessThanOrEqual", self.createdAtLessThanOrEqual)
        vparams.addIntIfDefined("updatedAtGreaterThanOrEqual", self.updatedAtGreaterThanOrEqual)
        vparams.addIntIfDefined("updatedAtLessThanOrEqual", self.updatedAtLessThanOrEqual)
        vparams.addStringEnumIfDefined("streamerTypeEqual", self.streamerTypeEqual)
        vparams.addIntEnumIfDefined("statusEqual", self.statusEqual)
        vparams.addStringIfDefined("statusIn", self.statusIn)
        return vparams

    def getIdEqual(self):
        return self.idEqual

    def setIdEqual(self, newIdEqual):
        self.idEqual = newIdEqual

    def getIdIn(self):
        return self.idIn

    def setIdIn(self, newIdIn):
        self.idIn = newIdIn

    def getPartnerIdEqual(self):
        return self.partnerIdEqual

    def setPartnerIdEqual(self, newPartnerIdEqual):
        self.partnerIdEqual = newPartnerIdEqual

    def getPartnerIdIn(self):
        return self.partnerIdIn

    def setPartnerIdIn(self, newPartnerIdIn):
        self.partnerIdIn = newPartnerIdIn

    def getSystemNameEqual(self):
        return self.systemNameEqual

    def setSystemNameEqual(self, newSystemNameEqual):
        self.systemNameEqual = newSystemNameEqual

    def getSystemNameIn(self):
        return self.systemNameIn

    def setSystemNameIn(self, newSystemNameIn):
        self.systemNameIn = newSystemNameIn

    def getCreatedAtGreaterThanOrEqual(self):
        return self.createdAtGreaterThanOrEqual

    def setCreatedAtGreaterThanOrEqual(self, newCreatedAtGreaterThanOrEqual):
        self.createdAtGreaterThanOrEqual = newCreatedAtGreaterThanOrEqual

    def getCreatedAtLessThanOrEqual(self):
        return self.createdAtLessThanOrEqual

    def setCreatedAtLessThanOrEqual(self, newCreatedAtLessThanOrEqual):
        self.createdAtLessThanOrEqual = newCreatedAtLessThanOrEqual

    def getUpdatedAtGreaterThanOrEqual(self):
        return self.updatedAtGreaterThanOrEqual

    def setUpdatedAtGreaterThanOrEqual(self, newUpdatedAtGreaterThanOrEqual):
        self.updatedAtGreaterThanOrEqual = newUpdatedAtGreaterThanOrEqual

    def getUpdatedAtLessThanOrEqual(self):
        return self.updatedAtLessThanOrEqual

    def setUpdatedAtLessThanOrEqual(self, newUpdatedAtLessThanOrEqual):
        self.updatedAtLessThanOrEqual = newUpdatedAtLessThanOrEqual

    def getStreamerTypeEqual(self):
        return self.streamerTypeEqual

    def setStreamerTypeEqual(self, newStreamerTypeEqual):
        self.streamerTypeEqual = newStreamerTypeEqual

    def getStatusEqual(self):
        return self.statusEqual

    def setStatusEqual(self, newStatusEqual):
        self.statusEqual = newStatusEqual

    def getStatusIn(self):
        return self.statusIn

    def setStatusIn(self, newStatusIn):
        self.statusIn = newStatusIn


# @package Vidiun
# @subpackage Client
class VidiunDeliveryProfileCondition(VidiunCondition):
    def __init__(self,
            type=NotImplemented,
            description=NotImplemented,
            not_=NotImplemented,
            deliveryProfileIds=NotImplemented):
        VidiunCondition.__init__(self,
            type,
            description,
            not_)

        # The delivery ids that are accepted by this condition
        # @var array of VidiunIntegerValue
        self.deliveryProfileIds = deliveryProfileIds


    PROPERTY_LOADERS = {
        'deliveryProfileIds': (VidiunObjectFactory.createArray, VidiunIntegerValue), 
    }

    def fromXml(self, node):
        VidiunCondition.fromXml(self, node)
        self.fromXmlImpl(node, VidiunDeliveryProfileCondition.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunCondition.toParams(self)
        vparams.put("objectType", "VidiunDeliveryProfileCondition")
        vparams.addArrayIfDefined("deliveryProfileIds", self.deliveryProfileIds)
        return vparams

    def getDeliveryProfileIds(self):
        return self.deliveryProfileIds

    def setDeliveryProfileIds(self, newDeliveryProfileIds):
        self.deliveryProfileIds = newDeliveryProfileIds


# @package Vidiun
# @subpackage Client
class VidiunDeliveryProfileGenericAppleHttp(VidiunDeliveryProfile):
    def __init__(self,
            id=NotImplemented,
            partnerId=NotImplemented,
            name=NotImplemented,
            type=NotImplemented,
            systemName=NotImplemented,
            description=NotImplemented,
            createdAt=NotImplemented,
            updatedAt=NotImplemented,
            streamerType=NotImplemented,
            url=NotImplemented,
            hostName=NotImplemented,
            status=NotImplemented,
            recognizer=NotImplemented,
            tokenizer=NotImplemented,
            isDefault=NotImplemented,
            parentId=NotImplemented,
            mediaProtocols=NotImplemented,
            priority=NotImplemented,
            extraParams=NotImplemented,
            pattern=NotImplemented,
            rendererClass=NotImplemented,
            manifestRedirect=NotImplemented):
        VidiunDeliveryProfile.__init__(self,
            id,
            partnerId,
            name,
            type,
            systemName,
            description,
            createdAt,
            updatedAt,
            streamerType,
            url,
            hostName,
            status,
            recognizer,
            tokenizer,
            isDefault,
            parentId,
            mediaProtocols,
            priority,
            extraParams)

        # @var string
        self.pattern = pattern

        # rendererClass
        # @var string
        self.rendererClass = rendererClass

        # Enable to make playManifest redirect to the domain of the delivery profile
        # @var VidiunNullableBoolean
        self.manifestRedirect = manifestRedirect


    PROPERTY_LOADERS = {
        'pattern': getXmlNodeText, 
        'rendererClass': getXmlNodeText, 
        'manifestRedirect': (VidiunEnumsFactory.createInt, "VidiunNullableBoolean"), 
    }

    def fromXml(self, node):
        VidiunDeliveryProfile.fromXml(self, node)
        self.fromXmlImpl(node, VidiunDeliveryProfileGenericAppleHttp.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunDeliveryProfile.toParams(self)
        vparams.put("objectType", "VidiunDeliveryProfileGenericAppleHttp")
        vparams.addStringIfDefined("pattern", self.pattern)
        vparams.addStringIfDefined("rendererClass", self.rendererClass)
        vparams.addIntEnumIfDefined("manifestRedirect", self.manifestRedirect)
        return vparams

    def getPattern(self):
        return self.pattern

    def setPattern(self, newPattern):
        self.pattern = newPattern

    def getRendererClass(self):
        return self.rendererClass

    def setRendererClass(self, newRendererClass):
        self.rendererClass = newRendererClass

    def getManifestRedirect(self):
        return self.manifestRedirect

    def setManifestRedirect(self, newManifestRedirect):
        self.manifestRedirect = newManifestRedirect


# @package Vidiun
# @subpackage Client
class VidiunDeliveryProfileGenericHds(VidiunDeliveryProfile):
    def __init__(self,
            id=NotImplemented,
            partnerId=NotImplemented,
            name=NotImplemented,
            type=NotImplemented,
            systemName=NotImplemented,
            description=NotImplemented,
            createdAt=NotImplemented,
            updatedAt=NotImplemented,
            streamerType=NotImplemented,
            url=NotImplemented,
            hostName=NotImplemented,
            status=NotImplemented,
            recognizer=NotImplemented,
            tokenizer=NotImplemented,
            isDefault=NotImplemented,
            parentId=NotImplemented,
            mediaProtocols=NotImplemented,
            priority=NotImplemented,
            extraParams=NotImplemented,
            pattern=NotImplemented,
            rendererClass=NotImplemented):
        VidiunDeliveryProfile.__init__(self,
            id,
            partnerId,
            name,
            type,
            systemName,
            description,
            createdAt,
            updatedAt,
            streamerType,
            url,
            hostName,
            status,
            recognizer,
            tokenizer,
            isDefault,
            parentId,
            mediaProtocols,
            priority,
            extraParams)

        # @var string
        self.pattern = pattern

        # rendererClass
        # @var string
        self.rendererClass = rendererClass


    PROPERTY_LOADERS = {
        'pattern': getXmlNodeText, 
        'rendererClass': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunDeliveryProfile.fromXml(self, node)
        self.fromXmlImpl(node, VidiunDeliveryProfileGenericHds.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunDeliveryProfile.toParams(self)
        vparams.put("objectType", "VidiunDeliveryProfileGenericHds")
        vparams.addStringIfDefined("pattern", self.pattern)
        vparams.addStringIfDefined("rendererClass", self.rendererClass)
        return vparams

    def getPattern(self):
        return self.pattern

    def setPattern(self, newPattern):
        self.pattern = newPattern

    def getRendererClass(self):
        return self.rendererClass

    def setRendererClass(self, newRendererClass):
        self.rendererClass = newRendererClass


# @package Vidiun
# @subpackage Client
class VidiunDeliveryProfileGenericHttp(VidiunDeliveryProfile):
    def __init__(self,
            id=NotImplemented,
            partnerId=NotImplemented,
            name=NotImplemented,
            type=NotImplemented,
            systemName=NotImplemented,
            description=NotImplemented,
            createdAt=NotImplemented,
            updatedAt=NotImplemented,
            streamerType=NotImplemented,
            url=NotImplemented,
            hostName=NotImplemented,
            status=NotImplemented,
            recognizer=NotImplemented,
            tokenizer=NotImplemented,
            isDefault=NotImplemented,
            parentId=NotImplemented,
            mediaProtocols=NotImplemented,
            priority=NotImplemented,
            extraParams=NotImplemented,
            pattern=NotImplemented):
        VidiunDeliveryProfile.__init__(self,
            id,
            partnerId,
            name,
            type,
            systemName,
            description,
            createdAt,
            updatedAt,
            streamerType,
            url,
            hostName,
            status,
            recognizer,
            tokenizer,
            isDefault,
            parentId,
            mediaProtocols,
            priority,
            extraParams)

        # @var string
        self.pattern = pattern


    PROPERTY_LOADERS = {
        'pattern': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunDeliveryProfile.fromXml(self, node)
        self.fromXmlImpl(node, VidiunDeliveryProfileGenericHttp.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunDeliveryProfile.toParams(self)
        vparams.put("objectType", "VidiunDeliveryProfileGenericHttp")
        vparams.addStringIfDefined("pattern", self.pattern)
        return vparams

    def getPattern(self):
        return self.pattern

    def setPattern(self, newPattern):
        self.pattern = newPattern


# @package Vidiun
# @subpackage Client
class VidiunDeliveryProfileGenericSilverLight(VidiunDeliveryProfile):
    def __init__(self,
            id=NotImplemented,
            partnerId=NotImplemented,
            name=NotImplemented,
            type=NotImplemented,
            systemName=NotImplemented,
            description=NotImplemented,
            createdAt=NotImplemented,
            updatedAt=NotImplemented,
            streamerType=NotImplemented,
            url=NotImplemented,
            hostName=NotImplemented,
            status=NotImplemented,
            recognizer=NotImplemented,
            tokenizer=NotImplemented,
            isDefault=NotImplemented,
            parentId=NotImplemented,
            mediaProtocols=NotImplemented,
            priority=NotImplemented,
            extraParams=NotImplemented,
            pattern=NotImplemented):
        VidiunDeliveryProfile.__init__(self,
            id,
            partnerId,
            name,
            type,
            systemName,
            description,
            createdAt,
            updatedAt,
            streamerType,
            url,
            hostName,
            status,
            recognizer,
            tokenizer,
            isDefault,
            parentId,
            mediaProtocols,
            priority,
            extraParams)

        # @var string
        self.pattern = pattern


    PROPERTY_LOADERS = {
        'pattern': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunDeliveryProfile.fromXml(self, node)
        self.fromXmlImpl(node, VidiunDeliveryProfileGenericSilverLight.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunDeliveryProfile.toParams(self)
        vparams.put("objectType", "VidiunDeliveryProfileGenericSilverLight")
        vparams.addStringIfDefined("pattern", self.pattern)
        return vparams

    def getPattern(self):
        return self.pattern

    def setPattern(self, newPattern):
        self.pattern = newPattern


# @package Vidiun
# @subpackage Client
class VidiunDeliveryProfileListResponse(VidiunListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        VidiunListResponse.__init__(self,
            totalCount)

        # @var array of VidiunDeliveryProfile
        # @readonly
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (VidiunObjectFactory.createArray, VidiunDeliveryProfile), 
    }

    def fromXml(self, node):
        VidiunListResponse.fromXml(self, node)
        self.fromXmlImpl(node, VidiunDeliveryProfileListResponse.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunListResponse.toParams(self)
        vparams.put("objectType", "VidiunDeliveryProfileListResponse")
        return vparams

    def getObjects(self):
        return self.objects


# @package Vidiun
# @subpackage Client
class VidiunDeliveryProfileLiveAppleHttp(VidiunDeliveryProfile):
    def __init__(self,
            id=NotImplemented,
            partnerId=NotImplemented,
            name=NotImplemented,
            type=NotImplemented,
            systemName=NotImplemented,
            description=NotImplemented,
            createdAt=NotImplemented,
            updatedAt=NotImplemented,
            streamerType=NotImplemented,
            url=NotImplemented,
            hostName=NotImplemented,
            status=NotImplemented,
            recognizer=NotImplemented,
            tokenizer=NotImplemented,
            isDefault=NotImplemented,
            parentId=NotImplemented,
            mediaProtocols=NotImplemented,
            priority=NotImplemented,
            extraParams=NotImplemented,
            disableExtraAttributes=NotImplemented,
            forceProxy=NotImplemented):
        VidiunDeliveryProfile.__init__(self,
            id,
            partnerId,
            name,
            type,
            systemName,
            description,
            createdAt,
            updatedAt,
            streamerType,
            url,
            hostName,
            status,
            recognizer,
            tokenizer,
            isDefault,
            parentId,
            mediaProtocols,
            priority,
            extraParams)

        # @var bool
        self.disableExtraAttributes = disableExtraAttributes

        # @var bool
        self.forceProxy = forceProxy


    PROPERTY_LOADERS = {
        'disableExtraAttributes': getXmlNodeBool, 
        'forceProxy': getXmlNodeBool, 
    }

    def fromXml(self, node):
        VidiunDeliveryProfile.fromXml(self, node)
        self.fromXmlImpl(node, VidiunDeliveryProfileLiveAppleHttp.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunDeliveryProfile.toParams(self)
        vparams.put("objectType", "VidiunDeliveryProfileLiveAppleHttp")
        vparams.addBoolIfDefined("disableExtraAttributes", self.disableExtraAttributes)
        vparams.addBoolIfDefined("forceProxy", self.forceProxy)
        return vparams

    def getDisableExtraAttributes(self):
        return self.disableExtraAttributes

    def setDisableExtraAttributes(self, newDisableExtraAttributes):
        self.disableExtraAttributes = newDisableExtraAttributes

    def getForceProxy(self):
        return self.forceProxy

    def setForceProxy(self, newForceProxy):
        self.forceProxy = newForceProxy


# @package Vidiun
# @subpackage Client
class VidiunDeliveryProfileRtmp(VidiunDeliveryProfile):
    def __init__(self,
            id=NotImplemented,
            partnerId=NotImplemented,
            name=NotImplemented,
            type=NotImplemented,
            systemName=NotImplemented,
            description=NotImplemented,
            createdAt=NotImplemented,
            updatedAt=NotImplemented,
            streamerType=NotImplemented,
            url=NotImplemented,
            hostName=NotImplemented,
            status=NotImplemented,
            recognizer=NotImplemented,
            tokenizer=NotImplemented,
            isDefault=NotImplemented,
            parentId=NotImplemented,
            mediaProtocols=NotImplemented,
            priority=NotImplemented,
            extraParams=NotImplemented,
            enforceRtmpe=NotImplemented,
            prefix=NotImplemented):
        VidiunDeliveryProfile.__init__(self,
            id,
            partnerId,
            name,
            type,
            systemName,
            description,
            createdAt,
            updatedAt,
            streamerType,
            url,
            hostName,
            status,
            recognizer,
            tokenizer,
            isDefault,
            parentId,
            mediaProtocols,
            priority,
            extraParams)

        # enforceRtmpe
        # @var bool
        self.enforceRtmpe = enforceRtmpe

        # a prefix that is added to all stream urls (replaces storageProfile::rtmpPrefix)
        # @var string
        self.prefix = prefix


    PROPERTY_LOADERS = {
        'enforceRtmpe': getXmlNodeBool, 
        'prefix': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunDeliveryProfile.fromXml(self, node)
        self.fromXmlImpl(node, VidiunDeliveryProfileRtmp.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunDeliveryProfile.toParams(self)
        vparams.put("objectType", "VidiunDeliveryProfileRtmp")
        vparams.addBoolIfDefined("enforceRtmpe", self.enforceRtmpe)
        vparams.addStringIfDefined("prefix", self.prefix)
        return vparams

    def getEnforceRtmpe(self):
        return self.enforceRtmpe

    def setEnforceRtmpe(self, newEnforceRtmpe):
        self.enforceRtmpe = newEnforceRtmpe

    def getPrefix(self):
        return self.prefix

    def setPrefix(self, newPrefix):
        self.prefix = newPrefix


# @package Vidiun
# @subpackage Client
class VidiunDeliveryServerNode(VidiunServerNode):
    def __init__(self,
            id=NotImplemented,
            partnerId=NotImplemented,
            createdAt=NotImplemented,
            updatedAt=NotImplemented,
            heartbeatTime=NotImplemented,
            name=NotImplemented,
            systemName=NotImplemented,
            description=NotImplemented,
            hostName=NotImplemented,
            status=NotImplemented,
            type=NotImplemented,
            tags=NotImplemented,
            dc=NotImplemented,
            parentId=NotImplemented,
            playbackDomain=NotImplemented):
        VidiunServerNode.__init__(self,
            id,
            partnerId,
            createdAt,
            updatedAt,
            heartbeatTime,
            name,
            systemName,
            description,
            hostName,
            status,
            type,
            tags,
            dc,
            parentId)

        # Delivery server playback Domain
        # @var string
        self.playbackDomain = playbackDomain


    PROPERTY_LOADERS = {
        'playbackDomain': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunServerNode.fromXml(self, node)
        self.fromXmlImpl(node, VidiunDeliveryServerNode.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunServerNode.toParams(self)
        vparams.put("objectType", "VidiunDeliveryServerNode")
        vparams.addStringIfDefined("playbackDomain", self.playbackDomain)
        return vparams

    def getPlaybackDomain(self):
        return self.playbackDomain

    def setPlaybackDomain(self, newPlaybackDomain):
        self.playbackDomain = newPlaybackDomain


# @package Vidiun
# @subpackage Client
class VidiunDirectoryRestriction(VidiunBaseRestriction):
    def __init__(self,
            directoryRestrictionType=NotImplemented):
        VidiunBaseRestriction.__init__(self)

        # Vidiun directory restriction type
        # @var VidiunDirectoryRestrictionType
        self.directoryRestrictionType = directoryRestrictionType


    PROPERTY_LOADERS = {
        'directoryRestrictionType': (VidiunEnumsFactory.createInt, "VidiunDirectoryRestrictionType"), 
    }

    def fromXml(self, node):
        VidiunBaseRestriction.fromXml(self, node)
        self.fromXmlImpl(node, VidiunDirectoryRestriction.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunBaseRestriction.toParams(self)
        vparams.put("objectType", "VidiunDirectoryRestriction")
        vparams.addIntEnumIfDefined("directoryRestrictionType", self.directoryRestrictionType)
        return vparams

    def getDirectoryRestrictionType(self):
        return self.directoryRestrictionType

    def setDirectoryRestrictionType(self, newDirectoryRestrictionType):
        self.directoryRestrictionType = newDirectoryRestrictionType


# @package Vidiun
# @subpackage Client
class VidiunDrmEntryContextPluginData(VidiunPluginData):
    def __init__(self,
            flavorData=NotImplemented):
        VidiunPluginData.__init__(self)

        # For the uDRM we give the drm context data which is a json encoding of an array containing the uDRM data
        #      for each flavor that is required from this getContextData request.
        # @var string
        self.flavorData = flavorData


    PROPERTY_LOADERS = {
        'flavorData': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunPluginData.fromXml(self, node)
        self.fromXmlImpl(node, VidiunDrmEntryContextPluginData.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunPluginData.toParams(self)
        vparams.put("objectType", "VidiunDrmEntryContextPluginData")
        vparams.addStringIfDefined("flavorData", self.flavorData)
        return vparams

    def getFlavorData(self):
        return self.flavorData

    def setFlavorData(self, newFlavorData):
        self.flavorData = newFlavorData


# @package Vidiun
# @subpackage Client
class VidiunCategoryUserBaseFilter(VidiunRelatedFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            categoryIdEqual=NotImplemented,
            categoryIdIn=NotImplemented,
            userIdEqual=NotImplemented,
            userIdIn=NotImplemented,
            permissionLevelEqual=NotImplemented,
            permissionLevelIn=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            updateMethodEqual=NotImplemented,
            updateMethodIn=NotImplemented,
            categoryFullIdsStartsWith=NotImplemented,
            categoryFullIdsEqual=NotImplemented,
            permissionNamesMatchAnd=NotImplemented,
            permissionNamesMatchOr=NotImplemented,
            permissionNamesNotContains=NotImplemented):
        VidiunRelatedFilter.__init__(self,
            orderBy,
            advancedSearch)

        # @var int
        self.categoryIdEqual = categoryIdEqual

        # @var string
        self.categoryIdIn = categoryIdIn

        # @var string
        self.userIdEqual = userIdEqual

        # @var string
        self.userIdIn = userIdIn

        # @var VidiunCategoryUserPermissionLevel
        self.permissionLevelEqual = permissionLevelEqual

        # @var string
        self.permissionLevelIn = permissionLevelIn

        # @var VidiunCategoryUserStatus
        self.statusEqual = statusEqual

        # @var string
        self.statusIn = statusIn

        # @var int
        self.createdAtGreaterThanOrEqual = createdAtGreaterThanOrEqual

        # @var int
        self.createdAtLessThanOrEqual = createdAtLessThanOrEqual

        # @var int
        self.updatedAtGreaterThanOrEqual = updatedAtGreaterThanOrEqual

        # @var int
        self.updatedAtLessThanOrEqual = updatedAtLessThanOrEqual

        # @var VidiunUpdateMethodType
        self.updateMethodEqual = updateMethodEqual

        # @var string
        self.updateMethodIn = updateMethodIn

        # @var string
        self.categoryFullIdsStartsWith = categoryFullIdsStartsWith

        # @var string
        self.categoryFullIdsEqual = categoryFullIdsEqual

        # @var string
        self.permissionNamesMatchAnd = permissionNamesMatchAnd

        # @var string
        self.permissionNamesMatchOr = permissionNamesMatchOr

        # @var string
        self.permissionNamesNotContains = permissionNamesNotContains


    PROPERTY_LOADERS = {
        'categoryIdEqual': getXmlNodeInt, 
        'categoryIdIn': getXmlNodeText, 
        'userIdEqual': getXmlNodeText, 
        'userIdIn': getXmlNodeText, 
        'permissionLevelEqual': (VidiunEnumsFactory.createInt, "VidiunCategoryUserPermissionLevel"), 
        'permissionLevelIn': getXmlNodeText, 
        'statusEqual': (VidiunEnumsFactory.createInt, "VidiunCategoryUserStatus"), 
        'statusIn': getXmlNodeText, 
        'createdAtGreaterThanOrEqual': getXmlNodeInt, 
        'createdAtLessThanOrEqual': getXmlNodeInt, 
        'updatedAtGreaterThanOrEqual': getXmlNodeInt, 
        'updatedAtLessThanOrEqual': getXmlNodeInt, 
        'updateMethodEqual': (VidiunEnumsFactory.createInt, "VidiunUpdateMethodType"), 
        'updateMethodIn': getXmlNodeText, 
        'categoryFullIdsStartsWith': getXmlNodeText, 
        'categoryFullIdsEqual': getXmlNodeText, 
        'permissionNamesMatchAnd': getXmlNodeText, 
        'permissionNamesMatchOr': getXmlNodeText, 
        'permissionNamesNotContains': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunRelatedFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunCategoryUserBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunRelatedFilter.toParams(self)
        vparams.put("objectType", "VidiunCategoryUserBaseFilter")
        vparams.addIntIfDefined("categoryIdEqual", self.categoryIdEqual)
        vparams.addStringIfDefined("categoryIdIn", self.categoryIdIn)
        vparams.addStringIfDefined("userIdEqual", self.userIdEqual)
        vparams.addStringIfDefined("userIdIn", self.userIdIn)
        vparams.addIntEnumIfDefined("permissionLevelEqual", self.permissionLevelEqual)
        vparams.addStringIfDefined("permissionLevelIn", self.permissionLevelIn)
        vparams.addIntEnumIfDefined("statusEqual", self.statusEqual)
        vparams.addStringIfDefined("statusIn", self.statusIn)
        vparams.addIntIfDefined("createdAtGreaterThanOrEqual", self.createdAtGreaterThanOrEqual)
        vparams.addIntIfDefined("createdAtLessThanOrEqual", self.createdAtLessThanOrEqual)
        vparams.addIntIfDefined("updatedAtGreaterThanOrEqual", self.updatedAtGreaterThanOrEqual)
        vparams.addIntIfDefined("updatedAtLessThanOrEqual", self.updatedAtLessThanOrEqual)
        vparams.addIntEnumIfDefined("updateMethodEqual", self.updateMethodEqual)
        vparams.addStringIfDefined("updateMethodIn", self.updateMethodIn)
        vparams.addStringIfDefined("categoryFullIdsStartsWith", self.categoryFullIdsStartsWith)
        vparams.addStringIfDefined("categoryFullIdsEqual", self.categoryFullIdsEqual)
        vparams.addStringIfDefined("permissionNamesMatchAnd", self.permissionNamesMatchAnd)
        vparams.addStringIfDefined("permissionNamesMatchOr", self.permissionNamesMatchOr)
        vparams.addStringIfDefined("permissionNamesNotContains", self.permissionNamesNotContains)
        return vparams

    def getCategoryIdEqual(self):
        return self.categoryIdEqual

    def setCategoryIdEqual(self, newCategoryIdEqual):
        self.categoryIdEqual = newCategoryIdEqual

    def getCategoryIdIn(self):
        return self.categoryIdIn

    def setCategoryIdIn(self, newCategoryIdIn):
        self.categoryIdIn = newCategoryIdIn

    def getUserIdEqual(self):
        return self.userIdEqual

    def setUserIdEqual(self, newUserIdEqual):
        self.userIdEqual = newUserIdEqual

    def getUserIdIn(self):
        return self.userIdIn

    def setUserIdIn(self, newUserIdIn):
        self.userIdIn = newUserIdIn

    def getPermissionLevelEqual(self):
        return self.permissionLevelEqual

    def setPermissionLevelEqual(self, newPermissionLevelEqual):
        self.permissionLevelEqual = newPermissionLevelEqual

    def getPermissionLevelIn(self):
        return self.permissionLevelIn

    def setPermissionLevelIn(self, newPermissionLevelIn):
        self.permissionLevelIn = newPermissionLevelIn

    def getStatusEqual(self):
        return self.statusEqual

    def setStatusEqual(self, newStatusEqual):
        self.statusEqual = newStatusEqual

    def getStatusIn(self):
        return self.statusIn

    def setStatusIn(self, newStatusIn):
        self.statusIn = newStatusIn

    def getCreatedAtGreaterThanOrEqual(self):
        return self.createdAtGreaterThanOrEqual

    def setCreatedAtGreaterThanOrEqual(self, newCreatedAtGreaterThanOrEqual):
        self.createdAtGreaterThanOrEqual = newCreatedAtGreaterThanOrEqual

    def getCreatedAtLessThanOrEqual(self):
        return self.createdAtLessThanOrEqual

    def setCreatedAtLessThanOrEqual(self, newCreatedAtLessThanOrEqual):
        self.createdAtLessThanOrEqual = newCreatedAtLessThanOrEqual

    def getUpdatedAtGreaterThanOrEqual(self):
        return self.updatedAtGreaterThanOrEqual

    def setUpdatedAtGreaterThanOrEqual(self, newUpdatedAtGreaterThanOrEqual):
        self.updatedAtGreaterThanOrEqual = newUpdatedAtGreaterThanOrEqual

    def getUpdatedAtLessThanOrEqual(self):
        return self.updatedAtLessThanOrEqual

    def setUpdatedAtLessThanOrEqual(self, newUpdatedAtLessThanOrEqual):
        self.updatedAtLessThanOrEqual = newUpdatedAtLessThanOrEqual

    def getUpdateMethodEqual(self):
        return self.updateMethodEqual

    def setUpdateMethodEqual(self, newUpdateMethodEqual):
        self.updateMethodEqual = newUpdateMethodEqual

    def getUpdateMethodIn(self):
        return self.updateMethodIn

    def setUpdateMethodIn(self, newUpdateMethodIn):
        self.updateMethodIn = newUpdateMethodIn

    def getCategoryFullIdsStartsWith(self):
        return self.categoryFullIdsStartsWith

    def setCategoryFullIdsStartsWith(self, newCategoryFullIdsStartsWith):
        self.categoryFullIdsStartsWith = newCategoryFullIdsStartsWith

    def getCategoryFullIdsEqual(self):
        return self.categoryFullIdsEqual

    def setCategoryFullIdsEqual(self, newCategoryFullIdsEqual):
        self.categoryFullIdsEqual = newCategoryFullIdsEqual

    def getPermissionNamesMatchAnd(self):
        return self.permissionNamesMatchAnd

    def setPermissionNamesMatchAnd(self, newPermissionNamesMatchAnd):
        self.permissionNamesMatchAnd = newPermissionNamesMatchAnd

    def getPermissionNamesMatchOr(self):
        return self.permissionNamesMatchOr

    def setPermissionNamesMatchOr(self, newPermissionNamesMatchOr):
        self.permissionNamesMatchOr = newPermissionNamesMatchOr

    def getPermissionNamesNotContains(self):
        return self.permissionNamesNotContains

    def setPermissionNamesNotContains(self, newPermissionNamesNotContains):
        self.permissionNamesNotContains = newPermissionNamesNotContains


# @package Vidiun
# @subpackage Client
class VidiunCategoryUserFilter(VidiunCategoryUserBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            categoryIdEqual=NotImplemented,
            categoryIdIn=NotImplemented,
            userIdEqual=NotImplemented,
            userIdIn=NotImplemented,
            permissionLevelEqual=NotImplemented,
            permissionLevelIn=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            updateMethodEqual=NotImplemented,
            updateMethodIn=NotImplemented,
            categoryFullIdsStartsWith=NotImplemented,
            categoryFullIdsEqual=NotImplemented,
            permissionNamesMatchAnd=NotImplemented,
            permissionNamesMatchOr=NotImplemented,
            permissionNamesNotContains=NotImplemented,
            categoryDirectMembers=NotImplemented,
            freeText=NotImplemented,
            relatedGroupsByUserId=NotImplemented):
        VidiunCategoryUserBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            categoryIdEqual,
            categoryIdIn,
            userIdEqual,
            userIdIn,
            permissionLevelEqual,
            permissionLevelIn,
            statusEqual,
            statusIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            updateMethodEqual,
            updateMethodIn,
            categoryFullIdsStartsWith,
            categoryFullIdsEqual,
            permissionNamesMatchAnd,
            permissionNamesMatchOr,
            permissionNamesNotContains)

        # Return the list of categoryUser that are not inherited from parent category - only the direct categoryUsers.
        # @var bool
        self.categoryDirectMembers = categoryDirectMembers

        # Free text search on user id or screen name
        # @var string
        self.freeText = freeText

        # Return a list of categoryUser that related to the userId in this field by groups
        # @var string
        self.relatedGroupsByUserId = relatedGroupsByUserId


    PROPERTY_LOADERS = {
        'categoryDirectMembers': getXmlNodeBool, 
        'freeText': getXmlNodeText, 
        'relatedGroupsByUserId': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunCategoryUserBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunCategoryUserFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunCategoryUserBaseFilter.toParams(self)
        vparams.put("objectType", "VidiunCategoryUserFilter")
        vparams.addBoolIfDefined("categoryDirectMembers", self.categoryDirectMembers)
        vparams.addStringIfDefined("freeText", self.freeText)
        vparams.addStringIfDefined("relatedGroupsByUserId", self.relatedGroupsByUserId)
        return vparams

    def getCategoryDirectMembers(self):
        return self.categoryDirectMembers

    def setCategoryDirectMembers(self, newCategoryDirectMembers):
        self.categoryDirectMembers = newCategoryDirectMembers

    def getFreeText(self):
        return self.freeText

    def setFreeText(self, newFreeText):
        self.freeText = newFreeText

    def getRelatedGroupsByUserId(self):
        return self.relatedGroupsByUserId

    def setRelatedGroupsByUserId(self, newRelatedGroupsByUserId):
        self.relatedGroupsByUserId = newRelatedGroupsByUserId


# @package Vidiun
# @subpackage Client
class VidiunUserBaseFilter(VidiunRelatedFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            partnerIdEqual=NotImplemented,
            typeEqual=NotImplemented,
            typeIn=NotImplemented,
            screenNameLike=NotImplemented,
            screenNameStartsWith=NotImplemented,
            emailLike=NotImplemented,
            emailStartsWith=NotImplemented,
            tagsMultiLikeOr=NotImplemented,
            tagsMultiLikeAnd=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            firstNameStartsWith=NotImplemented,
            lastNameStartsWith=NotImplemented,
            isAdminEqual=NotImplemented):
        VidiunRelatedFilter.__init__(self,
            orderBy,
            advancedSearch)

        # @var int
        self.partnerIdEqual = partnerIdEqual

        # @var VidiunUserType
        self.typeEqual = typeEqual

        # @var string
        self.typeIn = typeIn

        # @var string
        self.screenNameLike = screenNameLike

        # @var string
        self.screenNameStartsWith = screenNameStartsWith

        # @var string
        self.emailLike = emailLike

        # @var string
        self.emailStartsWith = emailStartsWith

        # @var string
        self.tagsMultiLikeOr = tagsMultiLikeOr

        # @var string
        self.tagsMultiLikeAnd = tagsMultiLikeAnd

        # @var VidiunUserStatus
        self.statusEqual = statusEqual

        # @var string
        self.statusIn = statusIn

        # @var int
        self.createdAtGreaterThanOrEqual = createdAtGreaterThanOrEqual

        # @var int
        self.createdAtLessThanOrEqual = createdAtLessThanOrEqual

        # @var string
        self.firstNameStartsWith = firstNameStartsWith

        # @var string
        self.lastNameStartsWith = lastNameStartsWith

        # @var VidiunNullableBoolean
        self.isAdminEqual = isAdminEqual


    PROPERTY_LOADERS = {
        'partnerIdEqual': getXmlNodeInt, 
        'typeEqual': (VidiunEnumsFactory.createInt, "VidiunUserType"), 
        'typeIn': getXmlNodeText, 
        'screenNameLike': getXmlNodeText, 
        'screenNameStartsWith': getXmlNodeText, 
        'emailLike': getXmlNodeText, 
        'emailStartsWith': getXmlNodeText, 
        'tagsMultiLikeOr': getXmlNodeText, 
        'tagsMultiLikeAnd': getXmlNodeText, 
        'statusEqual': (VidiunEnumsFactory.createInt, "VidiunUserStatus"), 
        'statusIn': getXmlNodeText, 
        'createdAtGreaterThanOrEqual': getXmlNodeInt, 
        'createdAtLessThanOrEqual': getXmlNodeInt, 
        'firstNameStartsWith': getXmlNodeText, 
        'lastNameStartsWith': getXmlNodeText, 
        'isAdminEqual': (VidiunEnumsFactory.createInt, "VidiunNullableBoolean"), 
    }

    def fromXml(self, node):
        VidiunRelatedFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunUserBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunRelatedFilter.toParams(self)
        vparams.put("objectType", "VidiunUserBaseFilter")
        vparams.addIntIfDefined("partnerIdEqual", self.partnerIdEqual)
        vparams.addIntEnumIfDefined("typeEqual", self.typeEqual)
        vparams.addStringIfDefined("typeIn", self.typeIn)
        vparams.addStringIfDefined("screenNameLike", self.screenNameLike)
        vparams.addStringIfDefined("screenNameStartsWith", self.screenNameStartsWith)
        vparams.addStringIfDefined("emailLike", self.emailLike)
        vparams.addStringIfDefined("emailStartsWith", self.emailStartsWith)
        vparams.addStringIfDefined("tagsMultiLikeOr", self.tagsMultiLikeOr)
        vparams.addStringIfDefined("tagsMultiLikeAnd", self.tagsMultiLikeAnd)
        vparams.addIntEnumIfDefined("statusEqual", self.statusEqual)
        vparams.addStringIfDefined("statusIn", self.statusIn)
        vparams.addIntIfDefined("createdAtGreaterThanOrEqual", self.createdAtGreaterThanOrEqual)
        vparams.addIntIfDefined("createdAtLessThanOrEqual", self.createdAtLessThanOrEqual)
        vparams.addStringIfDefined("firstNameStartsWith", self.firstNameStartsWith)
        vparams.addStringIfDefined("lastNameStartsWith", self.lastNameStartsWith)
        vparams.addIntEnumIfDefined("isAdminEqual", self.isAdminEqual)
        return vparams

    def getPartnerIdEqual(self):
        return self.partnerIdEqual

    def setPartnerIdEqual(self, newPartnerIdEqual):
        self.partnerIdEqual = newPartnerIdEqual

    def getTypeEqual(self):
        return self.typeEqual

    def setTypeEqual(self, newTypeEqual):
        self.typeEqual = newTypeEqual

    def getTypeIn(self):
        return self.typeIn

    def setTypeIn(self, newTypeIn):
        self.typeIn = newTypeIn

    def getScreenNameLike(self):
        return self.screenNameLike

    def setScreenNameLike(self, newScreenNameLike):
        self.screenNameLike = newScreenNameLike

    def getScreenNameStartsWith(self):
        return self.screenNameStartsWith

    def setScreenNameStartsWith(self, newScreenNameStartsWith):
        self.screenNameStartsWith = newScreenNameStartsWith

    def getEmailLike(self):
        return self.emailLike

    def setEmailLike(self, newEmailLike):
        self.emailLike = newEmailLike

    def getEmailStartsWith(self):
        return self.emailStartsWith

    def setEmailStartsWith(self, newEmailStartsWith):
        self.emailStartsWith = newEmailStartsWith

    def getTagsMultiLikeOr(self):
        return self.tagsMultiLikeOr

    def setTagsMultiLikeOr(self, newTagsMultiLikeOr):
        self.tagsMultiLikeOr = newTagsMultiLikeOr

    def getTagsMultiLikeAnd(self):
        return self.tagsMultiLikeAnd

    def setTagsMultiLikeAnd(self, newTagsMultiLikeAnd):
        self.tagsMultiLikeAnd = newTagsMultiLikeAnd

    def getStatusEqual(self):
        return self.statusEqual

    def setStatusEqual(self, newStatusEqual):
        self.statusEqual = newStatusEqual

    def getStatusIn(self):
        return self.statusIn

    def setStatusIn(self, newStatusIn):
        self.statusIn = newStatusIn

    def getCreatedAtGreaterThanOrEqual(self):
        return self.createdAtGreaterThanOrEqual

    def setCreatedAtGreaterThanOrEqual(self, newCreatedAtGreaterThanOrEqual):
        self.createdAtGreaterThanOrEqual = newCreatedAtGreaterThanOrEqual

    def getCreatedAtLessThanOrEqual(self):
        return self.createdAtLessThanOrEqual

    def setCreatedAtLessThanOrEqual(self, newCreatedAtLessThanOrEqual):
        self.createdAtLessThanOrEqual = newCreatedAtLessThanOrEqual

    def getFirstNameStartsWith(self):
        return self.firstNameStartsWith

    def setFirstNameStartsWith(self, newFirstNameStartsWith):
        self.firstNameStartsWith = newFirstNameStartsWith

    def getLastNameStartsWith(self):
        return self.lastNameStartsWith

    def setLastNameStartsWith(self, newLastNameStartsWith):
        self.lastNameStartsWith = newLastNameStartsWith

    def getIsAdminEqual(self):
        return self.isAdminEqual

    def setIsAdminEqual(self, newIsAdminEqual):
        self.isAdminEqual = newIsAdminEqual


# @package Vidiun
# @subpackage Client
class VidiunUserFilter(VidiunUserBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            partnerIdEqual=NotImplemented,
            typeEqual=NotImplemented,
            typeIn=NotImplemented,
            screenNameLike=NotImplemented,
            screenNameStartsWith=NotImplemented,
            emailLike=NotImplemented,
            emailStartsWith=NotImplemented,
            tagsMultiLikeOr=NotImplemented,
            tagsMultiLikeAnd=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            firstNameStartsWith=NotImplemented,
            lastNameStartsWith=NotImplemented,
            isAdminEqual=NotImplemented,
            idOrScreenNameStartsWith=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            loginEnabledEqual=NotImplemented,
            roleIdEqual=NotImplemented,
            roleIdsEqual=NotImplemented,
            roleIdsIn=NotImplemented,
            firstNameOrLastNameStartsWith=NotImplemented,
            permissionNamesMultiLikeOr=NotImplemented,
            permissionNamesMultiLikeAnd=NotImplemented):
        VidiunUserBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            partnerIdEqual,
            typeEqual,
            typeIn,
            screenNameLike,
            screenNameStartsWith,
            emailLike,
            emailStartsWith,
            tagsMultiLikeOr,
            tagsMultiLikeAnd,
            statusEqual,
            statusIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            firstNameStartsWith,
            lastNameStartsWith,
            isAdminEqual)

        # @var string
        self.idOrScreenNameStartsWith = idOrScreenNameStartsWith

        # @var string
        self.idEqual = idEqual

        # @var string
        self.idIn = idIn

        # @var VidiunNullableBoolean
        self.loginEnabledEqual = loginEnabledEqual

        # @var string
        self.roleIdEqual = roleIdEqual

        # @var string
        self.roleIdsEqual = roleIdsEqual

        # @var string
        self.roleIdsIn = roleIdsIn

        # @var string
        self.firstNameOrLastNameStartsWith = firstNameOrLastNameStartsWith

        # Permission names filter expression
        # @var string
        self.permissionNamesMultiLikeOr = permissionNamesMultiLikeOr

        # Permission names filter expression
        # @var string
        self.permissionNamesMultiLikeAnd = permissionNamesMultiLikeAnd


    PROPERTY_LOADERS = {
        'idOrScreenNameStartsWith': getXmlNodeText, 
        'idEqual': getXmlNodeText, 
        'idIn': getXmlNodeText, 
        'loginEnabledEqual': (VidiunEnumsFactory.createInt, "VidiunNullableBoolean"), 
        'roleIdEqual': getXmlNodeText, 
        'roleIdsEqual': getXmlNodeText, 
        'roleIdsIn': getXmlNodeText, 
        'firstNameOrLastNameStartsWith': getXmlNodeText, 
        'permissionNamesMultiLikeOr': getXmlNodeText, 
        'permissionNamesMultiLikeAnd': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunUserBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunUserFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunUserBaseFilter.toParams(self)
        vparams.put("objectType", "VidiunUserFilter")
        vparams.addStringIfDefined("idOrScreenNameStartsWith", self.idOrScreenNameStartsWith)
        vparams.addStringIfDefined("idEqual", self.idEqual)
        vparams.addStringIfDefined("idIn", self.idIn)
        vparams.addIntEnumIfDefined("loginEnabledEqual", self.loginEnabledEqual)
        vparams.addStringIfDefined("roleIdEqual", self.roleIdEqual)
        vparams.addStringIfDefined("roleIdsEqual", self.roleIdsEqual)
        vparams.addStringIfDefined("roleIdsIn", self.roleIdsIn)
        vparams.addStringIfDefined("firstNameOrLastNameStartsWith", self.firstNameOrLastNameStartsWith)
        vparams.addStringIfDefined("permissionNamesMultiLikeOr", self.permissionNamesMultiLikeOr)
        vparams.addStringIfDefined("permissionNamesMultiLikeAnd", self.permissionNamesMultiLikeAnd)
        return vparams

    def getIdOrScreenNameStartsWith(self):
        return self.idOrScreenNameStartsWith

    def setIdOrScreenNameStartsWith(self, newIdOrScreenNameStartsWith):
        self.idOrScreenNameStartsWith = newIdOrScreenNameStartsWith

    def getIdEqual(self):
        return self.idEqual

    def setIdEqual(self, newIdEqual):
        self.idEqual = newIdEqual

    def getIdIn(self):
        return self.idIn

    def setIdIn(self, newIdIn):
        self.idIn = newIdIn

    def getLoginEnabledEqual(self):
        return self.loginEnabledEqual

    def setLoginEnabledEqual(self, newLoginEnabledEqual):
        self.loginEnabledEqual = newLoginEnabledEqual

    def getRoleIdEqual(self):
        return self.roleIdEqual

    def setRoleIdEqual(self, newRoleIdEqual):
        self.roleIdEqual = newRoleIdEqual

    def getRoleIdsEqual(self):
        return self.roleIdsEqual

    def setRoleIdsEqual(self, newRoleIdsEqual):
        self.roleIdsEqual = newRoleIdsEqual

    def getRoleIdsIn(self):
        return self.roleIdsIn

    def setRoleIdsIn(self, newRoleIdsIn):
        self.roleIdsIn = newRoleIdsIn

    def getFirstNameOrLastNameStartsWith(self):
        return self.firstNameOrLastNameStartsWith

    def setFirstNameOrLastNameStartsWith(self, newFirstNameOrLastNameStartsWith):
        self.firstNameOrLastNameStartsWith = newFirstNameOrLastNameStartsWith

    def getPermissionNamesMultiLikeOr(self):
        return self.permissionNamesMultiLikeOr

    def setPermissionNamesMultiLikeOr(self, newPermissionNamesMultiLikeOr):
        self.permissionNamesMultiLikeOr = newPermissionNamesMultiLikeOr

    def getPermissionNamesMultiLikeAnd(self):
        return self.permissionNamesMultiLikeAnd

    def setPermissionNamesMultiLikeAnd(self, newPermissionNamesMultiLikeAnd):
        self.permissionNamesMultiLikeAnd = newPermissionNamesMultiLikeAnd


# @package Vidiun
# @subpackage Client
class VidiunEntryContext(VidiunContext):
    def __init__(self,
            entryId=NotImplemented,
            followEntryRedirect=NotImplemented):
        VidiunContext.__init__(self)

        # The entry ID in the context of which the playlist should be built
        # @var string
        self.entryId = entryId

        # Is this a redirected entry followup?
        # @var VidiunNullableBoolean
        self.followEntryRedirect = followEntryRedirect


    PROPERTY_LOADERS = {
        'entryId': getXmlNodeText, 
        'followEntryRedirect': (VidiunEnumsFactory.createInt, "VidiunNullableBoolean"), 
    }

    def fromXml(self, node):
        VidiunContext.fromXml(self, node)
        self.fromXmlImpl(node, VidiunEntryContext.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunContext.toParams(self)
        vparams.put("objectType", "VidiunEntryContext")
        vparams.addStringIfDefined("entryId", self.entryId)
        vparams.addIntEnumIfDefined("followEntryRedirect", self.followEntryRedirect)
        return vparams

    def getEntryId(self):
        return self.entryId

    def setEntryId(self, newEntryId):
        self.entryId = newEntryId

    def getFollowEntryRedirect(self):
        return self.followEntryRedirect

    def setFollowEntryRedirect(self, newFollowEntryRedirect):
        self.followEntryRedirect = newFollowEntryRedirect


# @package Vidiun
# @subpackage Client
class VidiunEntryContextDataParams(VidiunAccessControlScope):
    """Object which contains contextual entry-related data."""

    def __init__(self,
            referrer=NotImplemented,
            ip=NotImplemented,
            ks=NotImplemented,
            userAgent=NotImplemented,
            time=NotImplemented,
            contexts=NotImplemented,
            hashes=NotImplemented,
            flavorAssetId=NotImplemented,
            flavorTags=NotImplemented,
            streamerType=NotImplemented,
            mediaProtocol=NotImplemented):
        VidiunAccessControlScope.__init__(self,
            referrer,
            ip,
            ks,
            userAgent,
            time,
            contexts,
            hashes)

        # Id of the current flavor.
        # @var string
        self.flavorAssetId = flavorAssetId

        # The tags of the flavors that should be used for playback.
        # @var string
        self.flavorTags = flavorTags

        # Playback streamer type: RTMP, HTTP, appleHttps, rtsp, sl.
        # @var string
        self.streamerType = streamerType

        # Protocol of the specific media object.
        # @var string
        self.mediaProtocol = mediaProtocol


    PROPERTY_LOADERS = {
        'flavorAssetId': getXmlNodeText, 
        'flavorTags': getXmlNodeText, 
        'streamerType': getXmlNodeText, 
        'mediaProtocol': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunAccessControlScope.fromXml(self, node)
        self.fromXmlImpl(node, VidiunEntryContextDataParams.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunAccessControlScope.toParams(self)
        vparams.put("objectType", "VidiunEntryContextDataParams")
        vparams.addStringIfDefined("flavorAssetId", self.flavorAssetId)
        vparams.addStringIfDefined("flavorTags", self.flavorTags)
        vparams.addStringIfDefined("streamerType", self.streamerType)
        vparams.addStringIfDefined("mediaProtocol", self.mediaProtocol)
        return vparams

    def getFlavorAssetId(self):
        return self.flavorAssetId

    def setFlavorAssetId(self, newFlavorAssetId):
        self.flavorAssetId = newFlavorAssetId

    def getFlavorTags(self):
        return self.flavorTags

    def setFlavorTags(self, newFlavorTags):
        self.flavorTags = newFlavorTags

    def getStreamerType(self):
        return self.streamerType

    def setStreamerType(self, newStreamerType):
        self.streamerType = newStreamerType

    def getMediaProtocol(self):
        return self.mediaProtocol

    def setMediaProtocol(self, newMediaProtocol):
        self.mediaProtocol = newMediaProtocol


# @package Vidiun
# @subpackage Client
class VidiunEntryContextDataResult(VidiunContextDataResult):
    def __init__(self,
            messages=NotImplemented,
            actions=NotImplemented,
            isSiteRestricted=NotImplemented,
            isCountryRestricted=NotImplemented,
            isSessionRestricted=NotImplemented,
            isIpAddressRestricted=NotImplemented,
            isUserAgentRestricted=NotImplemented,
            previewLength=NotImplemented,
            isScheduledNow=NotImplemented,
            isAdmin=NotImplemented,
            streamerType=NotImplemented,
            mediaProtocol=NotImplemented,
            storageProfilesXML=NotImplemented,
            accessControlMessages=NotImplemented,
            accessControlActions=NotImplemented,
            flavorAssets=NotImplemented,
            msDuration=NotImplemented,
            pluginData=NotImplemented):
        VidiunContextDataResult.__init__(self,
            messages,
            actions)

        # @var bool
        self.isSiteRestricted = isSiteRestricted

        # @var bool
        self.isCountryRestricted = isCountryRestricted

        # @var bool
        self.isSessionRestricted = isSessionRestricted

        # @var bool
        self.isIpAddressRestricted = isIpAddressRestricted

        # @var bool
        self.isUserAgentRestricted = isUserAgentRestricted

        # @var int
        self.previewLength = previewLength

        # @var bool
        self.isScheduledNow = isScheduledNow

        # @var bool
        self.isAdmin = isAdmin

        # http/rtmp/hdnetwork
        # @var string
        self.streamerType = streamerType

        # http/https, rtmp/rtmpe
        # @var string
        self.mediaProtocol = mediaProtocol

        # @var string
        self.storageProfilesXML = storageProfilesXML

        # Array of messages as received from the access control rules that invalidated
        # @var array of VidiunString
        self.accessControlMessages = accessControlMessages

        # Array of actions as received from the access control rules that invalidated
        # @var array of VidiunRuleAction
        self.accessControlActions = accessControlActions

        # Array of allowed flavor assets according to access control limitations and requested tags
        # @var array of VidiunFlavorAsset
        self.flavorAssets = flavorAssets

        # The duration of the entry in milliseconds
        # @var int
        self.msDuration = msDuration

        # Array of allowed flavor assets according to access control limitations and requested tags
        # @var map
        self.pluginData = pluginData


    PROPERTY_LOADERS = {
        'isSiteRestricted': getXmlNodeBool, 
        'isCountryRestricted': getXmlNodeBool, 
        'isSessionRestricted': getXmlNodeBool, 
        'isIpAddressRestricted': getXmlNodeBool, 
        'isUserAgentRestricted': getXmlNodeBool, 
        'previewLength': getXmlNodeInt, 
        'isScheduledNow': getXmlNodeBool, 
        'isAdmin': getXmlNodeBool, 
        'streamerType': getXmlNodeText, 
        'mediaProtocol': getXmlNodeText, 
        'storageProfilesXML': getXmlNodeText, 
        'accessControlMessages': (VidiunObjectFactory.createArray, VidiunString), 
        'accessControlActions': (VidiunObjectFactory.createArray, VidiunRuleAction), 
        'flavorAssets': (VidiunObjectFactory.createArray, VidiunFlavorAsset), 
        'msDuration': getXmlNodeInt, 
        'pluginData': (VidiunObjectFactory.create, map), 
    }

    def fromXml(self, node):
        VidiunContextDataResult.fromXml(self, node)
        self.fromXmlImpl(node, VidiunEntryContextDataResult.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunContextDataResult.toParams(self)
        vparams.put("objectType", "VidiunEntryContextDataResult")
        vparams.addBoolIfDefined("isSiteRestricted", self.isSiteRestricted)
        vparams.addBoolIfDefined("isCountryRestricted", self.isCountryRestricted)
        vparams.addBoolIfDefined("isSessionRestricted", self.isSessionRestricted)
        vparams.addBoolIfDefined("isIpAddressRestricted", self.isIpAddressRestricted)
        vparams.addBoolIfDefined("isUserAgentRestricted", self.isUserAgentRestricted)
        vparams.addIntIfDefined("previewLength", self.previewLength)
        vparams.addBoolIfDefined("isScheduledNow", self.isScheduledNow)
        vparams.addBoolIfDefined("isAdmin", self.isAdmin)
        vparams.addStringIfDefined("streamerType", self.streamerType)
        vparams.addStringIfDefined("mediaProtocol", self.mediaProtocol)
        vparams.addStringIfDefined("storageProfilesXML", self.storageProfilesXML)
        vparams.addArrayIfDefined("accessControlMessages", self.accessControlMessages)
        vparams.addArrayIfDefined("accessControlActions", self.accessControlActions)
        vparams.addArrayIfDefined("flavorAssets", self.flavorAssets)
        vparams.addIntIfDefined("msDuration", self.msDuration)
        vparams.addObjectIfDefined("pluginData", self.pluginData)
        return vparams

    def getIsSiteRestricted(self):
        return self.isSiteRestricted

    def setIsSiteRestricted(self, newIsSiteRestricted):
        self.isSiteRestricted = newIsSiteRestricted

    def getIsCountryRestricted(self):
        return self.isCountryRestricted

    def setIsCountryRestricted(self, newIsCountryRestricted):
        self.isCountryRestricted = newIsCountryRestricted

    def getIsSessionRestricted(self):
        return self.isSessionRestricted

    def setIsSessionRestricted(self, newIsSessionRestricted):
        self.isSessionRestricted = newIsSessionRestricted

    def getIsIpAddressRestricted(self):
        return self.isIpAddressRestricted

    def setIsIpAddressRestricted(self, newIsIpAddressRestricted):
        self.isIpAddressRestricted = newIsIpAddressRestricted

    def getIsUserAgentRestricted(self):
        return self.isUserAgentRestricted

    def setIsUserAgentRestricted(self, newIsUserAgentRestricted):
        self.isUserAgentRestricted = newIsUserAgentRestricted

    def getPreviewLength(self):
        return self.previewLength

    def setPreviewLength(self, newPreviewLength):
        self.previewLength = newPreviewLength

    def getIsScheduledNow(self):
        return self.isScheduledNow

    def setIsScheduledNow(self, newIsScheduledNow):
        self.isScheduledNow = newIsScheduledNow

    def getIsAdmin(self):
        return self.isAdmin

    def setIsAdmin(self, newIsAdmin):
        self.isAdmin = newIsAdmin

    def getStreamerType(self):
        return self.streamerType

    def setStreamerType(self, newStreamerType):
        self.streamerType = newStreamerType

    def getMediaProtocol(self):
        return self.mediaProtocol

    def setMediaProtocol(self, newMediaProtocol):
        self.mediaProtocol = newMediaProtocol

    def getStorageProfilesXML(self):
        return self.storageProfilesXML

    def setStorageProfilesXML(self, newStorageProfilesXML):
        self.storageProfilesXML = newStorageProfilesXML

    def getAccessControlMessages(self):
        return self.accessControlMessages

    def setAccessControlMessages(self, newAccessControlMessages):
        self.accessControlMessages = newAccessControlMessages

    def getAccessControlActions(self):
        return self.accessControlActions

    def setAccessControlActions(self, newAccessControlActions):
        self.accessControlActions = newAccessControlActions

    def getFlavorAssets(self):
        return self.flavorAssets

    def setFlavorAssets(self, newFlavorAssets):
        self.flavorAssets = newFlavorAssets

    def getMsDuration(self):
        return self.msDuration

    def setMsDuration(self, newMsDuration):
        self.msDuration = newMsDuration

    def getPluginData(self):
        return self.pluginData

    def setPluginData(self, newPluginData):
        self.pluginData = newPluginData


# @package Vidiun
# @subpackage Client
class VidiunEntryCuePointSearchFilter(VidiunSearchItem):
    def __init__(self,
            cuePointsFreeText=NotImplemented,
            cuePointTypeIn=NotImplemented,
            cuePointSubTypeEqual=NotImplemented):
        VidiunSearchItem.__init__(self)

        # @var string
        self.cuePointsFreeText = cuePointsFreeText

        # @var string
        self.cuePointTypeIn = cuePointTypeIn

        # @var int
        self.cuePointSubTypeEqual = cuePointSubTypeEqual


    PROPERTY_LOADERS = {
        'cuePointsFreeText': getXmlNodeText, 
        'cuePointTypeIn': getXmlNodeText, 
        'cuePointSubTypeEqual': getXmlNodeInt, 
    }

    def fromXml(self, node):
        VidiunSearchItem.fromXml(self, node)
        self.fromXmlImpl(node, VidiunEntryCuePointSearchFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunSearchItem.toParams(self)
        vparams.put("objectType", "VidiunEntryCuePointSearchFilter")
        vparams.addStringIfDefined("cuePointsFreeText", self.cuePointsFreeText)
        vparams.addStringIfDefined("cuePointTypeIn", self.cuePointTypeIn)
        vparams.addIntIfDefined("cuePointSubTypeEqual", self.cuePointSubTypeEqual)
        return vparams

    def getCuePointsFreeText(self):
        return self.cuePointsFreeText

    def setCuePointsFreeText(self, newCuePointsFreeText):
        self.cuePointsFreeText = newCuePointsFreeText

    def getCuePointTypeIn(self):
        return self.cuePointTypeIn

    def setCuePointTypeIn(self, newCuePointTypeIn):
        self.cuePointTypeIn = newCuePointTypeIn

    def getCuePointSubTypeEqual(self):
        return self.cuePointSubTypeEqual

    def setCuePointSubTypeEqual(self, newCuePointSubTypeEqual):
        self.cuePointSubTypeEqual = newCuePointSubTypeEqual


# @package Vidiun
# @subpackage Client
class VidiunEntryIdentifier(VidiunObjectIdentifier):
    def __init__(self,
            extendedFeatures=NotImplemented,
            identifier=NotImplemented):
        VidiunObjectIdentifier.__init__(self,
            extendedFeatures)

        # Identifier of the object
        # @var VidiunEntryIdentifierField
        self.identifier = identifier


    PROPERTY_LOADERS = {
        'identifier': (VidiunEnumsFactory.createString, "VidiunEntryIdentifierField"), 
    }

    def fromXml(self, node):
        VidiunObjectIdentifier.fromXml(self, node)
        self.fromXmlImpl(node, VidiunEntryIdentifier.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunObjectIdentifier.toParams(self)
        vparams.put("objectType", "VidiunEntryIdentifier")
        vparams.addStringEnumIfDefined("identifier", self.identifier)
        return vparams

    def getIdentifier(self):
        return self.identifier

    def setIdentifier(self, newIdentifier):
        self.identifier = newIdentifier


# @package Vidiun
# @subpackage Client
class VidiunEntryLiveStats(VidiunLiveStats):
    def __init__(self,
            audience=NotImplemented,
            dvrAudience=NotImplemented,
            avgBitrate=NotImplemented,
            bufferTime=NotImplemented,
            plays=NotImplemented,
            secondsViewed=NotImplemented,
            startEvent=NotImplemented,
            timestamp=NotImplemented,
            entryId=NotImplemented,
            peakAudience=NotImplemented,
            peakDvrAudience=NotImplemented):
        VidiunLiveStats.__init__(self,
            audience,
            dvrAudience,
            avgBitrate,
            bufferTime,
            plays,
            secondsViewed,
            startEvent,
            timestamp)

        # @var string
        self.entryId = entryId

        # @var int
        self.peakAudience = peakAudience

        # @var int
        self.peakDvrAudience = peakDvrAudience


    PROPERTY_LOADERS = {
        'entryId': getXmlNodeText, 
        'peakAudience': getXmlNodeInt, 
        'peakDvrAudience': getXmlNodeInt, 
    }

    def fromXml(self, node):
        VidiunLiveStats.fromXml(self, node)
        self.fromXmlImpl(node, VidiunEntryLiveStats.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunLiveStats.toParams(self)
        vparams.put("objectType", "VidiunEntryLiveStats")
        vparams.addStringIfDefined("entryId", self.entryId)
        vparams.addIntIfDefined("peakAudience", self.peakAudience)
        vparams.addIntIfDefined("peakDvrAudience", self.peakDvrAudience)
        return vparams

    def getEntryId(self):
        return self.entryId

    def setEntryId(self, newEntryId):
        self.entryId = newEntryId

    def getPeakAudience(self):
        return self.peakAudience

    def setPeakAudience(self, newPeakAudience):
        self.peakAudience = newPeakAudience

    def getPeakDvrAudience(self):
        return self.peakDvrAudience

    def setPeakDvrAudience(self, newPeakDvrAudience):
        self.peakDvrAudience = newPeakDvrAudience


# @package Vidiun
# @subpackage Client
class VidiunEntryServerNodeListResponse(VidiunListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        VidiunListResponse.__init__(self,
            totalCount)

        # @var array of VidiunEntryServerNode
        # @readonly
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (VidiunObjectFactory.createArray, VidiunEntryServerNode), 
    }

    def fromXml(self, node):
        VidiunListResponse.fromXml(self, node)
        self.fromXmlImpl(node, VidiunEntryServerNodeListResponse.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunListResponse.toParams(self)
        vparams.put("objectType", "VidiunEntryServerNodeListResponse")
        return vparams

    def getObjects(self):
        return self.objects


# @package Vidiun
# @subpackage Client
class VidiunBooleanField(VidiunBooleanValue):
    """A boolean representation to return evaluated dynamic value"""

    def __init__(self,
            description=NotImplemented,
            value=NotImplemented):
        VidiunBooleanValue.__init__(self,
            description,
            value)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunBooleanValue.fromXml(self, node)
        self.fromXmlImpl(node, VidiunBooleanField.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunBooleanValue.toParams(self)
        vparams.put("objectType", "VidiunBooleanField")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunFeatureStatusListResponse(VidiunListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        VidiunListResponse.__init__(self,
            totalCount)

        # @var array of VidiunFeatureStatus
        # @readonly
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (VidiunObjectFactory.createArray, VidiunFeatureStatus), 
    }

    def fromXml(self, node):
        VidiunListResponse.fromXml(self, node)
        self.fromXmlImpl(node, VidiunFeatureStatusListResponse.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunListResponse.toParams(self)
        vparams.put("objectType", "VidiunFeatureStatusListResponse")
        return vparams

    def getObjects(self):
        return self.objects


# @package Vidiun
# @subpackage Client
class VidiunFileAssetListResponse(VidiunListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        VidiunListResponse.__init__(self,
            totalCount)

        # @var array of VidiunFileAsset
        # @readonly
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (VidiunObjectFactory.createArray, VidiunFileAsset), 
    }

    def fromXml(self, node):
        VidiunListResponse.fromXml(self, node)
        self.fromXmlImpl(node, VidiunFileAssetListResponse.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunListResponse.toParams(self)
        vparams.put("objectType", "VidiunFileAssetListResponse")
        return vparams

    def getObjects(self):
        return self.objects


# @package Vidiun
# @subpackage Client
class VidiunFlattenJobData(VidiunJobData):
    def __init__(self):
        VidiunJobData.__init__(self)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunJobData.fromXml(self, node)
        self.fromXmlImpl(node, VidiunFlattenJobData.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunJobData.toParams(self)
        vparams.put("objectType", "VidiunFlattenJobData")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunFlavorAssetListResponse(VidiunListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        VidiunListResponse.__init__(self,
            totalCount)

        # @var array of VidiunFlavorAsset
        # @readonly
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (VidiunObjectFactory.createArray, VidiunFlavorAsset), 
    }

    def fromXml(self, node):
        VidiunListResponse.fromXml(self, node)
        self.fromXmlImpl(node, VidiunFlavorAssetListResponse.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunListResponse.toParams(self)
        vparams.put("objectType", "VidiunFlavorAssetListResponse")
        return vparams

    def getObjects(self):
        return self.objects


# @package Vidiun
# @subpackage Client
class VidiunFlavorParamsListResponse(VidiunListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        VidiunListResponse.__init__(self,
            totalCount)

        # @var array of VidiunFlavorParams
        # @readonly
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (VidiunObjectFactory.createArray, VidiunFlavorParams), 
    }

    def fromXml(self, node):
        VidiunListResponse.fromXml(self, node)
        self.fromXmlImpl(node, VidiunFlavorParamsListResponse.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunListResponse.toParams(self)
        vparams.put("objectType", "VidiunFlavorParamsListResponse")
        return vparams

    def getObjects(self):
        return self.objects


# @package Vidiun
# @subpackage Client
class VidiunFlavorParamsOutputListResponse(VidiunListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        VidiunListResponse.__init__(self,
            totalCount)

        # @var array of VidiunFlavorParamsOutput
        # @readonly
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (VidiunObjectFactory.createArray, VidiunFlavorParamsOutput), 
    }

    def fromXml(self, node):
        VidiunListResponse.fromXml(self, node)
        self.fromXmlImpl(node, VidiunFlavorParamsOutputListResponse.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunListResponse.toParams(self)
        vparams.put("objectType", "VidiunFlavorParamsOutputListResponse")
        return vparams

    def getObjects(self):
        return self.objects


# @package Vidiun
# @subpackage Client
class VidiunGenericSyndicationFeed(VidiunBaseSyndicationFeed):
    def __init__(self,
            id=NotImplemented,
            feedUrl=NotImplemented,
            partnerId=NotImplemented,
            playlistId=NotImplemented,
            name=NotImplemented,
            status=NotImplemented,
            type=NotImplemented,
            landingPage=NotImplemented,
            createdAt=NotImplemented,
            allowEmbed=NotImplemented,
            playerUiconfId=NotImplemented,
            flavorParamId=NotImplemented,
            transcodeExistingContent=NotImplemented,
            addToDefaultConversionProfile=NotImplemented,
            categories=NotImplemented,
            storageId=NotImplemented,
            entriesOrderBy=NotImplemented,
            enforceEntitlement=NotImplemented,
            privacyContext=NotImplemented,
            updatedAt=NotImplemented,
            useCategoryEntries=NotImplemented,
            feedDescription=NotImplemented,
            feedLandingPage=NotImplemented):
        VidiunBaseSyndicationFeed.__init__(self,
            id,
            feedUrl,
            partnerId,
            playlistId,
            name,
            status,
            type,
            landingPage,
            createdAt,
            allowEmbed,
            playerUiconfId,
            flavorParamId,
            transcodeExistingContent,
            addToDefaultConversionProfile,
            categories,
            storageId,
            entriesOrderBy,
            enforceEntitlement,
            privacyContext,
            updatedAt,
            useCategoryEntries)

        # feed description
        # @var string
        self.feedDescription = feedDescription

        # feed landing page (i.e publisher website)
        # @var string
        self.feedLandingPage = feedLandingPage


    PROPERTY_LOADERS = {
        'feedDescription': getXmlNodeText, 
        'feedLandingPage': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunBaseSyndicationFeed.fromXml(self, node)
        self.fromXmlImpl(node, VidiunGenericSyndicationFeed.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunBaseSyndicationFeed.toParams(self)
        vparams.put("objectType", "VidiunGenericSyndicationFeed")
        vparams.addStringIfDefined("feedDescription", self.feedDescription)
        vparams.addStringIfDefined("feedLandingPage", self.feedLandingPage)
        return vparams

    def getFeedDescription(self):
        return self.feedDescription

    def setFeedDescription(self, newFeedDescription):
        self.feedDescription = newFeedDescription

    def getFeedLandingPage(self):
        return self.feedLandingPage

    def setFeedLandingPage(self, newFeedLandingPage):
        self.feedLandingPage = newFeedLandingPage


# @package Vidiun
# @subpackage Client
class VidiunGoogleVideoSyndicationFeed(VidiunBaseSyndicationFeed):
    def __init__(self,
            id=NotImplemented,
            feedUrl=NotImplemented,
            partnerId=NotImplemented,
            playlistId=NotImplemented,
            name=NotImplemented,
            status=NotImplemented,
            type=NotImplemented,
            landingPage=NotImplemented,
            createdAt=NotImplemented,
            allowEmbed=NotImplemented,
            playerUiconfId=NotImplemented,
            flavorParamId=NotImplemented,
            transcodeExistingContent=NotImplemented,
            addToDefaultConversionProfile=NotImplemented,
            categories=NotImplemented,
            storageId=NotImplemented,
            entriesOrderBy=NotImplemented,
            enforceEntitlement=NotImplemented,
            privacyContext=NotImplemented,
            updatedAt=NotImplemented,
            useCategoryEntries=NotImplemented,
            adultContent=NotImplemented):
        VidiunBaseSyndicationFeed.__init__(self,
            id,
            feedUrl,
            partnerId,
            playlistId,
            name,
            status,
            type,
            landingPage,
            createdAt,
            allowEmbed,
            playerUiconfId,
            flavorParamId,
            transcodeExistingContent,
            addToDefaultConversionProfile,
            categories,
            storageId,
            entriesOrderBy,
            enforceEntitlement,
            privacyContext,
            updatedAt,
            useCategoryEntries)

        # @var VidiunGoogleSyndicationFeedAdultValues
        self.adultContent = adultContent


    PROPERTY_LOADERS = {
        'adultContent': (VidiunEnumsFactory.createString, "VidiunGoogleSyndicationFeedAdultValues"), 
    }

    def fromXml(self, node):
        VidiunBaseSyndicationFeed.fromXml(self, node)
        self.fromXmlImpl(node, VidiunGoogleVideoSyndicationFeed.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunBaseSyndicationFeed.toParams(self)
        vparams.put("objectType", "VidiunGoogleVideoSyndicationFeed")
        vparams.addStringEnumIfDefined("adultContent", self.adultContent)
        return vparams

    def getAdultContent(self):
        return self.adultContent

    def setAdultContent(self, newAdultContent):
        self.adultContent = newAdultContent


# @package Vidiun
# @subpackage Client
class VidiunGroupUserListResponse(VidiunListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        VidiunListResponse.__init__(self,
            totalCount)

        # @var array of VidiunGroupUser
        # @readonly
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (VidiunObjectFactory.createArray, VidiunGroupUser), 
    }

    def fromXml(self, node):
        VidiunListResponse.fromXml(self, node)
        self.fromXmlImpl(node, VidiunGroupUserListResponse.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunListResponse.toParams(self)
        vparams.put("objectType", "VidiunGroupUserListResponse")
        return vparams

    def getObjects(self):
        return self.objects


# @package Vidiun
# @subpackage Client
class VidiunHashCondition(VidiunCondition):
    def __init__(self,
            type=NotImplemented,
            description=NotImplemented,
            not_=NotImplemented,
            hashName=NotImplemented,
            hashSecret=NotImplemented):
        VidiunCondition.__init__(self,
            type,
            description,
            not_)

        # hash name
        # @var string
        self.hashName = hashName

        # hash secret
        # @var string
        self.hashSecret = hashSecret


    PROPERTY_LOADERS = {
        'hashName': getXmlNodeText, 
        'hashSecret': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunCondition.fromXml(self, node)
        self.fromXmlImpl(node, VidiunHashCondition.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunCondition.toParams(self)
        vparams.put("objectType", "VidiunHashCondition")
        vparams.addStringIfDefined("hashName", self.hashName)
        vparams.addStringIfDefined("hashSecret", self.hashSecret)
        return vparams

    def getHashName(self):
        return self.hashName

    def setHashName(self, newHashName):
        self.hashName = newHashName

    def getHashSecret(self):
        return self.hashSecret

    def setHashSecret(self, newHashSecret):
        self.hashSecret = newHashSecret


# @package Vidiun
# @subpackage Client
class VidiunITunesSyndicationFeed(VidiunBaseSyndicationFeed):
    def __init__(self,
            id=NotImplemented,
            feedUrl=NotImplemented,
            partnerId=NotImplemented,
            playlistId=NotImplemented,
            name=NotImplemented,
            status=NotImplemented,
            type=NotImplemented,
            landingPage=NotImplemented,
            createdAt=NotImplemented,
            allowEmbed=NotImplemented,
            playerUiconfId=NotImplemented,
            flavorParamId=NotImplemented,
            transcodeExistingContent=NotImplemented,
            addToDefaultConversionProfile=NotImplemented,
            categories=NotImplemented,
            storageId=NotImplemented,
            entriesOrderBy=NotImplemented,
            enforceEntitlement=NotImplemented,
            privacyContext=NotImplemented,
            updatedAt=NotImplemented,
            useCategoryEntries=NotImplemented,
            feedDescription=NotImplemented,
            language=NotImplemented,
            feedLandingPage=NotImplemented,
            ownerName=NotImplemented,
            ownerEmail=NotImplemented,
            feedImageUrl=NotImplemented,
            category=NotImplemented,
            adultContent=NotImplemented,
            feedAuthor=NotImplemented,
            enforceOrder=NotImplemented):
        VidiunBaseSyndicationFeed.__init__(self,
            id,
            feedUrl,
            partnerId,
            playlistId,
            name,
            status,
            type,
            landingPage,
            createdAt,
            allowEmbed,
            playerUiconfId,
            flavorParamId,
            transcodeExistingContent,
            addToDefaultConversionProfile,
            categories,
            storageId,
            entriesOrderBy,
            enforceEntitlement,
            privacyContext,
            updatedAt,
            useCategoryEntries)

        # feed description
        # @var string
        self.feedDescription = feedDescription

        # feed language
        # @var string
        self.language = language

        # feed landing page (i.e publisher website)
        # @var string
        self.feedLandingPage = feedLandingPage

        # author/publisher name
        # @var string
        self.ownerName = ownerName

        # publisher email
        # @var string
        self.ownerEmail = ownerEmail

        # podcast thumbnail
        # @var string
        self.feedImageUrl = feedImageUrl

        # @var VidiunITunesSyndicationFeedCategories
        # @readonly
        self.category = category

        # @var VidiunITunesSyndicationFeedAdultValues
        self.adultContent = adultContent

        # @var string
        self.feedAuthor = feedAuthor

        # true in case you want to enfore the palylist order on the
        # @var VidiunNullableBoolean
        self.enforceOrder = enforceOrder


    PROPERTY_LOADERS = {
        'feedDescription': getXmlNodeText, 
        'language': getXmlNodeText, 
        'feedLandingPage': getXmlNodeText, 
        'ownerName': getXmlNodeText, 
        'ownerEmail': getXmlNodeText, 
        'feedImageUrl': getXmlNodeText, 
        'category': (VidiunEnumsFactory.createString, "VidiunITunesSyndicationFeedCategories"), 
        'adultContent': (VidiunEnumsFactory.createString, "VidiunITunesSyndicationFeedAdultValues"), 
        'feedAuthor': getXmlNodeText, 
        'enforceOrder': (VidiunEnumsFactory.createInt, "VidiunNullableBoolean"), 
    }

    def fromXml(self, node):
        VidiunBaseSyndicationFeed.fromXml(self, node)
        self.fromXmlImpl(node, VidiunITunesSyndicationFeed.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunBaseSyndicationFeed.toParams(self)
        vparams.put("objectType", "VidiunITunesSyndicationFeed")
        vparams.addStringIfDefined("feedDescription", self.feedDescription)
        vparams.addStringIfDefined("language", self.language)
        vparams.addStringIfDefined("feedLandingPage", self.feedLandingPage)
        vparams.addStringIfDefined("ownerName", self.ownerName)
        vparams.addStringIfDefined("ownerEmail", self.ownerEmail)
        vparams.addStringIfDefined("feedImageUrl", self.feedImageUrl)
        vparams.addStringEnumIfDefined("adultContent", self.adultContent)
        vparams.addStringIfDefined("feedAuthor", self.feedAuthor)
        vparams.addIntEnumIfDefined("enforceOrder", self.enforceOrder)
        return vparams

    def getFeedDescription(self):
        return self.feedDescription

    def setFeedDescription(self, newFeedDescription):
        self.feedDescription = newFeedDescription

    def getLanguage(self):
        return self.language

    def setLanguage(self, newLanguage):
        self.language = newLanguage

    def getFeedLandingPage(self):
        return self.feedLandingPage

    def setFeedLandingPage(self, newFeedLandingPage):
        self.feedLandingPage = newFeedLandingPage

    def getOwnerName(self):
        return self.ownerName

    def setOwnerName(self, newOwnerName):
        self.ownerName = newOwnerName

    def getOwnerEmail(self):
        return self.ownerEmail

    def setOwnerEmail(self, newOwnerEmail):
        self.ownerEmail = newOwnerEmail

    def getFeedImageUrl(self):
        return self.feedImageUrl

    def setFeedImageUrl(self, newFeedImageUrl):
        self.feedImageUrl = newFeedImageUrl

    def getCategory(self):
        return self.category

    def getAdultContent(self):
        return self.adultContent

    def setAdultContent(self, newAdultContent):
        self.adultContent = newAdultContent

    def getFeedAuthor(self):
        return self.feedAuthor

    def setFeedAuthor(self, newFeedAuthor):
        self.feedAuthor = newFeedAuthor

    def getEnforceOrder(self):
        return self.enforceOrder

    def setEnforceOrder(self, newEnforceOrder):
        self.enforceOrder = newEnforceOrder


# @package Vidiun
# @subpackage Client
class VidiunImportJobData(VidiunJobData):
    def __init__(self,
            srcFileUrl=NotImplemented,
            destFileLocalPath=NotImplemented,
            flavorAssetId=NotImplemented,
            fileSize=NotImplemented):
        VidiunJobData.__init__(self)

        # @var string
        self.srcFileUrl = srcFileUrl

        # @var string
        self.destFileLocalPath = destFileLocalPath

        # @var string
        self.flavorAssetId = flavorAssetId

        # @var int
        self.fileSize = fileSize


    PROPERTY_LOADERS = {
        'srcFileUrl': getXmlNodeText, 
        'destFileLocalPath': getXmlNodeText, 
        'flavorAssetId': getXmlNodeText, 
        'fileSize': getXmlNodeInt, 
    }

    def fromXml(self, node):
        VidiunJobData.fromXml(self, node)
        self.fromXmlImpl(node, VidiunImportJobData.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunJobData.toParams(self)
        vparams.put("objectType", "VidiunImportJobData")
        vparams.addStringIfDefined("srcFileUrl", self.srcFileUrl)
        vparams.addStringIfDefined("destFileLocalPath", self.destFileLocalPath)
        vparams.addStringIfDefined("flavorAssetId", self.flavorAssetId)
        vparams.addIntIfDefined("fileSize", self.fileSize)
        return vparams

    def getSrcFileUrl(self):
        return self.srcFileUrl

    def setSrcFileUrl(self, newSrcFileUrl):
        self.srcFileUrl = newSrcFileUrl

    def getDestFileLocalPath(self):
        return self.destFileLocalPath

    def setDestFileLocalPath(self, newDestFileLocalPath):
        self.destFileLocalPath = newDestFileLocalPath

    def getFlavorAssetId(self):
        return self.flavorAssetId

    def setFlavorAssetId(self, newFlavorAssetId):
        self.flavorAssetId = newFlavorAssetId

    def getFileSize(self):
        return self.fileSize

    def setFileSize(self, newFileSize):
        self.fileSize = newFileSize


# @package Vidiun
# @subpackage Client
class VidiunIndexAdvancedFilter(VidiunSearchItem):
    def __init__(self,
            indexIdGreaterThan=NotImplemented,
            depthGreaterThanEqual=NotImplemented):
        VidiunSearchItem.__init__(self)

        # @var int
        self.indexIdGreaterThan = indexIdGreaterThan

        # @var int
        self.depthGreaterThanEqual = depthGreaterThanEqual


    PROPERTY_LOADERS = {
        'indexIdGreaterThan': getXmlNodeInt, 
        'depthGreaterThanEqual': getXmlNodeInt, 
    }

    def fromXml(self, node):
        VidiunSearchItem.fromXml(self, node)
        self.fromXmlImpl(node, VidiunIndexAdvancedFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunSearchItem.toParams(self)
        vparams.put("objectType", "VidiunIndexAdvancedFilter")
        vparams.addIntIfDefined("indexIdGreaterThan", self.indexIdGreaterThan)
        vparams.addIntIfDefined("depthGreaterThanEqual", self.depthGreaterThanEqual)
        return vparams

    def getIndexIdGreaterThan(self):
        return self.indexIdGreaterThan

    def setIndexIdGreaterThan(self, newIndexIdGreaterThan):
        self.indexIdGreaterThan = newIndexIdGreaterThan

    def getDepthGreaterThanEqual(self):
        return self.depthGreaterThanEqual

    def setDepthGreaterThanEqual(self, newDepthGreaterThanEqual):
        self.depthGreaterThanEqual = newDepthGreaterThanEqual


# @package Vidiun
# @subpackage Client
class VidiunIndexJobData(VidiunJobData):
    def __init__(self,
            filter=NotImplemented,
            lastIndexId=NotImplemented,
            lastIndexDepth=NotImplemented,
            shouldUpdate=NotImplemented):
        VidiunJobData.__init__(self)

        # The filter should return the list of objects that need to be reindexed.
        # @var VidiunFilter
        self.filter = filter

        # Indicates the last id that reindexed, used when the batch crached, to re-run from the last crash point.
        # @var int
        self.lastIndexId = lastIndexId

        # Indicates the last depth that reindexed, used when the batch crached, to re-run from the last crash point.
        # @var int
        self.lastIndexDepth = lastIndexDepth

        # Indicates that the object columns and attributes values should be recalculated before reindexed.
        # @var bool
        self.shouldUpdate = shouldUpdate


    PROPERTY_LOADERS = {
        'filter': (VidiunObjectFactory.create, VidiunFilter), 
        'lastIndexId': getXmlNodeInt, 
        'lastIndexDepth': getXmlNodeInt, 
        'shouldUpdate': getXmlNodeBool, 
    }

    def fromXml(self, node):
        VidiunJobData.fromXml(self, node)
        self.fromXmlImpl(node, VidiunIndexJobData.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunJobData.toParams(self)
        vparams.put("objectType", "VidiunIndexJobData")
        vparams.addObjectIfDefined("filter", self.filter)
        vparams.addIntIfDefined("lastIndexId", self.lastIndexId)
        vparams.addIntIfDefined("lastIndexDepth", self.lastIndexDepth)
        vparams.addBoolIfDefined("shouldUpdate", self.shouldUpdate)
        return vparams

    def getFilter(self):
        return self.filter

    def setFilter(self, newFilter):
        self.filter = newFilter

    def getLastIndexId(self):
        return self.lastIndexId

    def setLastIndexId(self, newLastIndexId):
        self.lastIndexId = newLastIndexId

    def getLastIndexDepth(self):
        return self.lastIndexDepth

    def setLastIndexDepth(self, newLastIndexDepth):
        self.lastIndexDepth = newLastIndexDepth

    def getShouldUpdate(self):
        return self.shouldUpdate

    def setShouldUpdate(self, newShouldUpdate):
        self.shouldUpdate = newShouldUpdate


# @package Vidiun
# @subpackage Client
class VidiunIpAddressRestriction(VidiunBaseRestriction):
    def __init__(self,
            ipAddressRestrictionType=NotImplemented,
            ipAddressList=NotImplemented):
        VidiunBaseRestriction.__init__(self)

        # Ip address restriction type (Allow or deny)
        # @var VidiunIpAddressRestrictionType
        self.ipAddressRestrictionType = ipAddressRestrictionType

        # Comma separated list of ip address to allow to deny
        # @var string
        self.ipAddressList = ipAddressList


    PROPERTY_LOADERS = {
        'ipAddressRestrictionType': (VidiunEnumsFactory.createInt, "VidiunIpAddressRestrictionType"), 
        'ipAddressList': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunBaseRestriction.fromXml(self, node)
        self.fromXmlImpl(node, VidiunIpAddressRestriction.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunBaseRestriction.toParams(self)
        vparams.put("objectType", "VidiunIpAddressRestriction")
        vparams.addIntEnumIfDefined("ipAddressRestrictionType", self.ipAddressRestrictionType)
        vparams.addStringIfDefined("ipAddressList", self.ipAddressList)
        return vparams

    def getIpAddressRestrictionType(self):
        return self.ipAddressRestrictionType

    def setIpAddressRestrictionType(self, newIpAddressRestrictionType):
        self.ipAddressRestrictionType = newIpAddressRestrictionType

    def getIpAddressList(self):
        return self.ipAddressList

    def setIpAddressList(self, newIpAddressList):
        self.ipAddressList = newIpAddressList


# @package Vidiun
# @subpackage Client
class VidiunLimitFlavorsRestriction(VidiunBaseRestriction):
    def __init__(self,
            limitFlavorsRestrictionType=NotImplemented,
            flavorParamsIds=NotImplemented):
        VidiunBaseRestriction.__init__(self)

        # Limit flavors restriction type (Allow or deny)
        # @var VidiunLimitFlavorsRestrictionType
        self.limitFlavorsRestrictionType = limitFlavorsRestrictionType

        # Comma separated list of flavor params ids to allow to deny
        # @var string
        self.flavorParamsIds = flavorParamsIds


    PROPERTY_LOADERS = {
        'limitFlavorsRestrictionType': (VidiunEnumsFactory.createInt, "VidiunLimitFlavorsRestrictionType"), 
        'flavorParamsIds': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunBaseRestriction.fromXml(self, node)
        self.fromXmlImpl(node, VidiunLimitFlavorsRestriction.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunBaseRestriction.toParams(self)
        vparams.put("objectType", "VidiunLimitFlavorsRestriction")
        vparams.addIntEnumIfDefined("limitFlavorsRestrictionType", self.limitFlavorsRestrictionType)
        vparams.addStringIfDefined("flavorParamsIds", self.flavorParamsIds)
        return vparams

    def getLimitFlavorsRestrictionType(self):
        return self.limitFlavorsRestrictionType

    def setLimitFlavorsRestrictionType(self, newLimitFlavorsRestrictionType):
        self.limitFlavorsRestrictionType = newLimitFlavorsRestrictionType

    def getFlavorParamsIds(self):
        return self.flavorParamsIds

    def setFlavorParamsIds(self, newFlavorParamsIds):
        self.flavorParamsIds = newFlavorParamsIds


# @package Vidiun
# @subpackage Client
class VidiunLiveChannelListResponse(VidiunListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        VidiunListResponse.__init__(self,
            totalCount)

        # @var array of VidiunLiveChannel
        # @readonly
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (VidiunObjectFactory.createArray, VidiunLiveChannel), 
    }

    def fromXml(self, node):
        VidiunListResponse.fromXml(self, node)
        self.fromXmlImpl(node, VidiunLiveChannelListResponse.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunListResponse.toParams(self)
        vparams.put("objectType", "VidiunLiveChannelListResponse")
        return vparams

    def getObjects(self):
        return self.objects


# @package Vidiun
# @subpackage Client
class VidiunLiveChannelSegmentListResponse(VidiunListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        VidiunListResponse.__init__(self,
            totalCount)

        # @var array of VidiunLiveChannelSegment
        # @readonly
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (VidiunObjectFactory.createArray, VidiunLiveChannelSegment), 
    }

    def fromXml(self, node):
        VidiunListResponse.fromXml(self, node)
        self.fromXmlImpl(node, VidiunLiveChannelSegmentListResponse.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunListResponse.toParams(self)
        vparams.put("objectType", "VidiunLiveChannelSegmentListResponse")
        return vparams

    def getObjects(self):
        return self.objects


# @package Vidiun
# @subpackage Client
class VidiunLiveEntryServerNode(VidiunEntryServerNode):
    def __init__(self,
            id=NotImplemented,
            entryId=NotImplemented,
            serverNodeId=NotImplemented,
            partnerId=NotImplemented,
            createdAt=NotImplemented,
            updatedAt=NotImplemented,
            status=NotImplemented,
            serverType=NotImplemented,
            streams=NotImplemented):
        VidiunEntryServerNode.__init__(self,
            id,
            entryId,
            serverNodeId,
            partnerId,
            createdAt,
            updatedAt,
            status,
            serverType)

        # parameters of the stream we got
        # @var array of VidiunLiveStreamParams
        self.streams = streams


    PROPERTY_LOADERS = {
        'streams': (VidiunObjectFactory.createArray, VidiunLiveStreamParams), 
    }

    def fromXml(self, node):
        VidiunEntryServerNode.fromXml(self, node)
        self.fromXmlImpl(node, VidiunLiveEntryServerNode.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunEntryServerNode.toParams(self)
        vparams.put("objectType", "VidiunLiveEntryServerNode")
        vparams.addArrayIfDefined("streams", self.streams)
        return vparams

    def getStreams(self):
        return self.streams

    def setStreams(self, newStreams):
        self.streams = newStreams


# @package Vidiun
# @subpackage Client
class VidiunLiveReportExportJobData(VidiunJobData):
    def __init__(self,
            timeReference=NotImplemented,
            timeZoneOffset=NotImplemented,
            entryIds=NotImplemented,
            outputPath=NotImplemented,
            recipientEmail=NotImplemented):
        VidiunJobData.__init__(self)

        # @var int
        self.timeReference = timeReference

        # @var int
        self.timeZoneOffset = timeZoneOffset

        # @var string
        self.entryIds = entryIds

        # @var string
        self.outputPath = outputPath

        # @var string
        self.recipientEmail = recipientEmail


    PROPERTY_LOADERS = {
        'timeReference': getXmlNodeInt, 
        'timeZoneOffset': getXmlNodeInt, 
        'entryIds': getXmlNodeText, 
        'outputPath': getXmlNodeText, 
        'recipientEmail': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunJobData.fromXml(self, node)
        self.fromXmlImpl(node, VidiunLiveReportExportJobData.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunJobData.toParams(self)
        vparams.put("objectType", "VidiunLiveReportExportJobData")
        vparams.addIntIfDefined("timeReference", self.timeReference)
        vparams.addIntIfDefined("timeZoneOffset", self.timeZoneOffset)
        vparams.addStringIfDefined("entryIds", self.entryIds)
        vparams.addStringIfDefined("outputPath", self.outputPath)
        vparams.addStringIfDefined("recipientEmail", self.recipientEmail)
        return vparams

    def getTimeReference(self):
        return self.timeReference

    def setTimeReference(self, newTimeReference):
        self.timeReference = newTimeReference

    def getTimeZoneOffset(self):
        return self.timeZoneOffset

    def setTimeZoneOffset(self, newTimeZoneOffset):
        self.timeZoneOffset = newTimeZoneOffset

    def getEntryIds(self):
        return self.entryIds

    def setEntryIds(self, newEntryIds):
        self.entryIds = newEntryIds

    def getOutputPath(self):
        return self.outputPath

    def setOutputPath(self, newOutputPath):
        self.outputPath = newOutputPath

    def getRecipientEmail(self):
        return self.recipientEmail

    def setRecipientEmail(self, newRecipientEmail):
        self.recipientEmail = newRecipientEmail


# @package Vidiun
# @subpackage Client
class VidiunLiveStatsListResponse(VidiunListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        VidiunListResponse.__init__(self,
            totalCount)

        # @var VidiunLiveStats
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (VidiunObjectFactory.create, VidiunLiveStats), 
    }

    def fromXml(self, node):
        VidiunListResponse.fromXml(self, node)
        self.fromXmlImpl(node, VidiunLiveStatsListResponse.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunListResponse.toParams(self)
        vparams.put("objectType", "VidiunLiveStatsListResponse")
        vparams.addObjectIfDefined("objects", self.objects)
        return vparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Vidiun
# @subpackage Client
class VidiunLiveStreamListResponse(VidiunListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        VidiunListResponse.__init__(self,
            totalCount)

        # @var array of VidiunLiveStreamEntry
        # @readonly
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (VidiunObjectFactory.createArray, VidiunLiveStreamEntry), 
    }

    def fromXml(self, node):
        VidiunListResponse.fromXml(self, node)
        self.fromXmlImpl(node, VidiunLiveStreamListResponse.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunListResponse.toParams(self)
        vparams.put("objectType", "VidiunLiveStreamListResponse")
        return vparams

    def getObjects(self):
        return self.objects


# @package Vidiun
# @subpackage Client
class VidiunLiveStreamPushPublishRTMPConfiguration(VidiunLiveStreamPushPublishConfiguration):
    """A representation of an RTMP live stream configuration"""

    def __init__(self,
            publishUrl=NotImplemented,
            backupPublishUrl=NotImplemented,
            port=NotImplemented,
            userId=NotImplemented,
            password=NotImplemented,
            streamName=NotImplemented,
            applicationName=NotImplemented):
        VidiunLiveStreamPushPublishConfiguration.__init__(self,
            publishUrl,
            backupPublishUrl,
            port)

        # @var string
        self.userId = userId

        # @var string
        self.password = password

        # @var string
        self.streamName = streamName

        # @var string
        self.applicationName = applicationName


    PROPERTY_LOADERS = {
        'userId': getXmlNodeText, 
        'password': getXmlNodeText, 
        'streamName': getXmlNodeText, 
        'applicationName': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunLiveStreamPushPublishConfiguration.fromXml(self, node)
        self.fromXmlImpl(node, VidiunLiveStreamPushPublishRTMPConfiguration.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunLiveStreamPushPublishConfiguration.toParams(self)
        vparams.put("objectType", "VidiunLiveStreamPushPublishRTMPConfiguration")
        vparams.addStringIfDefined("userId", self.userId)
        vparams.addStringIfDefined("password", self.password)
        vparams.addStringIfDefined("streamName", self.streamName)
        vparams.addStringIfDefined("applicationName", self.applicationName)
        return vparams

    def getUserId(self):
        return self.userId

    def setUserId(self, newUserId):
        self.userId = newUserId

    def getPassword(self):
        return self.password

    def setPassword(self, newPassword):
        self.password = newPassword

    def getStreamName(self):
        return self.streamName

    def setStreamName(self, newStreamName):
        self.streamName = newStreamName

    def getApplicationName(self):
        return self.applicationName

    def setApplicationName(self, newApplicationName):
        self.applicationName = newApplicationName


# @package Vidiun
# @subpackage Client
class VidiunMailJobData(VidiunJobData):
    def __init__(self,
            mailType=NotImplemented,
            mailPriority=NotImplemented,
            status=NotImplemented,
            recipientName=NotImplemented,
            recipientEmail=NotImplemented,
            recipientId=NotImplemented,
            fromName=NotImplemented,
            fromEmail=NotImplemented,
            bodyParams=NotImplemented,
            subjectParams=NotImplemented,
            templatePath=NotImplemented,
            language=NotImplemented,
            campaignId=NotImplemented,
            minSendDate=NotImplemented,
            isHtml=NotImplemented,
            separator=NotImplemented):
        VidiunJobData.__init__(self)

        # @var VidiunMailType
        self.mailType = mailType

        # @var int
        self.mailPriority = mailPriority

        # @var VidiunMailJobStatus
        self.status = status

        # @var string
        self.recipientName = recipientName

        # @var string
        self.recipientEmail = recipientEmail

        # vuserId
        # @var int
        self.recipientId = recipientId

        # @var string
        self.fromName = fromName

        # @var string
        self.fromEmail = fromEmail

        # @var string
        self.bodyParams = bodyParams

        # @var string
        self.subjectParams = subjectParams

        # @var string
        self.templatePath = templatePath

        # @var VidiunLanguageCode
        self.language = language

        # @var int
        self.campaignId = campaignId

        # @var int
        self.minSendDate = minSendDate

        # @var bool
        self.isHtml = isHtml

        # @var string
        self.separator = separator


    PROPERTY_LOADERS = {
        'mailType': (VidiunEnumsFactory.createString, "VidiunMailType"), 
        'mailPriority': getXmlNodeInt, 
        'status': (VidiunEnumsFactory.createInt, "VidiunMailJobStatus"), 
        'recipientName': getXmlNodeText, 
        'recipientEmail': getXmlNodeText, 
        'recipientId': getXmlNodeInt, 
        'fromName': getXmlNodeText, 
        'fromEmail': getXmlNodeText, 
        'bodyParams': getXmlNodeText, 
        'subjectParams': getXmlNodeText, 
        'templatePath': getXmlNodeText, 
        'language': (VidiunEnumsFactory.createString, "VidiunLanguageCode"), 
        'campaignId': getXmlNodeInt, 
        'minSendDate': getXmlNodeInt, 
        'isHtml': getXmlNodeBool, 
        'separator': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunJobData.fromXml(self, node)
        self.fromXmlImpl(node, VidiunMailJobData.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunJobData.toParams(self)
        vparams.put("objectType", "VidiunMailJobData")
        vparams.addStringEnumIfDefined("mailType", self.mailType)
        vparams.addIntIfDefined("mailPriority", self.mailPriority)
        vparams.addIntEnumIfDefined("status", self.status)
        vparams.addStringIfDefined("recipientName", self.recipientName)
        vparams.addStringIfDefined("recipientEmail", self.recipientEmail)
        vparams.addIntIfDefined("recipientId", self.recipientId)
        vparams.addStringIfDefined("fromName", self.fromName)
        vparams.addStringIfDefined("fromEmail", self.fromEmail)
        vparams.addStringIfDefined("bodyParams", self.bodyParams)
        vparams.addStringIfDefined("subjectParams", self.subjectParams)
        vparams.addStringIfDefined("templatePath", self.templatePath)
        vparams.addStringEnumIfDefined("language", self.language)
        vparams.addIntIfDefined("campaignId", self.campaignId)
        vparams.addIntIfDefined("minSendDate", self.minSendDate)
        vparams.addBoolIfDefined("isHtml", self.isHtml)
        vparams.addStringIfDefined("separator", self.separator)
        return vparams

    def getMailType(self):
        return self.mailType

    def setMailType(self, newMailType):
        self.mailType = newMailType

    def getMailPriority(self):
        return self.mailPriority

    def setMailPriority(self, newMailPriority):
        self.mailPriority = newMailPriority

    def getStatus(self):
        return self.status

    def setStatus(self, newStatus):
        self.status = newStatus

    def getRecipientName(self):
        return self.recipientName

    def setRecipientName(self, newRecipientName):
        self.recipientName = newRecipientName

    def getRecipientEmail(self):
        return self.recipientEmail

    def setRecipientEmail(self, newRecipientEmail):
        self.recipientEmail = newRecipientEmail

    def getRecipientId(self):
        return self.recipientId

    def setRecipientId(self, newRecipientId):
        self.recipientId = newRecipientId

    def getFromName(self):
        return self.fromName

    def setFromName(self, newFromName):
        self.fromName = newFromName

    def getFromEmail(self):
        return self.fromEmail

    def setFromEmail(self, newFromEmail):
        self.fromEmail = newFromEmail

    def getBodyParams(self):
        return self.bodyParams

    def setBodyParams(self, newBodyParams):
        self.bodyParams = newBodyParams

    def getSubjectParams(self):
        return self.subjectParams

    def setSubjectParams(self, newSubjectParams):
        self.subjectParams = newSubjectParams

    def getTemplatePath(self):
        return self.templatePath

    def setTemplatePath(self, newTemplatePath):
        self.templatePath = newTemplatePath

    def getLanguage(self):
        return self.language

    def setLanguage(self, newLanguage):
        self.language = newLanguage

    def getCampaignId(self):
        return self.campaignId

    def setCampaignId(self, newCampaignId):
        self.campaignId = newCampaignId

    def getMinSendDate(self):
        return self.minSendDate

    def setMinSendDate(self, newMinSendDate):
        self.minSendDate = newMinSendDate

    def getIsHtml(self):
        return self.isHtml

    def setIsHtml(self, newIsHtml):
        self.isHtml = newIsHtml

    def getSeparator(self):
        return self.separator

    def setSeparator(self, newSeparator):
        self.separator = newSeparator


# @package Vidiun
# @subpackage Client
class VidiunMatchCondition(VidiunCondition):
    def __init__(self,
            type=NotImplemented,
            description=NotImplemented,
            not_=NotImplemented,
            values=NotImplemented):
        VidiunCondition.__init__(self,
            type,
            description,
            not_)

        # @var array of VidiunStringValue
        self.values = values


    PROPERTY_LOADERS = {
        'values': (VidiunObjectFactory.createArray, VidiunStringValue), 
    }

    def fromXml(self, node):
        VidiunCondition.fromXml(self, node)
        self.fromXmlImpl(node, VidiunMatchCondition.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunCondition.toParams(self)
        vparams.put("objectType", "VidiunMatchCondition")
        vparams.addArrayIfDefined("values", self.values)
        return vparams

    def getValues(self):
        return self.values

    def setValues(self, newValues):
        self.values = newValues


# @package Vidiun
# @subpackage Client
class VidiunMediaInfoBaseFilter(VidiunFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            flavorAssetIdEqual=NotImplemented):
        VidiunFilter.__init__(self,
            orderBy,
            advancedSearch)

        # @var string
        self.flavorAssetIdEqual = flavorAssetIdEqual


    PROPERTY_LOADERS = {
        'flavorAssetIdEqual': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunMediaInfoBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunFilter.toParams(self)
        vparams.put("objectType", "VidiunMediaInfoBaseFilter")
        vparams.addStringIfDefined("flavorAssetIdEqual", self.flavorAssetIdEqual)
        return vparams

    def getFlavorAssetIdEqual(self):
        return self.flavorAssetIdEqual

    def setFlavorAssetIdEqual(self, newFlavorAssetIdEqual):
        self.flavorAssetIdEqual = newFlavorAssetIdEqual


# @package Vidiun
# @subpackage Client
class VidiunMediaInfoListResponse(VidiunListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        VidiunListResponse.__init__(self,
            totalCount)

        # @var array of VidiunMediaInfo
        # @readonly
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (VidiunObjectFactory.createArray, VidiunMediaInfo), 
    }

    def fromXml(self, node):
        VidiunListResponse.fromXml(self, node)
        self.fromXmlImpl(node, VidiunMediaInfoListResponse.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunListResponse.toParams(self)
        vparams.put("objectType", "VidiunMediaInfoListResponse")
        return vparams

    def getObjects(self):
        return self.objects


# @package Vidiun
# @subpackage Client
class VidiunMediaListResponse(VidiunListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        VidiunListResponse.__init__(self,
            totalCount)

        # @var array of VidiunMediaEntry
        # @readonly
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (VidiunObjectFactory.createArray, VidiunMediaEntry), 
    }

    def fromXml(self, node):
        VidiunListResponse.fromXml(self, node)
        self.fromXmlImpl(node, VidiunMediaListResponse.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunListResponse.toParams(self)
        vparams.put("objectType", "VidiunMediaListResponse")
        return vparams

    def getObjects(self):
        return self.objects


# @package Vidiun
# @subpackage Client
class VidiunMixListResponse(VidiunListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        VidiunListResponse.__init__(self,
            totalCount)

        # @var array of VidiunMixEntry
        # @readonly
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (VidiunObjectFactory.createArray, VidiunMixEntry), 
    }

    def fromXml(self, node):
        VidiunListResponse.fromXml(self, node)
        self.fromXmlImpl(node, VidiunMixListResponse.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunListResponse.toParams(self)
        vparams.put("objectType", "VidiunMixListResponse")
        return vparams

    def getObjects(self):
        return self.objects


# @package Vidiun
# @subpackage Client
class VidiunModerationFlagListResponse(VidiunListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        VidiunListResponse.__init__(self,
            totalCount)

        # @var array of VidiunModerationFlag
        # @readonly
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (VidiunObjectFactory.createArray, VidiunModerationFlag), 
    }

    def fromXml(self, node):
        VidiunListResponse.fromXml(self, node)
        self.fromXmlImpl(node, VidiunModerationFlagListResponse.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunListResponse.toParams(self)
        vparams.put("objectType", "VidiunModerationFlagListResponse")
        return vparams

    def getObjects(self):
        return self.objects


# @package Vidiun
# @subpackage Client
class VidiunMoveCategoryEntriesJobData(VidiunJobData):
    def __init__(self,
            srcCategoryId=NotImplemented,
            destCategoryId=NotImplemented,
            lastMovedCategoryId=NotImplemented,
            lastMovedCategoryPageIndex=NotImplemented,
            lastMovedCategoryEntryPageIndex=NotImplemented,
            moveFromChildren=NotImplemented,
            destCategoryFullIds=NotImplemented):
        VidiunJobData.__init__(self)

        # Source category id
        # @var int
        self.srcCategoryId = srcCategoryId

        # Destination category id
        # @var int
        self.destCategoryId = destCategoryId

        # Saves the last category id that its entries moved completely
        #      In case of crash the batch will restart from that point
        # @var int
        self.lastMovedCategoryId = lastMovedCategoryId

        # Saves the last page index of the child categories filter pager
        #      In case of crash the batch will restart from that point
        # @var int
        self.lastMovedCategoryPageIndex = lastMovedCategoryPageIndex

        # Saves the last page index of the category entries filter pager
        #      In case of crash the batch will restart from that point
        # @var int
        self.lastMovedCategoryEntryPageIndex = lastMovedCategoryEntryPageIndex

        # All entries from all child categories will be moved as well
        # @var bool
        self.moveFromChildren = moveFromChildren

        # Destination categories fallback ids
        # @var string
        self.destCategoryFullIds = destCategoryFullIds


    PROPERTY_LOADERS = {
        'srcCategoryId': getXmlNodeInt, 
        'destCategoryId': getXmlNodeInt, 
        'lastMovedCategoryId': getXmlNodeInt, 
        'lastMovedCategoryPageIndex': getXmlNodeInt, 
        'lastMovedCategoryEntryPageIndex': getXmlNodeInt, 
        'moveFromChildren': getXmlNodeBool, 
        'destCategoryFullIds': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunJobData.fromXml(self, node)
        self.fromXmlImpl(node, VidiunMoveCategoryEntriesJobData.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunJobData.toParams(self)
        vparams.put("objectType", "VidiunMoveCategoryEntriesJobData")
        vparams.addIntIfDefined("srcCategoryId", self.srcCategoryId)
        vparams.addIntIfDefined("destCategoryId", self.destCategoryId)
        vparams.addIntIfDefined("lastMovedCategoryId", self.lastMovedCategoryId)
        vparams.addIntIfDefined("lastMovedCategoryPageIndex", self.lastMovedCategoryPageIndex)
        vparams.addIntIfDefined("lastMovedCategoryEntryPageIndex", self.lastMovedCategoryEntryPageIndex)
        vparams.addBoolIfDefined("moveFromChildren", self.moveFromChildren)
        vparams.addStringIfDefined("destCategoryFullIds", self.destCategoryFullIds)
        return vparams

    def getSrcCategoryId(self):
        return self.srcCategoryId

    def setSrcCategoryId(self, newSrcCategoryId):
        self.srcCategoryId = newSrcCategoryId

    def getDestCategoryId(self):
        return self.destCategoryId

    def setDestCategoryId(self, newDestCategoryId):
        self.destCategoryId = newDestCategoryId

    def getLastMovedCategoryId(self):
        return self.lastMovedCategoryId

    def setLastMovedCategoryId(self, newLastMovedCategoryId):
        self.lastMovedCategoryId = newLastMovedCategoryId

    def getLastMovedCategoryPageIndex(self):
        return self.lastMovedCategoryPageIndex

    def setLastMovedCategoryPageIndex(self, newLastMovedCategoryPageIndex):
        self.lastMovedCategoryPageIndex = newLastMovedCategoryPageIndex

    def getLastMovedCategoryEntryPageIndex(self):
        return self.lastMovedCategoryEntryPageIndex

    def setLastMovedCategoryEntryPageIndex(self, newLastMovedCategoryEntryPageIndex):
        self.lastMovedCategoryEntryPageIndex = newLastMovedCategoryEntryPageIndex

    def getMoveFromChildren(self):
        return self.moveFromChildren

    def setMoveFromChildren(self, newMoveFromChildren):
        self.moveFromChildren = newMoveFromChildren

    def getDestCategoryFullIds(self):
        return self.destCategoryFullIds

    def setDestCategoryFullIds(self, newDestCategoryFullIds):
        self.destCategoryFullIds = newDestCategoryFullIds


# @package Vidiun
# @subpackage Client
class VidiunNotificationJobData(VidiunJobData):
    def __init__(self,
            userId=NotImplemented,
            type=NotImplemented,
            typeAsString=NotImplemented,
            objectId=NotImplemented,
            status=NotImplemented,
            data=NotImplemented,
            numberOfAttempts=NotImplemented,
            notificationResult=NotImplemented,
            objType=NotImplemented):
        VidiunJobData.__init__(self)

        # @var string
        self.userId = userId

        # @var VidiunNotificationType
        self.type = type

        # @var string
        self.typeAsString = typeAsString

        # @var string
        self.objectId = objectId

        # @var VidiunNotificationStatus
        self.status = status

        # @var string
        self.data = data

        # @var int
        self.numberOfAttempts = numberOfAttempts

        # @var string
        self.notificationResult = notificationResult

        # @var VidiunNotificationObjectType
        self.objType = objType


    PROPERTY_LOADERS = {
        'userId': getXmlNodeText, 
        'type': (VidiunEnumsFactory.createInt, "VidiunNotificationType"), 
        'typeAsString': getXmlNodeText, 
        'objectId': getXmlNodeText, 
        'status': (VidiunEnumsFactory.createInt, "VidiunNotificationStatus"), 
        'data': getXmlNodeText, 
        'numberOfAttempts': getXmlNodeInt, 
        'notificationResult': getXmlNodeText, 
        'objType': (VidiunEnumsFactory.createInt, "VidiunNotificationObjectType"), 
    }

    def fromXml(self, node):
        VidiunJobData.fromXml(self, node)
        self.fromXmlImpl(node, VidiunNotificationJobData.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunJobData.toParams(self)
        vparams.put("objectType", "VidiunNotificationJobData")
        vparams.addStringIfDefined("userId", self.userId)
        vparams.addIntEnumIfDefined("type", self.type)
        vparams.addStringIfDefined("typeAsString", self.typeAsString)
        vparams.addStringIfDefined("objectId", self.objectId)
        vparams.addIntEnumIfDefined("status", self.status)
        vparams.addStringIfDefined("data", self.data)
        vparams.addIntIfDefined("numberOfAttempts", self.numberOfAttempts)
        vparams.addStringIfDefined("notificationResult", self.notificationResult)
        vparams.addIntEnumIfDefined("objType", self.objType)
        return vparams

    def getUserId(self):
        return self.userId

    def setUserId(self, newUserId):
        self.userId = newUserId

    def getType(self):
        return self.type

    def setType(self, newType):
        self.type = newType

    def getTypeAsString(self):
        return self.typeAsString

    def setTypeAsString(self, newTypeAsString):
        self.typeAsString = newTypeAsString

    def getObjectId(self):
        return self.objectId

    def setObjectId(self, newObjectId):
        self.objectId = newObjectId

    def getStatus(self):
        return self.status

    def setStatus(self, newStatus):
        self.status = newStatus

    def getData(self):
        return self.data

    def setData(self, newData):
        self.data = newData

    def getNumberOfAttempts(self):
        return self.numberOfAttempts

    def setNumberOfAttempts(self, newNumberOfAttempts):
        self.numberOfAttempts = newNumberOfAttempts

    def getNotificationResult(self):
        return self.notificationResult

    def setNotificationResult(self, newNotificationResult):
        self.notificationResult = newNotificationResult

    def getObjType(self):
        return self.objType

    def setObjType(self, newObjType):
        self.objType = newObjType


# @package Vidiun
# @subpackage Client
class VidiunObjectListResponse(VidiunListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        VidiunListResponse.__init__(self,
            totalCount)

        # @var array of VidiunObject
        # @readonly
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (VidiunObjectFactory.createArray, VidiunObject), 
    }

    def fromXml(self, node):
        VidiunListResponse.fromXml(self, node)
        self.fromXmlImpl(node, VidiunObjectListResponse.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunListResponse.toParams(self)
        vparams.put("objectType", "VidiunObjectListResponse")
        return vparams

    def getObjects(self):
        return self.objects


# @package Vidiun
# @subpackage Client
class VidiunOrCondition(VidiunCondition):
    def __init__(self,
            type=NotImplemented,
            description=NotImplemented,
            not_=NotImplemented,
            conditions=NotImplemented):
        VidiunCondition.__init__(self,
            type,
            description,
            not_)

        # @var array of VidiunCondition
        self.conditions = conditions


    PROPERTY_LOADERS = {
        'conditions': (VidiunObjectFactory.createArray, VidiunCondition), 
    }

    def fromXml(self, node):
        VidiunCondition.fromXml(self, node)
        self.fromXmlImpl(node, VidiunOrCondition.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunCondition.toParams(self)
        vparams.put("objectType", "VidiunOrCondition")
        vparams.addArrayIfDefined("conditions", self.conditions)
        return vparams

    def getConditions(self):
        return self.conditions

    def setConditions(self, newConditions):
        self.conditions = newConditions


# @package Vidiun
# @subpackage Client
class VidiunPartnerBaseFilter(VidiunFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            idNotIn=NotImplemented,
            nameLike=NotImplemented,
            nameMultiLikeOr=NotImplemented,
            nameMultiLikeAnd=NotImplemented,
            nameEqual=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented,
            partnerPackageEqual=NotImplemented,
            partnerPackageGreaterThanOrEqual=NotImplemented,
            partnerPackageLessThanOrEqual=NotImplemented,
            partnerPackageIn=NotImplemented,
            partnerGroupTypeEqual=NotImplemented,
            partnerNameDescriptionWebsiteAdminNameAdminEmailLike=NotImplemented):
        VidiunFilter.__init__(self,
            orderBy,
            advancedSearch)

        # @var int
        self.idEqual = idEqual

        # @var string
        self.idIn = idIn

        # @var string
        self.idNotIn = idNotIn

        # @var string
        self.nameLike = nameLike

        # @var string
        self.nameMultiLikeOr = nameMultiLikeOr

        # @var string
        self.nameMultiLikeAnd = nameMultiLikeAnd

        # @var string
        self.nameEqual = nameEqual

        # @var VidiunPartnerStatus
        self.statusEqual = statusEqual

        # @var string
        self.statusIn = statusIn

        # @var int
        self.partnerPackageEqual = partnerPackageEqual

        # @var int
        self.partnerPackageGreaterThanOrEqual = partnerPackageGreaterThanOrEqual

        # @var int
        self.partnerPackageLessThanOrEqual = partnerPackageLessThanOrEqual

        # @var string
        self.partnerPackageIn = partnerPackageIn

        # @var VidiunPartnerGroupType
        self.partnerGroupTypeEqual = partnerGroupTypeEqual

        # @var string
        self.partnerNameDescriptionWebsiteAdminNameAdminEmailLike = partnerNameDescriptionWebsiteAdminNameAdminEmailLike


    PROPERTY_LOADERS = {
        'idEqual': getXmlNodeInt, 
        'idIn': getXmlNodeText, 
        'idNotIn': getXmlNodeText, 
        'nameLike': getXmlNodeText, 
        'nameMultiLikeOr': getXmlNodeText, 
        'nameMultiLikeAnd': getXmlNodeText, 
        'nameEqual': getXmlNodeText, 
        'statusEqual': (VidiunEnumsFactory.createInt, "VidiunPartnerStatus"), 
        'statusIn': getXmlNodeText, 
        'partnerPackageEqual': getXmlNodeInt, 
        'partnerPackageGreaterThanOrEqual': getXmlNodeInt, 
        'partnerPackageLessThanOrEqual': getXmlNodeInt, 
        'partnerPackageIn': getXmlNodeText, 
        'partnerGroupTypeEqual': (VidiunEnumsFactory.createInt, "VidiunPartnerGroupType"), 
        'partnerNameDescriptionWebsiteAdminNameAdminEmailLike': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunPartnerBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunFilter.toParams(self)
        vparams.put("objectType", "VidiunPartnerBaseFilter")
        vparams.addIntIfDefined("idEqual", self.idEqual)
        vparams.addStringIfDefined("idIn", self.idIn)
        vparams.addStringIfDefined("idNotIn", self.idNotIn)
        vparams.addStringIfDefined("nameLike", self.nameLike)
        vparams.addStringIfDefined("nameMultiLikeOr", self.nameMultiLikeOr)
        vparams.addStringIfDefined("nameMultiLikeAnd", self.nameMultiLikeAnd)
        vparams.addStringIfDefined("nameEqual", self.nameEqual)
        vparams.addIntEnumIfDefined("statusEqual", self.statusEqual)
        vparams.addStringIfDefined("statusIn", self.statusIn)
        vparams.addIntIfDefined("partnerPackageEqual", self.partnerPackageEqual)
        vparams.addIntIfDefined("partnerPackageGreaterThanOrEqual", self.partnerPackageGreaterThanOrEqual)
        vparams.addIntIfDefined("partnerPackageLessThanOrEqual", self.partnerPackageLessThanOrEqual)
        vparams.addStringIfDefined("partnerPackageIn", self.partnerPackageIn)
        vparams.addIntEnumIfDefined("partnerGroupTypeEqual", self.partnerGroupTypeEqual)
        vparams.addStringIfDefined("partnerNameDescriptionWebsiteAdminNameAdminEmailLike", self.partnerNameDescriptionWebsiteAdminNameAdminEmailLike)
        return vparams

    def getIdEqual(self):
        return self.idEqual

    def setIdEqual(self, newIdEqual):
        self.idEqual = newIdEqual

    def getIdIn(self):
        return self.idIn

    def setIdIn(self, newIdIn):
        self.idIn = newIdIn

    def getIdNotIn(self):
        return self.idNotIn

    def setIdNotIn(self, newIdNotIn):
        self.idNotIn = newIdNotIn

    def getNameLike(self):
        return self.nameLike

    def setNameLike(self, newNameLike):
        self.nameLike = newNameLike

    def getNameMultiLikeOr(self):
        return self.nameMultiLikeOr

    def setNameMultiLikeOr(self, newNameMultiLikeOr):
        self.nameMultiLikeOr = newNameMultiLikeOr

    def getNameMultiLikeAnd(self):
        return self.nameMultiLikeAnd

    def setNameMultiLikeAnd(self, newNameMultiLikeAnd):
        self.nameMultiLikeAnd = newNameMultiLikeAnd

    def getNameEqual(self):
        return self.nameEqual

    def setNameEqual(self, newNameEqual):
        self.nameEqual = newNameEqual

    def getStatusEqual(self):
        return self.statusEqual

    def setStatusEqual(self, newStatusEqual):
        self.statusEqual = newStatusEqual

    def getStatusIn(self):
        return self.statusIn

    def setStatusIn(self, newStatusIn):
        self.statusIn = newStatusIn

    def getPartnerPackageEqual(self):
        return self.partnerPackageEqual

    def setPartnerPackageEqual(self, newPartnerPackageEqual):
        self.partnerPackageEqual = newPartnerPackageEqual

    def getPartnerPackageGreaterThanOrEqual(self):
        return self.partnerPackageGreaterThanOrEqual

    def setPartnerPackageGreaterThanOrEqual(self, newPartnerPackageGreaterThanOrEqual):
        self.partnerPackageGreaterThanOrEqual = newPartnerPackageGreaterThanOrEqual

    def getPartnerPackageLessThanOrEqual(self):
        return self.partnerPackageLessThanOrEqual

    def setPartnerPackageLessThanOrEqual(self, newPartnerPackageLessThanOrEqual):
        self.partnerPackageLessThanOrEqual = newPartnerPackageLessThanOrEqual

    def getPartnerPackageIn(self):
        return self.partnerPackageIn

    def setPartnerPackageIn(self, newPartnerPackageIn):
        self.partnerPackageIn = newPartnerPackageIn

    def getPartnerGroupTypeEqual(self):
        return self.partnerGroupTypeEqual

    def setPartnerGroupTypeEqual(self, newPartnerGroupTypeEqual):
        self.partnerGroupTypeEqual = newPartnerGroupTypeEqual

    def getPartnerNameDescriptionWebsiteAdminNameAdminEmailLike(self):
        return self.partnerNameDescriptionWebsiteAdminNameAdminEmailLike

    def setPartnerNameDescriptionWebsiteAdminNameAdminEmailLike(self, newPartnerNameDescriptionWebsiteAdminNameAdminEmailLike):
        self.partnerNameDescriptionWebsiteAdminNameAdminEmailLike = newPartnerNameDescriptionWebsiteAdminNameAdminEmailLike


# @package Vidiun
# @subpackage Client
class VidiunPartnerListResponse(VidiunListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        VidiunListResponse.__init__(self,
            totalCount)

        # @var array of VidiunPartner
        # @readonly
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (VidiunObjectFactory.createArray, VidiunPartner), 
    }

    def fromXml(self, node):
        VidiunListResponse.fromXml(self, node)
        self.fromXmlImpl(node, VidiunPartnerListResponse.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunListResponse.toParams(self)
        vparams.put("objectType", "VidiunPartnerListResponse")
        return vparams

    def getObjects(self):
        return self.objects


# @package Vidiun
# @subpackage Client
class VidiunPermissionItemListResponse(VidiunListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        VidiunListResponse.__init__(self,
            totalCount)

        # @var array of VidiunPermissionItem
        # @readonly
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (VidiunObjectFactory.createArray, VidiunPermissionItem), 
    }

    def fromXml(self, node):
        VidiunListResponse.fromXml(self, node)
        self.fromXmlImpl(node, VidiunPermissionItemListResponse.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunListResponse.toParams(self)
        vparams.put("objectType", "VidiunPermissionItemListResponse")
        return vparams

    def getObjects(self):
        return self.objects


# @package Vidiun
# @subpackage Client
class VidiunPermissionListResponse(VidiunListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        VidiunListResponse.__init__(self,
            totalCount)

        # @var array of VidiunPermission
        # @readonly
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (VidiunObjectFactory.createArray, VidiunPermission), 
    }

    def fromXml(self, node):
        VidiunListResponse.fromXml(self, node)
        self.fromXmlImpl(node, VidiunPermissionListResponse.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunListResponse.toParams(self)
        vparams.put("objectType", "VidiunPermissionListResponse")
        return vparams

    def getObjects(self):
        return self.objects


# @package Vidiun
# @subpackage Client
class VidiunPlaylistListResponse(VidiunListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        VidiunListResponse.__init__(self,
            totalCount)

        # @var array of VidiunPlaylist
        # @readonly
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (VidiunObjectFactory.createArray, VidiunPlaylist), 
    }

    def fromXml(self, node):
        VidiunListResponse.fromXml(self, node)
        self.fromXmlImpl(node, VidiunPlaylistListResponse.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunListResponse.toParams(self)
        vparams.put("objectType", "VidiunPlaylistListResponse")
        return vparams

    def getObjects(self):
        return self.objects


# @package Vidiun
# @subpackage Client
class VidiunProvisionJobData(VidiunJobData):
    def __init__(self,
            streamID=NotImplemented,
            backupStreamID=NotImplemented,
            rtmp=NotImplemented,
            encoderIP=NotImplemented,
            backupEncoderIP=NotImplemented,
            encoderPassword=NotImplemented,
            encoderUsername=NotImplemented,
            endDate=NotImplemented,
            returnVal=NotImplemented,
            mediaType=NotImplemented,
            primaryBroadcastingUrl=NotImplemented,
            secondaryBroadcastingUrl=NotImplemented,
            streamName=NotImplemented):
        VidiunJobData.__init__(self)

        # @var string
        self.streamID = streamID

        # @var string
        self.backupStreamID = backupStreamID

        # @var string
        self.rtmp = rtmp

        # @var string
        self.encoderIP = encoderIP

        # @var string
        self.backupEncoderIP = backupEncoderIP

        # @var string
        self.encoderPassword = encoderPassword

        # @var string
        self.encoderUsername = encoderUsername

        # @var int
        self.endDate = endDate

        # @var string
        self.returnVal = returnVal

        # @var int
        self.mediaType = mediaType

        # @var string
        self.primaryBroadcastingUrl = primaryBroadcastingUrl

        # @var string
        self.secondaryBroadcastingUrl = secondaryBroadcastingUrl

        # @var string
        self.streamName = streamName


    PROPERTY_LOADERS = {
        'streamID': getXmlNodeText, 
        'backupStreamID': getXmlNodeText, 
        'rtmp': getXmlNodeText, 
        'encoderIP': getXmlNodeText, 
        'backupEncoderIP': getXmlNodeText, 
        'encoderPassword': getXmlNodeText, 
        'encoderUsername': getXmlNodeText, 
        'endDate': getXmlNodeInt, 
        'returnVal': getXmlNodeText, 
        'mediaType': getXmlNodeInt, 
        'primaryBroadcastingUrl': getXmlNodeText, 
        'secondaryBroadcastingUrl': getXmlNodeText, 
        'streamName': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunJobData.fromXml(self, node)
        self.fromXmlImpl(node, VidiunProvisionJobData.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunJobData.toParams(self)
        vparams.put("objectType", "VidiunProvisionJobData")
        vparams.addStringIfDefined("streamID", self.streamID)
        vparams.addStringIfDefined("backupStreamID", self.backupStreamID)
        vparams.addStringIfDefined("rtmp", self.rtmp)
        vparams.addStringIfDefined("encoderIP", self.encoderIP)
        vparams.addStringIfDefined("backupEncoderIP", self.backupEncoderIP)
        vparams.addStringIfDefined("encoderPassword", self.encoderPassword)
        vparams.addStringIfDefined("encoderUsername", self.encoderUsername)
        vparams.addIntIfDefined("endDate", self.endDate)
        vparams.addStringIfDefined("returnVal", self.returnVal)
        vparams.addIntIfDefined("mediaType", self.mediaType)
        vparams.addStringIfDefined("primaryBroadcastingUrl", self.primaryBroadcastingUrl)
        vparams.addStringIfDefined("secondaryBroadcastingUrl", self.secondaryBroadcastingUrl)
        vparams.addStringIfDefined("streamName", self.streamName)
        return vparams

    def getStreamID(self):
        return self.streamID

    def setStreamID(self, newStreamID):
        self.streamID = newStreamID

    def getBackupStreamID(self):
        return self.backupStreamID

    def setBackupStreamID(self, newBackupStreamID):
        self.backupStreamID = newBackupStreamID

    def getRtmp(self):
        return self.rtmp

    def setRtmp(self, newRtmp):
        self.rtmp = newRtmp

    def getEncoderIP(self):
        return self.encoderIP

    def setEncoderIP(self, newEncoderIP):
        self.encoderIP = newEncoderIP

    def getBackupEncoderIP(self):
        return self.backupEncoderIP

    def setBackupEncoderIP(self, newBackupEncoderIP):
        self.backupEncoderIP = newBackupEncoderIP

    def getEncoderPassword(self):
        return self.encoderPassword

    def setEncoderPassword(self, newEncoderPassword):
        self.encoderPassword = newEncoderPassword

    def getEncoderUsername(self):
        return self.encoderUsername

    def setEncoderUsername(self, newEncoderUsername):
        self.encoderUsername = newEncoderUsername

    def getEndDate(self):
        return self.endDate

    def setEndDate(self, newEndDate):
        self.endDate = newEndDate

    def getReturnVal(self):
        return self.returnVal

    def setReturnVal(self, newReturnVal):
        self.returnVal = newReturnVal

    def getMediaType(self):
        return self.mediaType

    def setMediaType(self, newMediaType):
        self.mediaType = newMediaType

    def getPrimaryBroadcastingUrl(self):
        return self.primaryBroadcastingUrl

    def setPrimaryBroadcastingUrl(self, newPrimaryBroadcastingUrl):
        self.primaryBroadcastingUrl = newPrimaryBroadcastingUrl

    def getSecondaryBroadcastingUrl(self):
        return self.secondaryBroadcastingUrl

    def setSecondaryBroadcastingUrl(self, newSecondaryBroadcastingUrl):
        self.secondaryBroadcastingUrl = newSecondaryBroadcastingUrl

    def getStreamName(self):
        return self.streamName

    def setStreamName(self, newStreamName):
        self.streamName = newStreamName


# @package Vidiun
# @subpackage Client
class VidiunQuizUserEntry(VidiunUserEntry):
    def __init__(self,
            id=NotImplemented,
            entryId=NotImplemented,
            userId=NotImplemented,
            partnerId=NotImplemented,
            status=NotImplemented,
            createdAt=NotImplemented,
            updatedAt=NotImplemented,
            type=NotImplemented,
            score=NotImplemented):
        VidiunUserEntry.__init__(self,
            id,
            entryId,
            userId,
            partnerId,
            status,
            createdAt,
            updatedAt,
            type)

        # @var float
        # @readonly
        self.score = score


    PROPERTY_LOADERS = {
        'score': getXmlNodeFloat, 
    }

    def fromXml(self, node):
        VidiunUserEntry.fromXml(self, node)
        self.fromXmlImpl(node, VidiunQuizUserEntry.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunUserEntry.toParams(self)
        vparams.put("objectType", "VidiunQuizUserEntry")
        return vparams

    def getScore(self):
        return self.score


# @package Vidiun
# @subpackage Client
class VidiunRecalculateCacheJobData(VidiunJobData):
    def __init__(self):
        VidiunJobData.__init__(self)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunJobData.fromXml(self, node)
        self.fromXmlImpl(node, VidiunRecalculateCacheJobData.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunJobData.toParams(self)
        vparams.put("objectType", "VidiunRecalculateCacheJobData")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunRemotePathListResponse(VidiunListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        VidiunListResponse.__init__(self,
            totalCount)

        # @var array of VidiunRemotePath
        # @readonly
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (VidiunObjectFactory.createArray, VidiunRemotePath), 
    }

    def fromXml(self, node):
        VidiunListResponse.fromXml(self, node)
        self.fromXmlImpl(node, VidiunRemotePathListResponse.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunListResponse.toParams(self)
        vparams.put("objectType", "VidiunRemotePathListResponse")
        return vparams

    def getObjects(self):
        return self.objects


# @package Vidiun
# @subpackage Client
class VidiunReportBaseFilter(VidiunFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented):
        VidiunFilter.__init__(self,
            orderBy,
            advancedSearch)

        # @var int
        self.idEqual = idEqual

        # @var string
        self.idIn = idIn

        # @var int
        self.partnerIdEqual = partnerIdEqual

        # @var string
        self.partnerIdIn = partnerIdIn

        # @var string
        self.systemNameEqual = systemNameEqual

        # @var string
        self.systemNameIn = systemNameIn


    PROPERTY_LOADERS = {
        'idEqual': getXmlNodeInt, 
        'idIn': getXmlNodeText, 
        'partnerIdEqual': getXmlNodeInt, 
        'partnerIdIn': getXmlNodeText, 
        'systemNameEqual': getXmlNodeText, 
        'systemNameIn': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunReportBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunFilter.toParams(self)
        vparams.put("objectType", "VidiunReportBaseFilter")
        vparams.addIntIfDefined("idEqual", self.idEqual)
        vparams.addStringIfDefined("idIn", self.idIn)
        vparams.addIntIfDefined("partnerIdEqual", self.partnerIdEqual)
        vparams.addStringIfDefined("partnerIdIn", self.partnerIdIn)
        vparams.addStringIfDefined("systemNameEqual", self.systemNameEqual)
        vparams.addStringIfDefined("systemNameIn", self.systemNameIn)
        return vparams

    def getIdEqual(self):
        return self.idEqual

    def setIdEqual(self, newIdEqual):
        self.idEqual = newIdEqual

    def getIdIn(self):
        return self.idIn

    def setIdIn(self, newIdIn):
        self.idIn = newIdIn

    def getPartnerIdEqual(self):
        return self.partnerIdEqual

    def setPartnerIdEqual(self, newPartnerIdEqual):
        self.partnerIdEqual = newPartnerIdEqual

    def getPartnerIdIn(self):
        return self.partnerIdIn

    def setPartnerIdIn(self, newPartnerIdIn):
        self.partnerIdIn = newPartnerIdIn

    def getSystemNameEqual(self):
        return self.systemNameEqual

    def setSystemNameEqual(self, newSystemNameEqual):
        self.systemNameEqual = newSystemNameEqual

    def getSystemNameIn(self):
        return self.systemNameIn

    def setSystemNameIn(self, newSystemNameIn):
        self.systemNameIn = newSystemNameIn


# @package Vidiun
# @subpackage Client
class VidiunReportInputFilter(VidiunReportInputBaseFilter):
    def __init__(self,
            fromDate=NotImplemented,
            toDate=NotImplemented,
            fromDay=NotImplemented,
            toDay=NotImplemented,
            keywords=NotImplemented,
            searchInTags=NotImplemented,
            searchInAdminTags=NotImplemented,
            categories=NotImplemented,
            timeZoneOffset=NotImplemented,
            interval=NotImplemented):
        VidiunReportInputBaseFilter.__init__(self,
            fromDate,
            toDate,
            fromDay,
            toDay)

        # Search keywords to filter objects
        # @var string
        self.keywords = keywords

        # Search keywords in onjects tags
        # @var bool
        self.searchInTags = searchInTags

        # Search keywords in onjects admin tags
        # @var bool
        self.searchInAdminTags = searchInAdminTags

        # Search onjects in specified categories
        # @var string
        self.categories = categories

        # Time zone offset in minutes
        # @var int
        self.timeZoneOffset = timeZoneOffset

        # Aggregated results according to interval
        # @var VidiunReportInterval
        self.interval = interval


    PROPERTY_LOADERS = {
        'keywords': getXmlNodeText, 
        'searchInTags': getXmlNodeBool, 
        'searchInAdminTags': getXmlNodeBool, 
        'categories': getXmlNodeText, 
        'timeZoneOffset': getXmlNodeInt, 
        'interval': (VidiunEnumsFactory.createString, "VidiunReportInterval"), 
    }

    def fromXml(self, node):
        VidiunReportInputBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunReportInputFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunReportInputBaseFilter.toParams(self)
        vparams.put("objectType", "VidiunReportInputFilter")
        vparams.addStringIfDefined("keywords", self.keywords)
        vparams.addBoolIfDefined("searchInTags", self.searchInTags)
        vparams.addBoolIfDefined("searchInAdminTags", self.searchInAdminTags)
        vparams.addStringIfDefined("categories", self.categories)
        vparams.addIntIfDefined("timeZoneOffset", self.timeZoneOffset)
        vparams.addStringEnumIfDefined("interval", self.interval)
        return vparams

    def getKeywords(self):
        return self.keywords

    def setKeywords(self, newKeywords):
        self.keywords = newKeywords

    def getSearchInTags(self):
        return self.searchInTags

    def setSearchInTags(self, newSearchInTags):
        self.searchInTags = newSearchInTags

    def getSearchInAdminTags(self):
        return self.searchInAdminTags

    def setSearchInAdminTags(self, newSearchInAdminTags):
        self.searchInAdminTags = newSearchInAdminTags

    def getCategories(self):
        return self.categories

    def setCategories(self, newCategories):
        self.categories = newCategories

    def getTimeZoneOffset(self):
        return self.timeZoneOffset

    def setTimeZoneOffset(self, newTimeZoneOffset):
        self.timeZoneOffset = newTimeZoneOffset

    def getInterval(self):
        return self.interval

    def setInterval(self, newInterval):
        self.interval = newInterval


# @package Vidiun
# @subpackage Client
class VidiunReportListResponse(VidiunListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        VidiunListResponse.__init__(self,
            totalCount)

        # @var array of VidiunReport
        # @readonly
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (VidiunObjectFactory.createArray, VidiunReport), 
    }

    def fromXml(self, node):
        VidiunListResponse.fromXml(self, node)
        self.fromXmlImpl(node, VidiunReportListResponse.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunListResponse.toParams(self)
        vparams.put("objectType", "VidiunReportListResponse")
        return vparams

    def getObjects(self):
        return self.objects


# @package Vidiun
# @subpackage Client
class VidiunResponseProfileBaseFilter(VidiunFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented):
        VidiunFilter.__init__(self,
            orderBy,
            advancedSearch)

        # @var int
        self.idEqual = idEqual

        # @var string
        self.idIn = idIn

        # @var string
        self.systemNameEqual = systemNameEqual

        # @var string
        self.systemNameIn = systemNameIn

        # @var int
        self.createdAtGreaterThanOrEqual = createdAtGreaterThanOrEqual

        # @var int
        self.createdAtLessThanOrEqual = createdAtLessThanOrEqual

        # @var int
        self.updatedAtGreaterThanOrEqual = updatedAtGreaterThanOrEqual

        # @var int
        self.updatedAtLessThanOrEqual = updatedAtLessThanOrEqual

        # @var VidiunResponseProfileStatus
        self.statusEqual = statusEqual

        # @var string
        self.statusIn = statusIn


    PROPERTY_LOADERS = {
        'idEqual': getXmlNodeInt, 
        'idIn': getXmlNodeText, 
        'systemNameEqual': getXmlNodeText, 
        'systemNameIn': getXmlNodeText, 
        'createdAtGreaterThanOrEqual': getXmlNodeInt, 
        'createdAtLessThanOrEqual': getXmlNodeInt, 
        'updatedAtGreaterThanOrEqual': getXmlNodeInt, 
        'updatedAtLessThanOrEqual': getXmlNodeInt, 
        'statusEqual': (VidiunEnumsFactory.createInt, "VidiunResponseProfileStatus"), 
        'statusIn': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunResponseProfileBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunFilter.toParams(self)
        vparams.put("objectType", "VidiunResponseProfileBaseFilter")
        vparams.addIntIfDefined("idEqual", self.idEqual)
        vparams.addStringIfDefined("idIn", self.idIn)
        vparams.addStringIfDefined("systemNameEqual", self.systemNameEqual)
        vparams.addStringIfDefined("systemNameIn", self.systemNameIn)
        vparams.addIntIfDefined("createdAtGreaterThanOrEqual", self.createdAtGreaterThanOrEqual)
        vparams.addIntIfDefined("createdAtLessThanOrEqual", self.createdAtLessThanOrEqual)
        vparams.addIntIfDefined("updatedAtGreaterThanOrEqual", self.updatedAtGreaterThanOrEqual)
        vparams.addIntIfDefined("updatedAtLessThanOrEqual", self.updatedAtLessThanOrEqual)
        vparams.addIntEnumIfDefined("statusEqual", self.statusEqual)
        vparams.addStringIfDefined("statusIn", self.statusIn)
        return vparams

    def getIdEqual(self):
        return self.idEqual

    def setIdEqual(self, newIdEqual):
        self.idEqual = newIdEqual

    def getIdIn(self):
        return self.idIn

    def setIdIn(self, newIdIn):
        self.idIn = newIdIn

    def getSystemNameEqual(self):
        return self.systemNameEqual

    def setSystemNameEqual(self, newSystemNameEqual):
        self.systemNameEqual = newSystemNameEqual

    def getSystemNameIn(self):
        return self.systemNameIn

    def setSystemNameIn(self, newSystemNameIn):
        self.systemNameIn = newSystemNameIn

    def getCreatedAtGreaterThanOrEqual(self):
        return self.createdAtGreaterThanOrEqual

    def setCreatedAtGreaterThanOrEqual(self, newCreatedAtGreaterThanOrEqual):
        self.createdAtGreaterThanOrEqual = newCreatedAtGreaterThanOrEqual

    def getCreatedAtLessThanOrEqual(self):
        return self.createdAtLessThanOrEqual

    def setCreatedAtLessThanOrEqual(self, newCreatedAtLessThanOrEqual):
        self.createdAtLessThanOrEqual = newCreatedAtLessThanOrEqual

    def getUpdatedAtGreaterThanOrEqual(self):
        return self.updatedAtGreaterThanOrEqual

    def setUpdatedAtGreaterThanOrEqual(self, newUpdatedAtGreaterThanOrEqual):
        self.updatedAtGreaterThanOrEqual = newUpdatedAtGreaterThanOrEqual

    def getUpdatedAtLessThanOrEqual(self):
        return self.updatedAtLessThanOrEqual

    def setUpdatedAtLessThanOrEqual(self, newUpdatedAtLessThanOrEqual):
        self.updatedAtLessThanOrEqual = newUpdatedAtLessThanOrEqual

    def getStatusEqual(self):
        return self.statusEqual

    def setStatusEqual(self, newStatusEqual):
        self.statusEqual = newStatusEqual

    def getStatusIn(self):
        return self.statusIn

    def setStatusIn(self, newStatusIn):
        self.statusIn = newStatusIn


# @package Vidiun
# @subpackage Client
class VidiunResponseProfileHolder(VidiunBaseResponseProfile):
    def __init__(self,
            id=NotImplemented,
            systemName=NotImplemented):
        VidiunBaseResponseProfile.__init__(self)

        # Auto generated numeric identifier
        # @var int
        self.id = id

        # Unique system name
        # @var string
        self.systemName = systemName


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'systemName': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunBaseResponseProfile.fromXml(self, node)
        self.fromXmlImpl(node, VidiunResponseProfileHolder.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunBaseResponseProfile.toParams(self)
        vparams.put("objectType", "VidiunResponseProfileHolder")
        vparams.addIntIfDefined("id", self.id)
        vparams.addStringIfDefined("systemName", self.systemName)
        return vparams

    def getId(self):
        return self.id

    def setId(self, newId):
        self.id = newId

    def getSystemName(self):
        return self.systemName

    def setSystemName(self, newSystemName):
        self.systemName = newSystemName


# @package Vidiun
# @subpackage Client
class VidiunResponseProfileListResponse(VidiunListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        VidiunListResponse.__init__(self,
            totalCount)

        # @var array of VidiunResponseProfile
        # @readonly
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (VidiunObjectFactory.createArray, VidiunResponseProfile), 
    }

    def fromXml(self, node):
        VidiunListResponse.fromXml(self, node)
        self.fromXmlImpl(node, VidiunResponseProfileListResponse.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunListResponse.toParams(self)
        vparams.put("objectType", "VidiunResponseProfileListResponse")
        return vparams

    def getObjects(self):
        return self.objects


# @package Vidiun
# @subpackage Client
class VidiunSchedulerListResponse(VidiunListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        VidiunListResponse.__init__(self,
            totalCount)

        # @var array of VidiunScheduler
        # @readonly
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (VidiunObjectFactory.createArray, VidiunScheduler), 
    }

    def fromXml(self, node):
        VidiunListResponse.fromXml(self, node)
        self.fromXmlImpl(node, VidiunSchedulerListResponse.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunListResponse.toParams(self)
        vparams.put("objectType", "VidiunSchedulerListResponse")
        return vparams

    def getObjects(self):
        return self.objects


# @package Vidiun
# @subpackage Client
class VidiunSchedulerWorkerListResponse(VidiunListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        VidiunListResponse.__init__(self,
            totalCount)

        # @var array of VidiunSchedulerWorker
        # @readonly
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (VidiunObjectFactory.createArray, VidiunSchedulerWorker), 
    }

    def fromXml(self, node):
        VidiunListResponse.fromXml(self, node)
        self.fromXmlImpl(node, VidiunSchedulerWorkerListResponse.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunListResponse.toParams(self)
        vparams.put("objectType", "VidiunSchedulerWorkerListResponse")
        return vparams

    def getObjects(self):
        return self.objects


# @package Vidiun
# @subpackage Client
class VidiunSearchCondition(VidiunSearchItem):
    def __init__(self,
            field=NotImplemented,
            value=NotImplemented):
        VidiunSearchItem.__init__(self)

        # @var string
        self.field = field

        # @var string
        self.value = value


    PROPERTY_LOADERS = {
        'field': getXmlNodeText, 
        'value': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunSearchItem.fromXml(self, node)
        self.fromXmlImpl(node, VidiunSearchCondition.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunSearchItem.toParams(self)
        vparams.put("objectType", "VidiunSearchCondition")
        vparams.addStringIfDefined("field", self.field)
        vparams.addStringIfDefined("value", self.value)
        return vparams

    def getField(self):
        return self.field

    def setField(self, newField):
        self.field = newField

    def getValue(self):
        return self.value

    def setValue(self, newValue):
        self.value = newValue


# @package Vidiun
# @subpackage Client
class VidiunSearchOperator(VidiunSearchItem):
    def __init__(self,
            type=NotImplemented,
            items=NotImplemented):
        VidiunSearchItem.__init__(self)

        # @var VidiunSearchOperatorType
        self.type = type

        # @var array of VidiunSearchItem
        self.items = items


    PROPERTY_LOADERS = {
        'type': (VidiunEnumsFactory.createInt, "VidiunSearchOperatorType"), 
        'items': (VidiunObjectFactory.createArray, VidiunSearchItem), 
    }

    def fromXml(self, node):
        VidiunSearchItem.fromXml(self, node)
        self.fromXmlImpl(node, VidiunSearchOperator.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunSearchItem.toParams(self)
        vparams.put("objectType", "VidiunSearchOperator")
        vparams.addIntEnumIfDefined("type", self.type)
        vparams.addArrayIfDefined("items", self.items)
        return vparams

    def getType(self):
        return self.type

    def setType(self, newType):
        self.type = newType

    def getItems(self):
        return self.items

    def setItems(self, newItems):
        self.items = newItems


# @package Vidiun
# @subpackage Client
class VidiunServerNodeBaseFilter(VidiunFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            heartbeatTimeGreaterThanOrEqual=NotImplemented,
            heartbeatTimeLessThanOrEqual=NotImplemented,
            nameEqual=NotImplemented,
            nameIn=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            hostNameLike=NotImplemented,
            hostNameMultiLikeOr=NotImplemented,
            hostNameMultiLikeAnd=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented,
            typeEqual=NotImplemented,
            typeIn=NotImplemented,
            tagsLike=NotImplemented,
            tagsMultiLikeOr=NotImplemented,
            tagsMultiLikeAnd=NotImplemented,
            dcEqual=NotImplemented,
            dcIn=NotImplemented,
            parentIdEqual=NotImplemented,
            parentIdIn=NotImplemented):
        VidiunFilter.__init__(self,
            orderBy,
            advancedSearch)

        # @var int
        self.idEqual = idEqual

        # @var string
        self.idIn = idIn

        # @var int
        self.createdAtGreaterThanOrEqual = createdAtGreaterThanOrEqual

        # @var int
        self.createdAtLessThanOrEqual = createdAtLessThanOrEqual

        # @var int
        self.updatedAtGreaterThanOrEqual = updatedAtGreaterThanOrEqual

        # @var int
        self.updatedAtLessThanOrEqual = updatedAtLessThanOrEqual

        # @var int
        self.heartbeatTimeGreaterThanOrEqual = heartbeatTimeGreaterThanOrEqual

        # @var int
        self.heartbeatTimeLessThanOrEqual = heartbeatTimeLessThanOrEqual

        # @var string
        self.nameEqual = nameEqual

        # @var string
        self.nameIn = nameIn

        # @var string
        self.systemNameEqual = systemNameEqual

        # @var string
        self.systemNameIn = systemNameIn

        # @var string
        self.hostNameLike = hostNameLike

        # @var string
        self.hostNameMultiLikeOr = hostNameMultiLikeOr

        # @var string
        self.hostNameMultiLikeAnd = hostNameMultiLikeAnd

        # @var VidiunServerNodeStatus
        self.statusEqual = statusEqual

        # @var string
        self.statusIn = statusIn

        # @var VidiunServerNodeType
        self.typeEqual = typeEqual

        # @var string
        self.typeIn = typeIn

        # @var string
        self.tagsLike = tagsLike

        # @var string
        self.tagsMultiLikeOr = tagsMultiLikeOr

        # @var string
        self.tagsMultiLikeAnd = tagsMultiLikeAnd

        # @var int
        self.dcEqual = dcEqual

        # @var string
        self.dcIn = dcIn

        # @var int
        self.parentIdEqual = parentIdEqual

        # @var string
        self.parentIdIn = parentIdIn


    PROPERTY_LOADERS = {
        'idEqual': getXmlNodeInt, 
        'idIn': getXmlNodeText, 
        'createdAtGreaterThanOrEqual': getXmlNodeInt, 
        'createdAtLessThanOrEqual': getXmlNodeInt, 
        'updatedAtGreaterThanOrEqual': getXmlNodeInt, 
        'updatedAtLessThanOrEqual': getXmlNodeInt, 
        'heartbeatTimeGreaterThanOrEqual': getXmlNodeInt, 
        'heartbeatTimeLessThanOrEqual': getXmlNodeInt, 
        'nameEqual': getXmlNodeText, 
        'nameIn': getXmlNodeText, 
        'systemNameEqual': getXmlNodeText, 
        'systemNameIn': getXmlNodeText, 
        'hostNameLike': getXmlNodeText, 
        'hostNameMultiLikeOr': getXmlNodeText, 
        'hostNameMultiLikeAnd': getXmlNodeText, 
        'statusEqual': (VidiunEnumsFactory.createInt, "VidiunServerNodeStatus"), 
        'statusIn': getXmlNodeText, 
        'typeEqual': (VidiunEnumsFactory.createString, "VidiunServerNodeType"), 
        'typeIn': getXmlNodeText, 
        'tagsLike': getXmlNodeText, 
        'tagsMultiLikeOr': getXmlNodeText, 
        'tagsMultiLikeAnd': getXmlNodeText, 
        'dcEqual': getXmlNodeInt, 
        'dcIn': getXmlNodeText, 
        'parentIdEqual': getXmlNodeInt, 
        'parentIdIn': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunServerNodeBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunFilter.toParams(self)
        vparams.put("objectType", "VidiunServerNodeBaseFilter")
        vparams.addIntIfDefined("idEqual", self.idEqual)
        vparams.addStringIfDefined("idIn", self.idIn)
        vparams.addIntIfDefined("createdAtGreaterThanOrEqual", self.createdAtGreaterThanOrEqual)
        vparams.addIntIfDefined("createdAtLessThanOrEqual", self.createdAtLessThanOrEqual)
        vparams.addIntIfDefined("updatedAtGreaterThanOrEqual", self.updatedAtGreaterThanOrEqual)
        vparams.addIntIfDefined("updatedAtLessThanOrEqual", self.updatedAtLessThanOrEqual)
        vparams.addIntIfDefined("heartbeatTimeGreaterThanOrEqual", self.heartbeatTimeGreaterThanOrEqual)
        vparams.addIntIfDefined("heartbeatTimeLessThanOrEqual", self.heartbeatTimeLessThanOrEqual)
        vparams.addStringIfDefined("nameEqual", self.nameEqual)
        vparams.addStringIfDefined("nameIn", self.nameIn)
        vparams.addStringIfDefined("systemNameEqual", self.systemNameEqual)
        vparams.addStringIfDefined("systemNameIn", self.systemNameIn)
        vparams.addStringIfDefined("hostNameLike", self.hostNameLike)
        vparams.addStringIfDefined("hostNameMultiLikeOr", self.hostNameMultiLikeOr)
        vparams.addStringIfDefined("hostNameMultiLikeAnd", self.hostNameMultiLikeAnd)
        vparams.addIntEnumIfDefined("statusEqual", self.statusEqual)
        vparams.addStringIfDefined("statusIn", self.statusIn)
        vparams.addStringEnumIfDefined("typeEqual", self.typeEqual)
        vparams.addStringIfDefined("typeIn", self.typeIn)
        vparams.addStringIfDefined("tagsLike", self.tagsLike)
        vparams.addStringIfDefined("tagsMultiLikeOr", self.tagsMultiLikeOr)
        vparams.addStringIfDefined("tagsMultiLikeAnd", self.tagsMultiLikeAnd)
        vparams.addIntIfDefined("dcEqual", self.dcEqual)
        vparams.addStringIfDefined("dcIn", self.dcIn)
        vparams.addIntIfDefined("parentIdEqual", self.parentIdEqual)
        vparams.addStringIfDefined("parentIdIn", self.parentIdIn)
        return vparams

    def getIdEqual(self):
        return self.idEqual

    def setIdEqual(self, newIdEqual):
        self.idEqual = newIdEqual

    def getIdIn(self):
        return self.idIn

    def setIdIn(self, newIdIn):
        self.idIn = newIdIn

    def getCreatedAtGreaterThanOrEqual(self):
        return self.createdAtGreaterThanOrEqual

    def setCreatedAtGreaterThanOrEqual(self, newCreatedAtGreaterThanOrEqual):
        self.createdAtGreaterThanOrEqual = newCreatedAtGreaterThanOrEqual

    def getCreatedAtLessThanOrEqual(self):
        return self.createdAtLessThanOrEqual

    def setCreatedAtLessThanOrEqual(self, newCreatedAtLessThanOrEqual):
        self.createdAtLessThanOrEqual = newCreatedAtLessThanOrEqual

    def getUpdatedAtGreaterThanOrEqual(self):
        return self.updatedAtGreaterThanOrEqual

    def setUpdatedAtGreaterThanOrEqual(self, newUpdatedAtGreaterThanOrEqual):
        self.updatedAtGreaterThanOrEqual = newUpdatedAtGreaterThanOrEqual

    def getUpdatedAtLessThanOrEqual(self):
        return self.updatedAtLessThanOrEqual

    def setUpdatedAtLessThanOrEqual(self, newUpdatedAtLessThanOrEqual):
        self.updatedAtLessThanOrEqual = newUpdatedAtLessThanOrEqual

    def getHeartbeatTimeGreaterThanOrEqual(self):
        return self.heartbeatTimeGreaterThanOrEqual

    def setHeartbeatTimeGreaterThanOrEqual(self, newHeartbeatTimeGreaterThanOrEqual):
        self.heartbeatTimeGreaterThanOrEqual = newHeartbeatTimeGreaterThanOrEqual

    def getHeartbeatTimeLessThanOrEqual(self):
        return self.heartbeatTimeLessThanOrEqual

    def setHeartbeatTimeLessThanOrEqual(self, newHeartbeatTimeLessThanOrEqual):
        self.heartbeatTimeLessThanOrEqual = newHeartbeatTimeLessThanOrEqual

    def getNameEqual(self):
        return self.nameEqual

    def setNameEqual(self, newNameEqual):
        self.nameEqual = newNameEqual

    def getNameIn(self):
        return self.nameIn

    def setNameIn(self, newNameIn):
        self.nameIn = newNameIn

    def getSystemNameEqual(self):
        return self.systemNameEqual

    def setSystemNameEqual(self, newSystemNameEqual):
        self.systemNameEqual = newSystemNameEqual

    def getSystemNameIn(self):
        return self.systemNameIn

    def setSystemNameIn(self, newSystemNameIn):
        self.systemNameIn = newSystemNameIn

    def getHostNameLike(self):
        return self.hostNameLike

    def setHostNameLike(self, newHostNameLike):
        self.hostNameLike = newHostNameLike

    def getHostNameMultiLikeOr(self):
        return self.hostNameMultiLikeOr

    def setHostNameMultiLikeOr(self, newHostNameMultiLikeOr):
        self.hostNameMultiLikeOr = newHostNameMultiLikeOr

    def getHostNameMultiLikeAnd(self):
        return self.hostNameMultiLikeAnd

    def setHostNameMultiLikeAnd(self, newHostNameMultiLikeAnd):
        self.hostNameMultiLikeAnd = newHostNameMultiLikeAnd

    def getStatusEqual(self):
        return self.statusEqual

    def setStatusEqual(self, newStatusEqual):
        self.statusEqual = newStatusEqual

    def getStatusIn(self):
        return self.statusIn

    def setStatusIn(self, newStatusIn):
        self.statusIn = newStatusIn

    def getTypeEqual(self):
        return self.typeEqual

    def setTypeEqual(self, newTypeEqual):
        self.typeEqual = newTypeEqual

    def getTypeIn(self):
        return self.typeIn

    def setTypeIn(self, newTypeIn):
        self.typeIn = newTypeIn

    def getTagsLike(self):
        return self.tagsLike

    def setTagsLike(self, newTagsLike):
        self.tagsLike = newTagsLike

    def getTagsMultiLikeOr(self):
        return self.tagsMultiLikeOr

    def setTagsMultiLikeOr(self, newTagsMultiLikeOr):
        self.tagsMultiLikeOr = newTagsMultiLikeOr

    def getTagsMultiLikeAnd(self):
        return self.tagsMultiLikeAnd

    def setTagsMultiLikeAnd(self, newTagsMultiLikeAnd):
        self.tagsMultiLikeAnd = newTagsMultiLikeAnd

    def getDcEqual(self):
        return self.dcEqual

    def setDcEqual(self, newDcEqual):
        self.dcEqual = newDcEqual

    def getDcIn(self):
        return self.dcIn

    def setDcIn(self, newDcIn):
        self.dcIn = newDcIn

    def getParentIdEqual(self):
        return self.parentIdEqual

    def setParentIdEqual(self, newParentIdEqual):
        self.parentIdEqual = newParentIdEqual

    def getParentIdIn(self):
        return self.parentIdIn

    def setParentIdIn(self, newParentIdIn):
        self.parentIdIn = newParentIdIn


# @package Vidiun
# @subpackage Client
class VidiunServerNodeListResponse(VidiunListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        VidiunListResponse.__init__(self,
            totalCount)

        # @var array of VidiunServerNode
        # @readonly
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (VidiunObjectFactory.createArray, VidiunServerNode), 
    }

    def fromXml(self, node):
        VidiunListResponse.fromXml(self, node)
        self.fromXmlImpl(node, VidiunServerNodeListResponse.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunListResponse.toParams(self)
        vparams.put("objectType", "VidiunServerNodeListResponse")
        return vparams

    def getObjects(self):
        return self.objects


# @package Vidiun
# @subpackage Client
class VidiunSessionRestriction(VidiunBaseRestriction):
    def __init__(self):
        VidiunBaseRestriction.__init__(self)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunBaseRestriction.fromXml(self, node)
        self.fromXmlImpl(node, VidiunSessionRestriction.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunBaseRestriction.toParams(self)
        vparams.put("objectType", "VidiunSessionRestriction")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunSiteRestriction(VidiunBaseRestriction):
    def __init__(self,
            siteRestrictionType=NotImplemented,
            siteList=NotImplemented):
        VidiunBaseRestriction.__init__(self)

        # The site restriction type (allow or deny)
        # @var VidiunSiteRestrictionType
        self.siteRestrictionType = siteRestrictionType

        # Comma separated list of sites (domains) to allow or deny
        # @var string
        self.siteList = siteList


    PROPERTY_LOADERS = {
        'siteRestrictionType': (VidiunEnumsFactory.createInt, "VidiunSiteRestrictionType"), 
        'siteList': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunBaseRestriction.fromXml(self, node)
        self.fromXmlImpl(node, VidiunSiteRestriction.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunBaseRestriction.toParams(self)
        vparams.put("objectType", "VidiunSiteRestriction")
        vparams.addIntEnumIfDefined("siteRestrictionType", self.siteRestrictionType)
        vparams.addStringIfDefined("siteList", self.siteList)
        return vparams

    def getSiteRestrictionType(self):
        return self.siteRestrictionType

    def setSiteRestrictionType(self, newSiteRestrictionType):
        self.siteRestrictionType = newSiteRestrictionType

    def getSiteList(self):
        return self.siteList

    def setSiteList(self, newSiteList):
        self.siteList = newSiteList


# @package Vidiun
# @subpackage Client
class VidiunStorageAddAction(VidiunRuleAction):
    def __init__(self,
            type=NotImplemented):
        VidiunRuleAction.__init__(self,
            type)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunRuleAction.fromXml(self, node)
        self.fromXmlImpl(node, VidiunStorageAddAction.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunRuleAction.toParams(self)
        vparams.put("objectType", "VidiunStorageAddAction")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunStorageJobData(VidiunJobData):
    def __init__(self,
            serverUrl=NotImplemented,
            serverUsername=NotImplemented,
            serverPassword=NotImplemented,
            serverPrivateKey=NotImplemented,
            serverPublicKey=NotImplemented,
            serverPassPhrase=NotImplemented,
            ftpPassiveMode=NotImplemented,
            srcFileSyncLocalPath=NotImplemented,
            srcFileSyncId=NotImplemented,
            destFileSyncStoredPath=NotImplemented):
        VidiunJobData.__init__(self)

        # @var string
        self.serverUrl = serverUrl

        # @var string
        self.serverUsername = serverUsername

        # @var string
        self.serverPassword = serverPassword

        # @var string
        self.serverPrivateKey = serverPrivateKey

        # @var string
        self.serverPublicKey = serverPublicKey

        # @var string
        self.serverPassPhrase = serverPassPhrase

        # @var bool
        self.ftpPassiveMode = ftpPassiveMode

        # @var string
        self.srcFileSyncLocalPath = srcFileSyncLocalPath

        # @var string
        self.srcFileSyncId = srcFileSyncId

        # @var string
        self.destFileSyncStoredPath = destFileSyncStoredPath


    PROPERTY_LOADERS = {
        'serverUrl': getXmlNodeText, 
        'serverUsername': getXmlNodeText, 
        'serverPassword': getXmlNodeText, 
        'serverPrivateKey': getXmlNodeText, 
        'serverPublicKey': getXmlNodeText, 
        'serverPassPhrase': getXmlNodeText, 
        'ftpPassiveMode': getXmlNodeBool, 
        'srcFileSyncLocalPath': getXmlNodeText, 
        'srcFileSyncId': getXmlNodeText, 
        'destFileSyncStoredPath': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunJobData.fromXml(self, node)
        self.fromXmlImpl(node, VidiunStorageJobData.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunJobData.toParams(self)
        vparams.put("objectType", "VidiunStorageJobData")
        vparams.addStringIfDefined("serverUrl", self.serverUrl)
        vparams.addStringIfDefined("serverUsername", self.serverUsername)
        vparams.addStringIfDefined("serverPassword", self.serverPassword)
        vparams.addStringIfDefined("serverPrivateKey", self.serverPrivateKey)
        vparams.addStringIfDefined("serverPublicKey", self.serverPublicKey)
        vparams.addStringIfDefined("serverPassPhrase", self.serverPassPhrase)
        vparams.addBoolIfDefined("ftpPassiveMode", self.ftpPassiveMode)
        vparams.addStringIfDefined("srcFileSyncLocalPath", self.srcFileSyncLocalPath)
        vparams.addStringIfDefined("srcFileSyncId", self.srcFileSyncId)
        vparams.addStringIfDefined("destFileSyncStoredPath", self.destFileSyncStoredPath)
        return vparams

    def getServerUrl(self):
        return self.serverUrl

    def setServerUrl(self, newServerUrl):
        self.serverUrl = newServerUrl

    def getServerUsername(self):
        return self.serverUsername

    def setServerUsername(self, newServerUsername):
        self.serverUsername = newServerUsername

    def getServerPassword(self):
        return self.serverPassword

    def setServerPassword(self, newServerPassword):
        self.serverPassword = newServerPassword

    def getServerPrivateKey(self):
        return self.serverPrivateKey

    def setServerPrivateKey(self, newServerPrivateKey):
        self.serverPrivateKey = newServerPrivateKey

    def getServerPublicKey(self):
        return self.serverPublicKey

    def setServerPublicKey(self, newServerPublicKey):
        self.serverPublicKey = newServerPublicKey

    def getServerPassPhrase(self):
        return self.serverPassPhrase

    def setServerPassPhrase(self, newServerPassPhrase):
        self.serverPassPhrase = newServerPassPhrase

    def getFtpPassiveMode(self):
        return self.ftpPassiveMode

    def setFtpPassiveMode(self, newFtpPassiveMode):
        self.ftpPassiveMode = newFtpPassiveMode

    def getSrcFileSyncLocalPath(self):
        return self.srcFileSyncLocalPath

    def setSrcFileSyncLocalPath(self, newSrcFileSyncLocalPath):
        self.srcFileSyncLocalPath = newSrcFileSyncLocalPath

    def getSrcFileSyncId(self):
        return self.srcFileSyncId

    def setSrcFileSyncId(self, newSrcFileSyncId):
        self.srcFileSyncId = newSrcFileSyncId

    def getDestFileSyncStoredPath(self):
        return self.destFileSyncStoredPath

    def setDestFileSyncStoredPath(self, newDestFileSyncStoredPath):
        self.destFileSyncStoredPath = newDestFileSyncStoredPath


# @package Vidiun
# @subpackage Client
class VidiunStorageProfileBaseFilter(VidiunFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented,
            protocolEqual=NotImplemented,
            protocolIn=NotImplemented):
        VidiunFilter.__init__(self,
            orderBy,
            advancedSearch)

        # @var int
        self.idEqual = idEqual

        # @var string
        self.idIn = idIn

        # @var int
        self.createdAtGreaterThanOrEqual = createdAtGreaterThanOrEqual

        # @var int
        self.createdAtLessThanOrEqual = createdAtLessThanOrEqual

        # @var int
        self.updatedAtGreaterThanOrEqual = updatedAtGreaterThanOrEqual

        # @var int
        self.updatedAtLessThanOrEqual = updatedAtLessThanOrEqual

        # @var int
        self.partnerIdEqual = partnerIdEqual

        # @var string
        self.partnerIdIn = partnerIdIn

        # @var string
        self.systemNameEqual = systemNameEqual

        # @var string
        self.systemNameIn = systemNameIn

        # @var VidiunStorageProfileStatus
        self.statusEqual = statusEqual

        # @var string
        self.statusIn = statusIn

        # @var VidiunStorageProfileProtocol
        self.protocolEqual = protocolEqual

        # @var string
        self.protocolIn = protocolIn


    PROPERTY_LOADERS = {
        'idEqual': getXmlNodeInt, 
        'idIn': getXmlNodeText, 
        'createdAtGreaterThanOrEqual': getXmlNodeInt, 
        'createdAtLessThanOrEqual': getXmlNodeInt, 
        'updatedAtGreaterThanOrEqual': getXmlNodeInt, 
        'updatedAtLessThanOrEqual': getXmlNodeInt, 
        'partnerIdEqual': getXmlNodeInt, 
        'partnerIdIn': getXmlNodeText, 
        'systemNameEqual': getXmlNodeText, 
        'systemNameIn': getXmlNodeText, 
        'statusEqual': (VidiunEnumsFactory.createInt, "VidiunStorageProfileStatus"), 
        'statusIn': getXmlNodeText, 
        'protocolEqual': (VidiunEnumsFactory.createString, "VidiunStorageProfileProtocol"), 
        'protocolIn': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunStorageProfileBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunFilter.toParams(self)
        vparams.put("objectType", "VidiunStorageProfileBaseFilter")
        vparams.addIntIfDefined("idEqual", self.idEqual)
        vparams.addStringIfDefined("idIn", self.idIn)
        vparams.addIntIfDefined("createdAtGreaterThanOrEqual", self.createdAtGreaterThanOrEqual)
        vparams.addIntIfDefined("createdAtLessThanOrEqual", self.createdAtLessThanOrEqual)
        vparams.addIntIfDefined("updatedAtGreaterThanOrEqual", self.updatedAtGreaterThanOrEqual)
        vparams.addIntIfDefined("updatedAtLessThanOrEqual", self.updatedAtLessThanOrEqual)
        vparams.addIntIfDefined("partnerIdEqual", self.partnerIdEqual)
        vparams.addStringIfDefined("partnerIdIn", self.partnerIdIn)
        vparams.addStringIfDefined("systemNameEqual", self.systemNameEqual)
        vparams.addStringIfDefined("systemNameIn", self.systemNameIn)
        vparams.addIntEnumIfDefined("statusEqual", self.statusEqual)
        vparams.addStringIfDefined("statusIn", self.statusIn)
        vparams.addStringEnumIfDefined("protocolEqual", self.protocolEqual)
        vparams.addStringIfDefined("protocolIn", self.protocolIn)
        return vparams

    def getIdEqual(self):
        return self.idEqual

    def setIdEqual(self, newIdEqual):
        self.idEqual = newIdEqual

    def getIdIn(self):
        return self.idIn

    def setIdIn(self, newIdIn):
        self.idIn = newIdIn

    def getCreatedAtGreaterThanOrEqual(self):
        return self.createdAtGreaterThanOrEqual

    def setCreatedAtGreaterThanOrEqual(self, newCreatedAtGreaterThanOrEqual):
        self.createdAtGreaterThanOrEqual = newCreatedAtGreaterThanOrEqual

    def getCreatedAtLessThanOrEqual(self):
        return self.createdAtLessThanOrEqual

    def setCreatedAtLessThanOrEqual(self, newCreatedAtLessThanOrEqual):
        self.createdAtLessThanOrEqual = newCreatedAtLessThanOrEqual

    def getUpdatedAtGreaterThanOrEqual(self):
        return self.updatedAtGreaterThanOrEqual

    def setUpdatedAtGreaterThanOrEqual(self, newUpdatedAtGreaterThanOrEqual):
        self.updatedAtGreaterThanOrEqual = newUpdatedAtGreaterThanOrEqual

    def getUpdatedAtLessThanOrEqual(self):
        return self.updatedAtLessThanOrEqual

    def setUpdatedAtLessThanOrEqual(self, newUpdatedAtLessThanOrEqual):
        self.updatedAtLessThanOrEqual = newUpdatedAtLessThanOrEqual

    def getPartnerIdEqual(self):
        return self.partnerIdEqual

    def setPartnerIdEqual(self, newPartnerIdEqual):
        self.partnerIdEqual = newPartnerIdEqual

    def getPartnerIdIn(self):
        return self.partnerIdIn

    def setPartnerIdIn(self, newPartnerIdIn):
        self.partnerIdIn = newPartnerIdIn

    def getSystemNameEqual(self):
        return self.systemNameEqual

    def setSystemNameEqual(self, newSystemNameEqual):
        self.systemNameEqual = newSystemNameEqual

    def getSystemNameIn(self):
        return self.systemNameIn

    def setSystemNameIn(self, newSystemNameIn):
        self.systemNameIn = newSystemNameIn

    def getStatusEqual(self):
        return self.statusEqual

    def setStatusEqual(self, newStatusEqual):
        self.statusEqual = newStatusEqual

    def getStatusIn(self):
        return self.statusIn

    def setStatusIn(self, newStatusIn):
        self.statusIn = newStatusIn

    def getProtocolEqual(self):
        return self.protocolEqual

    def setProtocolEqual(self, newProtocolEqual):
        self.protocolEqual = newProtocolEqual

    def getProtocolIn(self):
        return self.protocolIn

    def setProtocolIn(self, newProtocolIn):
        self.protocolIn = newProtocolIn


# @package Vidiun
# @subpackage Client
class VidiunStorageProfileListResponse(VidiunListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        VidiunListResponse.__init__(self,
            totalCount)

        # @var array of VidiunStorageProfile
        # @readonly
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (VidiunObjectFactory.createArray, VidiunStorageProfile), 
    }

    def fromXml(self, node):
        VidiunListResponse.fromXml(self, node)
        self.fromXmlImpl(node, VidiunStorageProfileListResponse.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunListResponse.toParams(self)
        vparams.put("objectType", "VidiunStorageProfileListResponse")
        return vparams

    def getObjects(self):
        return self.objects


# @package Vidiun
# @subpackage Client
class VidiunSyncCategoryPrivacyContextJobData(VidiunJobData):
    def __init__(self,
            categoryId=NotImplemented,
            lastUpdatedCategoryEntryCreatedAt=NotImplemented,
            lastUpdatedCategoryCreatedAt=NotImplemented):
        VidiunJobData.__init__(self)

        # category id
        # @var int
        self.categoryId = categoryId

        # Saves the last category entry creation date that was updated
        #      In case of crash the batch will restart from that point
        # @var int
        self.lastUpdatedCategoryEntryCreatedAt = lastUpdatedCategoryEntryCreatedAt

        # Saves the last sub category creation date that was updated
        #      In case of crash the batch will restart from that point
        # @var int
        self.lastUpdatedCategoryCreatedAt = lastUpdatedCategoryCreatedAt


    PROPERTY_LOADERS = {
        'categoryId': getXmlNodeInt, 
        'lastUpdatedCategoryEntryCreatedAt': getXmlNodeInt, 
        'lastUpdatedCategoryCreatedAt': getXmlNodeInt, 
    }

    def fromXml(self, node):
        VidiunJobData.fromXml(self, node)
        self.fromXmlImpl(node, VidiunSyncCategoryPrivacyContextJobData.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunJobData.toParams(self)
        vparams.put("objectType", "VidiunSyncCategoryPrivacyContextJobData")
        vparams.addIntIfDefined("categoryId", self.categoryId)
        vparams.addIntIfDefined("lastUpdatedCategoryEntryCreatedAt", self.lastUpdatedCategoryEntryCreatedAt)
        vparams.addIntIfDefined("lastUpdatedCategoryCreatedAt", self.lastUpdatedCategoryCreatedAt)
        return vparams

    def getCategoryId(self):
        return self.categoryId

    def setCategoryId(self, newCategoryId):
        self.categoryId = newCategoryId

    def getLastUpdatedCategoryEntryCreatedAt(self):
        return self.lastUpdatedCategoryEntryCreatedAt

    def setLastUpdatedCategoryEntryCreatedAt(self, newLastUpdatedCategoryEntryCreatedAt):
        self.lastUpdatedCategoryEntryCreatedAt = newLastUpdatedCategoryEntryCreatedAt

    def getLastUpdatedCategoryCreatedAt(self):
        return self.lastUpdatedCategoryCreatedAt

    def setLastUpdatedCategoryCreatedAt(self, newLastUpdatedCategoryCreatedAt):
        self.lastUpdatedCategoryCreatedAt = newLastUpdatedCategoryCreatedAt


# @package Vidiun
# @subpackage Client
class VidiunThumbAssetListResponse(VidiunListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        VidiunListResponse.__init__(self,
            totalCount)

        # @var array of VidiunThumbAsset
        # @readonly
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (VidiunObjectFactory.createArray, VidiunThumbAsset), 
    }

    def fromXml(self, node):
        VidiunListResponse.fromXml(self, node)
        self.fromXmlImpl(node, VidiunThumbAssetListResponse.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunListResponse.toParams(self)
        vparams.put("objectType", "VidiunThumbAssetListResponse")
        return vparams

    def getObjects(self):
        return self.objects


# @package Vidiun
# @subpackage Client
class VidiunThumbParamsListResponse(VidiunListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        VidiunListResponse.__init__(self,
            totalCount)

        # @var array of VidiunThumbParams
        # @readonly
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (VidiunObjectFactory.createArray, VidiunThumbParams), 
    }

    def fromXml(self, node):
        VidiunListResponse.fromXml(self, node)
        self.fromXmlImpl(node, VidiunThumbParamsListResponse.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunListResponse.toParams(self)
        vparams.put("objectType", "VidiunThumbParamsListResponse")
        return vparams

    def getObjects(self):
        return self.objects


# @package Vidiun
# @subpackage Client
class VidiunThumbParamsOutputListResponse(VidiunListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        VidiunListResponse.__init__(self,
            totalCount)

        # @var array of VidiunThumbParamsOutput
        # @readonly
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (VidiunObjectFactory.createArray, VidiunThumbParamsOutput), 
    }

    def fromXml(self, node):
        VidiunListResponse.fromXml(self, node)
        self.fromXmlImpl(node, VidiunThumbParamsOutputListResponse.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunListResponse.toParams(self)
        vparams.put("objectType", "VidiunThumbParamsOutputListResponse")
        return vparams

    def getObjects(self):
        return self.objects


# @package Vidiun
# @subpackage Client
class VidiunTubeMogulSyndicationFeed(VidiunBaseSyndicationFeed):
    def __init__(self,
            id=NotImplemented,
            feedUrl=NotImplemented,
            partnerId=NotImplemented,
            playlistId=NotImplemented,
            name=NotImplemented,
            status=NotImplemented,
            type=NotImplemented,
            landingPage=NotImplemented,
            createdAt=NotImplemented,
            allowEmbed=NotImplemented,
            playerUiconfId=NotImplemented,
            flavorParamId=NotImplemented,
            transcodeExistingContent=NotImplemented,
            addToDefaultConversionProfile=NotImplemented,
            categories=NotImplemented,
            storageId=NotImplemented,
            entriesOrderBy=NotImplemented,
            enforceEntitlement=NotImplemented,
            privacyContext=NotImplemented,
            updatedAt=NotImplemented,
            useCategoryEntries=NotImplemented,
            category=NotImplemented):
        VidiunBaseSyndicationFeed.__init__(self,
            id,
            feedUrl,
            partnerId,
            playlistId,
            name,
            status,
            type,
            landingPage,
            createdAt,
            allowEmbed,
            playerUiconfId,
            flavorParamId,
            transcodeExistingContent,
            addToDefaultConversionProfile,
            categories,
            storageId,
            entriesOrderBy,
            enforceEntitlement,
            privacyContext,
            updatedAt,
            useCategoryEntries)

        # @var VidiunTubeMogulSyndicationFeedCategories
        # @readonly
        self.category = category


    PROPERTY_LOADERS = {
        'category': (VidiunEnumsFactory.createString, "VidiunTubeMogulSyndicationFeedCategories"), 
    }

    def fromXml(self, node):
        VidiunBaseSyndicationFeed.fromXml(self, node)
        self.fromXmlImpl(node, VidiunTubeMogulSyndicationFeed.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunBaseSyndicationFeed.toParams(self)
        vparams.put("objectType", "VidiunTubeMogulSyndicationFeed")
        return vparams

    def getCategory(self):
        return self.category


# @package Vidiun
# @subpackage Client
class VidiunUiConfBaseFilter(VidiunFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            nameLike=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            objTypeEqual=NotImplemented,
            objTypeIn=NotImplemented,
            tagsMultiLikeOr=NotImplemented,
            tagsMultiLikeAnd=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            creationModeEqual=NotImplemented,
            creationModeIn=NotImplemented,
            versionEqual=NotImplemented,
            versionMultiLikeOr=NotImplemented,
            versionMultiLikeAnd=NotImplemented,
            partnerTagsMultiLikeOr=NotImplemented,
            partnerTagsMultiLikeAnd=NotImplemented):
        VidiunFilter.__init__(self,
            orderBy,
            advancedSearch)

        # @var int
        self.idEqual = idEqual

        # @var string
        self.idIn = idIn

        # @var string
        self.nameLike = nameLike

        # @var int
        self.partnerIdEqual = partnerIdEqual

        # @var string
        self.partnerIdIn = partnerIdIn

        # @var VidiunUiConfObjType
        self.objTypeEqual = objTypeEqual

        # @var string
        self.objTypeIn = objTypeIn

        # @var string
        self.tagsMultiLikeOr = tagsMultiLikeOr

        # @var string
        self.tagsMultiLikeAnd = tagsMultiLikeAnd

        # @var int
        self.createdAtGreaterThanOrEqual = createdAtGreaterThanOrEqual

        # @var int
        self.createdAtLessThanOrEqual = createdAtLessThanOrEqual

        # @var int
        self.updatedAtGreaterThanOrEqual = updatedAtGreaterThanOrEqual

        # @var int
        self.updatedAtLessThanOrEqual = updatedAtLessThanOrEqual

        # @var VidiunUiConfCreationMode
        self.creationModeEqual = creationModeEqual

        # @var string
        self.creationModeIn = creationModeIn

        # @var string
        self.versionEqual = versionEqual

        # @var string
        self.versionMultiLikeOr = versionMultiLikeOr

        # @var string
        self.versionMultiLikeAnd = versionMultiLikeAnd

        # @var string
        self.partnerTagsMultiLikeOr = partnerTagsMultiLikeOr

        # @var string
        self.partnerTagsMultiLikeAnd = partnerTagsMultiLikeAnd


    PROPERTY_LOADERS = {
        'idEqual': getXmlNodeInt, 
        'idIn': getXmlNodeText, 
        'nameLike': getXmlNodeText, 
        'partnerIdEqual': getXmlNodeInt, 
        'partnerIdIn': getXmlNodeText, 
        'objTypeEqual': (VidiunEnumsFactory.createInt, "VidiunUiConfObjType"), 
        'objTypeIn': getXmlNodeText, 
        'tagsMultiLikeOr': getXmlNodeText, 
        'tagsMultiLikeAnd': getXmlNodeText, 
        'createdAtGreaterThanOrEqual': getXmlNodeInt, 
        'createdAtLessThanOrEqual': getXmlNodeInt, 
        'updatedAtGreaterThanOrEqual': getXmlNodeInt, 
        'updatedAtLessThanOrEqual': getXmlNodeInt, 
        'creationModeEqual': (VidiunEnumsFactory.createInt, "VidiunUiConfCreationMode"), 
        'creationModeIn': getXmlNodeText, 
        'versionEqual': getXmlNodeText, 
        'versionMultiLikeOr': getXmlNodeText, 
        'versionMultiLikeAnd': getXmlNodeText, 
        'partnerTagsMultiLikeOr': getXmlNodeText, 
        'partnerTagsMultiLikeAnd': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunUiConfBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunFilter.toParams(self)
        vparams.put("objectType", "VidiunUiConfBaseFilter")
        vparams.addIntIfDefined("idEqual", self.idEqual)
        vparams.addStringIfDefined("idIn", self.idIn)
        vparams.addStringIfDefined("nameLike", self.nameLike)
        vparams.addIntIfDefined("partnerIdEqual", self.partnerIdEqual)
        vparams.addStringIfDefined("partnerIdIn", self.partnerIdIn)
        vparams.addIntEnumIfDefined("objTypeEqual", self.objTypeEqual)
        vparams.addStringIfDefined("objTypeIn", self.objTypeIn)
        vparams.addStringIfDefined("tagsMultiLikeOr", self.tagsMultiLikeOr)
        vparams.addStringIfDefined("tagsMultiLikeAnd", self.tagsMultiLikeAnd)
        vparams.addIntIfDefined("createdAtGreaterThanOrEqual", self.createdAtGreaterThanOrEqual)
        vparams.addIntIfDefined("createdAtLessThanOrEqual", self.createdAtLessThanOrEqual)
        vparams.addIntIfDefined("updatedAtGreaterThanOrEqual", self.updatedAtGreaterThanOrEqual)
        vparams.addIntIfDefined("updatedAtLessThanOrEqual", self.updatedAtLessThanOrEqual)
        vparams.addIntEnumIfDefined("creationModeEqual", self.creationModeEqual)
        vparams.addStringIfDefined("creationModeIn", self.creationModeIn)
        vparams.addStringIfDefined("versionEqual", self.versionEqual)
        vparams.addStringIfDefined("versionMultiLikeOr", self.versionMultiLikeOr)
        vparams.addStringIfDefined("versionMultiLikeAnd", self.versionMultiLikeAnd)
        vparams.addStringIfDefined("partnerTagsMultiLikeOr", self.partnerTagsMultiLikeOr)
        vparams.addStringIfDefined("partnerTagsMultiLikeAnd", self.partnerTagsMultiLikeAnd)
        return vparams

    def getIdEqual(self):
        return self.idEqual

    def setIdEqual(self, newIdEqual):
        self.idEqual = newIdEqual

    def getIdIn(self):
        return self.idIn

    def setIdIn(self, newIdIn):
        self.idIn = newIdIn

    def getNameLike(self):
        return self.nameLike

    def setNameLike(self, newNameLike):
        self.nameLike = newNameLike

    def getPartnerIdEqual(self):
        return self.partnerIdEqual

    def setPartnerIdEqual(self, newPartnerIdEqual):
        self.partnerIdEqual = newPartnerIdEqual

    def getPartnerIdIn(self):
        return self.partnerIdIn

    def setPartnerIdIn(self, newPartnerIdIn):
        self.partnerIdIn = newPartnerIdIn

    def getObjTypeEqual(self):
        return self.objTypeEqual

    def setObjTypeEqual(self, newObjTypeEqual):
        self.objTypeEqual = newObjTypeEqual

    def getObjTypeIn(self):
        return self.objTypeIn

    def setObjTypeIn(self, newObjTypeIn):
        self.objTypeIn = newObjTypeIn

    def getTagsMultiLikeOr(self):
        return self.tagsMultiLikeOr

    def setTagsMultiLikeOr(self, newTagsMultiLikeOr):
        self.tagsMultiLikeOr = newTagsMultiLikeOr

    def getTagsMultiLikeAnd(self):
        return self.tagsMultiLikeAnd

    def setTagsMultiLikeAnd(self, newTagsMultiLikeAnd):
        self.tagsMultiLikeAnd = newTagsMultiLikeAnd

    def getCreatedAtGreaterThanOrEqual(self):
        return self.createdAtGreaterThanOrEqual

    def setCreatedAtGreaterThanOrEqual(self, newCreatedAtGreaterThanOrEqual):
        self.createdAtGreaterThanOrEqual = newCreatedAtGreaterThanOrEqual

    def getCreatedAtLessThanOrEqual(self):
        return self.createdAtLessThanOrEqual

    def setCreatedAtLessThanOrEqual(self, newCreatedAtLessThanOrEqual):
        self.createdAtLessThanOrEqual = newCreatedAtLessThanOrEqual

    def getUpdatedAtGreaterThanOrEqual(self):
        return self.updatedAtGreaterThanOrEqual

    def setUpdatedAtGreaterThanOrEqual(self, newUpdatedAtGreaterThanOrEqual):
        self.updatedAtGreaterThanOrEqual = newUpdatedAtGreaterThanOrEqual

    def getUpdatedAtLessThanOrEqual(self):
        return self.updatedAtLessThanOrEqual

    def setUpdatedAtLessThanOrEqual(self, newUpdatedAtLessThanOrEqual):
        self.updatedAtLessThanOrEqual = newUpdatedAtLessThanOrEqual

    def getCreationModeEqual(self):
        return self.creationModeEqual

    def setCreationModeEqual(self, newCreationModeEqual):
        self.creationModeEqual = newCreationModeEqual

    def getCreationModeIn(self):
        return self.creationModeIn

    def setCreationModeIn(self, newCreationModeIn):
        self.creationModeIn = newCreationModeIn

    def getVersionEqual(self):
        return self.versionEqual

    def setVersionEqual(self, newVersionEqual):
        self.versionEqual = newVersionEqual

    def getVersionMultiLikeOr(self):
        return self.versionMultiLikeOr

    def setVersionMultiLikeOr(self, newVersionMultiLikeOr):
        self.versionMultiLikeOr = newVersionMultiLikeOr

    def getVersionMultiLikeAnd(self):
        return self.versionMultiLikeAnd

    def setVersionMultiLikeAnd(self, newVersionMultiLikeAnd):
        self.versionMultiLikeAnd = newVersionMultiLikeAnd

    def getPartnerTagsMultiLikeOr(self):
        return self.partnerTagsMultiLikeOr

    def setPartnerTagsMultiLikeOr(self, newPartnerTagsMultiLikeOr):
        self.partnerTagsMultiLikeOr = newPartnerTagsMultiLikeOr

    def getPartnerTagsMultiLikeAnd(self):
        return self.partnerTagsMultiLikeAnd

    def setPartnerTagsMultiLikeAnd(self, newPartnerTagsMultiLikeAnd):
        self.partnerTagsMultiLikeAnd = newPartnerTagsMultiLikeAnd


# @package Vidiun
# @subpackage Client
class VidiunUiConfListResponse(VidiunListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        VidiunListResponse.__init__(self,
            totalCount)

        # @var array of VidiunUiConf
        # @readonly
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (VidiunObjectFactory.createArray, VidiunUiConf), 
    }

    def fromXml(self, node):
        VidiunListResponse.fromXml(self, node)
        self.fromXmlImpl(node, VidiunUiConfListResponse.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunListResponse.toParams(self)
        vparams.put("objectType", "VidiunUiConfListResponse")
        return vparams

    def getObjects(self):
        return self.objects


# @package Vidiun
# @subpackage Client
class VidiunUploadTokenBaseFilter(VidiunFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            userIdEqual=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented,
            fileNameEqual=NotImplemented,
            fileSizeEqual=NotImplemented):
        VidiunFilter.__init__(self,
            orderBy,
            advancedSearch)

        # @var string
        self.idEqual = idEqual

        # @var string
        self.idIn = idIn

        # @var string
        self.userIdEqual = userIdEqual

        # @var VidiunUploadTokenStatus
        self.statusEqual = statusEqual

        # @var string
        self.statusIn = statusIn

        # @var string
        self.fileNameEqual = fileNameEqual

        # @var float
        self.fileSizeEqual = fileSizeEqual


    PROPERTY_LOADERS = {
        'idEqual': getXmlNodeText, 
        'idIn': getXmlNodeText, 
        'userIdEqual': getXmlNodeText, 
        'statusEqual': (VidiunEnumsFactory.createInt, "VidiunUploadTokenStatus"), 
        'statusIn': getXmlNodeText, 
        'fileNameEqual': getXmlNodeText, 
        'fileSizeEqual': getXmlNodeFloat, 
    }

    def fromXml(self, node):
        VidiunFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunUploadTokenBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunFilter.toParams(self)
        vparams.put("objectType", "VidiunUploadTokenBaseFilter")
        vparams.addStringIfDefined("idEqual", self.idEqual)
        vparams.addStringIfDefined("idIn", self.idIn)
        vparams.addStringIfDefined("userIdEqual", self.userIdEqual)
        vparams.addIntEnumIfDefined("statusEqual", self.statusEqual)
        vparams.addStringIfDefined("statusIn", self.statusIn)
        vparams.addStringIfDefined("fileNameEqual", self.fileNameEqual)
        vparams.addFloatIfDefined("fileSizeEqual", self.fileSizeEqual)
        return vparams

    def getIdEqual(self):
        return self.idEqual

    def setIdEqual(self, newIdEqual):
        self.idEqual = newIdEqual

    def getIdIn(self):
        return self.idIn

    def setIdIn(self, newIdIn):
        self.idIn = newIdIn

    def getUserIdEqual(self):
        return self.userIdEqual

    def setUserIdEqual(self, newUserIdEqual):
        self.userIdEqual = newUserIdEqual

    def getStatusEqual(self):
        return self.statusEqual

    def setStatusEqual(self, newStatusEqual):
        self.statusEqual = newStatusEqual

    def getStatusIn(self):
        return self.statusIn

    def setStatusIn(self, newStatusIn):
        self.statusIn = newStatusIn

    def getFileNameEqual(self):
        return self.fileNameEqual

    def setFileNameEqual(self, newFileNameEqual):
        self.fileNameEqual = newFileNameEqual

    def getFileSizeEqual(self):
        return self.fileSizeEqual

    def setFileSizeEqual(self, newFileSizeEqual):
        self.fileSizeEqual = newFileSizeEqual


# @package Vidiun
# @subpackage Client
class VidiunUploadTokenListResponse(VidiunListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        VidiunListResponse.__init__(self,
            totalCount)

        # @var array of VidiunUploadToken
        # @readonly
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (VidiunObjectFactory.createArray, VidiunUploadToken), 
    }

    def fromXml(self, node):
        VidiunListResponse.fromXml(self, node)
        self.fromXmlImpl(node, VidiunUploadTokenListResponse.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunListResponse.toParams(self)
        vparams.put("objectType", "VidiunUploadTokenListResponse")
        return vparams

    def getObjects(self):
        return self.objects


# @package Vidiun
# @subpackage Client
class VidiunUrlRecognizerAkamaiG2O(VidiunUrlRecognizer):
    def __init__(self,
            hosts=NotImplemented,
            uriPrefix=NotImplemented,
            headerData=NotImplemented,
            headerSign=NotImplemented,
            timeout=NotImplemented,
            salt=NotImplemented):
        VidiunUrlRecognizer.__init__(self,
            hosts,
            uriPrefix)

        # headerData
        # @var string
        self.headerData = headerData

        # headerSign
        # @var string
        self.headerSign = headerSign

        # timeout
        # @var int
        self.timeout = timeout

        # salt
        # @var string
        self.salt = salt


    PROPERTY_LOADERS = {
        'headerData': getXmlNodeText, 
        'headerSign': getXmlNodeText, 
        'timeout': getXmlNodeInt, 
        'salt': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunUrlRecognizer.fromXml(self, node)
        self.fromXmlImpl(node, VidiunUrlRecognizerAkamaiG2O.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunUrlRecognizer.toParams(self)
        vparams.put("objectType", "VidiunUrlRecognizerAkamaiG2O")
        vparams.addStringIfDefined("headerData", self.headerData)
        vparams.addStringIfDefined("headerSign", self.headerSign)
        vparams.addIntIfDefined("timeout", self.timeout)
        vparams.addStringIfDefined("salt", self.salt)
        return vparams

    def getHeaderData(self):
        return self.headerData

    def setHeaderData(self, newHeaderData):
        self.headerData = newHeaderData

    def getHeaderSign(self):
        return self.headerSign

    def setHeaderSign(self, newHeaderSign):
        self.headerSign = newHeaderSign

    def getTimeout(self):
        return self.timeout

    def setTimeout(self, newTimeout):
        self.timeout = newTimeout

    def getSalt(self):
        return self.salt

    def setSalt(self, newSalt):
        self.salt = newSalt


# @package Vidiun
# @subpackage Client
class VidiunUrlTokenizerAkamaiHttp(VidiunUrlTokenizer):
    def __init__(self,
            window=NotImplemented,
            key=NotImplemented,
            paramName=NotImplemented,
            rootDir=NotImplemented):
        VidiunUrlTokenizer.__init__(self,
            window,
            key)

        # param
        # @var string
        self.paramName = paramName

        # @var string
        self.rootDir = rootDir


    PROPERTY_LOADERS = {
        'paramName': getXmlNodeText, 
        'rootDir': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunUrlTokenizer.fromXml(self, node)
        self.fromXmlImpl(node, VidiunUrlTokenizerAkamaiHttp.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunUrlTokenizer.toParams(self)
        vparams.put("objectType", "VidiunUrlTokenizerAkamaiHttp")
        vparams.addStringIfDefined("paramName", self.paramName)
        vparams.addStringIfDefined("rootDir", self.rootDir)
        return vparams

    def getParamName(self):
        return self.paramName

    def setParamName(self, newParamName):
        self.paramName = newParamName

    def getRootDir(self):
        return self.rootDir

    def setRootDir(self, newRootDir):
        self.rootDir = newRootDir


# @package Vidiun
# @subpackage Client
class VidiunUrlTokenizerAkamaiRtmp(VidiunUrlTokenizer):
    def __init__(self,
            window=NotImplemented,
            key=NotImplemented,
            profile=NotImplemented,
            type=NotImplemented,
            aifp=NotImplemented,
            usePrefix=NotImplemented):
        VidiunUrlTokenizer.__init__(self,
            window,
            key)

        # profile
        # @var string
        self.profile = profile

        # Type
        # @var string
        self.type = type

        # @var string
        self.aifp = aifp

        # @var bool
        self.usePrefix = usePrefix


    PROPERTY_LOADERS = {
        'profile': getXmlNodeText, 
        'type': getXmlNodeText, 
        'aifp': getXmlNodeText, 
        'usePrefix': getXmlNodeBool, 
    }

    def fromXml(self, node):
        VidiunUrlTokenizer.fromXml(self, node)
        self.fromXmlImpl(node, VidiunUrlTokenizerAkamaiRtmp.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunUrlTokenizer.toParams(self)
        vparams.put("objectType", "VidiunUrlTokenizerAkamaiRtmp")
        vparams.addStringIfDefined("profile", self.profile)
        vparams.addStringIfDefined("type", self.type)
        vparams.addStringIfDefined("aifp", self.aifp)
        vparams.addBoolIfDefined("usePrefix", self.usePrefix)
        return vparams

    def getProfile(self):
        return self.profile

    def setProfile(self, newProfile):
        self.profile = newProfile

    def getType(self):
        return self.type

    def setType(self, newType):
        self.type = newType

    def getAifp(self):
        return self.aifp

    def setAifp(self, newAifp):
        self.aifp = newAifp

    def getUsePrefix(self):
        return self.usePrefix

    def setUsePrefix(self, newUsePrefix):
        self.usePrefix = newUsePrefix


# @package Vidiun
# @subpackage Client
class VidiunUrlTokenizerAkamaiRtsp(VidiunUrlTokenizer):
    def __init__(self,
            window=NotImplemented,
            key=NotImplemented,
            host=NotImplemented,
            cpcode=NotImplemented):
        VidiunUrlTokenizer.__init__(self,
            window,
            key)

        # host
        # @var string
        self.host = host

        # Cp-Code
        # @var int
        self.cpcode = cpcode


    PROPERTY_LOADERS = {
        'host': getXmlNodeText, 
        'cpcode': getXmlNodeInt, 
    }

    def fromXml(self, node):
        VidiunUrlTokenizer.fromXml(self, node)
        self.fromXmlImpl(node, VidiunUrlTokenizerAkamaiRtsp.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunUrlTokenizer.toParams(self)
        vparams.put("objectType", "VidiunUrlTokenizerAkamaiRtsp")
        vparams.addStringIfDefined("host", self.host)
        vparams.addIntIfDefined("cpcode", self.cpcode)
        return vparams

    def getHost(self):
        return self.host

    def setHost(self, newHost):
        self.host = newHost

    def getCpcode(self):
        return self.cpcode

    def setCpcode(self, newCpcode):
        self.cpcode = newCpcode


# @package Vidiun
# @subpackage Client
class VidiunUrlTokenizerAkamaiSecureHd(VidiunUrlTokenizer):
    def __init__(self,
            window=NotImplemented,
            key=NotImplemented,
            paramName=NotImplemented,
            aclPostfix=NotImplemented,
            customPostfixes=NotImplemented,
            useCookieHosts=NotImplemented,
            rootDir=NotImplemented):
        VidiunUrlTokenizer.__init__(self,
            window,
            key)

        # @var string
        self.paramName = paramName

        # @var string
        self.aclPostfix = aclPostfix

        # @var string
        self.customPostfixes = customPostfixes

        # @var string
        self.useCookieHosts = useCookieHosts

        # @var string
        self.rootDir = rootDir


    PROPERTY_LOADERS = {
        'paramName': getXmlNodeText, 
        'aclPostfix': getXmlNodeText, 
        'customPostfixes': getXmlNodeText, 
        'useCookieHosts': getXmlNodeText, 
        'rootDir': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunUrlTokenizer.fromXml(self, node)
        self.fromXmlImpl(node, VidiunUrlTokenizerAkamaiSecureHd.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunUrlTokenizer.toParams(self)
        vparams.put("objectType", "VidiunUrlTokenizerAkamaiSecureHd")
        vparams.addStringIfDefined("paramName", self.paramName)
        vparams.addStringIfDefined("aclPostfix", self.aclPostfix)
        vparams.addStringIfDefined("customPostfixes", self.customPostfixes)
        vparams.addStringIfDefined("useCookieHosts", self.useCookieHosts)
        vparams.addStringIfDefined("rootDir", self.rootDir)
        return vparams

    def getParamName(self):
        return self.paramName

    def setParamName(self, newParamName):
        self.paramName = newParamName

    def getAclPostfix(self):
        return self.aclPostfix

    def setAclPostfix(self, newAclPostfix):
        self.aclPostfix = newAclPostfix

    def getCustomPostfixes(self):
        return self.customPostfixes

    def setCustomPostfixes(self, newCustomPostfixes):
        self.customPostfixes = newCustomPostfixes

    def getUseCookieHosts(self):
        return self.useCookieHosts

    def setUseCookieHosts(self, newUseCookieHosts):
        self.useCookieHosts = newUseCookieHosts

    def getRootDir(self):
        return self.rootDir

    def setRootDir(self, newRootDir):
        self.rootDir = newRootDir


# @package Vidiun
# @subpackage Client
class VidiunUrlTokenizerBitGravity(VidiunUrlTokenizer):
    def __init__(self,
            window=NotImplemented,
            key=NotImplemented,
            hashPatternRegex=NotImplemented):
        VidiunUrlTokenizer.__init__(self,
            window,
            key)

        # hashPatternRegex
        # @var string
        self.hashPatternRegex = hashPatternRegex


    PROPERTY_LOADERS = {
        'hashPatternRegex': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunUrlTokenizer.fromXml(self, node)
        self.fromXmlImpl(node, VidiunUrlTokenizerBitGravity.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunUrlTokenizer.toParams(self)
        vparams.put("objectType", "VidiunUrlTokenizerBitGravity")
        vparams.addStringIfDefined("hashPatternRegex", self.hashPatternRegex)
        return vparams

    def getHashPatternRegex(self):
        return self.hashPatternRegex

    def setHashPatternRegex(self, newHashPatternRegex):
        self.hashPatternRegex = newHashPatternRegex


# @package Vidiun
# @subpackage Client
class VidiunUrlTokenizerCloudFront(VidiunUrlTokenizer):
    def __init__(self,
            window=NotImplemented,
            key=NotImplemented,
            keyPairId=NotImplemented,
            rootDir=NotImplemented,
            limitIpAddress=NotImplemented):
        VidiunUrlTokenizer.__init__(self,
            window,
            key)

        # @var string
        self.keyPairId = keyPairId

        # @var string
        self.rootDir = rootDir

        # @var bool
        self.limitIpAddress = limitIpAddress


    PROPERTY_LOADERS = {
        'keyPairId': getXmlNodeText, 
        'rootDir': getXmlNodeText, 
        'limitIpAddress': getXmlNodeBool, 
    }

    def fromXml(self, node):
        VidiunUrlTokenizer.fromXml(self, node)
        self.fromXmlImpl(node, VidiunUrlTokenizerCloudFront.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunUrlTokenizer.toParams(self)
        vparams.put("objectType", "VidiunUrlTokenizerCloudFront")
        vparams.addStringIfDefined("keyPairId", self.keyPairId)
        vparams.addStringIfDefined("rootDir", self.rootDir)
        vparams.addBoolIfDefined("limitIpAddress", self.limitIpAddress)
        return vparams

    def getKeyPairId(self):
        return self.keyPairId

    def setKeyPairId(self, newKeyPairId):
        self.keyPairId = newKeyPairId

    def getRootDir(self):
        return self.rootDir

    def setRootDir(self, newRootDir):
        self.rootDir = newRootDir

    def getLimitIpAddress(self):
        return self.limitIpAddress

    def setLimitIpAddress(self, newLimitIpAddress):
        self.limitIpAddress = newLimitIpAddress


# @package Vidiun
# @subpackage Client
class VidiunUrlTokenizerLevel3(VidiunUrlTokenizer):
    def __init__(self,
            window=NotImplemented,
            key=NotImplemented,
            paramName=NotImplemented,
            expiryName=NotImplemented,
            gen=NotImplemented):
        VidiunUrlTokenizer.__init__(self,
            window,
            key)

        # paramName
        # @var string
        self.paramName = paramName

        # expiryName
        # @var string
        self.expiryName = expiryName

        # gen
        # @var string
        self.gen = gen


    PROPERTY_LOADERS = {
        'paramName': getXmlNodeText, 
        'expiryName': getXmlNodeText, 
        'gen': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunUrlTokenizer.fromXml(self, node)
        self.fromXmlImpl(node, VidiunUrlTokenizerLevel3.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunUrlTokenizer.toParams(self)
        vparams.put("objectType", "VidiunUrlTokenizerLevel3")
        vparams.addStringIfDefined("paramName", self.paramName)
        vparams.addStringIfDefined("expiryName", self.expiryName)
        vparams.addStringIfDefined("gen", self.gen)
        return vparams

    def getParamName(self):
        return self.paramName

    def setParamName(self, newParamName):
        self.paramName = newParamName

    def getExpiryName(self):
        return self.expiryName

    def setExpiryName(self, newExpiryName):
        self.expiryName = newExpiryName

    def getGen(self):
        return self.gen

    def setGen(self, newGen):
        self.gen = newGen


# @package Vidiun
# @subpackage Client
class VidiunUrlTokenizerLimeLight(VidiunUrlTokenizer):
    def __init__(self,
            window=NotImplemented,
            key=NotImplemented):
        VidiunUrlTokenizer.__init__(self,
            window,
            key)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunUrlTokenizer.fromXml(self, node)
        self.fromXmlImpl(node, VidiunUrlTokenizerLimeLight.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunUrlTokenizer.toParams(self)
        vparams.put("objectType", "VidiunUrlTokenizerLimeLight")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunUrlTokenizerUplynk(VidiunUrlTokenizer):
    def __init__(self,
            window=NotImplemented,
            key=NotImplemented,
            accountId=NotImplemented):
        VidiunUrlTokenizer.__init__(self,
            window,
            key)

        # accountId
        # @var string
        self.accountId = accountId


    PROPERTY_LOADERS = {
        'accountId': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunUrlTokenizer.fromXml(self, node)
        self.fromXmlImpl(node, VidiunUrlTokenizerUplynk.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunUrlTokenizer.toParams(self)
        vparams.put("objectType", "VidiunUrlTokenizerUplynk")
        vparams.addStringIfDefined("accountId", self.accountId)
        return vparams

    def getAccountId(self):
        return self.accountId

    def setAccountId(self, newAccountId):
        self.accountId = newAccountId


# @package Vidiun
# @subpackage Client
class VidiunUrlTokenizerVelocix(VidiunUrlTokenizer):
    def __init__(self,
            window=NotImplemented,
            key=NotImplemented,
            hdsPaths=NotImplemented,
            paramName=NotImplemented,
            authPrefix=NotImplemented):
        VidiunUrlTokenizer.__init__(self,
            window,
            key)

        # hdsPaths
        # @var string
        self.hdsPaths = hdsPaths

        # tokenParamName
        # @var string
        self.paramName = paramName

        # secure URL prefix
        # @var string
        self.authPrefix = authPrefix


    PROPERTY_LOADERS = {
        'hdsPaths': getXmlNodeText, 
        'paramName': getXmlNodeText, 
        'authPrefix': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunUrlTokenizer.fromXml(self, node)
        self.fromXmlImpl(node, VidiunUrlTokenizerVelocix.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunUrlTokenizer.toParams(self)
        vparams.put("objectType", "VidiunUrlTokenizerVelocix")
        vparams.addStringIfDefined("hdsPaths", self.hdsPaths)
        vparams.addStringIfDefined("paramName", self.paramName)
        vparams.addStringIfDefined("authPrefix", self.authPrefix)
        return vparams

    def getHdsPaths(self):
        return self.hdsPaths

    def setHdsPaths(self, newHdsPaths):
        self.hdsPaths = newHdsPaths

    def getParamName(self):
        return self.paramName

    def setParamName(self, newParamName):
        self.paramName = newParamName

    def getAuthPrefix(self):
        return self.authPrefix

    def setAuthPrefix(self, newAuthPrefix):
        self.authPrefix = newAuthPrefix


# @package Vidiun
# @subpackage Client
class VidiunUrlTokenizerVnpt(VidiunUrlTokenizer):
    def __init__(self,
            window=NotImplemented,
            key=NotImplemented,
            tokenizationFormat=NotImplemented,
            shouldIncludeClientIp=NotImplemented):
        VidiunUrlTokenizer.__init__(self,
            window,
            key)

        # @var int
        self.tokenizationFormat = tokenizationFormat

        # @var bool
        self.shouldIncludeClientIp = shouldIncludeClientIp


    PROPERTY_LOADERS = {
        'tokenizationFormat': getXmlNodeInt, 
        'shouldIncludeClientIp': getXmlNodeBool, 
    }

    def fromXml(self, node):
        VidiunUrlTokenizer.fromXml(self, node)
        self.fromXmlImpl(node, VidiunUrlTokenizerVnpt.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunUrlTokenizer.toParams(self)
        vparams.put("objectType", "VidiunUrlTokenizerVnpt")
        vparams.addIntIfDefined("tokenizationFormat", self.tokenizationFormat)
        vparams.addBoolIfDefined("shouldIncludeClientIp", self.shouldIncludeClientIp)
        return vparams

    def getTokenizationFormat(self):
        return self.tokenizationFormat

    def setTokenizationFormat(self, newTokenizationFormat):
        self.tokenizationFormat = newTokenizationFormat

    def getShouldIncludeClientIp(self):
        return self.shouldIncludeClientIp

    def setShouldIncludeClientIp(self, newShouldIncludeClientIp):
        self.shouldIncludeClientIp = newShouldIncludeClientIp


# @package Vidiun
# @subpackage Client
class VidiunUserAgentRestriction(VidiunBaseRestriction):
    def __init__(self,
            userAgentRestrictionType=NotImplemented,
            userAgentRegexList=NotImplemented):
        VidiunBaseRestriction.__init__(self)

        # User agent restriction type (Allow or deny)
        # @var VidiunUserAgentRestrictionType
        self.userAgentRestrictionType = userAgentRestrictionType

        # A comma seperated list of user agent regular expressions
        # @var string
        self.userAgentRegexList = userAgentRegexList


    PROPERTY_LOADERS = {
        'userAgentRestrictionType': (VidiunEnumsFactory.createInt, "VidiunUserAgentRestrictionType"), 
        'userAgentRegexList': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunBaseRestriction.fromXml(self, node)
        self.fromXmlImpl(node, VidiunUserAgentRestriction.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunBaseRestriction.toParams(self)
        vparams.put("objectType", "VidiunUserAgentRestriction")
        vparams.addIntEnumIfDefined("userAgentRestrictionType", self.userAgentRestrictionType)
        vparams.addStringIfDefined("userAgentRegexList", self.userAgentRegexList)
        return vparams

    def getUserAgentRestrictionType(self):
        return self.userAgentRestrictionType

    def setUserAgentRestrictionType(self, newUserAgentRestrictionType):
        self.userAgentRestrictionType = newUserAgentRestrictionType

    def getUserAgentRegexList(self):
        return self.userAgentRegexList

    def setUserAgentRegexList(self, newUserAgentRegexList):
        self.userAgentRegexList = newUserAgentRegexList


# @package Vidiun
# @subpackage Client
class VidiunUserEntryListResponse(VidiunListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        VidiunListResponse.__init__(self,
            totalCount)

        # @var array of VidiunUserEntry
        # @readonly
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (VidiunObjectFactory.createArray, VidiunUserEntry), 
    }

    def fromXml(self, node):
        VidiunListResponse.fromXml(self, node)
        self.fromXmlImpl(node, VidiunUserEntryListResponse.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunListResponse.toParams(self)
        vparams.put("objectType", "VidiunUserEntryListResponse")
        return vparams

    def getObjects(self):
        return self.objects


# @package Vidiun
# @subpackage Client
class VidiunUserListResponse(VidiunListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        VidiunListResponse.__init__(self,
            totalCount)

        # @var array of VidiunUser
        # @readonly
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (VidiunObjectFactory.createArray, VidiunUser), 
    }

    def fromXml(self, node):
        VidiunListResponse.fromXml(self, node)
        self.fromXmlImpl(node, VidiunUserListResponse.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunListResponse.toParams(self)
        vparams.put("objectType", "VidiunUserListResponse")
        return vparams

    def getObjects(self):
        return self.objects


# @package Vidiun
# @subpackage Client
class VidiunUserLoginDataListResponse(VidiunListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        VidiunListResponse.__init__(self,
            totalCount)

        # @var array of VidiunUserLoginData
        # @readonly
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (VidiunObjectFactory.createArray, VidiunUserLoginData), 
    }

    def fromXml(self, node):
        VidiunListResponse.fromXml(self, node)
        self.fromXmlImpl(node, VidiunUserLoginDataListResponse.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunListResponse.toParams(self)
        vparams.put("objectType", "VidiunUserLoginDataListResponse")
        return vparams

    def getObjects(self):
        return self.objects


# @package Vidiun
# @subpackage Client
class VidiunUserRoleCondition(VidiunCondition):
    def __init__(self,
            type=NotImplemented,
            description=NotImplemented,
            not_=NotImplemented,
            roleIds=NotImplemented):
        VidiunCondition.__init__(self,
            type,
            description,
            not_)

        # Comma separated list of role ids
        # @var string
        self.roleIds = roleIds


    PROPERTY_LOADERS = {
        'roleIds': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunCondition.fromXml(self, node)
        self.fromXmlImpl(node, VidiunUserRoleCondition.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunCondition.toParams(self)
        vparams.put("objectType", "VidiunUserRoleCondition")
        vparams.addStringIfDefined("roleIds", self.roleIds)
        return vparams

    def getRoleIds(self):
        return self.roleIds

    def setRoleIds(self, newRoleIds):
        self.roleIds = newRoleIds


# @package Vidiun
# @subpackage Client
class VidiunUserRoleListResponse(VidiunListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        VidiunListResponse.__init__(self,
            totalCount)

        # @var array of VidiunUserRole
        # @readonly
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (VidiunObjectFactory.createArray, VidiunUserRole), 
    }

    def fromXml(self, node):
        VidiunListResponse.fromXml(self, node)
        self.fromXmlImpl(node, VidiunUserRoleListResponse.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunListResponse.toParams(self)
        vparams.put("objectType", "VidiunUserRoleListResponse")
        return vparams

    def getObjects(self):
        return self.objects


# @package Vidiun
# @subpackage Client
class VidiunValidateActiveEdgeCondition(VidiunCondition):
    def __init__(self,
            type=NotImplemented,
            description=NotImplemented,
            not_=NotImplemented,
            edgeServerIds=NotImplemented):
        VidiunCondition.__init__(self,
            type,
            description,
            not_)

        # Comma separated list of edge servers to validate are active
        # @var string
        self.edgeServerIds = edgeServerIds


    PROPERTY_LOADERS = {
        'edgeServerIds': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunCondition.fromXml(self, node)
        self.fromXmlImpl(node, VidiunValidateActiveEdgeCondition.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunCondition.toParams(self)
        vparams.put("objectType", "VidiunValidateActiveEdgeCondition")
        vparams.addStringIfDefined("edgeServerIds", self.edgeServerIds)
        return vparams

    def getEdgeServerIds(self):
        return self.edgeServerIds

    def setEdgeServerIds(self, newEdgeServerIds):
        self.edgeServerIds = newEdgeServerIds


# @package Vidiun
# @subpackage Client
class VidiunWidgetBaseFilter(VidiunFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            sourceWidgetIdEqual=NotImplemented,
            rootWidgetIdEqual=NotImplemented,
            partnerIdEqual=NotImplemented,
            entryIdEqual=NotImplemented,
            uiConfIdEqual=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            partnerDataLike=NotImplemented):
        VidiunFilter.__init__(self,
            orderBy,
            advancedSearch)

        # @var string
        self.idEqual = idEqual

        # @var string
        self.idIn = idIn

        # @var string
        self.sourceWidgetIdEqual = sourceWidgetIdEqual

        # @var string
        self.rootWidgetIdEqual = rootWidgetIdEqual

        # @var int
        self.partnerIdEqual = partnerIdEqual

        # @var string
        self.entryIdEqual = entryIdEqual

        # @var int
        self.uiConfIdEqual = uiConfIdEqual

        # @var int
        self.createdAtGreaterThanOrEqual = createdAtGreaterThanOrEqual

        # @var int
        self.createdAtLessThanOrEqual = createdAtLessThanOrEqual

        # @var int
        self.updatedAtGreaterThanOrEqual = updatedAtGreaterThanOrEqual

        # @var int
        self.updatedAtLessThanOrEqual = updatedAtLessThanOrEqual

        # @var string
        self.partnerDataLike = partnerDataLike


    PROPERTY_LOADERS = {
        'idEqual': getXmlNodeText, 
        'idIn': getXmlNodeText, 
        'sourceWidgetIdEqual': getXmlNodeText, 
        'rootWidgetIdEqual': getXmlNodeText, 
        'partnerIdEqual': getXmlNodeInt, 
        'entryIdEqual': getXmlNodeText, 
        'uiConfIdEqual': getXmlNodeInt, 
        'createdAtGreaterThanOrEqual': getXmlNodeInt, 
        'createdAtLessThanOrEqual': getXmlNodeInt, 
        'updatedAtGreaterThanOrEqual': getXmlNodeInt, 
        'updatedAtLessThanOrEqual': getXmlNodeInt, 
        'partnerDataLike': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunWidgetBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunFilter.toParams(self)
        vparams.put("objectType", "VidiunWidgetBaseFilter")
        vparams.addStringIfDefined("idEqual", self.idEqual)
        vparams.addStringIfDefined("idIn", self.idIn)
        vparams.addStringIfDefined("sourceWidgetIdEqual", self.sourceWidgetIdEqual)
        vparams.addStringIfDefined("rootWidgetIdEqual", self.rootWidgetIdEqual)
        vparams.addIntIfDefined("partnerIdEqual", self.partnerIdEqual)
        vparams.addStringIfDefined("entryIdEqual", self.entryIdEqual)
        vparams.addIntIfDefined("uiConfIdEqual", self.uiConfIdEqual)
        vparams.addIntIfDefined("createdAtGreaterThanOrEqual", self.createdAtGreaterThanOrEqual)
        vparams.addIntIfDefined("createdAtLessThanOrEqual", self.createdAtLessThanOrEqual)
        vparams.addIntIfDefined("updatedAtGreaterThanOrEqual", self.updatedAtGreaterThanOrEqual)
        vparams.addIntIfDefined("updatedAtLessThanOrEqual", self.updatedAtLessThanOrEqual)
        vparams.addStringIfDefined("partnerDataLike", self.partnerDataLike)
        return vparams

    def getIdEqual(self):
        return self.idEqual

    def setIdEqual(self, newIdEqual):
        self.idEqual = newIdEqual

    def getIdIn(self):
        return self.idIn

    def setIdIn(self, newIdIn):
        self.idIn = newIdIn

    def getSourceWidgetIdEqual(self):
        return self.sourceWidgetIdEqual

    def setSourceWidgetIdEqual(self, newSourceWidgetIdEqual):
        self.sourceWidgetIdEqual = newSourceWidgetIdEqual

    def getRootWidgetIdEqual(self):
        return self.rootWidgetIdEqual

    def setRootWidgetIdEqual(self, newRootWidgetIdEqual):
        self.rootWidgetIdEqual = newRootWidgetIdEqual

    def getPartnerIdEqual(self):
        return self.partnerIdEqual

    def setPartnerIdEqual(self, newPartnerIdEqual):
        self.partnerIdEqual = newPartnerIdEqual

    def getEntryIdEqual(self):
        return self.entryIdEqual

    def setEntryIdEqual(self, newEntryIdEqual):
        self.entryIdEqual = newEntryIdEqual

    def getUiConfIdEqual(self):
        return self.uiConfIdEqual

    def setUiConfIdEqual(self, newUiConfIdEqual):
        self.uiConfIdEqual = newUiConfIdEqual

    def getCreatedAtGreaterThanOrEqual(self):
        return self.createdAtGreaterThanOrEqual

    def setCreatedAtGreaterThanOrEqual(self, newCreatedAtGreaterThanOrEqual):
        self.createdAtGreaterThanOrEqual = newCreatedAtGreaterThanOrEqual

    def getCreatedAtLessThanOrEqual(self):
        return self.createdAtLessThanOrEqual

    def setCreatedAtLessThanOrEqual(self, newCreatedAtLessThanOrEqual):
        self.createdAtLessThanOrEqual = newCreatedAtLessThanOrEqual

    def getUpdatedAtGreaterThanOrEqual(self):
        return self.updatedAtGreaterThanOrEqual

    def setUpdatedAtGreaterThanOrEqual(self, newUpdatedAtGreaterThanOrEqual):
        self.updatedAtGreaterThanOrEqual = newUpdatedAtGreaterThanOrEqual

    def getUpdatedAtLessThanOrEqual(self):
        return self.updatedAtLessThanOrEqual

    def setUpdatedAtLessThanOrEqual(self, newUpdatedAtLessThanOrEqual):
        self.updatedAtLessThanOrEqual = newUpdatedAtLessThanOrEqual

    def getPartnerDataLike(self):
        return self.partnerDataLike

    def setPartnerDataLike(self, newPartnerDataLike):
        self.partnerDataLike = newPartnerDataLike


# @package Vidiun
# @subpackage Client
class VidiunWidgetListResponse(VidiunListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        VidiunListResponse.__init__(self,
            totalCount)

        # @var array of VidiunWidget
        # @readonly
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (VidiunObjectFactory.createArray, VidiunWidget), 
    }

    def fromXml(self, node):
        VidiunListResponse.fromXml(self, node)
        self.fromXmlImpl(node, VidiunWidgetListResponse.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunListResponse.toParams(self)
        vparams.put("objectType", "VidiunWidgetListResponse")
        return vparams

    def getObjects(self):
        return self.objects


# @package Vidiun
# @subpackage Client
class VidiunYahooSyndicationFeed(VidiunBaseSyndicationFeed):
    def __init__(self,
            id=NotImplemented,
            feedUrl=NotImplemented,
            partnerId=NotImplemented,
            playlistId=NotImplemented,
            name=NotImplemented,
            status=NotImplemented,
            type=NotImplemented,
            landingPage=NotImplemented,
            createdAt=NotImplemented,
            allowEmbed=NotImplemented,
            playerUiconfId=NotImplemented,
            flavorParamId=NotImplemented,
            transcodeExistingContent=NotImplemented,
            addToDefaultConversionProfile=NotImplemented,
            categories=NotImplemented,
            storageId=NotImplemented,
            entriesOrderBy=NotImplemented,
            enforceEntitlement=NotImplemented,
            privacyContext=NotImplemented,
            updatedAt=NotImplemented,
            useCategoryEntries=NotImplemented,
            category=NotImplemented,
            adultContent=NotImplemented,
            feedDescription=NotImplemented,
            feedLandingPage=NotImplemented):
        VidiunBaseSyndicationFeed.__init__(self,
            id,
            feedUrl,
            partnerId,
            playlistId,
            name,
            status,
            type,
            landingPage,
            createdAt,
            allowEmbed,
            playerUiconfId,
            flavorParamId,
            transcodeExistingContent,
            addToDefaultConversionProfile,
            categories,
            storageId,
            entriesOrderBy,
            enforceEntitlement,
            privacyContext,
            updatedAt,
            useCategoryEntries)

        # @var VidiunYahooSyndicationFeedCategories
        # @readonly
        self.category = category

        # @var VidiunYahooSyndicationFeedAdultValues
        self.adultContent = adultContent

        # feed description
        # @var string
        self.feedDescription = feedDescription

        # feed landing page (i.e publisher website)
        # @var string
        self.feedLandingPage = feedLandingPage


    PROPERTY_LOADERS = {
        'category': (VidiunEnumsFactory.createString, "VidiunYahooSyndicationFeedCategories"), 
        'adultContent': (VidiunEnumsFactory.createString, "VidiunYahooSyndicationFeedAdultValues"), 
        'feedDescription': getXmlNodeText, 
        'feedLandingPage': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunBaseSyndicationFeed.fromXml(self, node)
        self.fromXmlImpl(node, VidiunYahooSyndicationFeed.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunBaseSyndicationFeed.toParams(self)
        vparams.put("objectType", "VidiunYahooSyndicationFeed")
        vparams.addStringEnumIfDefined("adultContent", self.adultContent)
        vparams.addStringIfDefined("feedDescription", self.feedDescription)
        vparams.addStringIfDefined("feedLandingPage", self.feedLandingPage)
        return vparams

    def getCategory(self):
        return self.category

    def getAdultContent(self):
        return self.adultContent

    def setAdultContent(self, newAdultContent):
        self.adultContent = newAdultContent

    def getFeedDescription(self):
        return self.feedDescription

    def setFeedDescription(self, newFeedDescription):
        self.feedDescription = newFeedDescription

    def getFeedLandingPage(self):
        return self.feedLandingPage

    def setFeedLandingPage(self, newFeedLandingPage):
        self.feedLandingPage = newFeedLandingPage


# @package Vidiun
# @subpackage Client
class VidiunAccessControlBaseFilter(VidiunRelatedFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented):
        VidiunRelatedFilter.__init__(self,
            orderBy,
            advancedSearch)

        # @var int
        self.idEqual = idEqual

        # @var string
        self.idIn = idIn

        # @var string
        self.systemNameEqual = systemNameEqual

        # @var string
        self.systemNameIn = systemNameIn

        # @var int
        self.createdAtGreaterThanOrEqual = createdAtGreaterThanOrEqual

        # @var int
        self.createdAtLessThanOrEqual = createdAtLessThanOrEqual


    PROPERTY_LOADERS = {
        'idEqual': getXmlNodeInt, 
        'idIn': getXmlNodeText, 
        'systemNameEqual': getXmlNodeText, 
        'systemNameIn': getXmlNodeText, 
        'createdAtGreaterThanOrEqual': getXmlNodeInt, 
        'createdAtLessThanOrEqual': getXmlNodeInt, 
    }

    def fromXml(self, node):
        VidiunRelatedFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunAccessControlBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunRelatedFilter.toParams(self)
        vparams.put("objectType", "VidiunAccessControlBaseFilter")
        vparams.addIntIfDefined("idEqual", self.idEqual)
        vparams.addStringIfDefined("idIn", self.idIn)
        vparams.addStringIfDefined("systemNameEqual", self.systemNameEqual)
        vparams.addStringIfDefined("systemNameIn", self.systemNameIn)
        vparams.addIntIfDefined("createdAtGreaterThanOrEqual", self.createdAtGreaterThanOrEqual)
        vparams.addIntIfDefined("createdAtLessThanOrEqual", self.createdAtLessThanOrEqual)
        return vparams

    def getIdEqual(self):
        return self.idEqual

    def setIdEqual(self, newIdEqual):
        self.idEqual = newIdEqual

    def getIdIn(self):
        return self.idIn

    def setIdIn(self, newIdIn):
        self.idIn = newIdIn

    def getSystemNameEqual(self):
        return self.systemNameEqual

    def setSystemNameEqual(self, newSystemNameEqual):
        self.systemNameEqual = newSystemNameEqual

    def getSystemNameIn(self):
        return self.systemNameIn

    def setSystemNameIn(self, newSystemNameIn):
        self.systemNameIn = newSystemNameIn

    def getCreatedAtGreaterThanOrEqual(self):
        return self.createdAtGreaterThanOrEqual

    def setCreatedAtGreaterThanOrEqual(self, newCreatedAtGreaterThanOrEqual):
        self.createdAtGreaterThanOrEqual = newCreatedAtGreaterThanOrEqual

    def getCreatedAtLessThanOrEqual(self):
        return self.createdAtLessThanOrEqual

    def setCreatedAtLessThanOrEqual(self, newCreatedAtLessThanOrEqual):
        self.createdAtLessThanOrEqual = newCreatedAtLessThanOrEqual


# @package Vidiun
# @subpackage Client
class VidiunAccessControlProfileBaseFilter(VidiunRelatedFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented):
        VidiunRelatedFilter.__init__(self,
            orderBy,
            advancedSearch)

        # @var int
        self.idEqual = idEqual

        # @var string
        self.idIn = idIn

        # @var string
        self.systemNameEqual = systemNameEqual

        # @var string
        self.systemNameIn = systemNameIn

        # @var int
        self.createdAtGreaterThanOrEqual = createdAtGreaterThanOrEqual

        # @var int
        self.createdAtLessThanOrEqual = createdAtLessThanOrEqual

        # @var int
        self.updatedAtGreaterThanOrEqual = updatedAtGreaterThanOrEqual

        # @var int
        self.updatedAtLessThanOrEqual = updatedAtLessThanOrEqual


    PROPERTY_LOADERS = {
        'idEqual': getXmlNodeInt, 
        'idIn': getXmlNodeText, 
        'systemNameEqual': getXmlNodeText, 
        'systemNameIn': getXmlNodeText, 
        'createdAtGreaterThanOrEqual': getXmlNodeInt, 
        'createdAtLessThanOrEqual': getXmlNodeInt, 
        'updatedAtGreaterThanOrEqual': getXmlNodeInt, 
        'updatedAtLessThanOrEqual': getXmlNodeInt, 
    }

    def fromXml(self, node):
        VidiunRelatedFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunAccessControlProfileBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunRelatedFilter.toParams(self)
        vparams.put("objectType", "VidiunAccessControlProfileBaseFilter")
        vparams.addIntIfDefined("idEqual", self.idEqual)
        vparams.addStringIfDefined("idIn", self.idIn)
        vparams.addStringIfDefined("systemNameEqual", self.systemNameEqual)
        vparams.addStringIfDefined("systemNameIn", self.systemNameIn)
        vparams.addIntIfDefined("createdAtGreaterThanOrEqual", self.createdAtGreaterThanOrEqual)
        vparams.addIntIfDefined("createdAtLessThanOrEqual", self.createdAtLessThanOrEqual)
        vparams.addIntIfDefined("updatedAtGreaterThanOrEqual", self.updatedAtGreaterThanOrEqual)
        vparams.addIntIfDefined("updatedAtLessThanOrEqual", self.updatedAtLessThanOrEqual)
        return vparams

    def getIdEqual(self):
        return self.idEqual

    def setIdEqual(self, newIdEqual):
        self.idEqual = newIdEqual

    def getIdIn(self):
        return self.idIn

    def setIdIn(self, newIdIn):
        self.idIn = newIdIn

    def getSystemNameEqual(self):
        return self.systemNameEqual

    def setSystemNameEqual(self, newSystemNameEqual):
        self.systemNameEqual = newSystemNameEqual

    def getSystemNameIn(self):
        return self.systemNameIn

    def setSystemNameIn(self, newSystemNameIn):
        self.systemNameIn = newSystemNameIn

    def getCreatedAtGreaterThanOrEqual(self):
        return self.createdAtGreaterThanOrEqual

    def setCreatedAtGreaterThanOrEqual(self, newCreatedAtGreaterThanOrEqual):
        self.createdAtGreaterThanOrEqual = newCreatedAtGreaterThanOrEqual

    def getCreatedAtLessThanOrEqual(self):
        return self.createdAtLessThanOrEqual

    def setCreatedAtLessThanOrEqual(self, newCreatedAtLessThanOrEqual):
        self.createdAtLessThanOrEqual = newCreatedAtLessThanOrEqual

    def getUpdatedAtGreaterThanOrEqual(self):
        return self.updatedAtGreaterThanOrEqual

    def setUpdatedAtGreaterThanOrEqual(self, newUpdatedAtGreaterThanOrEqual):
        self.updatedAtGreaterThanOrEqual = newUpdatedAtGreaterThanOrEqual

    def getUpdatedAtLessThanOrEqual(self):
        return self.updatedAtLessThanOrEqual

    def setUpdatedAtLessThanOrEqual(self, newUpdatedAtLessThanOrEqual):
        self.updatedAtLessThanOrEqual = newUpdatedAtLessThanOrEqual


# @package Vidiun
# @subpackage Client
class VidiunAkamaiProvisionJobData(VidiunProvisionJobData):
    def __init__(self,
            streamID=NotImplemented,
            backupStreamID=NotImplemented,
            rtmp=NotImplemented,
            encoderIP=NotImplemented,
            backupEncoderIP=NotImplemented,
            encoderPassword=NotImplemented,
            encoderUsername=NotImplemented,
            endDate=NotImplemented,
            returnVal=NotImplemented,
            mediaType=NotImplemented,
            primaryBroadcastingUrl=NotImplemented,
            secondaryBroadcastingUrl=NotImplemented,
            streamName=NotImplemented,
            wsdlUsername=NotImplemented,
            wsdlPassword=NotImplemented,
            cpcode=NotImplemented,
            emailId=NotImplemented,
            primaryContact=NotImplemented,
            secondaryContact=NotImplemented):
        VidiunProvisionJobData.__init__(self,
            streamID,
            backupStreamID,
            rtmp,
            encoderIP,
            backupEncoderIP,
            encoderPassword,
            encoderUsername,
            endDate,
            returnVal,
            mediaType,
            primaryBroadcastingUrl,
            secondaryBroadcastingUrl,
            streamName)

        # @var string
        self.wsdlUsername = wsdlUsername

        # @var string
        self.wsdlPassword = wsdlPassword

        # @var string
        self.cpcode = cpcode

        # @var string
        self.emailId = emailId

        # @var string
        self.primaryContact = primaryContact

        # @var string
        self.secondaryContact = secondaryContact


    PROPERTY_LOADERS = {
        'wsdlUsername': getXmlNodeText, 
        'wsdlPassword': getXmlNodeText, 
        'cpcode': getXmlNodeText, 
        'emailId': getXmlNodeText, 
        'primaryContact': getXmlNodeText, 
        'secondaryContact': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunProvisionJobData.fromXml(self, node)
        self.fromXmlImpl(node, VidiunAkamaiProvisionJobData.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunProvisionJobData.toParams(self)
        vparams.put("objectType", "VidiunAkamaiProvisionJobData")
        vparams.addStringIfDefined("wsdlUsername", self.wsdlUsername)
        vparams.addStringIfDefined("wsdlPassword", self.wsdlPassword)
        vparams.addStringIfDefined("cpcode", self.cpcode)
        vparams.addStringIfDefined("emailId", self.emailId)
        vparams.addStringIfDefined("primaryContact", self.primaryContact)
        vparams.addStringIfDefined("secondaryContact", self.secondaryContact)
        return vparams

    def getWsdlUsername(self):
        return self.wsdlUsername

    def setWsdlUsername(self, newWsdlUsername):
        self.wsdlUsername = newWsdlUsername

    def getWsdlPassword(self):
        return self.wsdlPassword

    def setWsdlPassword(self, newWsdlPassword):
        self.wsdlPassword = newWsdlPassword

    def getCpcode(self):
        return self.cpcode

    def setCpcode(self, newCpcode):
        self.cpcode = newCpcode

    def getEmailId(self):
        return self.emailId

    def setEmailId(self, newEmailId):
        self.emailId = newEmailId

    def getPrimaryContact(self):
        return self.primaryContact

    def setPrimaryContact(self, newPrimaryContact):
        self.primaryContact = newPrimaryContact

    def getSecondaryContact(self):
        return self.secondaryContact

    def setSecondaryContact(self, newSecondaryContact):
        self.secondaryContact = newSecondaryContact


# @package Vidiun
# @subpackage Client
class VidiunAkamaiUniversalProvisionJobData(VidiunProvisionJobData):
    def __init__(self,
            streamID=NotImplemented,
            backupStreamID=NotImplemented,
            rtmp=NotImplemented,
            encoderIP=NotImplemented,
            backupEncoderIP=NotImplemented,
            encoderPassword=NotImplemented,
            encoderUsername=NotImplemented,
            endDate=NotImplemented,
            returnVal=NotImplemented,
            mediaType=NotImplemented,
            primaryBroadcastingUrl=NotImplemented,
            secondaryBroadcastingUrl=NotImplemented,
            streamName=NotImplemented,
            streamId=NotImplemented,
            systemUserName=NotImplemented,
            systemPassword=NotImplemented,
            domainName=NotImplemented,
            dvrEnabled=NotImplemented,
            dvrWindow=NotImplemented,
            primaryContact=NotImplemented,
            secondaryContact=NotImplemented,
            streamType=NotImplemented,
            notificationEmail=NotImplemented):
        VidiunProvisionJobData.__init__(self,
            streamID,
            backupStreamID,
            rtmp,
            encoderIP,
            backupEncoderIP,
            encoderPassword,
            encoderUsername,
            endDate,
            returnVal,
            mediaType,
            primaryBroadcastingUrl,
            secondaryBroadcastingUrl,
            streamName)

        # @var int
        self.streamId = streamId

        # @var string
        self.systemUserName = systemUserName

        # @var string
        self.systemPassword = systemPassword

        # @var string
        self.domainName = domainName

        # @var VidiunDVRStatus
        self.dvrEnabled = dvrEnabled

        # @var int
        self.dvrWindow = dvrWindow

        # @var string
        self.primaryContact = primaryContact

        # @var string
        self.secondaryContact = secondaryContact

        # @var VidiunAkamaiUniversalStreamType
        self.streamType = streamType

        # @var string
        self.notificationEmail = notificationEmail


    PROPERTY_LOADERS = {
        'streamId': getXmlNodeInt, 
        'systemUserName': getXmlNodeText, 
        'systemPassword': getXmlNodeText, 
        'domainName': getXmlNodeText, 
        'dvrEnabled': (VidiunEnumsFactory.createInt, "VidiunDVRStatus"), 
        'dvrWindow': getXmlNodeInt, 
        'primaryContact': getXmlNodeText, 
        'secondaryContact': getXmlNodeText, 
        'streamType': (VidiunEnumsFactory.createString, "VidiunAkamaiUniversalStreamType"), 
        'notificationEmail': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunProvisionJobData.fromXml(self, node)
        self.fromXmlImpl(node, VidiunAkamaiUniversalProvisionJobData.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunProvisionJobData.toParams(self)
        vparams.put("objectType", "VidiunAkamaiUniversalProvisionJobData")
        vparams.addIntIfDefined("streamId", self.streamId)
        vparams.addStringIfDefined("systemUserName", self.systemUserName)
        vparams.addStringIfDefined("systemPassword", self.systemPassword)
        vparams.addStringIfDefined("domainName", self.domainName)
        vparams.addIntEnumIfDefined("dvrEnabled", self.dvrEnabled)
        vparams.addIntIfDefined("dvrWindow", self.dvrWindow)
        vparams.addStringIfDefined("primaryContact", self.primaryContact)
        vparams.addStringIfDefined("secondaryContact", self.secondaryContact)
        vparams.addStringEnumIfDefined("streamType", self.streamType)
        vparams.addStringIfDefined("notificationEmail", self.notificationEmail)
        return vparams

    def getStreamId(self):
        return self.streamId

    def setStreamId(self, newStreamId):
        self.streamId = newStreamId

    def getSystemUserName(self):
        return self.systemUserName

    def setSystemUserName(self, newSystemUserName):
        self.systemUserName = newSystemUserName

    def getSystemPassword(self):
        return self.systemPassword

    def setSystemPassword(self, newSystemPassword):
        self.systemPassword = newSystemPassword

    def getDomainName(self):
        return self.domainName

    def setDomainName(self, newDomainName):
        self.domainName = newDomainName

    def getDvrEnabled(self):
        return self.dvrEnabled

    def setDvrEnabled(self, newDvrEnabled):
        self.dvrEnabled = newDvrEnabled

    def getDvrWindow(self):
        return self.dvrWindow

    def setDvrWindow(self, newDvrWindow):
        self.dvrWindow = newDvrWindow

    def getPrimaryContact(self):
        return self.primaryContact

    def setPrimaryContact(self, newPrimaryContact):
        self.primaryContact = newPrimaryContact

    def getSecondaryContact(self):
        return self.secondaryContact

    def setSecondaryContact(self, newSecondaryContact):
        self.secondaryContact = newSecondaryContact

    def getStreamType(self):
        return self.streamType

    def setStreamType(self, newStreamType):
        self.streamType = newStreamType

    def getNotificationEmail(self):
        return self.notificationEmail

    def setNotificationEmail(self, newNotificationEmail):
        self.notificationEmail = newNotificationEmail


# @package Vidiun
# @subpackage Client
class VidiunAppTokenFilter(VidiunAppTokenBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented):
        VidiunAppTokenBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            statusEqual,
            statusIn)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunAppTokenBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunAppTokenFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunAppTokenBaseFilter.toParams(self)
        vparams.put("objectType", "VidiunAppTokenFilter")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunAssetBaseFilter(VidiunRelatedFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            entryIdEqual=NotImplemented,
            entryIdIn=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            sizeGreaterThanOrEqual=NotImplemented,
            sizeLessThanOrEqual=NotImplemented,
            tagsLike=NotImplemented,
            tagsMultiLikeOr=NotImplemented,
            tagsMultiLikeAnd=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            deletedAtGreaterThanOrEqual=NotImplemented,
            deletedAtLessThanOrEqual=NotImplemented):
        VidiunRelatedFilter.__init__(self,
            orderBy,
            advancedSearch)

        # @var string
        self.idEqual = idEqual

        # @var string
        self.idIn = idIn

        # @var string
        self.entryIdEqual = entryIdEqual

        # @var string
        self.entryIdIn = entryIdIn

        # @var int
        self.partnerIdEqual = partnerIdEqual

        # @var string
        self.partnerIdIn = partnerIdIn

        # @var int
        self.sizeGreaterThanOrEqual = sizeGreaterThanOrEqual

        # @var int
        self.sizeLessThanOrEqual = sizeLessThanOrEqual

        # @var string
        self.tagsLike = tagsLike

        # @var string
        self.tagsMultiLikeOr = tagsMultiLikeOr

        # @var string
        self.tagsMultiLikeAnd = tagsMultiLikeAnd

        # @var int
        self.createdAtGreaterThanOrEqual = createdAtGreaterThanOrEqual

        # @var int
        self.createdAtLessThanOrEqual = createdAtLessThanOrEqual

        # @var int
        self.updatedAtGreaterThanOrEqual = updatedAtGreaterThanOrEqual

        # @var int
        self.updatedAtLessThanOrEqual = updatedAtLessThanOrEqual

        # @var int
        self.deletedAtGreaterThanOrEqual = deletedAtGreaterThanOrEqual

        # @var int
        self.deletedAtLessThanOrEqual = deletedAtLessThanOrEqual


    PROPERTY_LOADERS = {
        'idEqual': getXmlNodeText, 
        'idIn': getXmlNodeText, 
        'entryIdEqual': getXmlNodeText, 
        'entryIdIn': getXmlNodeText, 
        'partnerIdEqual': getXmlNodeInt, 
        'partnerIdIn': getXmlNodeText, 
        'sizeGreaterThanOrEqual': getXmlNodeInt, 
        'sizeLessThanOrEqual': getXmlNodeInt, 
        'tagsLike': getXmlNodeText, 
        'tagsMultiLikeOr': getXmlNodeText, 
        'tagsMultiLikeAnd': getXmlNodeText, 
        'createdAtGreaterThanOrEqual': getXmlNodeInt, 
        'createdAtLessThanOrEqual': getXmlNodeInt, 
        'updatedAtGreaterThanOrEqual': getXmlNodeInt, 
        'updatedAtLessThanOrEqual': getXmlNodeInt, 
        'deletedAtGreaterThanOrEqual': getXmlNodeInt, 
        'deletedAtLessThanOrEqual': getXmlNodeInt, 
    }

    def fromXml(self, node):
        VidiunRelatedFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunAssetBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunRelatedFilter.toParams(self)
        vparams.put("objectType", "VidiunAssetBaseFilter")
        vparams.addStringIfDefined("idEqual", self.idEqual)
        vparams.addStringIfDefined("idIn", self.idIn)
        vparams.addStringIfDefined("entryIdEqual", self.entryIdEqual)
        vparams.addStringIfDefined("entryIdIn", self.entryIdIn)
        vparams.addIntIfDefined("partnerIdEqual", self.partnerIdEqual)
        vparams.addStringIfDefined("partnerIdIn", self.partnerIdIn)
        vparams.addIntIfDefined("sizeGreaterThanOrEqual", self.sizeGreaterThanOrEqual)
        vparams.addIntIfDefined("sizeLessThanOrEqual", self.sizeLessThanOrEqual)
        vparams.addStringIfDefined("tagsLike", self.tagsLike)
        vparams.addStringIfDefined("tagsMultiLikeOr", self.tagsMultiLikeOr)
        vparams.addStringIfDefined("tagsMultiLikeAnd", self.tagsMultiLikeAnd)
        vparams.addIntIfDefined("createdAtGreaterThanOrEqual", self.createdAtGreaterThanOrEqual)
        vparams.addIntIfDefined("createdAtLessThanOrEqual", self.createdAtLessThanOrEqual)
        vparams.addIntIfDefined("updatedAtGreaterThanOrEqual", self.updatedAtGreaterThanOrEqual)
        vparams.addIntIfDefined("updatedAtLessThanOrEqual", self.updatedAtLessThanOrEqual)
        vparams.addIntIfDefined("deletedAtGreaterThanOrEqual", self.deletedAtGreaterThanOrEqual)
        vparams.addIntIfDefined("deletedAtLessThanOrEqual", self.deletedAtLessThanOrEqual)
        return vparams

    def getIdEqual(self):
        return self.idEqual

    def setIdEqual(self, newIdEqual):
        self.idEqual = newIdEqual

    def getIdIn(self):
        return self.idIn

    def setIdIn(self, newIdIn):
        self.idIn = newIdIn

    def getEntryIdEqual(self):
        return self.entryIdEqual

    def setEntryIdEqual(self, newEntryIdEqual):
        self.entryIdEqual = newEntryIdEqual

    def getEntryIdIn(self):
        return self.entryIdIn

    def setEntryIdIn(self, newEntryIdIn):
        self.entryIdIn = newEntryIdIn

    def getPartnerIdEqual(self):
        return self.partnerIdEqual

    def setPartnerIdEqual(self, newPartnerIdEqual):
        self.partnerIdEqual = newPartnerIdEqual

    def getPartnerIdIn(self):
        return self.partnerIdIn

    def setPartnerIdIn(self, newPartnerIdIn):
        self.partnerIdIn = newPartnerIdIn

    def getSizeGreaterThanOrEqual(self):
        return self.sizeGreaterThanOrEqual

    def setSizeGreaterThanOrEqual(self, newSizeGreaterThanOrEqual):
        self.sizeGreaterThanOrEqual = newSizeGreaterThanOrEqual

    def getSizeLessThanOrEqual(self):
        return self.sizeLessThanOrEqual

    def setSizeLessThanOrEqual(self, newSizeLessThanOrEqual):
        self.sizeLessThanOrEqual = newSizeLessThanOrEqual

    def getTagsLike(self):
        return self.tagsLike

    def setTagsLike(self, newTagsLike):
        self.tagsLike = newTagsLike

    def getTagsMultiLikeOr(self):
        return self.tagsMultiLikeOr

    def setTagsMultiLikeOr(self, newTagsMultiLikeOr):
        self.tagsMultiLikeOr = newTagsMultiLikeOr

    def getTagsMultiLikeAnd(self):
        return self.tagsMultiLikeAnd

    def setTagsMultiLikeAnd(self, newTagsMultiLikeAnd):
        self.tagsMultiLikeAnd = newTagsMultiLikeAnd

    def getCreatedAtGreaterThanOrEqual(self):
        return self.createdAtGreaterThanOrEqual

    def setCreatedAtGreaterThanOrEqual(self, newCreatedAtGreaterThanOrEqual):
        self.createdAtGreaterThanOrEqual = newCreatedAtGreaterThanOrEqual

    def getCreatedAtLessThanOrEqual(self):
        return self.createdAtLessThanOrEqual

    def setCreatedAtLessThanOrEqual(self, newCreatedAtLessThanOrEqual):
        self.createdAtLessThanOrEqual = newCreatedAtLessThanOrEqual

    def getUpdatedAtGreaterThanOrEqual(self):
        return self.updatedAtGreaterThanOrEqual

    def setUpdatedAtGreaterThanOrEqual(self, newUpdatedAtGreaterThanOrEqual):
        self.updatedAtGreaterThanOrEqual = newUpdatedAtGreaterThanOrEqual

    def getUpdatedAtLessThanOrEqual(self):
        return self.updatedAtLessThanOrEqual

    def setUpdatedAtLessThanOrEqual(self, newUpdatedAtLessThanOrEqual):
        self.updatedAtLessThanOrEqual = newUpdatedAtLessThanOrEqual

    def getDeletedAtGreaterThanOrEqual(self):
        return self.deletedAtGreaterThanOrEqual

    def setDeletedAtGreaterThanOrEqual(self, newDeletedAtGreaterThanOrEqual):
        self.deletedAtGreaterThanOrEqual = newDeletedAtGreaterThanOrEqual

    def getDeletedAtLessThanOrEqual(self):
        return self.deletedAtLessThanOrEqual

    def setDeletedAtLessThanOrEqual(self, newDeletedAtLessThanOrEqual):
        self.deletedAtLessThanOrEqual = newDeletedAtLessThanOrEqual


# @package Vidiun
# @subpackage Client
class VidiunAssetParamsBaseFilter(VidiunRelatedFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            isSystemDefaultEqual=NotImplemented,
            tagsEqual=NotImplemented):
        VidiunRelatedFilter.__init__(self,
            orderBy,
            advancedSearch)

        # @var string
        self.systemNameEqual = systemNameEqual

        # @var string
        self.systemNameIn = systemNameIn

        # @var VidiunNullableBoolean
        self.isSystemDefaultEqual = isSystemDefaultEqual

        # @var string
        self.tagsEqual = tagsEqual


    PROPERTY_LOADERS = {
        'systemNameEqual': getXmlNodeText, 
        'systemNameIn': getXmlNodeText, 
        'isSystemDefaultEqual': (VidiunEnumsFactory.createInt, "VidiunNullableBoolean"), 
        'tagsEqual': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunRelatedFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunAssetParamsBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunRelatedFilter.toParams(self)
        vparams.put("objectType", "VidiunAssetParamsBaseFilter")
        vparams.addStringIfDefined("systemNameEqual", self.systemNameEqual)
        vparams.addStringIfDefined("systemNameIn", self.systemNameIn)
        vparams.addIntEnumIfDefined("isSystemDefaultEqual", self.isSystemDefaultEqual)
        vparams.addStringIfDefined("tagsEqual", self.tagsEqual)
        return vparams

    def getSystemNameEqual(self):
        return self.systemNameEqual

    def setSystemNameEqual(self, newSystemNameEqual):
        self.systemNameEqual = newSystemNameEqual

    def getSystemNameIn(self):
        return self.systemNameIn

    def setSystemNameIn(self, newSystemNameIn):
        self.systemNameIn = newSystemNameIn

    def getIsSystemDefaultEqual(self):
        return self.isSystemDefaultEqual

    def setIsSystemDefaultEqual(self, newIsSystemDefaultEqual):
        self.isSystemDefaultEqual = newIsSystemDefaultEqual

    def getTagsEqual(self):
        return self.tagsEqual

    def setTagsEqual(self, newTagsEqual):
        self.tagsEqual = newTagsEqual


# @package Vidiun
# @subpackage Client
class VidiunAssetResource(VidiunContentResource):
    """Used to ingest media that is already ingested to Vidiun system as a different flavor asset in the past, the new created flavor asset will be ready immediately using a file sync of link type that will point to the existing file sync of the existing flavor asset."""

    def __init__(self,
            assetId=NotImplemented):
        VidiunContentResource.__init__(self)

        # ID of the source asset
        # @var string
        self.assetId = assetId


    PROPERTY_LOADERS = {
        'assetId': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunContentResource.fromXml(self, node)
        self.fromXmlImpl(node, VidiunAssetResource.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunContentResource.toParams(self)
        vparams.put("objectType", "VidiunAssetResource")
        vparams.addStringIfDefined("assetId", self.assetId)
        return vparams

    def getAssetId(self):
        return self.assetId

    def setAssetId(self, newAssetId):
        self.assetId = newAssetId


# @package Vidiun
# @subpackage Client
class VidiunBaseSyndicationFeedFilter(VidiunBaseSyndicationFeedBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented):
        VidiunBaseSyndicationFeedBaseFilter.__init__(self,
            orderBy,
            advancedSearch)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunBaseSyndicationFeedBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunBaseSyndicationFeedFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunBaseSyndicationFeedBaseFilter.toParams(self)
        vparams.put("objectType", "VidiunBaseSyndicationFeedFilter")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunBulkUploadFilter(VidiunBulkUploadBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            uploadedOnGreaterThanOrEqual=NotImplemented,
            uploadedOnLessThanOrEqual=NotImplemented,
            uploadedOnEqual=NotImplemented,
            statusIn=NotImplemented,
            statusEqual=NotImplemented,
            bulkUploadObjectTypeEqual=NotImplemented,
            bulkUploadObjectTypeIn=NotImplemented):
        VidiunBulkUploadBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            uploadedOnGreaterThanOrEqual,
            uploadedOnLessThanOrEqual,
            uploadedOnEqual,
            statusIn,
            statusEqual,
            bulkUploadObjectTypeEqual,
            bulkUploadObjectTypeIn)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunBulkUploadBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunBulkUploadFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunBulkUploadBaseFilter.toParams(self)
        vparams.put("objectType", "VidiunBulkUploadFilter")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunCategoryBaseFilter(VidiunRelatedFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            idNotIn=NotImplemented,
            parentIdEqual=NotImplemented,
            parentIdIn=NotImplemented,
            depthEqual=NotImplemented,
            fullNameEqual=NotImplemented,
            fullNameStartsWith=NotImplemented,
            fullNameIn=NotImplemented,
            fullIdsEqual=NotImplemented,
            fullIdsStartsWith=NotImplemented,
            fullIdsMatchOr=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            tagsLike=NotImplemented,
            tagsMultiLikeOr=NotImplemented,
            tagsMultiLikeAnd=NotImplemented,
            appearInListEqual=NotImplemented,
            privacyEqual=NotImplemented,
            privacyIn=NotImplemented,
            inheritanceTypeEqual=NotImplemented,
            inheritanceTypeIn=NotImplemented,
            referenceIdEqual=NotImplemented,
            referenceIdEmpty=NotImplemented,
            contributionPolicyEqual=NotImplemented,
            membersCountGreaterThanOrEqual=NotImplemented,
            membersCountLessThanOrEqual=NotImplemented,
            pendingMembersCountGreaterThanOrEqual=NotImplemented,
            pendingMembersCountLessThanOrEqual=NotImplemented,
            privacyContextEqual=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented,
            inheritedParentIdEqual=NotImplemented,
            inheritedParentIdIn=NotImplemented,
            partnerSortValueGreaterThanOrEqual=NotImplemented,
            partnerSortValueLessThanOrEqual=NotImplemented,
            aggregationCategoriesMultiLikeOr=NotImplemented,
            aggregationCategoriesMultiLikeAnd=NotImplemented):
        VidiunRelatedFilter.__init__(self,
            orderBy,
            advancedSearch)

        # @var int
        self.idEqual = idEqual

        # @var string
        self.idIn = idIn

        # @var string
        self.idNotIn = idNotIn

        # @var int
        self.parentIdEqual = parentIdEqual

        # @var string
        self.parentIdIn = parentIdIn

        # @var int
        self.depthEqual = depthEqual

        # @var string
        self.fullNameEqual = fullNameEqual

        # @var string
        self.fullNameStartsWith = fullNameStartsWith

        # @var string
        self.fullNameIn = fullNameIn

        # @var string
        self.fullIdsEqual = fullIdsEqual

        # @var string
        self.fullIdsStartsWith = fullIdsStartsWith

        # @var string
        self.fullIdsMatchOr = fullIdsMatchOr

        # @var int
        self.createdAtGreaterThanOrEqual = createdAtGreaterThanOrEqual

        # @var int
        self.createdAtLessThanOrEqual = createdAtLessThanOrEqual

        # @var int
        self.updatedAtGreaterThanOrEqual = updatedAtGreaterThanOrEqual

        # @var int
        self.updatedAtLessThanOrEqual = updatedAtLessThanOrEqual

        # @var string
        self.tagsLike = tagsLike

        # @var string
        self.tagsMultiLikeOr = tagsMultiLikeOr

        # @var string
        self.tagsMultiLikeAnd = tagsMultiLikeAnd

        # @var VidiunAppearInListType
        self.appearInListEqual = appearInListEqual

        # @var VidiunPrivacyType
        self.privacyEqual = privacyEqual

        # @var string
        self.privacyIn = privacyIn

        # @var VidiunInheritanceType
        self.inheritanceTypeEqual = inheritanceTypeEqual

        # @var string
        self.inheritanceTypeIn = inheritanceTypeIn

        # @var string
        self.referenceIdEqual = referenceIdEqual

        # @var VidiunNullableBoolean
        self.referenceIdEmpty = referenceIdEmpty

        # @var VidiunContributionPolicyType
        self.contributionPolicyEqual = contributionPolicyEqual

        # @var int
        self.membersCountGreaterThanOrEqual = membersCountGreaterThanOrEqual

        # @var int
        self.membersCountLessThanOrEqual = membersCountLessThanOrEqual

        # @var int
        self.pendingMembersCountGreaterThanOrEqual = pendingMembersCountGreaterThanOrEqual

        # @var int
        self.pendingMembersCountLessThanOrEqual = pendingMembersCountLessThanOrEqual

        # @var string
        self.privacyContextEqual = privacyContextEqual

        # @var VidiunCategoryStatus
        self.statusEqual = statusEqual

        # @var string
        self.statusIn = statusIn

        # @var int
        self.inheritedParentIdEqual = inheritedParentIdEqual

        # @var string
        self.inheritedParentIdIn = inheritedParentIdIn

        # @var int
        self.partnerSortValueGreaterThanOrEqual = partnerSortValueGreaterThanOrEqual

        # @var int
        self.partnerSortValueLessThanOrEqual = partnerSortValueLessThanOrEqual

        # @var string
        self.aggregationCategoriesMultiLikeOr = aggregationCategoriesMultiLikeOr

        # @var string
        self.aggregationCategoriesMultiLikeAnd = aggregationCategoriesMultiLikeAnd


    PROPERTY_LOADERS = {
        'idEqual': getXmlNodeInt, 
        'idIn': getXmlNodeText, 
        'idNotIn': getXmlNodeText, 
        'parentIdEqual': getXmlNodeInt, 
        'parentIdIn': getXmlNodeText, 
        'depthEqual': getXmlNodeInt, 
        'fullNameEqual': getXmlNodeText, 
        'fullNameStartsWith': getXmlNodeText, 
        'fullNameIn': getXmlNodeText, 
        'fullIdsEqual': getXmlNodeText, 
        'fullIdsStartsWith': getXmlNodeText, 
        'fullIdsMatchOr': getXmlNodeText, 
        'createdAtGreaterThanOrEqual': getXmlNodeInt, 
        'createdAtLessThanOrEqual': getXmlNodeInt, 
        'updatedAtGreaterThanOrEqual': getXmlNodeInt, 
        'updatedAtLessThanOrEqual': getXmlNodeInt, 
        'tagsLike': getXmlNodeText, 
        'tagsMultiLikeOr': getXmlNodeText, 
        'tagsMultiLikeAnd': getXmlNodeText, 
        'appearInListEqual': (VidiunEnumsFactory.createInt, "VidiunAppearInListType"), 
        'privacyEqual': (VidiunEnumsFactory.createInt, "VidiunPrivacyType"), 
        'privacyIn': getXmlNodeText, 
        'inheritanceTypeEqual': (VidiunEnumsFactory.createInt, "VidiunInheritanceType"), 
        'inheritanceTypeIn': getXmlNodeText, 
        'referenceIdEqual': getXmlNodeText, 
        'referenceIdEmpty': (VidiunEnumsFactory.createInt, "VidiunNullableBoolean"), 
        'contributionPolicyEqual': (VidiunEnumsFactory.createInt, "VidiunContributionPolicyType"), 
        'membersCountGreaterThanOrEqual': getXmlNodeInt, 
        'membersCountLessThanOrEqual': getXmlNodeInt, 
        'pendingMembersCountGreaterThanOrEqual': getXmlNodeInt, 
        'pendingMembersCountLessThanOrEqual': getXmlNodeInt, 
        'privacyContextEqual': getXmlNodeText, 
        'statusEqual': (VidiunEnumsFactory.createInt, "VidiunCategoryStatus"), 
        'statusIn': getXmlNodeText, 
        'inheritedParentIdEqual': getXmlNodeInt, 
        'inheritedParentIdIn': getXmlNodeText, 
        'partnerSortValueGreaterThanOrEqual': getXmlNodeInt, 
        'partnerSortValueLessThanOrEqual': getXmlNodeInt, 
        'aggregationCategoriesMultiLikeOr': getXmlNodeText, 
        'aggregationCategoriesMultiLikeAnd': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunRelatedFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunCategoryBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunRelatedFilter.toParams(self)
        vparams.put("objectType", "VidiunCategoryBaseFilter")
        vparams.addIntIfDefined("idEqual", self.idEqual)
        vparams.addStringIfDefined("idIn", self.idIn)
        vparams.addStringIfDefined("idNotIn", self.idNotIn)
        vparams.addIntIfDefined("parentIdEqual", self.parentIdEqual)
        vparams.addStringIfDefined("parentIdIn", self.parentIdIn)
        vparams.addIntIfDefined("depthEqual", self.depthEqual)
        vparams.addStringIfDefined("fullNameEqual", self.fullNameEqual)
        vparams.addStringIfDefined("fullNameStartsWith", self.fullNameStartsWith)
        vparams.addStringIfDefined("fullNameIn", self.fullNameIn)
        vparams.addStringIfDefined("fullIdsEqual", self.fullIdsEqual)
        vparams.addStringIfDefined("fullIdsStartsWith", self.fullIdsStartsWith)
        vparams.addStringIfDefined("fullIdsMatchOr", self.fullIdsMatchOr)
        vparams.addIntIfDefined("createdAtGreaterThanOrEqual", self.createdAtGreaterThanOrEqual)
        vparams.addIntIfDefined("createdAtLessThanOrEqual", self.createdAtLessThanOrEqual)
        vparams.addIntIfDefined("updatedAtGreaterThanOrEqual", self.updatedAtGreaterThanOrEqual)
        vparams.addIntIfDefined("updatedAtLessThanOrEqual", self.updatedAtLessThanOrEqual)
        vparams.addStringIfDefined("tagsLike", self.tagsLike)
        vparams.addStringIfDefined("tagsMultiLikeOr", self.tagsMultiLikeOr)
        vparams.addStringIfDefined("tagsMultiLikeAnd", self.tagsMultiLikeAnd)
        vparams.addIntEnumIfDefined("appearInListEqual", self.appearInListEqual)
        vparams.addIntEnumIfDefined("privacyEqual", self.privacyEqual)
        vparams.addStringIfDefined("privacyIn", self.privacyIn)
        vparams.addIntEnumIfDefined("inheritanceTypeEqual", self.inheritanceTypeEqual)
        vparams.addStringIfDefined("inheritanceTypeIn", self.inheritanceTypeIn)
        vparams.addStringIfDefined("referenceIdEqual", self.referenceIdEqual)
        vparams.addIntEnumIfDefined("referenceIdEmpty", self.referenceIdEmpty)
        vparams.addIntEnumIfDefined("contributionPolicyEqual", self.contributionPolicyEqual)
        vparams.addIntIfDefined("membersCountGreaterThanOrEqual", self.membersCountGreaterThanOrEqual)
        vparams.addIntIfDefined("membersCountLessThanOrEqual", self.membersCountLessThanOrEqual)
        vparams.addIntIfDefined("pendingMembersCountGreaterThanOrEqual", self.pendingMembersCountGreaterThanOrEqual)
        vparams.addIntIfDefined("pendingMembersCountLessThanOrEqual", self.pendingMembersCountLessThanOrEqual)
        vparams.addStringIfDefined("privacyContextEqual", self.privacyContextEqual)
        vparams.addIntEnumIfDefined("statusEqual", self.statusEqual)
        vparams.addStringIfDefined("statusIn", self.statusIn)
        vparams.addIntIfDefined("inheritedParentIdEqual", self.inheritedParentIdEqual)
        vparams.addStringIfDefined("inheritedParentIdIn", self.inheritedParentIdIn)
        vparams.addIntIfDefined("partnerSortValueGreaterThanOrEqual", self.partnerSortValueGreaterThanOrEqual)
        vparams.addIntIfDefined("partnerSortValueLessThanOrEqual", self.partnerSortValueLessThanOrEqual)
        vparams.addStringIfDefined("aggregationCategoriesMultiLikeOr", self.aggregationCategoriesMultiLikeOr)
        vparams.addStringIfDefined("aggregationCategoriesMultiLikeAnd", self.aggregationCategoriesMultiLikeAnd)
        return vparams

    def getIdEqual(self):
        return self.idEqual

    def setIdEqual(self, newIdEqual):
        self.idEqual = newIdEqual

    def getIdIn(self):
        return self.idIn

    def setIdIn(self, newIdIn):
        self.idIn = newIdIn

    def getIdNotIn(self):
        return self.idNotIn

    def setIdNotIn(self, newIdNotIn):
        self.idNotIn = newIdNotIn

    def getParentIdEqual(self):
        return self.parentIdEqual

    def setParentIdEqual(self, newParentIdEqual):
        self.parentIdEqual = newParentIdEqual

    def getParentIdIn(self):
        return self.parentIdIn

    def setParentIdIn(self, newParentIdIn):
        self.parentIdIn = newParentIdIn

    def getDepthEqual(self):
        return self.depthEqual

    def setDepthEqual(self, newDepthEqual):
        self.depthEqual = newDepthEqual

    def getFullNameEqual(self):
        return self.fullNameEqual

    def setFullNameEqual(self, newFullNameEqual):
        self.fullNameEqual = newFullNameEqual

    def getFullNameStartsWith(self):
        return self.fullNameStartsWith

    def setFullNameStartsWith(self, newFullNameStartsWith):
        self.fullNameStartsWith = newFullNameStartsWith

    def getFullNameIn(self):
        return self.fullNameIn

    def setFullNameIn(self, newFullNameIn):
        self.fullNameIn = newFullNameIn

    def getFullIdsEqual(self):
        return self.fullIdsEqual

    def setFullIdsEqual(self, newFullIdsEqual):
        self.fullIdsEqual = newFullIdsEqual

    def getFullIdsStartsWith(self):
        return self.fullIdsStartsWith

    def setFullIdsStartsWith(self, newFullIdsStartsWith):
        self.fullIdsStartsWith = newFullIdsStartsWith

    def getFullIdsMatchOr(self):
        return self.fullIdsMatchOr

    def setFullIdsMatchOr(self, newFullIdsMatchOr):
        self.fullIdsMatchOr = newFullIdsMatchOr

    def getCreatedAtGreaterThanOrEqual(self):
        return self.createdAtGreaterThanOrEqual

    def setCreatedAtGreaterThanOrEqual(self, newCreatedAtGreaterThanOrEqual):
        self.createdAtGreaterThanOrEqual = newCreatedAtGreaterThanOrEqual

    def getCreatedAtLessThanOrEqual(self):
        return self.createdAtLessThanOrEqual

    def setCreatedAtLessThanOrEqual(self, newCreatedAtLessThanOrEqual):
        self.createdAtLessThanOrEqual = newCreatedAtLessThanOrEqual

    def getUpdatedAtGreaterThanOrEqual(self):
        return self.updatedAtGreaterThanOrEqual

    def setUpdatedAtGreaterThanOrEqual(self, newUpdatedAtGreaterThanOrEqual):
        self.updatedAtGreaterThanOrEqual = newUpdatedAtGreaterThanOrEqual

    def getUpdatedAtLessThanOrEqual(self):
        return self.updatedAtLessThanOrEqual

    def setUpdatedAtLessThanOrEqual(self, newUpdatedAtLessThanOrEqual):
        self.updatedAtLessThanOrEqual = newUpdatedAtLessThanOrEqual

    def getTagsLike(self):
        return self.tagsLike

    def setTagsLike(self, newTagsLike):
        self.tagsLike = newTagsLike

    def getTagsMultiLikeOr(self):
        return self.tagsMultiLikeOr

    def setTagsMultiLikeOr(self, newTagsMultiLikeOr):
        self.tagsMultiLikeOr = newTagsMultiLikeOr

    def getTagsMultiLikeAnd(self):
        return self.tagsMultiLikeAnd

    def setTagsMultiLikeAnd(self, newTagsMultiLikeAnd):
        self.tagsMultiLikeAnd = newTagsMultiLikeAnd

    def getAppearInListEqual(self):
        return self.appearInListEqual

    def setAppearInListEqual(self, newAppearInListEqual):
        self.appearInListEqual = newAppearInListEqual

    def getPrivacyEqual(self):
        return self.privacyEqual

    def setPrivacyEqual(self, newPrivacyEqual):
        self.privacyEqual = newPrivacyEqual

    def getPrivacyIn(self):
        return self.privacyIn

    def setPrivacyIn(self, newPrivacyIn):
        self.privacyIn = newPrivacyIn

    def getInheritanceTypeEqual(self):
        return self.inheritanceTypeEqual

    def setInheritanceTypeEqual(self, newInheritanceTypeEqual):
        self.inheritanceTypeEqual = newInheritanceTypeEqual

    def getInheritanceTypeIn(self):
        return self.inheritanceTypeIn

    def setInheritanceTypeIn(self, newInheritanceTypeIn):
        self.inheritanceTypeIn = newInheritanceTypeIn

    def getReferenceIdEqual(self):
        return self.referenceIdEqual

    def setReferenceIdEqual(self, newReferenceIdEqual):
        self.referenceIdEqual = newReferenceIdEqual

    def getReferenceIdEmpty(self):
        return self.referenceIdEmpty

    def setReferenceIdEmpty(self, newReferenceIdEmpty):
        self.referenceIdEmpty = newReferenceIdEmpty

    def getContributionPolicyEqual(self):
        return self.contributionPolicyEqual

    def setContributionPolicyEqual(self, newContributionPolicyEqual):
        self.contributionPolicyEqual = newContributionPolicyEqual

    def getMembersCountGreaterThanOrEqual(self):
        return self.membersCountGreaterThanOrEqual

    def setMembersCountGreaterThanOrEqual(self, newMembersCountGreaterThanOrEqual):
        self.membersCountGreaterThanOrEqual = newMembersCountGreaterThanOrEqual

    def getMembersCountLessThanOrEqual(self):
        return self.membersCountLessThanOrEqual

    def setMembersCountLessThanOrEqual(self, newMembersCountLessThanOrEqual):
        self.membersCountLessThanOrEqual = newMembersCountLessThanOrEqual

    def getPendingMembersCountGreaterThanOrEqual(self):
        return self.pendingMembersCountGreaterThanOrEqual

    def setPendingMembersCountGreaterThanOrEqual(self, newPendingMembersCountGreaterThanOrEqual):
        self.pendingMembersCountGreaterThanOrEqual = newPendingMembersCountGreaterThanOrEqual

    def getPendingMembersCountLessThanOrEqual(self):
        return self.pendingMembersCountLessThanOrEqual

    def setPendingMembersCountLessThanOrEqual(self, newPendingMembersCountLessThanOrEqual):
        self.pendingMembersCountLessThanOrEqual = newPendingMembersCountLessThanOrEqual

    def getPrivacyContextEqual(self):
        return self.privacyContextEqual

    def setPrivacyContextEqual(self, newPrivacyContextEqual):
        self.privacyContextEqual = newPrivacyContextEqual

    def getStatusEqual(self):
        return self.statusEqual

    def setStatusEqual(self, newStatusEqual):
        self.statusEqual = newStatusEqual

    def getStatusIn(self):
        return self.statusIn

    def setStatusIn(self, newStatusIn):
        self.statusIn = newStatusIn

    def getInheritedParentIdEqual(self):
        return self.inheritedParentIdEqual

    def setInheritedParentIdEqual(self, newInheritedParentIdEqual):
        self.inheritedParentIdEqual = newInheritedParentIdEqual

    def getInheritedParentIdIn(self):
        return self.inheritedParentIdIn

    def setInheritedParentIdIn(self, newInheritedParentIdIn):
        self.inheritedParentIdIn = newInheritedParentIdIn

    def getPartnerSortValueGreaterThanOrEqual(self):
        return self.partnerSortValueGreaterThanOrEqual

    def setPartnerSortValueGreaterThanOrEqual(self, newPartnerSortValueGreaterThanOrEqual):
        self.partnerSortValueGreaterThanOrEqual = newPartnerSortValueGreaterThanOrEqual

    def getPartnerSortValueLessThanOrEqual(self):
        return self.partnerSortValueLessThanOrEqual

    def setPartnerSortValueLessThanOrEqual(self, newPartnerSortValueLessThanOrEqual):
        self.partnerSortValueLessThanOrEqual = newPartnerSortValueLessThanOrEqual

    def getAggregationCategoriesMultiLikeOr(self):
        return self.aggregationCategoriesMultiLikeOr

    def setAggregationCategoriesMultiLikeOr(self, newAggregationCategoriesMultiLikeOr):
        self.aggregationCategoriesMultiLikeOr = newAggregationCategoriesMultiLikeOr

    def getAggregationCategoriesMultiLikeAnd(self):
        return self.aggregationCategoriesMultiLikeAnd

    def setAggregationCategoriesMultiLikeAnd(self, newAggregationCategoriesMultiLikeAnd):
        self.aggregationCategoriesMultiLikeAnd = newAggregationCategoriesMultiLikeAnd


# @package Vidiun
# @subpackage Client
class VidiunCategoryEntryBaseFilter(VidiunRelatedFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            categoryIdEqual=NotImplemented,
            categoryIdIn=NotImplemented,
            entryIdEqual=NotImplemented,
            entryIdIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            categoryFullIdsStartsWith=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented):
        VidiunRelatedFilter.__init__(self,
            orderBy,
            advancedSearch)

        # @var int
        self.categoryIdEqual = categoryIdEqual

        # @var string
        self.categoryIdIn = categoryIdIn

        # @var string
        self.entryIdEqual = entryIdEqual

        # @var string
        self.entryIdIn = entryIdIn

        # @var int
        self.createdAtGreaterThanOrEqual = createdAtGreaterThanOrEqual

        # @var int
        self.createdAtLessThanOrEqual = createdAtLessThanOrEqual

        # @var string
        self.categoryFullIdsStartsWith = categoryFullIdsStartsWith

        # @var VidiunCategoryEntryStatus
        self.statusEqual = statusEqual

        # @var string
        self.statusIn = statusIn


    PROPERTY_LOADERS = {
        'categoryIdEqual': getXmlNodeInt, 
        'categoryIdIn': getXmlNodeText, 
        'entryIdEqual': getXmlNodeText, 
        'entryIdIn': getXmlNodeText, 
        'createdAtGreaterThanOrEqual': getXmlNodeInt, 
        'createdAtLessThanOrEqual': getXmlNodeInt, 
        'categoryFullIdsStartsWith': getXmlNodeText, 
        'statusEqual': (VidiunEnumsFactory.createInt, "VidiunCategoryEntryStatus"), 
        'statusIn': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunRelatedFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunCategoryEntryBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunRelatedFilter.toParams(self)
        vparams.put("objectType", "VidiunCategoryEntryBaseFilter")
        vparams.addIntIfDefined("categoryIdEqual", self.categoryIdEqual)
        vparams.addStringIfDefined("categoryIdIn", self.categoryIdIn)
        vparams.addStringIfDefined("entryIdEqual", self.entryIdEqual)
        vparams.addStringIfDefined("entryIdIn", self.entryIdIn)
        vparams.addIntIfDefined("createdAtGreaterThanOrEqual", self.createdAtGreaterThanOrEqual)
        vparams.addIntIfDefined("createdAtLessThanOrEqual", self.createdAtLessThanOrEqual)
        vparams.addStringIfDefined("categoryFullIdsStartsWith", self.categoryFullIdsStartsWith)
        vparams.addIntEnumIfDefined("statusEqual", self.statusEqual)
        vparams.addStringIfDefined("statusIn", self.statusIn)
        return vparams

    def getCategoryIdEqual(self):
        return self.categoryIdEqual

    def setCategoryIdEqual(self, newCategoryIdEqual):
        self.categoryIdEqual = newCategoryIdEqual

    def getCategoryIdIn(self):
        return self.categoryIdIn

    def setCategoryIdIn(self, newCategoryIdIn):
        self.categoryIdIn = newCategoryIdIn

    def getEntryIdEqual(self):
        return self.entryIdEqual

    def setEntryIdEqual(self, newEntryIdEqual):
        self.entryIdEqual = newEntryIdEqual

    def getEntryIdIn(self):
        return self.entryIdIn

    def setEntryIdIn(self, newEntryIdIn):
        self.entryIdIn = newEntryIdIn

    def getCreatedAtGreaterThanOrEqual(self):
        return self.createdAtGreaterThanOrEqual

    def setCreatedAtGreaterThanOrEqual(self, newCreatedAtGreaterThanOrEqual):
        self.createdAtGreaterThanOrEqual = newCreatedAtGreaterThanOrEqual

    def getCreatedAtLessThanOrEqual(self):
        return self.createdAtLessThanOrEqual

    def setCreatedAtLessThanOrEqual(self, newCreatedAtLessThanOrEqual):
        self.createdAtLessThanOrEqual = newCreatedAtLessThanOrEqual

    def getCategoryFullIdsStartsWith(self):
        return self.categoryFullIdsStartsWith

    def setCategoryFullIdsStartsWith(self, newCategoryFullIdsStartsWith):
        self.categoryFullIdsStartsWith = newCategoryFullIdsStartsWith

    def getStatusEqual(self):
        return self.statusEqual

    def setStatusEqual(self, newStatusEqual):
        self.statusEqual = newStatusEqual

    def getStatusIn(self):
        return self.statusIn

    def setStatusIn(self, newStatusIn):
        self.statusIn = newStatusIn


# @package Vidiun
# @subpackage Client
class VidiunControlPanelCommandFilter(VidiunControlPanelCommandBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            createdByIdEqual=NotImplemented,
            typeEqual=NotImplemented,
            typeIn=NotImplemented,
            targetTypeEqual=NotImplemented,
            targetTypeIn=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented):
        VidiunControlPanelCommandBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            createdByIdEqual,
            typeEqual,
            typeIn,
            targetTypeEqual,
            targetTypeIn,
            statusEqual,
            statusIn)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunControlPanelCommandBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunControlPanelCommandFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunControlPanelCommandBaseFilter.toParams(self)
        vparams.put("objectType", "VidiunControlPanelCommandFilter")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunConversionProfileAssetParamsBaseFilter(VidiunRelatedFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            conversionProfileIdEqual=NotImplemented,
            conversionProfileIdIn=NotImplemented,
            assetParamsIdEqual=NotImplemented,
            assetParamsIdIn=NotImplemented,
            readyBehaviorEqual=NotImplemented,
            readyBehaviorIn=NotImplemented,
            originEqual=NotImplemented,
            originIn=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented):
        VidiunRelatedFilter.__init__(self,
            orderBy,
            advancedSearch)

        # @var int
        self.conversionProfileIdEqual = conversionProfileIdEqual

        # @var string
        self.conversionProfileIdIn = conversionProfileIdIn

        # @var int
        self.assetParamsIdEqual = assetParamsIdEqual

        # @var string
        self.assetParamsIdIn = assetParamsIdIn

        # @var VidiunFlavorReadyBehaviorType
        self.readyBehaviorEqual = readyBehaviorEqual

        # @var string
        self.readyBehaviorIn = readyBehaviorIn

        # @var VidiunAssetParamsOrigin
        self.originEqual = originEqual

        # @var string
        self.originIn = originIn

        # @var string
        self.systemNameEqual = systemNameEqual

        # @var string
        self.systemNameIn = systemNameIn


    PROPERTY_LOADERS = {
        'conversionProfileIdEqual': getXmlNodeInt, 
        'conversionProfileIdIn': getXmlNodeText, 
        'assetParamsIdEqual': getXmlNodeInt, 
        'assetParamsIdIn': getXmlNodeText, 
        'readyBehaviorEqual': (VidiunEnumsFactory.createInt, "VidiunFlavorReadyBehaviorType"), 
        'readyBehaviorIn': getXmlNodeText, 
        'originEqual': (VidiunEnumsFactory.createInt, "VidiunAssetParamsOrigin"), 
        'originIn': getXmlNodeText, 
        'systemNameEqual': getXmlNodeText, 
        'systemNameIn': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunRelatedFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunConversionProfileAssetParamsBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunRelatedFilter.toParams(self)
        vparams.put("objectType", "VidiunConversionProfileAssetParamsBaseFilter")
        vparams.addIntIfDefined("conversionProfileIdEqual", self.conversionProfileIdEqual)
        vparams.addStringIfDefined("conversionProfileIdIn", self.conversionProfileIdIn)
        vparams.addIntIfDefined("assetParamsIdEqual", self.assetParamsIdEqual)
        vparams.addStringIfDefined("assetParamsIdIn", self.assetParamsIdIn)
        vparams.addIntEnumIfDefined("readyBehaviorEqual", self.readyBehaviorEqual)
        vparams.addStringIfDefined("readyBehaviorIn", self.readyBehaviorIn)
        vparams.addIntEnumIfDefined("originEqual", self.originEqual)
        vparams.addStringIfDefined("originIn", self.originIn)
        vparams.addStringIfDefined("systemNameEqual", self.systemNameEqual)
        vparams.addStringIfDefined("systemNameIn", self.systemNameIn)
        return vparams

    def getConversionProfileIdEqual(self):
        return self.conversionProfileIdEqual

    def setConversionProfileIdEqual(self, newConversionProfileIdEqual):
        self.conversionProfileIdEqual = newConversionProfileIdEqual

    def getConversionProfileIdIn(self):
        return self.conversionProfileIdIn

    def setConversionProfileIdIn(self, newConversionProfileIdIn):
        self.conversionProfileIdIn = newConversionProfileIdIn

    def getAssetParamsIdEqual(self):
        return self.assetParamsIdEqual

    def setAssetParamsIdEqual(self, newAssetParamsIdEqual):
        self.assetParamsIdEqual = newAssetParamsIdEqual

    def getAssetParamsIdIn(self):
        return self.assetParamsIdIn

    def setAssetParamsIdIn(self, newAssetParamsIdIn):
        self.assetParamsIdIn = newAssetParamsIdIn

    def getReadyBehaviorEqual(self):
        return self.readyBehaviorEqual

    def setReadyBehaviorEqual(self, newReadyBehaviorEqual):
        self.readyBehaviorEqual = newReadyBehaviorEqual

    def getReadyBehaviorIn(self):
        return self.readyBehaviorIn

    def setReadyBehaviorIn(self, newReadyBehaviorIn):
        self.readyBehaviorIn = newReadyBehaviorIn

    def getOriginEqual(self):
        return self.originEqual

    def setOriginEqual(self, newOriginEqual):
        self.originEqual = newOriginEqual

    def getOriginIn(self):
        return self.originIn

    def setOriginIn(self, newOriginIn):
        self.originIn = newOriginIn

    def getSystemNameEqual(self):
        return self.systemNameEqual

    def setSystemNameEqual(self, newSystemNameEqual):
        self.systemNameEqual = newSystemNameEqual

    def getSystemNameIn(self):
        return self.systemNameIn

    def setSystemNameIn(self, newSystemNameIn):
        self.systemNameIn = newSystemNameIn


# @package Vidiun
# @subpackage Client
class VidiunConversionProfileBaseFilter(VidiunRelatedFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented,
            typeEqual=NotImplemented,
            typeIn=NotImplemented,
            nameEqual=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            tagsMultiLikeOr=NotImplemented,
            tagsMultiLikeAnd=NotImplemented,
            defaultEntryIdEqual=NotImplemented,
            defaultEntryIdIn=NotImplemented):
        VidiunRelatedFilter.__init__(self,
            orderBy,
            advancedSearch)

        # @var int
        self.idEqual = idEqual

        # @var string
        self.idIn = idIn

        # @var VidiunConversionProfileStatus
        self.statusEqual = statusEqual

        # @var string
        self.statusIn = statusIn

        # @var VidiunConversionProfileType
        self.typeEqual = typeEqual

        # @var string
        self.typeIn = typeIn

        # @var string
        self.nameEqual = nameEqual

        # @var string
        self.systemNameEqual = systemNameEqual

        # @var string
        self.systemNameIn = systemNameIn

        # @var string
        self.tagsMultiLikeOr = tagsMultiLikeOr

        # @var string
        self.tagsMultiLikeAnd = tagsMultiLikeAnd

        # @var string
        self.defaultEntryIdEqual = defaultEntryIdEqual

        # @var string
        self.defaultEntryIdIn = defaultEntryIdIn


    PROPERTY_LOADERS = {
        'idEqual': getXmlNodeInt, 
        'idIn': getXmlNodeText, 
        'statusEqual': (VidiunEnumsFactory.createString, "VidiunConversionProfileStatus"), 
        'statusIn': getXmlNodeText, 
        'typeEqual': (VidiunEnumsFactory.createString, "VidiunConversionProfileType"), 
        'typeIn': getXmlNodeText, 
        'nameEqual': getXmlNodeText, 
        'systemNameEqual': getXmlNodeText, 
        'systemNameIn': getXmlNodeText, 
        'tagsMultiLikeOr': getXmlNodeText, 
        'tagsMultiLikeAnd': getXmlNodeText, 
        'defaultEntryIdEqual': getXmlNodeText, 
        'defaultEntryIdIn': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunRelatedFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunConversionProfileBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunRelatedFilter.toParams(self)
        vparams.put("objectType", "VidiunConversionProfileBaseFilter")
        vparams.addIntIfDefined("idEqual", self.idEqual)
        vparams.addStringIfDefined("idIn", self.idIn)
        vparams.addStringEnumIfDefined("statusEqual", self.statusEqual)
        vparams.addStringIfDefined("statusIn", self.statusIn)
        vparams.addStringEnumIfDefined("typeEqual", self.typeEqual)
        vparams.addStringIfDefined("typeIn", self.typeIn)
        vparams.addStringIfDefined("nameEqual", self.nameEqual)
        vparams.addStringIfDefined("systemNameEqual", self.systemNameEqual)
        vparams.addStringIfDefined("systemNameIn", self.systemNameIn)
        vparams.addStringIfDefined("tagsMultiLikeOr", self.tagsMultiLikeOr)
        vparams.addStringIfDefined("tagsMultiLikeAnd", self.tagsMultiLikeAnd)
        vparams.addStringIfDefined("defaultEntryIdEqual", self.defaultEntryIdEqual)
        vparams.addStringIfDefined("defaultEntryIdIn", self.defaultEntryIdIn)
        return vparams

    def getIdEqual(self):
        return self.idEqual

    def setIdEqual(self, newIdEqual):
        self.idEqual = newIdEqual

    def getIdIn(self):
        return self.idIn

    def setIdIn(self, newIdIn):
        self.idIn = newIdIn

    def getStatusEqual(self):
        return self.statusEqual

    def setStatusEqual(self, newStatusEqual):
        self.statusEqual = newStatusEqual

    def getStatusIn(self):
        return self.statusIn

    def setStatusIn(self, newStatusIn):
        self.statusIn = newStatusIn

    def getTypeEqual(self):
        return self.typeEqual

    def setTypeEqual(self, newTypeEqual):
        self.typeEqual = newTypeEqual

    def getTypeIn(self):
        return self.typeIn

    def setTypeIn(self, newTypeIn):
        self.typeIn = newTypeIn

    def getNameEqual(self):
        return self.nameEqual

    def setNameEqual(self, newNameEqual):
        self.nameEqual = newNameEqual

    def getSystemNameEqual(self):
        return self.systemNameEqual

    def setSystemNameEqual(self, newSystemNameEqual):
        self.systemNameEqual = newSystemNameEqual

    def getSystemNameIn(self):
        return self.systemNameIn

    def setSystemNameIn(self, newSystemNameIn):
        self.systemNameIn = newSystemNameIn

    def getTagsMultiLikeOr(self):
        return self.tagsMultiLikeOr

    def setTagsMultiLikeOr(self, newTagsMultiLikeOr):
        self.tagsMultiLikeOr = newTagsMultiLikeOr

    def getTagsMultiLikeAnd(self):
        return self.tagsMultiLikeAnd

    def setTagsMultiLikeAnd(self, newTagsMultiLikeAnd):
        self.tagsMultiLikeAnd = newTagsMultiLikeAnd

    def getDefaultEntryIdEqual(self):
        return self.defaultEntryIdEqual

    def setDefaultEntryIdEqual(self, newDefaultEntryIdEqual):
        self.defaultEntryIdEqual = newDefaultEntryIdEqual

    def getDefaultEntryIdIn(self):
        return self.defaultEntryIdIn

    def setDefaultEntryIdIn(self, newDefaultEntryIdIn):
        self.defaultEntryIdIn = newDefaultEntryIdIn


# @package Vidiun
# @subpackage Client
class VidiunConvertCollectionJobData(VidiunConvartableJobData):
    def __init__(self,
            srcFileSyncLocalPath=NotImplemented,
            actualSrcFileSyncLocalPath=NotImplemented,
            srcFileSyncRemoteUrl=NotImplemented,
            srcFileSyncs=NotImplemented,
            engineVersion=NotImplemented,
            flavorParamsOutputId=NotImplemented,
            flavorParamsOutput=NotImplemented,
            mediaInfoId=NotImplemented,
            currentOperationSet=NotImplemented,
            currentOperationIndex=NotImplemented,
            pluginData=NotImplemented,
            destDirLocalPath=NotImplemented,
            destDirRemoteUrl=NotImplemented,
            destFileName=NotImplemented,
            inputXmlLocalPath=NotImplemented,
            inputXmlRemoteUrl=NotImplemented,
            commandLinesStr=NotImplemented,
            flavors=NotImplemented):
        VidiunConvartableJobData.__init__(self,
            srcFileSyncLocalPath,
            actualSrcFileSyncLocalPath,
            srcFileSyncRemoteUrl,
            srcFileSyncs,
            engineVersion,
            flavorParamsOutputId,
            flavorParamsOutput,
            mediaInfoId,
            currentOperationSet,
            currentOperationIndex,
            pluginData)

        # @var string
        self.destDirLocalPath = destDirLocalPath

        # @var string
        self.destDirRemoteUrl = destDirRemoteUrl

        # @var string
        self.destFileName = destFileName

        # @var string
        self.inputXmlLocalPath = inputXmlLocalPath

        # @var string
        self.inputXmlRemoteUrl = inputXmlRemoteUrl

        # @var string
        self.commandLinesStr = commandLinesStr

        # @var array of VidiunConvertCollectionFlavorData
        self.flavors = flavors


    PROPERTY_LOADERS = {
        'destDirLocalPath': getXmlNodeText, 
        'destDirRemoteUrl': getXmlNodeText, 
        'destFileName': getXmlNodeText, 
        'inputXmlLocalPath': getXmlNodeText, 
        'inputXmlRemoteUrl': getXmlNodeText, 
        'commandLinesStr': getXmlNodeText, 
        'flavors': (VidiunObjectFactory.createArray, VidiunConvertCollectionFlavorData), 
    }

    def fromXml(self, node):
        VidiunConvartableJobData.fromXml(self, node)
        self.fromXmlImpl(node, VidiunConvertCollectionJobData.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunConvartableJobData.toParams(self)
        vparams.put("objectType", "VidiunConvertCollectionJobData")
        vparams.addStringIfDefined("destDirLocalPath", self.destDirLocalPath)
        vparams.addStringIfDefined("destDirRemoteUrl", self.destDirRemoteUrl)
        vparams.addStringIfDefined("destFileName", self.destFileName)
        vparams.addStringIfDefined("inputXmlLocalPath", self.inputXmlLocalPath)
        vparams.addStringIfDefined("inputXmlRemoteUrl", self.inputXmlRemoteUrl)
        vparams.addStringIfDefined("commandLinesStr", self.commandLinesStr)
        vparams.addArrayIfDefined("flavors", self.flavors)
        return vparams

    def getDestDirLocalPath(self):
        return self.destDirLocalPath

    def setDestDirLocalPath(self, newDestDirLocalPath):
        self.destDirLocalPath = newDestDirLocalPath

    def getDestDirRemoteUrl(self):
        return self.destDirRemoteUrl

    def setDestDirRemoteUrl(self, newDestDirRemoteUrl):
        self.destDirRemoteUrl = newDestDirRemoteUrl

    def getDestFileName(self):
        return self.destFileName

    def setDestFileName(self, newDestFileName):
        self.destFileName = newDestFileName

    def getInputXmlLocalPath(self):
        return self.inputXmlLocalPath

    def setInputXmlLocalPath(self, newInputXmlLocalPath):
        self.inputXmlLocalPath = newInputXmlLocalPath

    def getInputXmlRemoteUrl(self):
        return self.inputXmlRemoteUrl

    def setInputXmlRemoteUrl(self, newInputXmlRemoteUrl):
        self.inputXmlRemoteUrl = newInputXmlRemoteUrl

    def getCommandLinesStr(self):
        return self.commandLinesStr

    def setCommandLinesStr(self, newCommandLinesStr):
        self.commandLinesStr = newCommandLinesStr

    def getFlavors(self):
        return self.flavors

    def setFlavors(self, newFlavors):
        self.flavors = newFlavors


# @package Vidiun
# @subpackage Client
class VidiunConvertJobData(VidiunConvartableJobData):
    def __init__(self,
            srcFileSyncLocalPath=NotImplemented,
            actualSrcFileSyncLocalPath=NotImplemented,
            srcFileSyncRemoteUrl=NotImplemented,
            srcFileSyncs=NotImplemented,
            engineVersion=NotImplemented,
            flavorParamsOutputId=NotImplemented,
            flavorParamsOutput=NotImplemented,
            mediaInfoId=NotImplemented,
            currentOperationSet=NotImplemented,
            currentOperationIndex=NotImplemented,
            pluginData=NotImplemented,
            destFileSyncLocalPath=NotImplemented,
            destFileSyncRemoteUrl=NotImplemented,
            logFileSyncLocalPath=NotImplemented,
            logFileSyncRemoteUrl=NotImplemented,
            flavorAssetId=NotImplemented,
            remoteMediaId=NotImplemented,
            customData=NotImplemented,
            extraDestFileSyncs=NotImplemented,
            engineMessage=NotImplemented):
        VidiunConvartableJobData.__init__(self,
            srcFileSyncLocalPath,
            actualSrcFileSyncLocalPath,
            srcFileSyncRemoteUrl,
            srcFileSyncs,
            engineVersion,
            flavorParamsOutputId,
            flavorParamsOutput,
            mediaInfoId,
            currentOperationSet,
            currentOperationIndex,
            pluginData)

        # @var string
        self.destFileSyncLocalPath = destFileSyncLocalPath

        # @var string
        self.destFileSyncRemoteUrl = destFileSyncRemoteUrl

        # @var string
        self.logFileSyncLocalPath = logFileSyncLocalPath

        # @var string
        self.logFileSyncRemoteUrl = logFileSyncRemoteUrl

        # @var string
        self.flavorAssetId = flavorAssetId

        # @var string
        self.remoteMediaId = remoteMediaId

        # @var string
        self.customData = customData

        # @var array of VidiunDestFileSyncDescriptor
        self.extraDestFileSyncs = extraDestFileSyncs

        # @var string
        self.engineMessage = engineMessage


    PROPERTY_LOADERS = {
        'destFileSyncLocalPath': getXmlNodeText, 
        'destFileSyncRemoteUrl': getXmlNodeText, 
        'logFileSyncLocalPath': getXmlNodeText, 
        'logFileSyncRemoteUrl': getXmlNodeText, 
        'flavorAssetId': getXmlNodeText, 
        'remoteMediaId': getXmlNodeText, 
        'customData': getXmlNodeText, 
        'extraDestFileSyncs': (VidiunObjectFactory.createArray, VidiunDestFileSyncDescriptor), 
        'engineMessage': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunConvartableJobData.fromXml(self, node)
        self.fromXmlImpl(node, VidiunConvertJobData.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunConvartableJobData.toParams(self)
        vparams.put("objectType", "VidiunConvertJobData")
        vparams.addStringIfDefined("destFileSyncLocalPath", self.destFileSyncLocalPath)
        vparams.addStringIfDefined("destFileSyncRemoteUrl", self.destFileSyncRemoteUrl)
        vparams.addStringIfDefined("logFileSyncLocalPath", self.logFileSyncLocalPath)
        vparams.addStringIfDefined("logFileSyncRemoteUrl", self.logFileSyncRemoteUrl)
        vparams.addStringIfDefined("flavorAssetId", self.flavorAssetId)
        vparams.addStringIfDefined("remoteMediaId", self.remoteMediaId)
        vparams.addStringIfDefined("customData", self.customData)
        vparams.addArrayIfDefined("extraDestFileSyncs", self.extraDestFileSyncs)
        vparams.addStringIfDefined("engineMessage", self.engineMessage)
        return vparams

    def getDestFileSyncLocalPath(self):
        return self.destFileSyncLocalPath

    def setDestFileSyncLocalPath(self, newDestFileSyncLocalPath):
        self.destFileSyncLocalPath = newDestFileSyncLocalPath

    def getDestFileSyncRemoteUrl(self):
        return self.destFileSyncRemoteUrl

    def setDestFileSyncRemoteUrl(self, newDestFileSyncRemoteUrl):
        self.destFileSyncRemoteUrl = newDestFileSyncRemoteUrl

    def getLogFileSyncLocalPath(self):
        return self.logFileSyncLocalPath

    def setLogFileSyncLocalPath(self, newLogFileSyncLocalPath):
        self.logFileSyncLocalPath = newLogFileSyncLocalPath

    def getLogFileSyncRemoteUrl(self):
        return self.logFileSyncRemoteUrl

    def setLogFileSyncRemoteUrl(self, newLogFileSyncRemoteUrl):
        self.logFileSyncRemoteUrl = newLogFileSyncRemoteUrl

    def getFlavorAssetId(self):
        return self.flavorAssetId

    def setFlavorAssetId(self, newFlavorAssetId):
        self.flavorAssetId = newFlavorAssetId

    def getRemoteMediaId(self):
        return self.remoteMediaId

    def setRemoteMediaId(self, newRemoteMediaId):
        self.remoteMediaId = newRemoteMediaId

    def getCustomData(self):
        return self.customData

    def setCustomData(self, newCustomData):
        self.customData = newCustomData

    def getExtraDestFileSyncs(self):
        return self.extraDestFileSyncs

    def setExtraDestFileSyncs(self, newExtraDestFileSyncs):
        self.extraDestFileSyncs = newExtraDestFileSyncs

    def getEngineMessage(self):
        return self.engineMessage

    def setEngineMessage(self, newEngineMessage):
        self.engineMessage = newEngineMessage


# @package Vidiun
# @subpackage Client
class VidiunCountryCondition(VidiunMatchCondition):
    def __init__(self,
            type=NotImplemented,
            description=NotImplemented,
            not_=NotImplemented,
            values=NotImplemented,
            geoCoderType=NotImplemented):
        VidiunMatchCondition.__init__(self,
            type,
            description,
            not_,
            values)

        # The ip geo coder engine to be used
        # @var VidiunGeoCoderType
        self.geoCoderType = geoCoderType


    PROPERTY_LOADERS = {
        'geoCoderType': (VidiunEnumsFactory.createString, "VidiunGeoCoderType"), 
    }

    def fromXml(self, node):
        VidiunMatchCondition.fromXml(self, node)
        self.fromXmlImpl(node, VidiunCountryCondition.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunMatchCondition.toParams(self)
        vparams.put("objectType", "VidiunCountryCondition")
        vparams.addStringEnumIfDefined("geoCoderType", self.geoCoderType)
        return vparams

    def getGeoCoderType(self):
        return self.geoCoderType

    def setGeoCoderType(self, newGeoCoderType):
        self.geoCoderType = newGeoCoderType


# @package Vidiun
# @subpackage Client
class VidiunDeliveryProfileFilter(VidiunDeliveryProfileBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            streamerTypeEqual=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented):
        VidiunDeliveryProfileBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            partnerIdEqual,
            partnerIdIn,
            systemNameEqual,
            systemNameIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            streamerTypeEqual,
            statusEqual,
            statusIn)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunDeliveryProfileBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunDeliveryProfileFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunDeliveryProfileBaseFilter.toParams(self)
        vparams.put("objectType", "VidiunDeliveryProfileFilter")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunDeliveryProfileGenericRtmp(VidiunDeliveryProfileRtmp):
    def __init__(self,
            id=NotImplemented,
            partnerId=NotImplemented,
            name=NotImplemented,
            type=NotImplemented,
            systemName=NotImplemented,
            description=NotImplemented,
            createdAt=NotImplemented,
            updatedAt=NotImplemented,
            streamerType=NotImplemented,
            url=NotImplemented,
            hostName=NotImplemented,
            status=NotImplemented,
            recognizer=NotImplemented,
            tokenizer=NotImplemented,
            isDefault=NotImplemented,
            parentId=NotImplemented,
            mediaProtocols=NotImplemented,
            priority=NotImplemented,
            extraParams=NotImplemented,
            enforceRtmpe=NotImplemented,
            prefix=NotImplemented,
            pattern=NotImplemented,
            rendererClass=NotImplemented):
        VidiunDeliveryProfileRtmp.__init__(self,
            id,
            partnerId,
            name,
            type,
            systemName,
            description,
            createdAt,
            updatedAt,
            streamerType,
            url,
            hostName,
            status,
            recognizer,
            tokenizer,
            isDefault,
            parentId,
            mediaProtocols,
            priority,
            extraParams,
            enforceRtmpe,
            prefix)

        # @var string
        self.pattern = pattern

        # rendererClass
        # @var string
        self.rendererClass = rendererClass


    PROPERTY_LOADERS = {
        'pattern': getXmlNodeText, 
        'rendererClass': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunDeliveryProfileRtmp.fromXml(self, node)
        self.fromXmlImpl(node, VidiunDeliveryProfileGenericRtmp.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunDeliveryProfileRtmp.toParams(self)
        vparams.put("objectType", "VidiunDeliveryProfileGenericRtmp")
        vparams.addStringIfDefined("pattern", self.pattern)
        vparams.addStringIfDefined("rendererClass", self.rendererClass)
        return vparams

    def getPattern(self):
        return self.pattern

    def setPattern(self, newPattern):
        self.pattern = newPattern

    def getRendererClass(self):
        return self.rendererClass

    def setRendererClass(self, newRendererClass):
        self.rendererClass = newRendererClass


# @package Vidiun
# @subpackage Client
class VidiunEdgeServerNode(VidiunDeliveryServerNode):
    def __init__(self,
            id=NotImplemented,
            partnerId=NotImplemented,
            createdAt=NotImplemented,
            updatedAt=NotImplemented,
            heartbeatTime=NotImplemented,
            name=NotImplemented,
            systemName=NotImplemented,
            description=NotImplemented,
            hostName=NotImplemented,
            status=NotImplemented,
            type=NotImplemented,
            tags=NotImplemented,
            dc=NotImplemented,
            parentId=NotImplemented,
            playbackDomain=NotImplemented,
            deliveryProfileIds=NotImplemented,
            config=NotImplemented):
        VidiunDeliveryServerNode.__init__(self,
            id,
            partnerId,
            createdAt,
            updatedAt,
            heartbeatTime,
            name,
            systemName,
            description,
            hostName,
            status,
            type,
            tags,
            dc,
            parentId,
            playbackDomain)

        # Delivery profile ids
        # @var array of VidiunKeyValue
        self.deliveryProfileIds = deliveryProfileIds

        # Overdie edge server default configuration - json format
        # @var string
        self.config = config


    PROPERTY_LOADERS = {
        'deliveryProfileIds': (VidiunObjectFactory.createArray, VidiunKeyValue), 
        'config': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunDeliveryServerNode.fromXml(self, node)
        self.fromXmlImpl(node, VidiunEdgeServerNode.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunDeliveryServerNode.toParams(self)
        vparams.put("objectType", "VidiunEdgeServerNode")
        vparams.addArrayIfDefined("deliveryProfileIds", self.deliveryProfileIds)
        vparams.addStringIfDefined("config", self.config)
        return vparams

    def getDeliveryProfileIds(self):
        return self.deliveryProfileIds

    def setDeliveryProfileIds(self, newDeliveryProfileIds):
        self.deliveryProfileIds = newDeliveryProfileIds

    def getConfig(self):
        return self.config

    def setConfig(self, newConfig):
        self.config = newConfig


# @package Vidiun
# @subpackage Client
class VidiunEndUserReportInputFilter(VidiunReportInputFilter):
    def __init__(self,
            fromDate=NotImplemented,
            toDate=NotImplemented,
            fromDay=NotImplemented,
            toDay=NotImplemented,
            keywords=NotImplemented,
            searchInTags=NotImplemented,
            searchInAdminTags=NotImplemented,
            categories=NotImplemented,
            timeZoneOffset=NotImplemented,
            interval=NotImplemented,
            application=NotImplemented,
            userIds=NotImplemented,
            playbackContext=NotImplemented,
            ancestorPlaybackContext=NotImplemented):
        VidiunReportInputFilter.__init__(self,
            fromDate,
            toDate,
            fromDay,
            toDay,
            keywords,
            searchInTags,
            searchInAdminTags,
            categories,
            timeZoneOffset,
            interval)

        # @var string
        self.application = application

        # @var string
        self.userIds = userIds

        # @var string
        self.playbackContext = playbackContext

        # @var string
        self.ancestorPlaybackContext = ancestorPlaybackContext


    PROPERTY_LOADERS = {
        'application': getXmlNodeText, 
        'userIds': getXmlNodeText, 
        'playbackContext': getXmlNodeText, 
        'ancestorPlaybackContext': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunReportInputFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunEndUserReportInputFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunReportInputFilter.toParams(self)
        vparams.put("objectType", "VidiunEndUserReportInputFilter")
        vparams.addStringIfDefined("application", self.application)
        vparams.addStringIfDefined("userIds", self.userIds)
        vparams.addStringIfDefined("playbackContext", self.playbackContext)
        vparams.addStringIfDefined("ancestorPlaybackContext", self.ancestorPlaybackContext)
        return vparams

    def getApplication(self):
        return self.application

    def setApplication(self, newApplication):
        self.application = newApplication

    def getUserIds(self):
        return self.userIds

    def setUserIds(self, newUserIds):
        self.userIds = newUserIds

    def getPlaybackContext(self):
        return self.playbackContext

    def setPlaybackContext(self, newPlaybackContext):
        self.playbackContext = newPlaybackContext

    def getAncestorPlaybackContext(self):
        return self.ancestorPlaybackContext

    def setAncestorPlaybackContext(self, newAncestorPlaybackContext):
        self.ancestorPlaybackContext = newAncestorPlaybackContext


# @package Vidiun
# @subpackage Client
class VidiunEntryReferrerLiveStats(VidiunEntryLiveStats):
    def __init__(self,
            audience=NotImplemented,
            dvrAudience=NotImplemented,
            avgBitrate=NotImplemented,
            bufferTime=NotImplemented,
            plays=NotImplemented,
            secondsViewed=NotImplemented,
            startEvent=NotImplemented,
            timestamp=NotImplemented,
            entryId=NotImplemented,
            peakAudience=NotImplemented,
            peakDvrAudience=NotImplemented,
            referrer=NotImplemented):
        VidiunEntryLiveStats.__init__(self,
            audience,
            dvrAudience,
            avgBitrate,
            bufferTime,
            plays,
            secondsViewed,
            startEvent,
            timestamp,
            entryId,
            peakAudience,
            peakDvrAudience)

        # @var string
        self.referrer = referrer


    PROPERTY_LOADERS = {
        'referrer': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunEntryLiveStats.fromXml(self, node)
        self.fromXmlImpl(node, VidiunEntryReferrerLiveStats.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunEntryLiveStats.toParams(self)
        vparams.put("objectType", "VidiunEntryReferrerLiveStats")
        vparams.addStringIfDefined("referrer", self.referrer)
        return vparams

    def getReferrer(self):
        return self.referrer

    def setReferrer(self, newReferrer):
        self.referrer = newReferrer


# @package Vidiun
# @subpackage Client
class VidiunEntryResource(VidiunContentResource):
    """Used to ingest media that is already ingested to Vidiun system as a different entry in the past, the new created flavor asset will be ready immediately using a file sync of link type that will point to the existing file sync of the existing entry."""

    def __init__(self,
            entryId=NotImplemented,
            flavorParamsId=NotImplemented):
        VidiunContentResource.__init__(self)

        # ID of the source entry
        # @var string
        self.entryId = entryId

        # ID of the source flavor params, set to null to use the source flavor
        # @var int
        self.flavorParamsId = flavorParamsId


    PROPERTY_LOADERS = {
        'entryId': getXmlNodeText, 
        'flavorParamsId': getXmlNodeInt, 
    }

    def fromXml(self, node):
        VidiunContentResource.fromXml(self, node)
        self.fromXmlImpl(node, VidiunEntryResource.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunContentResource.toParams(self)
        vparams.put("objectType", "VidiunEntryResource")
        vparams.addStringIfDefined("entryId", self.entryId)
        vparams.addIntIfDefined("flavorParamsId", self.flavorParamsId)
        return vparams

    def getEntryId(self):
        return self.entryId

    def setEntryId(self, newEntryId):
        self.entryId = newEntryId

    def getFlavorParamsId(self):
        return self.flavorParamsId

    def setFlavorParamsId(self, newFlavorParamsId):
        self.flavorParamsId = newFlavorParamsId


# @package Vidiun
# @subpackage Client
class VidiunEntryServerNodeBaseFilter(VidiunRelatedFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            entryIdEqual=NotImplemented,
            entryIdIn=NotImplemented,
            serverNodeIdEqual=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented,
            serverTypeEqual=NotImplemented):
        VidiunRelatedFilter.__init__(self,
            orderBy,
            advancedSearch)

        # @var string
        self.entryIdEqual = entryIdEqual

        # @var string
        self.entryIdIn = entryIdIn

        # @var int
        self.serverNodeIdEqual = serverNodeIdEqual

        # @var int
        self.createdAtGreaterThanOrEqual = createdAtGreaterThanOrEqual

        # @var int
        self.createdAtLessThanOrEqual = createdAtLessThanOrEqual

        # @var int
        self.updatedAtGreaterThanOrEqual = updatedAtGreaterThanOrEqual

        # @var int
        self.updatedAtLessThanOrEqual = updatedAtLessThanOrEqual

        # @var VidiunEntryServerNodeStatus
        self.statusEqual = statusEqual

        # @var string
        self.statusIn = statusIn

        # @var VidiunEntryServerNodeType
        self.serverTypeEqual = serverTypeEqual


    PROPERTY_LOADERS = {
        'entryIdEqual': getXmlNodeText, 
        'entryIdIn': getXmlNodeText, 
        'serverNodeIdEqual': getXmlNodeInt, 
        'createdAtGreaterThanOrEqual': getXmlNodeInt, 
        'createdAtLessThanOrEqual': getXmlNodeInt, 
        'updatedAtGreaterThanOrEqual': getXmlNodeInt, 
        'updatedAtLessThanOrEqual': getXmlNodeInt, 
        'statusEqual': (VidiunEnumsFactory.createInt, "VidiunEntryServerNodeStatus"), 
        'statusIn': getXmlNodeText, 
        'serverTypeEqual': (VidiunEnumsFactory.createString, "VidiunEntryServerNodeType"), 
    }

    def fromXml(self, node):
        VidiunRelatedFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunEntryServerNodeBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunRelatedFilter.toParams(self)
        vparams.put("objectType", "VidiunEntryServerNodeBaseFilter")
        vparams.addStringIfDefined("entryIdEqual", self.entryIdEqual)
        vparams.addStringIfDefined("entryIdIn", self.entryIdIn)
        vparams.addIntIfDefined("serverNodeIdEqual", self.serverNodeIdEqual)
        vparams.addIntIfDefined("createdAtGreaterThanOrEqual", self.createdAtGreaterThanOrEqual)
        vparams.addIntIfDefined("createdAtLessThanOrEqual", self.createdAtLessThanOrEqual)
        vparams.addIntIfDefined("updatedAtGreaterThanOrEqual", self.updatedAtGreaterThanOrEqual)
        vparams.addIntIfDefined("updatedAtLessThanOrEqual", self.updatedAtLessThanOrEqual)
        vparams.addIntEnumIfDefined("statusEqual", self.statusEqual)
        vparams.addStringIfDefined("statusIn", self.statusIn)
        vparams.addStringEnumIfDefined("serverTypeEqual", self.serverTypeEqual)
        return vparams

    def getEntryIdEqual(self):
        return self.entryIdEqual

    def setEntryIdEqual(self, newEntryIdEqual):
        self.entryIdEqual = newEntryIdEqual

    def getEntryIdIn(self):
        return self.entryIdIn

    def setEntryIdIn(self, newEntryIdIn):
        self.entryIdIn = newEntryIdIn

    def getServerNodeIdEqual(self):
        return self.serverNodeIdEqual

    def setServerNodeIdEqual(self, newServerNodeIdEqual):
        self.serverNodeIdEqual = newServerNodeIdEqual

    def getCreatedAtGreaterThanOrEqual(self):
        return self.createdAtGreaterThanOrEqual

    def setCreatedAtGreaterThanOrEqual(self, newCreatedAtGreaterThanOrEqual):
        self.createdAtGreaterThanOrEqual = newCreatedAtGreaterThanOrEqual

    def getCreatedAtLessThanOrEqual(self):
        return self.createdAtLessThanOrEqual

    def setCreatedAtLessThanOrEqual(self, newCreatedAtLessThanOrEqual):
        self.createdAtLessThanOrEqual = newCreatedAtLessThanOrEqual

    def getUpdatedAtGreaterThanOrEqual(self):
        return self.updatedAtGreaterThanOrEqual

    def setUpdatedAtGreaterThanOrEqual(self, newUpdatedAtGreaterThanOrEqual):
        self.updatedAtGreaterThanOrEqual = newUpdatedAtGreaterThanOrEqual

    def getUpdatedAtLessThanOrEqual(self):
        return self.updatedAtLessThanOrEqual

    def setUpdatedAtLessThanOrEqual(self, newUpdatedAtLessThanOrEqual):
        self.updatedAtLessThanOrEqual = newUpdatedAtLessThanOrEqual

    def getStatusEqual(self):
        return self.statusEqual

    def setStatusEqual(self, newStatusEqual):
        self.statusEqual = newStatusEqual

    def getStatusIn(self):
        return self.statusIn

    def setStatusIn(self, newStatusIn):
        self.statusIn = newStatusIn

    def getServerTypeEqual(self):
        return self.serverTypeEqual

    def setServerTypeEqual(self, newServerTypeEqual):
        self.serverTypeEqual = newServerTypeEqual


# @package Vidiun
# @subpackage Client
class VidiunExtractMediaJobData(VidiunConvartableJobData):
    def __init__(self,
            srcFileSyncLocalPath=NotImplemented,
            actualSrcFileSyncLocalPath=NotImplemented,
            srcFileSyncRemoteUrl=NotImplemented,
            srcFileSyncs=NotImplemented,
            engineVersion=NotImplemented,
            flavorParamsOutputId=NotImplemented,
            flavorParamsOutput=NotImplemented,
            mediaInfoId=NotImplemented,
            currentOperationSet=NotImplemented,
            currentOperationIndex=NotImplemented,
            pluginData=NotImplemented,
            flavorAssetId=NotImplemented):
        VidiunConvartableJobData.__init__(self,
            srcFileSyncLocalPath,
            actualSrcFileSyncLocalPath,
            srcFileSyncRemoteUrl,
            srcFileSyncs,
            engineVersion,
            flavorParamsOutputId,
            flavorParamsOutput,
            mediaInfoId,
            currentOperationSet,
            currentOperationIndex,
            pluginData)

        # @var string
        self.flavorAssetId = flavorAssetId


    PROPERTY_LOADERS = {
        'flavorAssetId': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunConvartableJobData.fromXml(self, node)
        self.fromXmlImpl(node, VidiunExtractMediaJobData.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunConvartableJobData.toParams(self)
        vparams.put("objectType", "VidiunExtractMediaJobData")
        vparams.addStringIfDefined("flavorAssetId", self.flavorAssetId)
        return vparams

    def getFlavorAssetId(self):
        return self.flavorAssetId

    def setFlavorAssetId(self, newFlavorAssetId):
        self.flavorAssetId = newFlavorAssetId


# @package Vidiun
# @subpackage Client
class VidiunIntegerField(VidiunIntegerValue):
    """An int representation to return evaluated dynamic value"""

    def __init__(self,
            description=NotImplemented,
            value=NotImplemented):
        VidiunIntegerValue.__init__(self,
            description,
            value)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunIntegerValue.fromXml(self, node)
        self.fromXmlImpl(node, VidiunIntegerField.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunIntegerValue.toParams(self)
        vparams.put("objectType", "VidiunIntegerField")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunFieldCompareCondition(VidiunCompareCondition):
    def __init__(self,
            type=NotImplemented,
            description=NotImplemented,
            not_=NotImplemented,
            value=NotImplemented,
            comparison=NotImplemented,
            field=NotImplemented):
        VidiunCompareCondition.__init__(self,
            type,
            description,
            not_,
            value,
            comparison)

        # Field to evaluate
        # @var VidiunIntegerField
        self.field = field


    PROPERTY_LOADERS = {
        'field': (VidiunObjectFactory.create, VidiunIntegerField), 
    }

    def fromXml(self, node):
        VidiunCompareCondition.fromXml(self, node)
        self.fromXmlImpl(node, VidiunFieldCompareCondition.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunCompareCondition.toParams(self)
        vparams.put("objectType", "VidiunFieldCompareCondition")
        vparams.addObjectIfDefined("field", self.field)
        return vparams

    def getField(self):
        return self.field

    def setField(self, newField):
        self.field = newField


# @package Vidiun
# @subpackage Client
class VidiunStringField(VidiunStringValue):
    """A string representation to return evaluated dynamic value"""

    def __init__(self,
            description=NotImplemented,
            value=NotImplemented):
        VidiunStringValue.__init__(self,
            description,
            value)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunStringValue.fromXml(self, node)
        self.fromXmlImpl(node, VidiunStringField.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunStringValue.toParams(self)
        vparams.put("objectType", "VidiunStringField")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunFieldMatchCondition(VidiunMatchCondition):
    def __init__(self,
            type=NotImplemented,
            description=NotImplemented,
            not_=NotImplemented,
            values=NotImplemented,
            field=NotImplemented):
        VidiunMatchCondition.__init__(self,
            type,
            description,
            not_,
            values)

        # Field to evaluate
        # @var VidiunStringField
        self.field = field


    PROPERTY_LOADERS = {
        'field': (VidiunObjectFactory.create, VidiunStringField), 
    }

    def fromXml(self, node):
        VidiunMatchCondition.fromXml(self, node)
        self.fromXmlImpl(node, VidiunFieldMatchCondition.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunMatchCondition.toParams(self)
        vparams.put("objectType", "VidiunFieldMatchCondition")
        vparams.addObjectIfDefined("field", self.field)
        return vparams

    def getField(self):
        return self.field

    def setField(self, newField):
        self.field = newField


# @package Vidiun
# @subpackage Client
class VidiunFileAssetBaseFilter(VidiunRelatedFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            partnerIdEqual=NotImplemented,
            fileAssetObjectTypeEqual=NotImplemented,
            objectIdEqual=NotImplemented,
            objectIdIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented):
        VidiunRelatedFilter.__init__(self,
            orderBy,
            advancedSearch)

        # @var int
        self.idEqual = idEqual

        # @var string
        self.idIn = idIn

        # @var int
        self.partnerIdEqual = partnerIdEqual

        # @var VidiunFileAssetObjectType
        self.fileAssetObjectTypeEqual = fileAssetObjectTypeEqual

        # @var string
        self.objectIdEqual = objectIdEqual

        # @var string
        self.objectIdIn = objectIdIn

        # @var int
        self.createdAtGreaterThanOrEqual = createdAtGreaterThanOrEqual

        # @var int
        self.createdAtLessThanOrEqual = createdAtLessThanOrEqual

        # @var int
        self.updatedAtGreaterThanOrEqual = updatedAtGreaterThanOrEqual

        # @var int
        self.updatedAtLessThanOrEqual = updatedAtLessThanOrEqual

        # @var VidiunFileAssetStatus
        self.statusEqual = statusEqual

        # @var string
        self.statusIn = statusIn


    PROPERTY_LOADERS = {
        'idEqual': getXmlNodeInt, 
        'idIn': getXmlNodeText, 
        'partnerIdEqual': getXmlNodeInt, 
        'fileAssetObjectTypeEqual': (VidiunEnumsFactory.createString, "VidiunFileAssetObjectType"), 
        'objectIdEqual': getXmlNodeText, 
        'objectIdIn': getXmlNodeText, 
        'createdAtGreaterThanOrEqual': getXmlNodeInt, 
        'createdAtLessThanOrEqual': getXmlNodeInt, 
        'updatedAtGreaterThanOrEqual': getXmlNodeInt, 
        'updatedAtLessThanOrEqual': getXmlNodeInt, 
        'statusEqual': (VidiunEnumsFactory.createString, "VidiunFileAssetStatus"), 
        'statusIn': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunRelatedFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunFileAssetBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunRelatedFilter.toParams(self)
        vparams.put("objectType", "VidiunFileAssetBaseFilter")
        vparams.addIntIfDefined("idEqual", self.idEqual)
        vparams.addStringIfDefined("idIn", self.idIn)
        vparams.addIntIfDefined("partnerIdEqual", self.partnerIdEqual)
        vparams.addStringEnumIfDefined("fileAssetObjectTypeEqual", self.fileAssetObjectTypeEqual)
        vparams.addStringIfDefined("objectIdEqual", self.objectIdEqual)
        vparams.addStringIfDefined("objectIdIn", self.objectIdIn)
        vparams.addIntIfDefined("createdAtGreaterThanOrEqual", self.createdAtGreaterThanOrEqual)
        vparams.addIntIfDefined("createdAtLessThanOrEqual", self.createdAtLessThanOrEqual)
        vparams.addIntIfDefined("updatedAtGreaterThanOrEqual", self.updatedAtGreaterThanOrEqual)
        vparams.addIntIfDefined("updatedAtLessThanOrEqual", self.updatedAtLessThanOrEqual)
        vparams.addStringEnumIfDefined("statusEqual", self.statusEqual)
        vparams.addStringIfDefined("statusIn", self.statusIn)
        return vparams

    def getIdEqual(self):
        return self.idEqual

    def setIdEqual(self, newIdEqual):
        self.idEqual = newIdEqual

    def getIdIn(self):
        return self.idIn

    def setIdIn(self, newIdIn):
        self.idIn = newIdIn

    def getPartnerIdEqual(self):
        return self.partnerIdEqual

    def setPartnerIdEqual(self, newPartnerIdEqual):
        self.partnerIdEqual = newPartnerIdEqual

    def getFileAssetObjectTypeEqual(self):
        return self.fileAssetObjectTypeEqual

    def setFileAssetObjectTypeEqual(self, newFileAssetObjectTypeEqual):
        self.fileAssetObjectTypeEqual = newFileAssetObjectTypeEqual

    def getObjectIdEqual(self):
        return self.objectIdEqual

    def setObjectIdEqual(self, newObjectIdEqual):
        self.objectIdEqual = newObjectIdEqual

    def getObjectIdIn(self):
        return self.objectIdIn

    def setObjectIdIn(self, newObjectIdIn):
        self.objectIdIn = newObjectIdIn

    def getCreatedAtGreaterThanOrEqual(self):
        return self.createdAtGreaterThanOrEqual

    def setCreatedAtGreaterThanOrEqual(self, newCreatedAtGreaterThanOrEqual):
        self.createdAtGreaterThanOrEqual = newCreatedAtGreaterThanOrEqual

    def getCreatedAtLessThanOrEqual(self):
        return self.createdAtLessThanOrEqual

    def setCreatedAtLessThanOrEqual(self, newCreatedAtLessThanOrEqual):
        self.createdAtLessThanOrEqual = newCreatedAtLessThanOrEqual

    def getUpdatedAtGreaterThanOrEqual(self):
        return self.updatedAtGreaterThanOrEqual

    def setUpdatedAtGreaterThanOrEqual(self, newUpdatedAtGreaterThanOrEqual):
        self.updatedAtGreaterThanOrEqual = newUpdatedAtGreaterThanOrEqual

    def getUpdatedAtLessThanOrEqual(self):
        return self.updatedAtLessThanOrEqual

    def setUpdatedAtLessThanOrEqual(self, newUpdatedAtLessThanOrEqual):
        self.updatedAtLessThanOrEqual = newUpdatedAtLessThanOrEqual

    def getStatusEqual(self):
        return self.statusEqual

    def setStatusEqual(self, newStatusEqual):
        self.statusEqual = newStatusEqual

    def getStatusIn(self):
        return self.statusIn

    def setStatusIn(self, newStatusIn):
        self.statusIn = newStatusIn


# @package Vidiun
# @subpackage Client
class VidiunFileSyncResource(VidiunContentResource):
    """Used to ingest media that is already ingested to Vidiun system as a different file in the past, the new created flavor asset will be ready immediately using a file sync of link type that will point to the existing file sync."""

    def __init__(self,
            fileSyncObjectType=NotImplemented,
            objectSubType=NotImplemented,
            objectId=NotImplemented,
            version=NotImplemented):
        VidiunContentResource.__init__(self)

        # The object type of the file sync object
        # @var int
        self.fileSyncObjectType = fileSyncObjectType

        # The object sub-type of the file sync object
        # @var int
        self.objectSubType = objectSubType

        # The object id of the file sync object
        # @var string
        self.objectId = objectId

        # The version of the file sync object
        # @var string
        self.version = version


    PROPERTY_LOADERS = {
        'fileSyncObjectType': getXmlNodeInt, 
        'objectSubType': getXmlNodeInt, 
        'objectId': getXmlNodeText, 
        'version': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunContentResource.fromXml(self, node)
        self.fromXmlImpl(node, VidiunFileSyncResource.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunContentResource.toParams(self)
        vparams.put("objectType", "VidiunFileSyncResource")
        vparams.addIntIfDefined("fileSyncObjectType", self.fileSyncObjectType)
        vparams.addIntIfDefined("objectSubType", self.objectSubType)
        vparams.addStringIfDefined("objectId", self.objectId)
        vparams.addStringIfDefined("version", self.version)
        return vparams

    def getFileSyncObjectType(self):
        return self.fileSyncObjectType

    def setFileSyncObjectType(self, newFileSyncObjectType):
        self.fileSyncObjectType = newFileSyncObjectType

    def getObjectSubType(self):
        return self.objectSubType

    def setObjectSubType(self, newObjectSubType):
        self.objectSubType = newObjectSubType

    def getObjectId(self):
        return self.objectId

    def setObjectId(self, newObjectId):
        self.objectId = newObjectId

    def getVersion(self):
        return self.version

    def setVersion(self, newVersion):
        self.version = newVersion


# @package Vidiun
# @subpackage Client
class VidiunGenericXsltSyndicationFeed(VidiunGenericSyndicationFeed):
    def __init__(self,
            id=NotImplemented,
            feedUrl=NotImplemented,
            partnerId=NotImplemented,
            playlistId=NotImplemented,
            name=NotImplemented,
            status=NotImplemented,
            type=NotImplemented,
            landingPage=NotImplemented,
            createdAt=NotImplemented,
            allowEmbed=NotImplemented,
            playerUiconfId=NotImplemented,
            flavorParamId=NotImplemented,
            transcodeExistingContent=NotImplemented,
            addToDefaultConversionProfile=NotImplemented,
            categories=NotImplemented,
            storageId=NotImplemented,
            entriesOrderBy=NotImplemented,
            enforceEntitlement=NotImplemented,
            privacyContext=NotImplemented,
            updatedAt=NotImplemented,
            useCategoryEntries=NotImplemented,
            feedDescription=NotImplemented,
            feedLandingPage=NotImplemented,
            xslt=NotImplemented,
            itemXpathsToExtend=NotImplemented):
        VidiunGenericSyndicationFeed.__init__(self,
            id,
            feedUrl,
            partnerId,
            playlistId,
            name,
            status,
            type,
            landingPage,
            createdAt,
            allowEmbed,
            playerUiconfId,
            flavorParamId,
            transcodeExistingContent,
            addToDefaultConversionProfile,
            categories,
            storageId,
            entriesOrderBy,
            enforceEntitlement,
            privacyContext,
            updatedAt,
            useCategoryEntries,
            feedDescription,
            feedLandingPage)

        # @var string
        self.xslt = xslt

        # @var array of VidiunExtendingItemMrssParameter
        self.itemXpathsToExtend = itemXpathsToExtend


    PROPERTY_LOADERS = {
        'xslt': getXmlNodeText, 
        'itemXpathsToExtend': (VidiunObjectFactory.createArray, VidiunExtendingItemMrssParameter), 
    }

    def fromXml(self, node):
        VidiunGenericSyndicationFeed.fromXml(self, node)
        self.fromXmlImpl(node, VidiunGenericXsltSyndicationFeed.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunGenericSyndicationFeed.toParams(self)
        vparams.put("objectType", "VidiunGenericXsltSyndicationFeed")
        vparams.addStringIfDefined("xslt", self.xslt)
        vparams.addArrayIfDefined("itemXpathsToExtend", self.itemXpathsToExtend)
        return vparams

    def getXslt(self):
        return self.xslt

    def setXslt(self, newXslt):
        self.xslt = newXslt

    def getItemXpathsToExtend(self):
        return self.itemXpathsToExtend

    def setItemXpathsToExtend(self, newItemXpathsToExtend):
        self.itemXpathsToExtend = newItemXpathsToExtend


# @package Vidiun
# @subpackage Client
class VidiunGeoDistanceCondition(VidiunMatchCondition):
    def __init__(self,
            type=NotImplemented,
            description=NotImplemented,
            not_=NotImplemented,
            values=NotImplemented,
            geoCoderType=NotImplemented):
        VidiunMatchCondition.__init__(self,
            type,
            description,
            not_,
            values)

        # The ip geo coder engine to be used
        # @var VidiunGeoCoderType
        self.geoCoderType = geoCoderType


    PROPERTY_LOADERS = {
        'geoCoderType': (VidiunEnumsFactory.createString, "VidiunGeoCoderType"), 
    }

    def fromXml(self, node):
        VidiunMatchCondition.fromXml(self, node)
        self.fromXmlImpl(node, VidiunGeoDistanceCondition.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunMatchCondition.toParams(self)
        vparams.put("objectType", "VidiunGeoDistanceCondition")
        vparams.addStringEnumIfDefined("geoCoderType", self.geoCoderType)
        return vparams

    def getGeoCoderType(self):
        return self.geoCoderType

    def setGeoCoderType(self, newGeoCoderType):
        self.geoCoderType = newGeoCoderType


# @package Vidiun
# @subpackage Client
class VidiunGeoTimeLiveStats(VidiunEntryLiveStats):
    def __init__(self,
            audience=NotImplemented,
            dvrAudience=NotImplemented,
            avgBitrate=NotImplemented,
            bufferTime=NotImplemented,
            plays=NotImplemented,
            secondsViewed=NotImplemented,
            startEvent=NotImplemented,
            timestamp=NotImplemented,
            entryId=NotImplemented,
            peakAudience=NotImplemented,
            peakDvrAudience=NotImplemented,
            city=NotImplemented,
            country=NotImplemented):
        VidiunEntryLiveStats.__init__(self,
            audience,
            dvrAudience,
            avgBitrate,
            bufferTime,
            plays,
            secondsViewed,
            startEvent,
            timestamp,
            entryId,
            peakAudience,
            peakDvrAudience)

        # @var VidiunCoordinate
        self.city = city

        # @var VidiunCoordinate
        self.country = country


    PROPERTY_LOADERS = {
        'city': (VidiunObjectFactory.create, VidiunCoordinate), 
        'country': (VidiunObjectFactory.create, VidiunCoordinate), 
    }

    def fromXml(self, node):
        VidiunEntryLiveStats.fromXml(self, node)
        self.fromXmlImpl(node, VidiunGeoTimeLiveStats.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunEntryLiveStats.toParams(self)
        vparams.put("objectType", "VidiunGeoTimeLiveStats")
        vparams.addObjectIfDefined("city", self.city)
        vparams.addObjectIfDefined("country", self.country)
        return vparams

    def getCity(self):
        return self.city

    def setCity(self, newCity):
        self.city = newCity

    def getCountry(self):
        return self.country

    def setCountry(self, newCountry):
        self.country = newCountry


# @package Vidiun
# @subpackage Client
class VidiunGroupUserBaseFilter(VidiunRelatedFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            userIdEqual=NotImplemented,
            userIdIn=NotImplemented,
            groupIdEqual=NotImplemented,
            groupIdIn=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented):
        VidiunRelatedFilter.__init__(self,
            orderBy,
            advancedSearch)

        # @var string
        self.userIdEqual = userIdEqual

        # @var string
        self.userIdIn = userIdIn

        # @var string
        self.groupIdEqual = groupIdEqual

        # @var string
        self.groupIdIn = groupIdIn

        # @var VidiunGroupUserStatus
        self.statusEqual = statusEqual

        # @var string
        self.statusIn = statusIn

        # @var int
        self.createdAtGreaterThanOrEqual = createdAtGreaterThanOrEqual

        # @var int
        self.createdAtLessThanOrEqual = createdAtLessThanOrEqual

        # @var int
        self.updatedAtGreaterThanOrEqual = updatedAtGreaterThanOrEqual

        # @var int
        self.updatedAtLessThanOrEqual = updatedAtLessThanOrEqual


    PROPERTY_LOADERS = {
        'userIdEqual': getXmlNodeText, 
        'userIdIn': getXmlNodeText, 
        'groupIdEqual': getXmlNodeText, 
        'groupIdIn': getXmlNodeText, 
        'statusEqual': (VidiunEnumsFactory.createInt, "VidiunGroupUserStatus"), 
        'statusIn': getXmlNodeText, 
        'createdAtGreaterThanOrEqual': getXmlNodeInt, 
        'createdAtLessThanOrEqual': getXmlNodeInt, 
        'updatedAtGreaterThanOrEqual': getXmlNodeInt, 
        'updatedAtLessThanOrEqual': getXmlNodeInt, 
    }

    def fromXml(self, node):
        VidiunRelatedFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunGroupUserBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunRelatedFilter.toParams(self)
        vparams.put("objectType", "VidiunGroupUserBaseFilter")
        vparams.addStringIfDefined("userIdEqual", self.userIdEqual)
        vparams.addStringIfDefined("userIdIn", self.userIdIn)
        vparams.addStringIfDefined("groupIdEqual", self.groupIdEqual)
        vparams.addStringIfDefined("groupIdIn", self.groupIdIn)
        vparams.addIntEnumIfDefined("statusEqual", self.statusEqual)
        vparams.addStringIfDefined("statusIn", self.statusIn)
        vparams.addIntIfDefined("createdAtGreaterThanOrEqual", self.createdAtGreaterThanOrEqual)
        vparams.addIntIfDefined("createdAtLessThanOrEqual", self.createdAtLessThanOrEqual)
        vparams.addIntIfDefined("updatedAtGreaterThanOrEqual", self.updatedAtGreaterThanOrEqual)
        vparams.addIntIfDefined("updatedAtLessThanOrEqual", self.updatedAtLessThanOrEqual)
        return vparams

    def getUserIdEqual(self):
        return self.userIdEqual

    def setUserIdEqual(self, newUserIdEqual):
        self.userIdEqual = newUserIdEqual

    def getUserIdIn(self):
        return self.userIdIn

    def setUserIdIn(self, newUserIdIn):
        self.userIdIn = newUserIdIn

    def getGroupIdEqual(self):
        return self.groupIdEqual

    def setGroupIdEqual(self, newGroupIdEqual):
        self.groupIdEqual = newGroupIdEqual

    def getGroupIdIn(self):
        return self.groupIdIn

    def setGroupIdIn(self, newGroupIdIn):
        self.groupIdIn = newGroupIdIn

    def getStatusEqual(self):
        return self.statusEqual

    def setStatusEqual(self, newStatusEqual):
        self.statusEqual = newStatusEqual

    def getStatusIn(self):
        return self.statusIn

    def setStatusIn(self, newStatusIn):
        self.statusIn = newStatusIn

    def getCreatedAtGreaterThanOrEqual(self):
        return self.createdAtGreaterThanOrEqual

    def setCreatedAtGreaterThanOrEqual(self, newCreatedAtGreaterThanOrEqual):
        self.createdAtGreaterThanOrEqual = newCreatedAtGreaterThanOrEqual

    def getCreatedAtLessThanOrEqual(self):
        return self.createdAtLessThanOrEqual

    def setCreatedAtLessThanOrEqual(self, newCreatedAtLessThanOrEqual):
        self.createdAtLessThanOrEqual = newCreatedAtLessThanOrEqual

    def getUpdatedAtGreaterThanOrEqual(self):
        return self.updatedAtGreaterThanOrEqual

    def setUpdatedAtGreaterThanOrEqual(self, newUpdatedAtGreaterThanOrEqual):
        self.updatedAtGreaterThanOrEqual = newUpdatedAtGreaterThanOrEqual

    def getUpdatedAtLessThanOrEqual(self):
        return self.updatedAtLessThanOrEqual

    def setUpdatedAtLessThanOrEqual(self, newUpdatedAtLessThanOrEqual):
        self.updatedAtLessThanOrEqual = newUpdatedAtLessThanOrEqual


# @package Vidiun
# @subpackage Client
class VidiunIpAddressCondition(VidiunMatchCondition):
    def __init__(self,
            type=NotImplemented,
            description=NotImplemented,
            not_=NotImplemented,
            values=NotImplemented,
            acceptInternalIps=NotImplemented,
            httpHeader=NotImplemented):
        VidiunMatchCondition.__init__(self,
            type,
            description,
            not_,
            values)

        # allow internal ips
        # @var bool
        self.acceptInternalIps = acceptInternalIps

        # http header name for extracting the ip
        # @var string
        self.httpHeader = httpHeader


    PROPERTY_LOADERS = {
        'acceptInternalIps': getXmlNodeBool, 
        'httpHeader': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunMatchCondition.fromXml(self, node)
        self.fromXmlImpl(node, VidiunIpAddressCondition.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunMatchCondition.toParams(self)
        vparams.put("objectType", "VidiunIpAddressCondition")
        vparams.addBoolIfDefined("acceptInternalIps", self.acceptInternalIps)
        vparams.addStringIfDefined("httpHeader", self.httpHeader)
        return vparams

    def getAcceptInternalIps(self):
        return self.acceptInternalIps

    def setAcceptInternalIps(self, newAcceptInternalIps):
        self.acceptInternalIps = newAcceptInternalIps

    def getHttpHeader(self):
        return self.httpHeader

    def setHttpHeader(self, newHttpHeader):
        self.httpHeader = newHttpHeader


# @package Vidiun
# @subpackage Client
class VidiunLiveAsset(VidiunFlavorAsset):
    def __init__(self,
            id=NotImplemented,
            entryId=NotImplemented,
            partnerId=NotImplemented,
            version=NotImplemented,
            size=NotImplemented,
            tags=NotImplemented,
            fileExt=NotImplemented,
            createdAt=NotImplemented,
            updatedAt=NotImplemented,
            deletedAt=NotImplemented,
            description=NotImplemented,
            partnerData=NotImplemented,
            partnerDescription=NotImplemented,
            actualSourceAssetParamsIds=NotImplemented,
            flavorParamsId=NotImplemented,
            width=NotImplemented,
            height=NotImplemented,
            bitrate=NotImplemented,
            frameRate=NotImplemented,
            isOriginal=NotImplemented,
            isWeb=NotImplemented,
            containerFormat=NotImplemented,
            videoCodecId=NotImplemented,
            status=NotImplemented,
            language=NotImplemented,
            multicastIP=NotImplemented,
            multicastPort=NotImplemented):
        VidiunFlavorAsset.__init__(self,
            id,
            entryId,
            partnerId,
            version,
            size,
            tags,
            fileExt,
            createdAt,
            updatedAt,
            deletedAt,
            description,
            partnerData,
            partnerDescription,
            actualSourceAssetParamsIds,
            flavorParamsId,
            width,
            height,
            bitrate,
            frameRate,
            isOriginal,
            isWeb,
            containerFormat,
            videoCodecId,
            status,
            language)

        # @var string
        self.multicastIP = multicastIP

        # @var int
        self.multicastPort = multicastPort


    PROPERTY_LOADERS = {
        'multicastIP': getXmlNodeText, 
        'multicastPort': getXmlNodeInt, 
    }

    def fromXml(self, node):
        VidiunFlavorAsset.fromXml(self, node)
        self.fromXmlImpl(node, VidiunLiveAsset.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunFlavorAsset.toParams(self)
        vparams.put("objectType", "VidiunLiveAsset")
        vparams.addStringIfDefined("multicastIP", self.multicastIP)
        vparams.addIntIfDefined("multicastPort", self.multicastPort)
        return vparams

    def getMulticastIP(self):
        return self.multicastIP

    def setMulticastIP(self, newMulticastIP):
        self.multicastIP = newMulticastIP

    def getMulticastPort(self):
        return self.multicastPort

    def setMulticastPort(self, newMulticastPort):
        self.multicastPort = newMulticastPort


# @package Vidiun
# @subpackage Client
class VidiunLiveChannelSegmentBaseFilter(VidiunRelatedFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented,
            channelIdEqual=NotImplemented,
            channelIdIn=NotImplemented,
            startTimeGreaterThanOrEqual=NotImplemented,
            startTimeLessThanOrEqual=NotImplemented):
        VidiunRelatedFilter.__init__(self,
            orderBy,
            advancedSearch)

        # @var int
        self.createdAtGreaterThanOrEqual = createdAtGreaterThanOrEqual

        # @var int
        self.createdAtLessThanOrEqual = createdAtLessThanOrEqual

        # @var int
        self.updatedAtGreaterThanOrEqual = updatedAtGreaterThanOrEqual

        # @var int
        self.updatedAtLessThanOrEqual = updatedAtLessThanOrEqual

        # @var VidiunLiveChannelSegmentStatus
        self.statusEqual = statusEqual

        # @var string
        self.statusIn = statusIn

        # @var string
        self.channelIdEqual = channelIdEqual

        # @var string
        self.channelIdIn = channelIdIn

        # @var float
        self.startTimeGreaterThanOrEqual = startTimeGreaterThanOrEqual

        # @var float
        self.startTimeLessThanOrEqual = startTimeLessThanOrEqual


    PROPERTY_LOADERS = {
        'createdAtGreaterThanOrEqual': getXmlNodeInt, 
        'createdAtLessThanOrEqual': getXmlNodeInt, 
        'updatedAtGreaterThanOrEqual': getXmlNodeInt, 
        'updatedAtLessThanOrEqual': getXmlNodeInt, 
        'statusEqual': (VidiunEnumsFactory.createString, "VidiunLiveChannelSegmentStatus"), 
        'statusIn': getXmlNodeText, 
        'channelIdEqual': getXmlNodeText, 
        'channelIdIn': getXmlNodeText, 
        'startTimeGreaterThanOrEqual': getXmlNodeFloat, 
        'startTimeLessThanOrEqual': getXmlNodeFloat, 
    }

    def fromXml(self, node):
        VidiunRelatedFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunLiveChannelSegmentBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunRelatedFilter.toParams(self)
        vparams.put("objectType", "VidiunLiveChannelSegmentBaseFilter")
        vparams.addIntIfDefined("createdAtGreaterThanOrEqual", self.createdAtGreaterThanOrEqual)
        vparams.addIntIfDefined("createdAtLessThanOrEqual", self.createdAtLessThanOrEqual)
        vparams.addIntIfDefined("updatedAtGreaterThanOrEqual", self.updatedAtGreaterThanOrEqual)
        vparams.addIntIfDefined("updatedAtLessThanOrEqual", self.updatedAtLessThanOrEqual)
        vparams.addStringEnumIfDefined("statusEqual", self.statusEqual)
        vparams.addStringIfDefined("statusIn", self.statusIn)
        vparams.addStringIfDefined("channelIdEqual", self.channelIdEqual)
        vparams.addStringIfDefined("channelIdIn", self.channelIdIn)
        vparams.addFloatIfDefined("startTimeGreaterThanOrEqual", self.startTimeGreaterThanOrEqual)
        vparams.addFloatIfDefined("startTimeLessThanOrEqual", self.startTimeLessThanOrEqual)
        return vparams

    def getCreatedAtGreaterThanOrEqual(self):
        return self.createdAtGreaterThanOrEqual

    def setCreatedAtGreaterThanOrEqual(self, newCreatedAtGreaterThanOrEqual):
        self.createdAtGreaterThanOrEqual = newCreatedAtGreaterThanOrEqual

    def getCreatedAtLessThanOrEqual(self):
        return self.createdAtLessThanOrEqual

    def setCreatedAtLessThanOrEqual(self, newCreatedAtLessThanOrEqual):
        self.createdAtLessThanOrEqual = newCreatedAtLessThanOrEqual

    def getUpdatedAtGreaterThanOrEqual(self):
        return self.updatedAtGreaterThanOrEqual

    def setUpdatedAtGreaterThanOrEqual(self, newUpdatedAtGreaterThanOrEqual):
        self.updatedAtGreaterThanOrEqual = newUpdatedAtGreaterThanOrEqual

    def getUpdatedAtLessThanOrEqual(self):
        return self.updatedAtLessThanOrEqual

    def setUpdatedAtLessThanOrEqual(self, newUpdatedAtLessThanOrEqual):
        self.updatedAtLessThanOrEqual = newUpdatedAtLessThanOrEqual

    def getStatusEqual(self):
        return self.statusEqual

    def setStatusEqual(self, newStatusEqual):
        self.statusEqual = newStatusEqual

    def getStatusIn(self):
        return self.statusIn

    def setStatusIn(self, newStatusIn):
        self.statusIn = newStatusIn

    def getChannelIdEqual(self):
        return self.channelIdEqual

    def setChannelIdEqual(self, newChannelIdEqual):
        self.channelIdEqual = newChannelIdEqual

    def getChannelIdIn(self):
        return self.channelIdIn

    def setChannelIdIn(self, newChannelIdIn):
        self.channelIdIn = newChannelIdIn

    def getStartTimeGreaterThanOrEqual(self):
        return self.startTimeGreaterThanOrEqual

    def setStartTimeGreaterThanOrEqual(self, newStartTimeGreaterThanOrEqual):
        self.startTimeGreaterThanOrEqual = newStartTimeGreaterThanOrEqual

    def getStartTimeLessThanOrEqual(self):
        return self.startTimeLessThanOrEqual

    def setStartTimeLessThanOrEqual(self, newStartTimeLessThanOrEqual):
        self.startTimeLessThanOrEqual = newStartTimeLessThanOrEqual


# @package Vidiun
# @subpackage Client
class VidiunLiveParams(VidiunFlavorParams):
    def __init__(self,
            id=NotImplemented,
            partnerId=NotImplemented,
            name=NotImplemented,
            systemName=NotImplemented,
            description=NotImplemented,
            createdAt=NotImplemented,
            isSystemDefault=NotImplemented,
            tags=NotImplemented,
            requiredPermissions=NotImplemented,
            sourceRemoteStorageProfileId=NotImplemented,
            remoteStorageProfileIds=NotImplemented,
            mediaParserType=NotImplemented,
            sourceAssetParamsIds=NotImplemented,
            videoCodec=NotImplemented,
            videoBitrate=NotImplemented,
            audioCodec=NotImplemented,
            audioBitrate=NotImplemented,
            audioChannels=NotImplemented,
            audioSampleRate=NotImplemented,
            width=NotImplemented,
            height=NotImplemented,
            frameRate=NotImplemented,
            gopSize=NotImplemented,
            conversionEngines=NotImplemented,
            conversionEnginesExtraParams=NotImplemented,
            twoPass=NotImplemented,
            deinterlice=NotImplemented,
            rotate=NotImplemented,
            operators=NotImplemented,
            engineVersion=NotImplemented,
            format=NotImplemented,
            aspectRatioProcessingMode=NotImplemented,
            forceFrameToMultiplication16=NotImplemented,
            isGopInSec=NotImplemented,
            isAvoidVideoShrinkFramesizeToSource=NotImplemented,
            isAvoidVideoShrinkBitrateToSource=NotImplemented,
            isVideoFrameRateForLowBrAppleHls=NotImplemented,
            multiStream=NotImplemented,
            anamorphicPixels=NotImplemented,
            isAvoidForcedKeyFrames=NotImplemented,
            isCropIMX=NotImplemented,
            optimizationPolicy=NotImplemented,
            maxFrameRate=NotImplemented,
            videoConstantBitrate=NotImplemented,
            videoBitrateTolerance=NotImplemented,
            watermarkData=NotImplemented,
            subtitlesData=NotImplemented,
            isEncrypted=NotImplemented,
            contentAwareness=NotImplemented,
            clipOffset=NotImplemented,
            clipDuration=NotImplemented,
            streamSuffix=NotImplemented):
        VidiunFlavorParams.__init__(self,
            id,
            partnerId,
            name,
            systemName,
            description,
            createdAt,
            isSystemDefault,
            tags,
            requiredPermissions,
            sourceRemoteStorageProfileId,
            remoteStorageProfileIds,
            mediaParserType,
            sourceAssetParamsIds,
            videoCodec,
            videoBitrate,
            audioCodec,
            audioBitrate,
            audioChannels,
            audioSampleRate,
            width,
            height,
            frameRate,
            gopSize,
            conversionEngines,
            conversionEnginesExtraParams,
            twoPass,
            deinterlice,
            rotate,
            operators,
            engineVersion,
            format,
            aspectRatioProcessingMode,
            forceFrameToMultiplication16,
            isGopInSec,
            isAvoidVideoShrinkFramesizeToSource,
            isAvoidVideoShrinkBitrateToSource,
            isVideoFrameRateForLowBrAppleHls,
            multiStream,
            anamorphicPixels,
            isAvoidForcedKeyFrames,
            isCropIMX,
            optimizationPolicy,
            maxFrameRate,
            videoConstantBitrate,
            videoBitrateTolerance,
            watermarkData,
            subtitlesData,
            isEncrypted,
            contentAwareness,
            clipOffset,
            clipDuration)

        # Suffix to be added to the stream name after the entry id {entry_id}_{stream_suffix}, e.g. for entry id 0_kjdu5jr6 and suffix 1, the stream name will be 0_kjdu5jr6_1
        # @var string
        self.streamSuffix = streamSuffix


    PROPERTY_LOADERS = {
        'streamSuffix': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunFlavorParams.fromXml(self, node)
        self.fromXmlImpl(node, VidiunLiveParams.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunFlavorParams.toParams(self)
        vparams.put("objectType", "VidiunLiveParams")
        vparams.addStringIfDefined("streamSuffix", self.streamSuffix)
        return vparams

    def getStreamSuffix(self):
        return self.streamSuffix

    def setStreamSuffix(self, newStreamSuffix):
        self.streamSuffix = newStreamSuffix


# @package Vidiun
# @subpackage Client
class VidiunMediaFlavorParams(VidiunFlavorParams):
    def __init__(self,
            id=NotImplemented,
            partnerId=NotImplemented,
            name=NotImplemented,
            systemName=NotImplemented,
            description=NotImplemented,
            createdAt=NotImplemented,
            isSystemDefault=NotImplemented,
            tags=NotImplemented,
            requiredPermissions=NotImplemented,
            sourceRemoteStorageProfileId=NotImplemented,
            remoteStorageProfileIds=NotImplemented,
            mediaParserType=NotImplemented,
            sourceAssetParamsIds=NotImplemented,
            videoCodec=NotImplemented,
            videoBitrate=NotImplemented,
            audioCodec=NotImplemented,
            audioBitrate=NotImplemented,
            audioChannels=NotImplemented,
            audioSampleRate=NotImplemented,
            width=NotImplemented,
            height=NotImplemented,
            frameRate=NotImplemented,
            gopSize=NotImplemented,
            conversionEngines=NotImplemented,
            conversionEnginesExtraParams=NotImplemented,
            twoPass=NotImplemented,
            deinterlice=NotImplemented,
            rotate=NotImplemented,
            operators=NotImplemented,
            engineVersion=NotImplemented,
            format=NotImplemented,
            aspectRatioProcessingMode=NotImplemented,
            forceFrameToMultiplication16=NotImplemented,
            isGopInSec=NotImplemented,
            isAvoidVideoShrinkFramesizeToSource=NotImplemented,
            isAvoidVideoShrinkBitrateToSource=NotImplemented,
            isVideoFrameRateForLowBrAppleHls=NotImplemented,
            multiStream=NotImplemented,
            anamorphicPixels=NotImplemented,
            isAvoidForcedKeyFrames=NotImplemented,
            isCropIMX=NotImplemented,
            optimizationPolicy=NotImplemented,
            maxFrameRate=NotImplemented,
            videoConstantBitrate=NotImplemented,
            videoBitrateTolerance=NotImplemented,
            watermarkData=NotImplemented,
            subtitlesData=NotImplemented,
            isEncrypted=NotImplemented,
            contentAwareness=NotImplemented,
            clipOffset=NotImplemented,
            clipDuration=NotImplemented):
        VidiunFlavorParams.__init__(self,
            id,
            partnerId,
            name,
            systemName,
            description,
            createdAt,
            isSystemDefault,
            tags,
            requiredPermissions,
            sourceRemoteStorageProfileId,
            remoteStorageProfileIds,
            mediaParserType,
            sourceAssetParamsIds,
            videoCodec,
            videoBitrate,
            audioCodec,
            audioBitrate,
            audioChannels,
            audioSampleRate,
            width,
            height,
            frameRate,
            gopSize,
            conversionEngines,
            conversionEnginesExtraParams,
            twoPass,
            deinterlice,
            rotate,
            operators,
            engineVersion,
            format,
            aspectRatioProcessingMode,
            forceFrameToMultiplication16,
            isGopInSec,
            isAvoidVideoShrinkFramesizeToSource,
            isAvoidVideoShrinkBitrateToSource,
            isVideoFrameRateForLowBrAppleHls,
            multiStream,
            anamorphicPixels,
            isAvoidForcedKeyFrames,
            isCropIMX,
            optimizationPolicy,
            maxFrameRate,
            videoConstantBitrate,
            videoBitrateTolerance,
            watermarkData,
            subtitlesData,
            isEncrypted,
            contentAwareness,
            clipOffset,
            clipDuration)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunFlavorParams.fromXml(self, node)
        self.fromXmlImpl(node, VidiunMediaFlavorParams.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunFlavorParams.toParams(self)
        vparams.put("objectType", "VidiunMediaFlavorParams")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunMediaInfoFilter(VidiunMediaInfoBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            flavorAssetIdEqual=NotImplemented):
        VidiunMediaInfoBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            flavorAssetIdEqual)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunMediaInfoBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunMediaInfoFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunMediaInfoBaseFilter.toParams(self)
        vparams.put("objectType", "VidiunMediaInfoFilter")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunMediaServerNode(VidiunDeliveryServerNode):
    def __init__(self,
            id=NotImplemented,
            partnerId=NotImplemented,
            createdAt=NotImplemented,
            updatedAt=NotImplemented,
            heartbeatTime=NotImplemented,
            name=NotImplemented,
            systemName=NotImplemented,
            description=NotImplemented,
            hostName=NotImplemented,
            status=NotImplemented,
            type=NotImplemented,
            tags=NotImplemented,
            dc=NotImplemented,
            parentId=NotImplemented,
            playbackDomain=NotImplemented,
            applicationName=NotImplemented,
            mediaServerPortConfig=NotImplemented,
            mediaServerPlaybackDomainConfig=NotImplemented):
        VidiunDeliveryServerNode.__init__(self,
            id,
            partnerId,
            createdAt,
            updatedAt,
            heartbeatTime,
            name,
            systemName,
            description,
            hostName,
            status,
            type,
            tags,
            dc,
            parentId,
            playbackDomain)

        # Media server application name
        # @var string
        self.applicationName = applicationName

        # Media server playback port configuration by protocol and format
        # @var array of VidiunKeyValue
        self.mediaServerPortConfig = mediaServerPortConfig

        # Media server playback Domain configuration by protocol and format
        # @var array of VidiunKeyValue
        self.mediaServerPlaybackDomainConfig = mediaServerPlaybackDomainConfig


    PROPERTY_LOADERS = {
        'applicationName': getXmlNodeText, 
        'mediaServerPortConfig': (VidiunObjectFactory.createArray, VidiunKeyValue), 
        'mediaServerPlaybackDomainConfig': (VidiunObjectFactory.createArray, VidiunKeyValue), 
    }

    def fromXml(self, node):
        VidiunDeliveryServerNode.fromXml(self, node)
        self.fromXmlImpl(node, VidiunMediaServerNode.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunDeliveryServerNode.toParams(self)
        vparams.put("objectType", "VidiunMediaServerNode")
        vparams.addStringIfDefined("applicationName", self.applicationName)
        vparams.addArrayIfDefined("mediaServerPortConfig", self.mediaServerPortConfig)
        vparams.addArrayIfDefined("mediaServerPlaybackDomainConfig", self.mediaServerPlaybackDomainConfig)
        return vparams

    def getApplicationName(self):
        return self.applicationName

    def setApplicationName(self, newApplicationName):
        self.applicationName = newApplicationName

    def getMediaServerPortConfig(self):
        return self.mediaServerPortConfig

    def setMediaServerPortConfig(self, newMediaServerPortConfig):
        self.mediaServerPortConfig = newMediaServerPortConfig

    def getMediaServerPlaybackDomainConfig(self):
        return self.mediaServerPlaybackDomainConfig

    def setMediaServerPlaybackDomainConfig(self, newMediaServerPlaybackDomainConfig):
        self.mediaServerPlaybackDomainConfig = newMediaServerPlaybackDomainConfig


# @package Vidiun
# @subpackage Client
class VidiunOperationResource(VidiunContentResource):
    """A resource that perform operation (transcoding, clipping, cropping) before the flavor is ready."""

    def __init__(self,
            resource=NotImplemented,
            operationAttributes=NotImplemented,
            assetParamsId=NotImplemented):
        VidiunContentResource.__init__(self)

        # Only VidiunEntryResource and VidiunAssetResource are supported
        # @var VidiunContentResource
        self.resource = resource

        # @var array of VidiunOperationAttributes
        self.operationAttributes = operationAttributes

        # ID of alternative asset params to be used instead of the system default flavor params
        # @var int
        self.assetParamsId = assetParamsId


    PROPERTY_LOADERS = {
        'resource': (VidiunObjectFactory.create, VidiunContentResource), 
        'operationAttributes': (VidiunObjectFactory.createArray, VidiunOperationAttributes), 
        'assetParamsId': getXmlNodeInt, 
    }

    def fromXml(self, node):
        VidiunContentResource.fromXml(self, node)
        self.fromXmlImpl(node, VidiunOperationResource.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunContentResource.toParams(self)
        vparams.put("objectType", "VidiunOperationResource")
        vparams.addObjectIfDefined("resource", self.resource)
        vparams.addArrayIfDefined("operationAttributes", self.operationAttributes)
        vparams.addIntIfDefined("assetParamsId", self.assetParamsId)
        return vparams

    def getResource(self):
        return self.resource

    def setResource(self, newResource):
        self.resource = newResource

    def getOperationAttributes(self):
        return self.operationAttributes

    def setOperationAttributes(self, newOperationAttributes):
        self.operationAttributes = newOperationAttributes

    def getAssetParamsId(self):
        return self.assetParamsId

    def setAssetParamsId(self, newAssetParamsId):
        self.assetParamsId = newAssetParamsId


# @package Vidiun
# @subpackage Client
class VidiunPartnerFilter(VidiunPartnerBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            idNotIn=NotImplemented,
            nameLike=NotImplemented,
            nameMultiLikeOr=NotImplemented,
            nameMultiLikeAnd=NotImplemented,
            nameEqual=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented,
            partnerPackageEqual=NotImplemented,
            partnerPackageGreaterThanOrEqual=NotImplemented,
            partnerPackageLessThanOrEqual=NotImplemented,
            partnerPackageIn=NotImplemented,
            partnerGroupTypeEqual=NotImplemented,
            partnerNameDescriptionWebsiteAdminNameAdminEmailLike=NotImplemented):
        VidiunPartnerBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            idNotIn,
            nameLike,
            nameMultiLikeOr,
            nameMultiLikeAnd,
            nameEqual,
            statusEqual,
            statusIn,
            partnerPackageEqual,
            partnerPackageGreaterThanOrEqual,
            partnerPackageLessThanOrEqual,
            partnerPackageIn,
            partnerGroupTypeEqual,
            partnerNameDescriptionWebsiteAdminNameAdminEmailLike)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunPartnerBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunPartnerFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunPartnerBaseFilter.toParams(self)
        vparams.put("objectType", "VidiunPartnerFilter")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunPermissionBaseFilter(VidiunRelatedFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            typeEqual=NotImplemented,
            typeIn=NotImplemented,
            nameEqual=NotImplemented,
            nameIn=NotImplemented,
            friendlyNameLike=NotImplemented,
            descriptionLike=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            dependsOnPermissionNamesMultiLikeOr=NotImplemented,
            dependsOnPermissionNamesMultiLikeAnd=NotImplemented,
            tagsMultiLikeOr=NotImplemented,
            tagsMultiLikeAnd=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented):
        VidiunRelatedFilter.__init__(self,
            orderBy,
            advancedSearch)

        # @var int
        self.idEqual = idEqual

        # @var string
        self.idIn = idIn

        # @var VidiunPermissionType
        self.typeEqual = typeEqual

        # @var string
        self.typeIn = typeIn

        # @var string
        self.nameEqual = nameEqual

        # @var string
        self.nameIn = nameIn

        # @var string
        self.friendlyNameLike = friendlyNameLike

        # @var string
        self.descriptionLike = descriptionLike

        # @var VidiunPermissionStatus
        self.statusEqual = statusEqual

        # @var string
        self.statusIn = statusIn

        # @var int
        self.partnerIdEqual = partnerIdEqual

        # @var string
        self.partnerIdIn = partnerIdIn

        # @var string
        self.dependsOnPermissionNamesMultiLikeOr = dependsOnPermissionNamesMultiLikeOr

        # @var string
        self.dependsOnPermissionNamesMultiLikeAnd = dependsOnPermissionNamesMultiLikeAnd

        # @var string
        self.tagsMultiLikeOr = tagsMultiLikeOr

        # @var string
        self.tagsMultiLikeAnd = tagsMultiLikeAnd

        # @var int
        self.createdAtGreaterThanOrEqual = createdAtGreaterThanOrEqual

        # @var int
        self.createdAtLessThanOrEqual = createdAtLessThanOrEqual

        # @var int
        self.updatedAtGreaterThanOrEqual = updatedAtGreaterThanOrEqual

        # @var int
        self.updatedAtLessThanOrEqual = updatedAtLessThanOrEqual


    PROPERTY_LOADERS = {
        'idEqual': getXmlNodeInt, 
        'idIn': getXmlNodeText, 
        'typeEqual': (VidiunEnumsFactory.createInt, "VidiunPermissionType"), 
        'typeIn': getXmlNodeText, 
        'nameEqual': getXmlNodeText, 
        'nameIn': getXmlNodeText, 
        'friendlyNameLike': getXmlNodeText, 
        'descriptionLike': getXmlNodeText, 
        'statusEqual': (VidiunEnumsFactory.createInt, "VidiunPermissionStatus"), 
        'statusIn': getXmlNodeText, 
        'partnerIdEqual': getXmlNodeInt, 
        'partnerIdIn': getXmlNodeText, 
        'dependsOnPermissionNamesMultiLikeOr': getXmlNodeText, 
        'dependsOnPermissionNamesMultiLikeAnd': getXmlNodeText, 
        'tagsMultiLikeOr': getXmlNodeText, 
        'tagsMultiLikeAnd': getXmlNodeText, 
        'createdAtGreaterThanOrEqual': getXmlNodeInt, 
        'createdAtLessThanOrEqual': getXmlNodeInt, 
        'updatedAtGreaterThanOrEqual': getXmlNodeInt, 
        'updatedAtLessThanOrEqual': getXmlNodeInt, 
    }

    def fromXml(self, node):
        VidiunRelatedFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunPermissionBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunRelatedFilter.toParams(self)
        vparams.put("objectType", "VidiunPermissionBaseFilter")
        vparams.addIntIfDefined("idEqual", self.idEqual)
        vparams.addStringIfDefined("idIn", self.idIn)
        vparams.addIntEnumIfDefined("typeEqual", self.typeEqual)
        vparams.addStringIfDefined("typeIn", self.typeIn)
        vparams.addStringIfDefined("nameEqual", self.nameEqual)
        vparams.addStringIfDefined("nameIn", self.nameIn)
        vparams.addStringIfDefined("friendlyNameLike", self.friendlyNameLike)
        vparams.addStringIfDefined("descriptionLike", self.descriptionLike)
        vparams.addIntEnumIfDefined("statusEqual", self.statusEqual)
        vparams.addStringIfDefined("statusIn", self.statusIn)
        vparams.addIntIfDefined("partnerIdEqual", self.partnerIdEqual)
        vparams.addStringIfDefined("partnerIdIn", self.partnerIdIn)
        vparams.addStringIfDefined("dependsOnPermissionNamesMultiLikeOr", self.dependsOnPermissionNamesMultiLikeOr)
        vparams.addStringIfDefined("dependsOnPermissionNamesMultiLikeAnd", self.dependsOnPermissionNamesMultiLikeAnd)
        vparams.addStringIfDefined("tagsMultiLikeOr", self.tagsMultiLikeOr)
        vparams.addStringIfDefined("tagsMultiLikeAnd", self.tagsMultiLikeAnd)
        vparams.addIntIfDefined("createdAtGreaterThanOrEqual", self.createdAtGreaterThanOrEqual)
        vparams.addIntIfDefined("createdAtLessThanOrEqual", self.createdAtLessThanOrEqual)
        vparams.addIntIfDefined("updatedAtGreaterThanOrEqual", self.updatedAtGreaterThanOrEqual)
        vparams.addIntIfDefined("updatedAtLessThanOrEqual", self.updatedAtLessThanOrEqual)
        return vparams

    def getIdEqual(self):
        return self.idEqual

    def setIdEqual(self, newIdEqual):
        self.idEqual = newIdEqual

    def getIdIn(self):
        return self.idIn

    def setIdIn(self, newIdIn):
        self.idIn = newIdIn

    def getTypeEqual(self):
        return self.typeEqual

    def setTypeEqual(self, newTypeEqual):
        self.typeEqual = newTypeEqual

    def getTypeIn(self):
        return self.typeIn

    def setTypeIn(self, newTypeIn):
        self.typeIn = newTypeIn

    def getNameEqual(self):
        return self.nameEqual

    def setNameEqual(self, newNameEqual):
        self.nameEqual = newNameEqual

    def getNameIn(self):
        return self.nameIn

    def setNameIn(self, newNameIn):
        self.nameIn = newNameIn

    def getFriendlyNameLike(self):
        return self.friendlyNameLike

    def setFriendlyNameLike(self, newFriendlyNameLike):
        self.friendlyNameLike = newFriendlyNameLike

    def getDescriptionLike(self):
        return self.descriptionLike

    def setDescriptionLike(self, newDescriptionLike):
        self.descriptionLike = newDescriptionLike

    def getStatusEqual(self):
        return self.statusEqual

    def setStatusEqual(self, newStatusEqual):
        self.statusEqual = newStatusEqual

    def getStatusIn(self):
        return self.statusIn

    def setStatusIn(self, newStatusIn):
        self.statusIn = newStatusIn

    def getPartnerIdEqual(self):
        return self.partnerIdEqual

    def setPartnerIdEqual(self, newPartnerIdEqual):
        self.partnerIdEqual = newPartnerIdEqual

    def getPartnerIdIn(self):
        return self.partnerIdIn

    def setPartnerIdIn(self, newPartnerIdIn):
        self.partnerIdIn = newPartnerIdIn

    def getDependsOnPermissionNamesMultiLikeOr(self):
        return self.dependsOnPermissionNamesMultiLikeOr

    def setDependsOnPermissionNamesMultiLikeOr(self, newDependsOnPermissionNamesMultiLikeOr):
        self.dependsOnPermissionNamesMultiLikeOr = newDependsOnPermissionNamesMultiLikeOr

    def getDependsOnPermissionNamesMultiLikeAnd(self):
        return self.dependsOnPermissionNamesMultiLikeAnd

    def setDependsOnPermissionNamesMultiLikeAnd(self, newDependsOnPermissionNamesMultiLikeAnd):
        self.dependsOnPermissionNamesMultiLikeAnd = newDependsOnPermissionNamesMultiLikeAnd

    def getTagsMultiLikeOr(self):
        return self.tagsMultiLikeOr

    def setTagsMultiLikeOr(self, newTagsMultiLikeOr):
        self.tagsMultiLikeOr = newTagsMultiLikeOr

    def getTagsMultiLikeAnd(self):
        return self.tagsMultiLikeAnd

    def setTagsMultiLikeAnd(self, newTagsMultiLikeAnd):
        self.tagsMultiLikeAnd = newTagsMultiLikeAnd

    def getCreatedAtGreaterThanOrEqual(self):
        return self.createdAtGreaterThanOrEqual

    def setCreatedAtGreaterThanOrEqual(self, newCreatedAtGreaterThanOrEqual):
        self.createdAtGreaterThanOrEqual = newCreatedAtGreaterThanOrEqual

    def getCreatedAtLessThanOrEqual(self):
        return self.createdAtLessThanOrEqual

    def setCreatedAtLessThanOrEqual(self, newCreatedAtLessThanOrEqual):
        self.createdAtLessThanOrEqual = newCreatedAtLessThanOrEqual

    def getUpdatedAtGreaterThanOrEqual(self):
        return self.updatedAtGreaterThanOrEqual

    def setUpdatedAtGreaterThanOrEqual(self, newUpdatedAtGreaterThanOrEqual):
        self.updatedAtGreaterThanOrEqual = newUpdatedAtGreaterThanOrEqual

    def getUpdatedAtLessThanOrEqual(self):
        return self.updatedAtLessThanOrEqual

    def setUpdatedAtLessThanOrEqual(self, newUpdatedAtLessThanOrEqual):
        self.updatedAtLessThanOrEqual = newUpdatedAtLessThanOrEqual


# @package Vidiun
# @subpackage Client
class VidiunPermissionItemBaseFilter(VidiunRelatedFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            typeEqual=NotImplemented,
            typeIn=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            tagsMultiLikeOr=NotImplemented,
            tagsMultiLikeAnd=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented):
        VidiunRelatedFilter.__init__(self,
            orderBy,
            advancedSearch)

        # @var int
        self.idEqual = idEqual

        # @var string
        self.idIn = idIn

        # @var VidiunPermissionItemType
        self.typeEqual = typeEqual

        # @var string
        self.typeIn = typeIn

        # @var int
        self.partnerIdEqual = partnerIdEqual

        # @var string
        self.partnerIdIn = partnerIdIn

        # @var string
        self.tagsMultiLikeOr = tagsMultiLikeOr

        # @var string
        self.tagsMultiLikeAnd = tagsMultiLikeAnd

        # @var int
        self.createdAtGreaterThanOrEqual = createdAtGreaterThanOrEqual

        # @var int
        self.createdAtLessThanOrEqual = createdAtLessThanOrEqual

        # @var int
        self.updatedAtGreaterThanOrEqual = updatedAtGreaterThanOrEqual

        # @var int
        self.updatedAtLessThanOrEqual = updatedAtLessThanOrEqual


    PROPERTY_LOADERS = {
        'idEqual': getXmlNodeInt, 
        'idIn': getXmlNodeText, 
        'typeEqual': (VidiunEnumsFactory.createString, "VidiunPermissionItemType"), 
        'typeIn': getXmlNodeText, 
        'partnerIdEqual': getXmlNodeInt, 
        'partnerIdIn': getXmlNodeText, 
        'tagsMultiLikeOr': getXmlNodeText, 
        'tagsMultiLikeAnd': getXmlNodeText, 
        'createdAtGreaterThanOrEqual': getXmlNodeInt, 
        'createdAtLessThanOrEqual': getXmlNodeInt, 
        'updatedAtGreaterThanOrEqual': getXmlNodeInt, 
        'updatedAtLessThanOrEqual': getXmlNodeInt, 
    }

    def fromXml(self, node):
        VidiunRelatedFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunPermissionItemBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunRelatedFilter.toParams(self)
        vparams.put("objectType", "VidiunPermissionItemBaseFilter")
        vparams.addIntIfDefined("idEqual", self.idEqual)
        vparams.addStringIfDefined("idIn", self.idIn)
        vparams.addStringEnumIfDefined("typeEqual", self.typeEqual)
        vparams.addStringIfDefined("typeIn", self.typeIn)
        vparams.addIntIfDefined("partnerIdEqual", self.partnerIdEqual)
        vparams.addStringIfDefined("partnerIdIn", self.partnerIdIn)
        vparams.addStringIfDefined("tagsMultiLikeOr", self.tagsMultiLikeOr)
        vparams.addStringIfDefined("tagsMultiLikeAnd", self.tagsMultiLikeAnd)
        vparams.addIntIfDefined("createdAtGreaterThanOrEqual", self.createdAtGreaterThanOrEqual)
        vparams.addIntIfDefined("createdAtLessThanOrEqual", self.createdAtLessThanOrEqual)
        vparams.addIntIfDefined("updatedAtGreaterThanOrEqual", self.updatedAtGreaterThanOrEqual)
        vparams.addIntIfDefined("updatedAtLessThanOrEqual", self.updatedAtLessThanOrEqual)
        return vparams

    def getIdEqual(self):
        return self.idEqual

    def setIdEqual(self, newIdEqual):
        self.idEqual = newIdEqual

    def getIdIn(self):
        return self.idIn

    def setIdIn(self, newIdIn):
        self.idIn = newIdIn

    def getTypeEqual(self):
        return self.typeEqual

    def setTypeEqual(self, newTypeEqual):
        self.typeEqual = newTypeEqual

    def getTypeIn(self):
        return self.typeIn

    def setTypeIn(self, newTypeIn):
        self.typeIn = newTypeIn

    def getPartnerIdEqual(self):
        return self.partnerIdEqual

    def setPartnerIdEqual(self, newPartnerIdEqual):
        self.partnerIdEqual = newPartnerIdEqual

    def getPartnerIdIn(self):
        return self.partnerIdIn

    def setPartnerIdIn(self, newPartnerIdIn):
        self.partnerIdIn = newPartnerIdIn

    def getTagsMultiLikeOr(self):
        return self.tagsMultiLikeOr

    def setTagsMultiLikeOr(self, newTagsMultiLikeOr):
        self.tagsMultiLikeOr = newTagsMultiLikeOr

    def getTagsMultiLikeAnd(self):
        return self.tagsMultiLikeAnd

    def setTagsMultiLikeAnd(self, newTagsMultiLikeAnd):
        self.tagsMultiLikeAnd = newTagsMultiLikeAnd

    def getCreatedAtGreaterThanOrEqual(self):
        return self.createdAtGreaterThanOrEqual

    def setCreatedAtGreaterThanOrEqual(self, newCreatedAtGreaterThanOrEqual):
        self.createdAtGreaterThanOrEqual = newCreatedAtGreaterThanOrEqual

    def getCreatedAtLessThanOrEqual(self):
        return self.createdAtLessThanOrEqual

    def setCreatedAtLessThanOrEqual(self, newCreatedAtLessThanOrEqual):
        self.createdAtLessThanOrEqual = newCreatedAtLessThanOrEqual

    def getUpdatedAtGreaterThanOrEqual(self):
        return self.updatedAtGreaterThanOrEqual

    def setUpdatedAtGreaterThanOrEqual(self, newUpdatedAtGreaterThanOrEqual):
        self.updatedAtGreaterThanOrEqual = newUpdatedAtGreaterThanOrEqual

    def getUpdatedAtLessThanOrEqual(self):
        return self.updatedAtLessThanOrEqual

    def setUpdatedAtLessThanOrEqual(self, newUpdatedAtLessThanOrEqual):
        self.updatedAtLessThanOrEqual = newUpdatedAtLessThanOrEqual


# @package Vidiun
# @subpackage Client
class VidiunPostConvertJobData(VidiunConvartableJobData):
    def __init__(self,
            srcFileSyncLocalPath=NotImplemented,
            actualSrcFileSyncLocalPath=NotImplemented,
            srcFileSyncRemoteUrl=NotImplemented,
            srcFileSyncs=NotImplemented,
            engineVersion=NotImplemented,
            flavorParamsOutputId=NotImplemented,
            flavorParamsOutput=NotImplemented,
            mediaInfoId=NotImplemented,
            currentOperationSet=NotImplemented,
            currentOperationIndex=NotImplemented,
            pluginData=NotImplemented,
            flavorAssetId=NotImplemented,
            createThumb=NotImplemented,
            thumbPath=NotImplemented,
            thumbOffset=NotImplemented,
            thumbHeight=NotImplemented,
            thumbBitrate=NotImplemented,
            customData=NotImplemented):
        VidiunConvartableJobData.__init__(self,
            srcFileSyncLocalPath,
            actualSrcFileSyncLocalPath,
            srcFileSyncRemoteUrl,
            srcFileSyncs,
            engineVersion,
            flavorParamsOutputId,
            flavorParamsOutput,
            mediaInfoId,
            currentOperationSet,
            currentOperationIndex,
            pluginData)

        # @var string
        self.flavorAssetId = flavorAssetId

        # Indicates if a thumbnail should be created
        # @var bool
        self.createThumb = createThumb

        # The path of the created thumbnail
        # @var string
        self.thumbPath = thumbPath

        # The position of the thumbnail in the media file
        # @var int
        self.thumbOffset = thumbOffset

        # The height of the movie, will be used to comapare if this thumbnail is the best we can have
        # @var int
        self.thumbHeight = thumbHeight

        # The bit rate of the movie, will be used to comapare if this thumbnail is the best we can have
        # @var int
        self.thumbBitrate = thumbBitrate

        # @var string
        self.customData = customData


    PROPERTY_LOADERS = {
        'flavorAssetId': getXmlNodeText, 
        'createThumb': getXmlNodeBool, 
        'thumbPath': getXmlNodeText, 
        'thumbOffset': getXmlNodeInt, 
        'thumbHeight': getXmlNodeInt, 
        'thumbBitrate': getXmlNodeInt, 
        'customData': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunConvartableJobData.fromXml(self, node)
        self.fromXmlImpl(node, VidiunPostConvertJobData.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunConvartableJobData.toParams(self)
        vparams.put("objectType", "VidiunPostConvertJobData")
        vparams.addStringIfDefined("flavorAssetId", self.flavorAssetId)
        vparams.addBoolIfDefined("createThumb", self.createThumb)
        vparams.addStringIfDefined("thumbPath", self.thumbPath)
        vparams.addIntIfDefined("thumbOffset", self.thumbOffset)
        vparams.addIntIfDefined("thumbHeight", self.thumbHeight)
        vparams.addIntIfDefined("thumbBitrate", self.thumbBitrate)
        vparams.addStringIfDefined("customData", self.customData)
        return vparams

    def getFlavorAssetId(self):
        return self.flavorAssetId

    def setFlavorAssetId(self, newFlavorAssetId):
        self.flavorAssetId = newFlavorAssetId

    def getCreateThumb(self):
        return self.createThumb

    def setCreateThumb(self, newCreateThumb):
        self.createThumb = newCreateThumb

    def getThumbPath(self):
        return self.thumbPath

    def setThumbPath(self, newThumbPath):
        self.thumbPath = newThumbPath

    def getThumbOffset(self):
        return self.thumbOffset

    def setThumbOffset(self, newThumbOffset):
        self.thumbOffset = newThumbOffset

    def getThumbHeight(self):
        return self.thumbHeight

    def setThumbHeight(self, newThumbHeight):
        self.thumbHeight = newThumbHeight

    def getThumbBitrate(self):
        return self.thumbBitrate

    def setThumbBitrate(self, newThumbBitrate):
        self.thumbBitrate = newThumbBitrate

    def getCustomData(self):
        return self.customData

    def setCustomData(self, newCustomData):
        self.customData = newCustomData


# @package Vidiun
# @subpackage Client
class VidiunPreviewRestriction(VidiunSessionRestriction):
    def __init__(self,
            previewLength=NotImplemented):
        VidiunSessionRestriction.__init__(self)

        # The preview restriction length
        # @var int
        self.previewLength = previewLength


    PROPERTY_LOADERS = {
        'previewLength': getXmlNodeInt, 
    }

    def fromXml(self, node):
        VidiunSessionRestriction.fromXml(self, node)
        self.fromXmlImpl(node, VidiunPreviewRestriction.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunSessionRestriction.toParams(self)
        vparams.put("objectType", "VidiunPreviewRestriction")
        vparams.addIntIfDefined("previewLength", self.previewLength)
        return vparams

    def getPreviewLength(self):
        return self.previewLength

    def setPreviewLength(self, newPreviewLength):
        self.previewLength = newPreviewLength


# @package Vidiun
# @subpackage Client
class VidiunRecalculateResponseProfileCacheJobData(VidiunRecalculateCacheJobData):
    def __init__(self,
            protocol=NotImplemented,
            vsType=NotImplemented,
            userRoles=NotImplemented,
            cachedObjectType=NotImplemented,
            objectId=NotImplemented,
            startObjectKey=NotImplemented,
            endObjectKey=NotImplemented):
        VidiunRecalculateCacheJobData.__init__(self)

        # http / https
        # @var string
        self.protocol = protocol

        # @var VidiunSessionType
        self.vsType = vsType

        # @var array of VidiunIntegerValue
        self.userRoles = userRoles

        # Class name
        # @var string
        self.cachedObjectType = cachedObjectType

        # @var string
        self.objectId = objectId

        # @var string
        self.startObjectKey = startObjectKey

        # @var string
        self.endObjectKey = endObjectKey


    PROPERTY_LOADERS = {
        'protocol': getXmlNodeText, 
        'vsType': (VidiunEnumsFactory.createInt, "VidiunSessionType"), 
        'userRoles': (VidiunObjectFactory.createArray, VidiunIntegerValue), 
        'cachedObjectType': getXmlNodeText, 
        'objectId': getXmlNodeText, 
        'startObjectKey': getXmlNodeText, 
        'endObjectKey': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunRecalculateCacheJobData.fromXml(self, node)
        self.fromXmlImpl(node, VidiunRecalculateResponseProfileCacheJobData.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunRecalculateCacheJobData.toParams(self)
        vparams.put("objectType", "VidiunRecalculateResponseProfileCacheJobData")
        vparams.addStringIfDefined("protocol", self.protocol)
        vparams.addIntEnumIfDefined("vsType", self.vsType)
        vparams.addArrayIfDefined("userRoles", self.userRoles)
        vparams.addStringIfDefined("cachedObjectType", self.cachedObjectType)
        vparams.addStringIfDefined("objectId", self.objectId)
        vparams.addStringIfDefined("startObjectKey", self.startObjectKey)
        vparams.addStringIfDefined("endObjectKey", self.endObjectKey)
        return vparams

    def getProtocol(self):
        return self.protocol

    def setProtocol(self, newProtocol):
        self.protocol = newProtocol

    def getVsType(self):
        return self.vsType

    def setVsType(self, newVsType):
        self.vsType = newVsType

    def getUserRoles(self):
        return self.userRoles

    def setUserRoles(self, newUserRoles):
        self.userRoles = newUserRoles

    def getCachedObjectType(self):
        return self.cachedObjectType

    def setCachedObjectType(self, newCachedObjectType):
        self.cachedObjectType = newCachedObjectType

    def getObjectId(self):
        return self.objectId

    def setObjectId(self, newObjectId):
        self.objectId = newObjectId

    def getStartObjectKey(self):
        return self.startObjectKey

    def setStartObjectKey(self, newStartObjectKey):
        self.startObjectKey = newStartObjectKey

    def getEndObjectKey(self):
        return self.endObjectKey

    def setEndObjectKey(self, newEndObjectKey):
        self.endObjectKey = newEndObjectKey


# @package Vidiun
# @subpackage Client
class VidiunRegexCondition(VidiunMatchCondition):
    def __init__(self,
            type=NotImplemented,
            description=NotImplemented,
            not_=NotImplemented,
            values=NotImplemented):
        VidiunMatchCondition.__init__(self,
            type,
            description,
            not_,
            values)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunMatchCondition.fromXml(self, node)
        self.fromXmlImpl(node, VidiunRegexCondition.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunMatchCondition.toParams(self)
        vparams.put("objectType", "VidiunRegexCondition")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunRemoteStorageResources(VidiunContentResource):
    """Used to ingest media that is available on remote server and accessible using the supplied URL, the media file won't be downloaded but a file sync object of URL type will point to the media URL."""

    def __init__(self,
            resources=NotImplemented):
        VidiunContentResource.__init__(self)

        # Array of remote stoage resources
        # @var array of VidiunRemoteStorageResource
        self.resources = resources


    PROPERTY_LOADERS = {
        'resources': (VidiunObjectFactory.createArray, VidiunRemoteStorageResource), 
    }

    def fromXml(self, node):
        VidiunContentResource.fromXml(self, node)
        self.fromXmlImpl(node, VidiunRemoteStorageResources.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunContentResource.toParams(self)
        vparams.put("objectType", "VidiunRemoteStorageResources")
        vparams.addArrayIfDefined("resources", self.resources)
        return vparams

    def getResources(self):
        return self.resources

    def setResources(self, newResources):
        self.resources = newResources


# @package Vidiun
# @subpackage Client
class VidiunResponseProfileFilter(VidiunResponseProfileBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented):
        VidiunResponseProfileBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            systemNameEqual,
            systemNameIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            statusEqual,
            statusIn)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunResponseProfileBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunResponseProfileFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunResponseProfileBaseFilter.toParams(self)
        vparams.put("objectType", "VidiunResponseProfileFilter")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunSearchComparableAttributeCondition(VidiunAttributeCondition):
    def __init__(self,
            value=NotImplemented,
            comparison=NotImplemented):
        VidiunAttributeCondition.__init__(self,
            value)

        # @var VidiunSearchConditionComparison
        self.comparison = comparison


    PROPERTY_LOADERS = {
        'comparison': (VidiunEnumsFactory.createString, "VidiunSearchConditionComparison"), 
    }

    def fromXml(self, node):
        VidiunAttributeCondition.fromXml(self, node)
        self.fromXmlImpl(node, VidiunSearchComparableAttributeCondition.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunAttributeCondition.toParams(self)
        vparams.put("objectType", "VidiunSearchComparableAttributeCondition")
        vparams.addStringEnumIfDefined("comparison", self.comparison)
        return vparams

    def getComparison(self):
        return self.comparison

    def setComparison(self, newComparison):
        self.comparison = newComparison


# @package Vidiun
# @subpackage Client
class VidiunSearchComparableCondition(VidiunSearchCondition):
    def __init__(self,
            field=NotImplemented,
            value=NotImplemented,
            comparison=NotImplemented):
        VidiunSearchCondition.__init__(self,
            field,
            value)

        # @var VidiunSearchConditionComparison
        self.comparison = comparison


    PROPERTY_LOADERS = {
        'comparison': (VidiunEnumsFactory.createString, "VidiunSearchConditionComparison"), 
    }

    def fromXml(self, node):
        VidiunSearchCondition.fromXml(self, node)
        self.fromXmlImpl(node, VidiunSearchComparableCondition.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunSearchCondition.toParams(self)
        vparams.put("objectType", "VidiunSearchComparableCondition")
        vparams.addStringEnumIfDefined("comparison", self.comparison)
        return vparams

    def getComparison(self):
        return self.comparison

    def setComparison(self, newComparison):
        self.comparison = newComparison


# @package Vidiun
# @subpackage Client
class VidiunSearchMatchAttributeCondition(VidiunAttributeCondition):
    def __init__(self,
            value=NotImplemented,
            not_=NotImplemented):
        VidiunAttributeCondition.__init__(self,
            value)

        # @var bool
        self.not_ = not_


    PROPERTY_LOADERS = {
        'not': getXmlNodeBool, 
    }

    def fromXml(self, node):
        VidiunAttributeCondition.fromXml(self, node)
        self.fromXmlImpl(node, VidiunSearchMatchAttributeCondition.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunAttributeCondition.toParams(self)
        vparams.put("objectType", "VidiunSearchMatchAttributeCondition")
        vparams.addBoolIfDefined("not", self.not_)
        return vparams

    def getNot_(self):
        return self.not_

    def setNot_(self, newNot_):
        self.not_ = newNot_


# @package Vidiun
# @subpackage Client
class VidiunSearchMatchCondition(VidiunSearchCondition):
    def __init__(self,
            field=NotImplemented,
            value=NotImplemented,
            not_=NotImplemented):
        VidiunSearchCondition.__init__(self,
            field,
            value)

        # @var bool
        self.not_ = not_


    PROPERTY_LOADERS = {
        'not': getXmlNodeBool, 
    }

    def fromXml(self, node):
        VidiunSearchCondition.fromXml(self, node)
        self.fromXmlImpl(node, VidiunSearchMatchCondition.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunSearchCondition.toParams(self)
        vparams.put("objectType", "VidiunSearchMatchCondition")
        vparams.addBoolIfDefined("not", self.not_)
        return vparams

    def getNot_(self):
        return self.not_

    def setNot_(self, newNot_):
        self.not_ = newNot_


# @package Vidiun
# @subpackage Client
class VidiunServerNodeFilter(VidiunServerNodeBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            heartbeatTimeGreaterThanOrEqual=NotImplemented,
            heartbeatTimeLessThanOrEqual=NotImplemented,
            nameEqual=NotImplemented,
            nameIn=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            hostNameLike=NotImplemented,
            hostNameMultiLikeOr=NotImplemented,
            hostNameMultiLikeAnd=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented,
            typeEqual=NotImplemented,
            typeIn=NotImplemented,
            tagsLike=NotImplemented,
            tagsMultiLikeOr=NotImplemented,
            tagsMultiLikeAnd=NotImplemented,
            dcEqual=NotImplemented,
            dcIn=NotImplemented,
            parentIdEqual=NotImplemented,
            parentIdIn=NotImplemented):
        VidiunServerNodeBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            heartbeatTimeGreaterThanOrEqual,
            heartbeatTimeLessThanOrEqual,
            nameEqual,
            nameIn,
            systemNameEqual,
            systemNameIn,
            hostNameLike,
            hostNameMultiLikeOr,
            hostNameMultiLikeAnd,
            statusEqual,
            statusIn,
            typeEqual,
            typeIn,
            tagsLike,
            tagsMultiLikeOr,
            tagsMultiLikeAnd,
            dcEqual,
            dcIn,
            parentIdEqual,
            parentIdIn)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunServerNodeBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunServerNodeFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunServerNodeBaseFilter.toParams(self)
        vparams.put("objectType", "VidiunServerNodeFilter")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunSiteCondition(VidiunMatchCondition):
    def __init__(self,
            type=NotImplemented,
            description=NotImplemented,
            not_=NotImplemented,
            values=NotImplemented):
        VidiunMatchCondition.__init__(self,
            type,
            description,
            not_,
            values)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunMatchCondition.fromXml(self, node)
        self.fromXmlImpl(node, VidiunSiteCondition.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunMatchCondition.toParams(self)
        vparams.put("objectType", "VidiunSiteCondition")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunSshImportJobData(VidiunImportJobData):
    def __init__(self,
            srcFileUrl=NotImplemented,
            destFileLocalPath=NotImplemented,
            flavorAssetId=NotImplemented,
            fileSize=NotImplemented,
            privateKey=NotImplemented,
            publicKey=NotImplemented,
            passPhrase=NotImplemented):
        VidiunImportJobData.__init__(self,
            srcFileUrl,
            destFileLocalPath,
            flavorAssetId,
            fileSize)

        # @var string
        self.privateKey = privateKey

        # @var string
        self.publicKey = publicKey

        # @var string
        self.passPhrase = passPhrase


    PROPERTY_LOADERS = {
        'privateKey': getXmlNodeText, 
        'publicKey': getXmlNodeText, 
        'passPhrase': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunImportJobData.fromXml(self, node)
        self.fromXmlImpl(node, VidiunSshImportJobData.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunImportJobData.toParams(self)
        vparams.put("objectType", "VidiunSshImportJobData")
        vparams.addStringIfDefined("privateKey", self.privateKey)
        vparams.addStringIfDefined("publicKey", self.publicKey)
        vparams.addStringIfDefined("passPhrase", self.passPhrase)
        return vparams

    def getPrivateKey(self):
        return self.privateKey

    def setPrivateKey(self, newPrivateKey):
        self.privateKey = newPrivateKey

    def getPublicKey(self):
        return self.publicKey

    def setPublicKey(self, newPublicKey):
        self.publicKey = newPublicKey

    def getPassPhrase(self):
        return self.passPhrase

    def setPassPhrase(self, newPassPhrase):
        self.passPhrase = newPassPhrase


# @package Vidiun
# @subpackage Client
class VidiunStorageDeleteJobData(VidiunStorageJobData):
    def __init__(self,
            serverUrl=NotImplemented,
            serverUsername=NotImplemented,
            serverPassword=NotImplemented,
            serverPrivateKey=NotImplemented,
            serverPublicKey=NotImplemented,
            serverPassPhrase=NotImplemented,
            ftpPassiveMode=NotImplemented,
            srcFileSyncLocalPath=NotImplemented,
            srcFileSyncId=NotImplemented,
            destFileSyncStoredPath=NotImplemented):
        VidiunStorageJobData.__init__(self,
            serverUrl,
            serverUsername,
            serverPassword,
            serverPrivateKey,
            serverPublicKey,
            serverPassPhrase,
            ftpPassiveMode,
            srcFileSyncLocalPath,
            srcFileSyncId,
            destFileSyncStoredPath)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunStorageJobData.fromXml(self, node)
        self.fromXmlImpl(node, VidiunStorageDeleteJobData.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunStorageJobData.toParams(self)
        vparams.put("objectType", "VidiunStorageDeleteJobData")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunStorageExportJobData(VidiunStorageJobData):
    def __init__(self,
            serverUrl=NotImplemented,
            serverUsername=NotImplemented,
            serverPassword=NotImplemented,
            serverPrivateKey=NotImplemented,
            serverPublicKey=NotImplemented,
            serverPassPhrase=NotImplemented,
            ftpPassiveMode=NotImplemented,
            srcFileSyncLocalPath=NotImplemented,
            srcFileSyncId=NotImplemented,
            destFileSyncStoredPath=NotImplemented,
            force=NotImplemented,
            createLink=NotImplemented):
        VidiunStorageJobData.__init__(self,
            serverUrl,
            serverUsername,
            serverPassword,
            serverPrivateKey,
            serverPublicKey,
            serverPassPhrase,
            ftpPassiveMode,
            srcFileSyncLocalPath,
            srcFileSyncId,
            destFileSyncStoredPath)

        # @var bool
        self.force = force

        # @var bool
        self.createLink = createLink


    PROPERTY_LOADERS = {
        'force': getXmlNodeBool, 
        'createLink': getXmlNodeBool, 
    }

    def fromXml(self, node):
        VidiunStorageJobData.fromXml(self, node)
        self.fromXmlImpl(node, VidiunStorageExportJobData.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunStorageJobData.toParams(self)
        vparams.put("objectType", "VidiunStorageExportJobData")
        vparams.addBoolIfDefined("force", self.force)
        vparams.addBoolIfDefined("createLink", self.createLink)
        return vparams

    def getForce(self):
        return self.force

    def setForce(self, newForce):
        self.force = newForce

    def getCreateLink(self):
        return self.createLink

    def setCreateLink(self, newCreateLink):
        self.createLink = newCreateLink


# @package Vidiun
# @subpackage Client
class VidiunStorageProfileFilter(VidiunStorageProfileBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented,
            protocolEqual=NotImplemented,
            protocolIn=NotImplemented):
        VidiunStorageProfileBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            partnerIdEqual,
            partnerIdIn,
            systemNameEqual,
            systemNameIn,
            statusEqual,
            statusIn,
            protocolEqual,
            protocolIn)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunStorageProfileBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunStorageProfileFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunStorageProfileBaseFilter.toParams(self)
        vparams.put("objectType", "VidiunStorageProfileFilter")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunStringResource(VidiunContentResource):
    """Used to ingest string content."""

    def __init__(self,
            content=NotImplemented):
        VidiunContentResource.__init__(self)

        # Textual content
        # @var string
        self.content = content


    PROPERTY_LOADERS = {
        'content': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunContentResource.fromXml(self, node)
        self.fromXmlImpl(node, VidiunStringResource.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunContentResource.toParams(self)
        vparams.put("objectType", "VidiunStringResource")
        vparams.addStringIfDefined("content", self.content)
        return vparams

    def getContent(self):
        return self.content

    def setContent(self, newContent):
        self.content = newContent


# @package Vidiun
# @subpackage Client
class VidiunUiConfFilter(VidiunUiConfBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            nameLike=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            objTypeEqual=NotImplemented,
            objTypeIn=NotImplemented,
            tagsMultiLikeOr=NotImplemented,
            tagsMultiLikeAnd=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            creationModeEqual=NotImplemented,
            creationModeIn=NotImplemented,
            versionEqual=NotImplemented,
            versionMultiLikeOr=NotImplemented,
            versionMultiLikeAnd=NotImplemented,
            partnerTagsMultiLikeOr=NotImplemented,
            partnerTagsMultiLikeAnd=NotImplemented):
        VidiunUiConfBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            nameLike,
            partnerIdEqual,
            partnerIdIn,
            objTypeEqual,
            objTypeIn,
            tagsMultiLikeOr,
            tagsMultiLikeAnd,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            creationModeEqual,
            creationModeIn,
            versionEqual,
            versionMultiLikeOr,
            versionMultiLikeAnd,
            partnerTagsMultiLikeOr,
            partnerTagsMultiLikeAnd)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunUiConfBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunUiConfFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunUiConfBaseFilter.toParams(self)
        vparams.put("objectType", "VidiunUiConfFilter")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunUploadTokenFilter(VidiunUploadTokenBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            userIdEqual=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented,
            fileNameEqual=NotImplemented,
            fileSizeEqual=NotImplemented):
        VidiunUploadTokenBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            userIdEqual,
            statusEqual,
            statusIn,
            fileNameEqual,
            fileSizeEqual)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunUploadTokenBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunUploadTokenFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunUploadTokenBaseFilter.toParams(self)
        vparams.put("objectType", "VidiunUploadTokenFilter")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunUserEntryBaseFilter(VidiunRelatedFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            idNotIn=NotImplemented,
            entryIdEqual=NotImplemented,
            entryIdIn=NotImplemented,
            entryIdNotIn=NotImplemented,
            userIdEqual=NotImplemented,
            userIdIn=NotImplemented,
            userIdNotIn=NotImplemented,
            statusEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            typeEqual=NotImplemented):
        VidiunRelatedFilter.__init__(self,
            orderBy,
            advancedSearch)

        # @var int
        self.idEqual = idEqual

        # @var string
        self.idIn = idIn

        # @var string
        self.idNotIn = idNotIn

        # @var string
        self.entryIdEqual = entryIdEqual

        # @var string
        self.entryIdIn = entryIdIn

        # @var string
        self.entryIdNotIn = entryIdNotIn

        # @var string
        self.userIdEqual = userIdEqual

        # @var string
        self.userIdIn = userIdIn

        # @var string
        self.userIdNotIn = userIdNotIn

        # @var VidiunUserEntryStatus
        self.statusEqual = statusEqual

        # @var int
        self.createdAtLessThanOrEqual = createdAtLessThanOrEqual

        # @var int
        self.createdAtGreaterThanOrEqual = createdAtGreaterThanOrEqual

        # @var int
        self.updatedAtLessThanOrEqual = updatedAtLessThanOrEqual

        # @var int
        self.updatedAtGreaterThanOrEqual = updatedAtGreaterThanOrEqual

        # @var VidiunUserEntryType
        self.typeEqual = typeEqual


    PROPERTY_LOADERS = {
        'idEqual': getXmlNodeInt, 
        'idIn': getXmlNodeText, 
        'idNotIn': getXmlNodeText, 
        'entryIdEqual': getXmlNodeText, 
        'entryIdIn': getXmlNodeText, 
        'entryIdNotIn': getXmlNodeText, 
        'userIdEqual': getXmlNodeText, 
        'userIdIn': getXmlNodeText, 
        'userIdNotIn': getXmlNodeText, 
        'statusEqual': (VidiunEnumsFactory.createString, "VidiunUserEntryStatus"), 
        'createdAtLessThanOrEqual': getXmlNodeInt, 
        'createdAtGreaterThanOrEqual': getXmlNodeInt, 
        'updatedAtLessThanOrEqual': getXmlNodeInt, 
        'updatedAtGreaterThanOrEqual': getXmlNodeInt, 
        'typeEqual': (VidiunEnumsFactory.createString, "VidiunUserEntryType"), 
    }

    def fromXml(self, node):
        VidiunRelatedFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunUserEntryBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunRelatedFilter.toParams(self)
        vparams.put("objectType", "VidiunUserEntryBaseFilter")
        vparams.addIntIfDefined("idEqual", self.idEqual)
        vparams.addStringIfDefined("idIn", self.idIn)
        vparams.addStringIfDefined("idNotIn", self.idNotIn)
        vparams.addStringIfDefined("entryIdEqual", self.entryIdEqual)
        vparams.addStringIfDefined("entryIdIn", self.entryIdIn)
        vparams.addStringIfDefined("entryIdNotIn", self.entryIdNotIn)
        vparams.addStringIfDefined("userIdEqual", self.userIdEqual)
        vparams.addStringIfDefined("userIdIn", self.userIdIn)
        vparams.addStringIfDefined("userIdNotIn", self.userIdNotIn)
        vparams.addStringEnumIfDefined("statusEqual", self.statusEqual)
        vparams.addIntIfDefined("createdAtLessThanOrEqual", self.createdAtLessThanOrEqual)
        vparams.addIntIfDefined("createdAtGreaterThanOrEqual", self.createdAtGreaterThanOrEqual)
        vparams.addIntIfDefined("updatedAtLessThanOrEqual", self.updatedAtLessThanOrEqual)
        vparams.addIntIfDefined("updatedAtGreaterThanOrEqual", self.updatedAtGreaterThanOrEqual)
        vparams.addStringEnumIfDefined("typeEqual", self.typeEqual)
        return vparams

    def getIdEqual(self):
        return self.idEqual

    def setIdEqual(self, newIdEqual):
        self.idEqual = newIdEqual

    def getIdIn(self):
        return self.idIn

    def setIdIn(self, newIdIn):
        self.idIn = newIdIn

    def getIdNotIn(self):
        return self.idNotIn

    def setIdNotIn(self, newIdNotIn):
        self.idNotIn = newIdNotIn

    def getEntryIdEqual(self):
        return self.entryIdEqual

    def setEntryIdEqual(self, newEntryIdEqual):
        self.entryIdEqual = newEntryIdEqual

    def getEntryIdIn(self):
        return self.entryIdIn

    def setEntryIdIn(self, newEntryIdIn):
        self.entryIdIn = newEntryIdIn

    def getEntryIdNotIn(self):
        return self.entryIdNotIn

    def setEntryIdNotIn(self, newEntryIdNotIn):
        self.entryIdNotIn = newEntryIdNotIn

    def getUserIdEqual(self):
        return self.userIdEqual

    def setUserIdEqual(self, newUserIdEqual):
        self.userIdEqual = newUserIdEqual

    def getUserIdIn(self):
        return self.userIdIn

    def setUserIdIn(self, newUserIdIn):
        self.userIdIn = newUserIdIn

    def getUserIdNotIn(self):
        return self.userIdNotIn

    def setUserIdNotIn(self, newUserIdNotIn):
        self.userIdNotIn = newUserIdNotIn

    def getStatusEqual(self):
        return self.statusEqual

    def setStatusEqual(self, newStatusEqual):
        self.statusEqual = newStatusEqual

    def getCreatedAtLessThanOrEqual(self):
        return self.createdAtLessThanOrEqual

    def setCreatedAtLessThanOrEqual(self, newCreatedAtLessThanOrEqual):
        self.createdAtLessThanOrEqual = newCreatedAtLessThanOrEqual

    def getCreatedAtGreaterThanOrEqual(self):
        return self.createdAtGreaterThanOrEqual

    def setCreatedAtGreaterThanOrEqual(self, newCreatedAtGreaterThanOrEqual):
        self.createdAtGreaterThanOrEqual = newCreatedAtGreaterThanOrEqual

    def getUpdatedAtLessThanOrEqual(self):
        return self.updatedAtLessThanOrEqual

    def setUpdatedAtLessThanOrEqual(self, newUpdatedAtLessThanOrEqual):
        self.updatedAtLessThanOrEqual = newUpdatedAtLessThanOrEqual

    def getUpdatedAtGreaterThanOrEqual(self):
        return self.updatedAtGreaterThanOrEqual

    def setUpdatedAtGreaterThanOrEqual(self, newUpdatedAtGreaterThanOrEqual):
        self.updatedAtGreaterThanOrEqual = newUpdatedAtGreaterThanOrEqual

    def getTypeEqual(self):
        return self.typeEqual

    def setTypeEqual(self, newTypeEqual):
        self.typeEqual = newTypeEqual


# @package Vidiun
# @subpackage Client
class VidiunUserLoginDataBaseFilter(VidiunRelatedFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            loginEmailEqual=NotImplemented):
        VidiunRelatedFilter.__init__(self,
            orderBy,
            advancedSearch)

        # @var string
        self.loginEmailEqual = loginEmailEqual


    PROPERTY_LOADERS = {
        'loginEmailEqual': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunRelatedFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunUserLoginDataBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunRelatedFilter.toParams(self)
        vparams.put("objectType", "VidiunUserLoginDataBaseFilter")
        vparams.addStringIfDefined("loginEmailEqual", self.loginEmailEqual)
        return vparams

    def getLoginEmailEqual(self):
        return self.loginEmailEqual

    def setLoginEmailEqual(self, newLoginEmailEqual):
        self.loginEmailEqual = newLoginEmailEqual


# @package Vidiun
# @subpackage Client
class VidiunUserRoleBaseFilter(VidiunRelatedFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            nameEqual=NotImplemented,
            nameIn=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            descriptionLike=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            tagsMultiLikeOr=NotImplemented,
            tagsMultiLikeAnd=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented):
        VidiunRelatedFilter.__init__(self,
            orderBy,
            advancedSearch)

        # @var int
        self.idEqual = idEqual

        # @var string
        self.idIn = idIn

        # @var string
        self.nameEqual = nameEqual

        # @var string
        self.nameIn = nameIn

        # @var string
        self.systemNameEqual = systemNameEqual

        # @var string
        self.systemNameIn = systemNameIn

        # @var string
        self.descriptionLike = descriptionLike

        # @var VidiunUserRoleStatus
        self.statusEqual = statusEqual

        # @var string
        self.statusIn = statusIn

        # @var int
        self.partnerIdEqual = partnerIdEqual

        # @var string
        self.partnerIdIn = partnerIdIn

        # @var string
        self.tagsMultiLikeOr = tagsMultiLikeOr

        # @var string
        self.tagsMultiLikeAnd = tagsMultiLikeAnd

        # @var int
        self.createdAtGreaterThanOrEqual = createdAtGreaterThanOrEqual

        # @var int
        self.createdAtLessThanOrEqual = createdAtLessThanOrEqual

        # @var int
        self.updatedAtGreaterThanOrEqual = updatedAtGreaterThanOrEqual

        # @var int
        self.updatedAtLessThanOrEqual = updatedAtLessThanOrEqual


    PROPERTY_LOADERS = {
        'idEqual': getXmlNodeInt, 
        'idIn': getXmlNodeText, 
        'nameEqual': getXmlNodeText, 
        'nameIn': getXmlNodeText, 
        'systemNameEqual': getXmlNodeText, 
        'systemNameIn': getXmlNodeText, 
        'descriptionLike': getXmlNodeText, 
        'statusEqual': (VidiunEnumsFactory.createInt, "VidiunUserRoleStatus"), 
        'statusIn': getXmlNodeText, 
        'partnerIdEqual': getXmlNodeInt, 
        'partnerIdIn': getXmlNodeText, 
        'tagsMultiLikeOr': getXmlNodeText, 
        'tagsMultiLikeAnd': getXmlNodeText, 
        'createdAtGreaterThanOrEqual': getXmlNodeInt, 
        'createdAtLessThanOrEqual': getXmlNodeInt, 
        'updatedAtGreaterThanOrEqual': getXmlNodeInt, 
        'updatedAtLessThanOrEqual': getXmlNodeInt, 
    }

    def fromXml(self, node):
        VidiunRelatedFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunUserRoleBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunRelatedFilter.toParams(self)
        vparams.put("objectType", "VidiunUserRoleBaseFilter")
        vparams.addIntIfDefined("idEqual", self.idEqual)
        vparams.addStringIfDefined("idIn", self.idIn)
        vparams.addStringIfDefined("nameEqual", self.nameEqual)
        vparams.addStringIfDefined("nameIn", self.nameIn)
        vparams.addStringIfDefined("systemNameEqual", self.systemNameEqual)
        vparams.addStringIfDefined("systemNameIn", self.systemNameIn)
        vparams.addStringIfDefined("descriptionLike", self.descriptionLike)
        vparams.addIntEnumIfDefined("statusEqual", self.statusEqual)
        vparams.addStringIfDefined("statusIn", self.statusIn)
        vparams.addIntIfDefined("partnerIdEqual", self.partnerIdEqual)
        vparams.addStringIfDefined("partnerIdIn", self.partnerIdIn)
        vparams.addStringIfDefined("tagsMultiLikeOr", self.tagsMultiLikeOr)
        vparams.addStringIfDefined("tagsMultiLikeAnd", self.tagsMultiLikeAnd)
        vparams.addIntIfDefined("createdAtGreaterThanOrEqual", self.createdAtGreaterThanOrEqual)
        vparams.addIntIfDefined("createdAtLessThanOrEqual", self.createdAtLessThanOrEqual)
        vparams.addIntIfDefined("updatedAtGreaterThanOrEqual", self.updatedAtGreaterThanOrEqual)
        vparams.addIntIfDefined("updatedAtLessThanOrEqual", self.updatedAtLessThanOrEqual)
        return vparams

    def getIdEqual(self):
        return self.idEqual

    def setIdEqual(self, newIdEqual):
        self.idEqual = newIdEqual

    def getIdIn(self):
        return self.idIn

    def setIdIn(self, newIdIn):
        self.idIn = newIdIn

    def getNameEqual(self):
        return self.nameEqual

    def setNameEqual(self, newNameEqual):
        self.nameEqual = newNameEqual

    def getNameIn(self):
        return self.nameIn

    def setNameIn(self, newNameIn):
        self.nameIn = newNameIn

    def getSystemNameEqual(self):
        return self.systemNameEqual

    def setSystemNameEqual(self, newSystemNameEqual):
        self.systemNameEqual = newSystemNameEqual

    def getSystemNameIn(self):
        return self.systemNameIn

    def setSystemNameIn(self, newSystemNameIn):
        self.systemNameIn = newSystemNameIn

    def getDescriptionLike(self):
        return self.descriptionLike

    def setDescriptionLike(self, newDescriptionLike):
        self.descriptionLike = newDescriptionLike

    def getStatusEqual(self):
        return self.statusEqual

    def setStatusEqual(self, newStatusEqual):
        self.statusEqual = newStatusEqual

    def getStatusIn(self):
        return self.statusIn

    def setStatusIn(self, newStatusIn):
        self.statusIn = newStatusIn

    def getPartnerIdEqual(self):
        return self.partnerIdEqual

    def setPartnerIdEqual(self, newPartnerIdEqual):
        self.partnerIdEqual = newPartnerIdEqual

    def getPartnerIdIn(self):
        return self.partnerIdIn

    def setPartnerIdIn(self, newPartnerIdIn):
        self.partnerIdIn = newPartnerIdIn

    def getTagsMultiLikeOr(self):
        return self.tagsMultiLikeOr

    def setTagsMultiLikeOr(self, newTagsMultiLikeOr):
        self.tagsMultiLikeOr = newTagsMultiLikeOr

    def getTagsMultiLikeAnd(self):
        return self.tagsMultiLikeAnd

    def setTagsMultiLikeAnd(self, newTagsMultiLikeAnd):
        self.tagsMultiLikeAnd = newTagsMultiLikeAnd

    def getCreatedAtGreaterThanOrEqual(self):
        return self.createdAtGreaterThanOrEqual

    def setCreatedAtGreaterThanOrEqual(self, newCreatedAtGreaterThanOrEqual):
        self.createdAtGreaterThanOrEqual = newCreatedAtGreaterThanOrEqual

    def getCreatedAtLessThanOrEqual(self):
        return self.createdAtLessThanOrEqual

    def setCreatedAtLessThanOrEqual(self, newCreatedAtLessThanOrEqual):
        self.createdAtLessThanOrEqual = newCreatedAtLessThanOrEqual

    def getUpdatedAtGreaterThanOrEqual(self):
        return self.updatedAtGreaterThanOrEqual

    def setUpdatedAtGreaterThanOrEqual(self, newUpdatedAtGreaterThanOrEqual):
        self.updatedAtGreaterThanOrEqual = newUpdatedAtGreaterThanOrEqual

    def getUpdatedAtLessThanOrEqual(self):
        return self.updatedAtLessThanOrEqual

    def setUpdatedAtLessThanOrEqual(self, newUpdatedAtLessThanOrEqual):
        self.updatedAtLessThanOrEqual = newUpdatedAtLessThanOrEqual


# @package Vidiun
# @subpackage Client
class VidiunWidgetFilter(VidiunWidgetBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            sourceWidgetIdEqual=NotImplemented,
            rootWidgetIdEqual=NotImplemented,
            partnerIdEqual=NotImplemented,
            entryIdEqual=NotImplemented,
            uiConfIdEqual=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            partnerDataLike=NotImplemented):
        VidiunWidgetBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            sourceWidgetIdEqual,
            rootWidgetIdEqual,
            partnerIdEqual,
            entryIdEqual,
            uiConfIdEqual,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            partnerDataLike)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunWidgetBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunWidgetFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunWidgetBaseFilter.toParams(self)
        vparams.put("objectType", "VidiunWidgetFilter")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunAccessControlFilter(VidiunAccessControlBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented):
        VidiunAccessControlBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            systemNameEqual,
            systemNameIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunAccessControlBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunAccessControlFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunAccessControlBaseFilter.toParams(self)
        vparams.put("objectType", "VidiunAccessControlFilter")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunAccessControlProfileFilter(VidiunAccessControlProfileBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented):
        VidiunAccessControlProfileBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            systemNameEqual,
            systemNameIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunAccessControlProfileBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunAccessControlProfileFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunAccessControlProfileBaseFilter.toParams(self)
        vparams.put("objectType", "VidiunAccessControlProfileFilter")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunAmazonS3StorageExportJobData(VidiunStorageExportJobData):
    def __init__(self,
            serverUrl=NotImplemented,
            serverUsername=NotImplemented,
            serverPassword=NotImplemented,
            serverPrivateKey=NotImplemented,
            serverPublicKey=NotImplemented,
            serverPassPhrase=NotImplemented,
            ftpPassiveMode=NotImplemented,
            srcFileSyncLocalPath=NotImplemented,
            srcFileSyncId=NotImplemented,
            destFileSyncStoredPath=NotImplemented,
            force=NotImplemented,
            createLink=NotImplemented,
            filesPermissionInS3=NotImplemented,
            s3Region=NotImplemented,
            sseType=NotImplemented,
            sseVmsKeyId=NotImplemented):
        VidiunStorageExportJobData.__init__(self,
            serverUrl,
            serverUsername,
            serverPassword,
            serverPrivateKey,
            serverPublicKey,
            serverPassPhrase,
            ftpPassiveMode,
            srcFileSyncLocalPath,
            srcFileSyncId,
            destFileSyncStoredPath,
            force,
            createLink)

        # @var VidiunAmazonS3StorageProfileFilesPermissionLevel
        self.filesPermissionInS3 = filesPermissionInS3

        # @var string
        self.s3Region = s3Region

        # @var string
        self.sseType = sseType

        # @var string
        self.sseVmsKeyId = sseVmsKeyId


    PROPERTY_LOADERS = {
        'filesPermissionInS3': (VidiunEnumsFactory.createString, "VidiunAmazonS3StorageProfileFilesPermissionLevel"), 
        's3Region': getXmlNodeText, 
        'sseType': getXmlNodeText, 
        'sseVmsKeyId': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunStorageExportJobData.fromXml(self, node)
        self.fromXmlImpl(node, VidiunAmazonS3StorageExportJobData.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunStorageExportJobData.toParams(self)
        vparams.put("objectType", "VidiunAmazonS3StorageExportJobData")
        vparams.addStringEnumIfDefined("filesPermissionInS3", self.filesPermissionInS3)
        vparams.addStringIfDefined("s3Region", self.s3Region)
        vparams.addStringIfDefined("sseType", self.sseType)
        vparams.addStringIfDefined("sseVmsKeyId", self.sseVmsKeyId)
        return vparams

    def getFilesPermissionInS3(self):
        return self.filesPermissionInS3

    def setFilesPermissionInS3(self, newFilesPermissionInS3):
        self.filesPermissionInS3 = newFilesPermissionInS3

    def getS3Region(self):
        return self.s3Region

    def setS3Region(self, newS3Region):
        self.s3Region = newS3Region

    def getSseType(self):
        return self.sseType

    def setSseType(self, newSseType):
        self.sseType = newSseType

    def getSseVmsKeyId(self):
        return self.sseVmsKeyId

    def setSseVmsKeyId(self, newSseVmsKeyId):
        self.sseVmsKeyId = newSseVmsKeyId


# @package Vidiun
# @subpackage Client
class VidiunAmazonS3StorageProfileBaseFilter(VidiunStorageProfileFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented,
            protocolEqual=NotImplemented,
            protocolIn=NotImplemented):
        VidiunStorageProfileFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            partnerIdEqual,
            partnerIdIn,
            systemNameEqual,
            systemNameIn,
            statusEqual,
            statusIn,
            protocolEqual,
            protocolIn)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunStorageProfileFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunAmazonS3StorageProfileBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunStorageProfileFilter.toParams(self)
        vparams.put("objectType", "VidiunAmazonS3StorageProfileBaseFilter")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunAssetFilter(VidiunAssetBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            entryIdEqual=NotImplemented,
            entryIdIn=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            sizeGreaterThanOrEqual=NotImplemented,
            sizeLessThanOrEqual=NotImplemented,
            tagsLike=NotImplemented,
            tagsMultiLikeOr=NotImplemented,
            tagsMultiLikeAnd=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            deletedAtGreaterThanOrEqual=NotImplemented,
            deletedAtLessThanOrEqual=NotImplemented):
        VidiunAssetBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            entryIdEqual,
            entryIdIn,
            partnerIdEqual,
            partnerIdIn,
            sizeGreaterThanOrEqual,
            sizeLessThanOrEqual,
            tagsLike,
            tagsMultiLikeOr,
            tagsMultiLikeAnd,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            deletedAtGreaterThanOrEqual,
            deletedAtLessThanOrEqual)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunAssetBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunAssetFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunAssetBaseFilter.toParams(self)
        vparams.put("objectType", "VidiunAssetFilter")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunAssetParamsFilter(VidiunAssetParamsBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            isSystemDefaultEqual=NotImplemented,
            tagsEqual=NotImplemented):
        VidiunAssetParamsBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            systemNameEqual,
            systemNameIn,
            isSystemDefaultEqual,
            tagsEqual)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunAssetParamsBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunAssetParamsFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunAssetParamsBaseFilter.toParams(self)
        vparams.put("objectType", "VidiunAssetParamsFilter")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunBaseEntryCompareAttributeCondition(VidiunSearchComparableAttributeCondition):
    """Auto-generated class.
     Used to search VidiunBaseEntry attributes. Use VidiunBaseEntryCompareAttribute enum to provide attribute name.
    /"""

    def __init__(self,
            value=NotImplemented,
            comparison=NotImplemented,
            attribute=NotImplemented):
        VidiunSearchComparableAttributeCondition.__init__(self,
            value,
            comparison)

        # @var VidiunBaseEntryCompareAttribute
        self.attribute = attribute


    PROPERTY_LOADERS = {
        'attribute': (VidiunEnumsFactory.createString, "VidiunBaseEntryCompareAttribute"), 
    }

    def fromXml(self, node):
        VidiunSearchComparableAttributeCondition.fromXml(self, node)
        self.fromXmlImpl(node, VidiunBaseEntryCompareAttributeCondition.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunSearchComparableAttributeCondition.toParams(self)
        vparams.put("objectType", "VidiunBaseEntryCompareAttributeCondition")
        vparams.addStringEnumIfDefined("attribute", self.attribute)
        return vparams

    def getAttribute(self):
        return self.attribute

    def setAttribute(self, newAttribute):
        self.attribute = newAttribute


# @package Vidiun
# @subpackage Client
class VidiunBaseEntryMatchAttributeCondition(VidiunSearchMatchAttributeCondition):
    """Auto-generated class.
     Used to search VidiunBaseEntry attributes. Use VidiunBaseEntryMatchAttribute enum to provide attribute name.
    /"""

    def __init__(self,
            value=NotImplemented,
            not_=NotImplemented,
            attribute=NotImplemented):
        VidiunSearchMatchAttributeCondition.__init__(self,
            value,
            not_)

        # @var VidiunBaseEntryMatchAttribute
        self.attribute = attribute


    PROPERTY_LOADERS = {
        'attribute': (VidiunEnumsFactory.createString, "VidiunBaseEntryMatchAttribute"), 
    }

    def fromXml(self, node):
        VidiunSearchMatchAttributeCondition.fromXml(self, node)
        self.fromXmlImpl(node, VidiunBaseEntryMatchAttributeCondition.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunSearchMatchAttributeCondition.toParams(self)
        vparams.put("objectType", "VidiunBaseEntryMatchAttributeCondition")
        vparams.addStringEnumIfDefined("attribute", self.attribute)
        return vparams

    def getAttribute(self):
        return self.attribute

    def setAttribute(self, newAttribute):
        self.attribute = newAttribute


# @package Vidiun
# @subpackage Client
class VidiunBatchJobFilterExt(VidiunBatchJobFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idGreaterThanOrEqual=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            partnerIdNotIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            executionAttemptsGreaterThanOrEqual=NotImplemented,
            executionAttemptsLessThanOrEqual=NotImplemented,
            lockVersionGreaterThanOrEqual=NotImplemented,
            lockVersionLessThanOrEqual=NotImplemented,
            entryIdEqual=NotImplemented,
            jobTypeEqual=NotImplemented,
            jobTypeIn=NotImplemented,
            jobTypeNotIn=NotImplemented,
            jobSubTypeEqual=NotImplemented,
            jobSubTypeIn=NotImplemented,
            jobSubTypeNotIn=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented,
            statusNotIn=NotImplemented,
            priorityGreaterThanOrEqual=NotImplemented,
            priorityLessThanOrEqual=NotImplemented,
            priorityEqual=NotImplemented,
            priorityIn=NotImplemented,
            priorityNotIn=NotImplemented,
            batchVersionGreaterThanOrEqual=NotImplemented,
            batchVersionLessThanOrEqual=NotImplemented,
            batchVersionEqual=NotImplemented,
            queueTimeGreaterThanOrEqual=NotImplemented,
            queueTimeLessThanOrEqual=NotImplemented,
            finishTimeGreaterThanOrEqual=NotImplemented,
            finishTimeLessThanOrEqual=NotImplemented,
            errTypeEqual=NotImplemented,
            errTypeIn=NotImplemented,
            errTypeNotIn=NotImplemented,
            errNumberEqual=NotImplemented,
            errNumberIn=NotImplemented,
            errNumberNotIn=NotImplemented,
            estimatedEffortLessThan=NotImplemented,
            estimatedEffortGreaterThan=NotImplemented,
            urgencyLessThanOrEqual=NotImplemented,
            urgencyGreaterThanOrEqual=NotImplemented,
            jobTypeAndSubTypeIn=NotImplemented):
        VidiunBatchJobFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idGreaterThanOrEqual,
            partnerIdEqual,
            partnerIdIn,
            partnerIdNotIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            executionAttemptsGreaterThanOrEqual,
            executionAttemptsLessThanOrEqual,
            lockVersionGreaterThanOrEqual,
            lockVersionLessThanOrEqual,
            entryIdEqual,
            jobTypeEqual,
            jobTypeIn,
            jobTypeNotIn,
            jobSubTypeEqual,
            jobSubTypeIn,
            jobSubTypeNotIn,
            statusEqual,
            statusIn,
            statusNotIn,
            priorityGreaterThanOrEqual,
            priorityLessThanOrEqual,
            priorityEqual,
            priorityIn,
            priorityNotIn,
            batchVersionGreaterThanOrEqual,
            batchVersionLessThanOrEqual,
            batchVersionEqual,
            queueTimeGreaterThanOrEqual,
            queueTimeLessThanOrEqual,
            finishTimeGreaterThanOrEqual,
            finishTimeLessThanOrEqual,
            errTypeEqual,
            errTypeIn,
            errTypeNotIn,
            errNumberEqual,
            errNumberIn,
            errNumberNotIn,
            estimatedEffortLessThan,
            estimatedEffortGreaterThan,
            urgencyLessThanOrEqual,
            urgencyGreaterThanOrEqual)

        # @var string
        self.jobTypeAndSubTypeIn = jobTypeAndSubTypeIn


    PROPERTY_LOADERS = {
        'jobTypeAndSubTypeIn': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunBatchJobFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunBatchJobFilterExt.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunBatchJobFilter.toParams(self)
        vparams.put("objectType", "VidiunBatchJobFilterExt")
        vparams.addStringIfDefined("jobTypeAndSubTypeIn", self.jobTypeAndSubTypeIn)
        return vparams

    def getJobTypeAndSubTypeIn(self):
        return self.jobTypeAndSubTypeIn

    def setJobTypeAndSubTypeIn(self, newJobTypeAndSubTypeIn):
        self.jobTypeAndSubTypeIn = newJobTypeAndSubTypeIn


# @package Vidiun
# @subpackage Client
class VidiunCategoryEntryFilter(VidiunCategoryEntryBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            categoryIdEqual=NotImplemented,
            categoryIdIn=NotImplemented,
            entryIdEqual=NotImplemented,
            entryIdIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            categoryFullIdsStartsWith=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented):
        VidiunCategoryEntryBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            categoryIdEqual,
            categoryIdIn,
            entryIdEqual,
            entryIdIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            categoryFullIdsStartsWith,
            statusEqual,
            statusIn)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunCategoryEntryBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunCategoryEntryFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunCategoryEntryBaseFilter.toParams(self)
        vparams.put("objectType", "VidiunCategoryEntryFilter")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunCategoryFilter(VidiunCategoryBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            idNotIn=NotImplemented,
            parentIdEqual=NotImplemented,
            parentIdIn=NotImplemented,
            depthEqual=NotImplemented,
            fullNameEqual=NotImplemented,
            fullNameStartsWith=NotImplemented,
            fullNameIn=NotImplemented,
            fullIdsEqual=NotImplemented,
            fullIdsStartsWith=NotImplemented,
            fullIdsMatchOr=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            tagsLike=NotImplemented,
            tagsMultiLikeOr=NotImplemented,
            tagsMultiLikeAnd=NotImplemented,
            appearInListEqual=NotImplemented,
            privacyEqual=NotImplemented,
            privacyIn=NotImplemented,
            inheritanceTypeEqual=NotImplemented,
            inheritanceTypeIn=NotImplemented,
            referenceIdEqual=NotImplemented,
            referenceIdEmpty=NotImplemented,
            contributionPolicyEqual=NotImplemented,
            membersCountGreaterThanOrEqual=NotImplemented,
            membersCountLessThanOrEqual=NotImplemented,
            pendingMembersCountGreaterThanOrEqual=NotImplemented,
            pendingMembersCountLessThanOrEqual=NotImplemented,
            privacyContextEqual=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented,
            inheritedParentIdEqual=NotImplemented,
            inheritedParentIdIn=NotImplemented,
            partnerSortValueGreaterThanOrEqual=NotImplemented,
            partnerSortValueLessThanOrEqual=NotImplemented,
            aggregationCategoriesMultiLikeOr=NotImplemented,
            aggregationCategoriesMultiLikeAnd=NotImplemented,
            freeText=NotImplemented,
            membersIn=NotImplemented,
            nameOrReferenceIdStartsWith=NotImplemented,
            managerEqual=NotImplemented,
            memberEqual=NotImplemented,
            fullNameStartsWithIn=NotImplemented,
            ancestorIdIn=NotImplemented,
            idOrInheritedParentIdIn=NotImplemented):
        VidiunCategoryBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            idNotIn,
            parentIdEqual,
            parentIdIn,
            depthEqual,
            fullNameEqual,
            fullNameStartsWith,
            fullNameIn,
            fullIdsEqual,
            fullIdsStartsWith,
            fullIdsMatchOr,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            tagsLike,
            tagsMultiLikeOr,
            tagsMultiLikeAnd,
            appearInListEqual,
            privacyEqual,
            privacyIn,
            inheritanceTypeEqual,
            inheritanceTypeIn,
            referenceIdEqual,
            referenceIdEmpty,
            contributionPolicyEqual,
            membersCountGreaterThanOrEqual,
            membersCountLessThanOrEqual,
            pendingMembersCountGreaterThanOrEqual,
            pendingMembersCountLessThanOrEqual,
            privacyContextEqual,
            statusEqual,
            statusIn,
            inheritedParentIdEqual,
            inheritedParentIdIn,
            partnerSortValueGreaterThanOrEqual,
            partnerSortValueLessThanOrEqual,
            aggregationCategoriesMultiLikeOr,
            aggregationCategoriesMultiLikeAnd)

        # @var string
        self.freeText = freeText

        # @var string
        self.membersIn = membersIn

        # @var string
        self.nameOrReferenceIdStartsWith = nameOrReferenceIdStartsWith

        # @var string
        self.managerEqual = managerEqual

        # @var string
        self.memberEqual = memberEqual

        # @var string
        self.fullNameStartsWithIn = fullNameStartsWithIn

        # not includes the category itself (only sub categories)
        # @var string
        self.ancestorIdIn = ancestorIdIn

        # @var string
        self.idOrInheritedParentIdIn = idOrInheritedParentIdIn


    PROPERTY_LOADERS = {
        'freeText': getXmlNodeText, 
        'membersIn': getXmlNodeText, 
        'nameOrReferenceIdStartsWith': getXmlNodeText, 
        'managerEqual': getXmlNodeText, 
        'memberEqual': getXmlNodeText, 
        'fullNameStartsWithIn': getXmlNodeText, 
        'ancestorIdIn': getXmlNodeText, 
        'idOrInheritedParentIdIn': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunCategoryBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunCategoryFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunCategoryBaseFilter.toParams(self)
        vparams.put("objectType", "VidiunCategoryFilter")
        vparams.addStringIfDefined("freeText", self.freeText)
        vparams.addStringIfDefined("membersIn", self.membersIn)
        vparams.addStringIfDefined("nameOrReferenceIdStartsWith", self.nameOrReferenceIdStartsWith)
        vparams.addStringIfDefined("managerEqual", self.managerEqual)
        vparams.addStringIfDefined("memberEqual", self.memberEqual)
        vparams.addStringIfDefined("fullNameStartsWithIn", self.fullNameStartsWithIn)
        vparams.addStringIfDefined("ancestorIdIn", self.ancestorIdIn)
        vparams.addStringIfDefined("idOrInheritedParentIdIn", self.idOrInheritedParentIdIn)
        return vparams

    def getFreeText(self):
        return self.freeText

    def setFreeText(self, newFreeText):
        self.freeText = newFreeText

    def getMembersIn(self):
        return self.membersIn

    def setMembersIn(self, newMembersIn):
        self.membersIn = newMembersIn

    def getNameOrReferenceIdStartsWith(self):
        return self.nameOrReferenceIdStartsWith

    def setNameOrReferenceIdStartsWith(self, newNameOrReferenceIdStartsWith):
        self.nameOrReferenceIdStartsWith = newNameOrReferenceIdStartsWith

    def getManagerEqual(self):
        return self.managerEqual

    def setManagerEqual(self, newManagerEqual):
        self.managerEqual = newManagerEqual

    def getMemberEqual(self):
        return self.memberEqual

    def setMemberEqual(self, newMemberEqual):
        self.memberEqual = newMemberEqual

    def getFullNameStartsWithIn(self):
        return self.fullNameStartsWithIn

    def setFullNameStartsWithIn(self, newFullNameStartsWithIn):
        self.fullNameStartsWithIn = newFullNameStartsWithIn

    def getAncestorIdIn(self):
        return self.ancestorIdIn

    def setAncestorIdIn(self, newAncestorIdIn):
        self.ancestorIdIn = newAncestorIdIn

    def getIdOrInheritedParentIdIn(self):
        return self.idOrInheritedParentIdIn

    def setIdOrInheritedParentIdIn(self, newIdOrInheritedParentIdIn):
        self.idOrInheritedParentIdIn = newIdOrInheritedParentIdIn


# @package Vidiun
# @subpackage Client
class VidiunConversionProfileFilter(VidiunConversionProfileBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented,
            typeEqual=NotImplemented,
            typeIn=NotImplemented,
            nameEqual=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            tagsMultiLikeOr=NotImplemented,
            tagsMultiLikeAnd=NotImplemented,
            defaultEntryIdEqual=NotImplemented,
            defaultEntryIdIn=NotImplemented):
        VidiunConversionProfileBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            statusEqual,
            statusIn,
            typeEqual,
            typeIn,
            nameEqual,
            systemNameEqual,
            systemNameIn,
            tagsMultiLikeOr,
            tagsMultiLikeAnd,
            defaultEntryIdEqual,
            defaultEntryIdIn)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunConversionProfileBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunConversionProfileFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunConversionProfileBaseFilter.toParams(self)
        vparams.put("objectType", "VidiunConversionProfileFilter")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunConversionProfileAssetParamsFilter(VidiunConversionProfileAssetParamsBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            conversionProfileIdEqual=NotImplemented,
            conversionProfileIdIn=NotImplemented,
            assetParamsIdEqual=NotImplemented,
            assetParamsIdIn=NotImplemented,
            readyBehaviorEqual=NotImplemented,
            readyBehaviorIn=NotImplemented,
            originEqual=NotImplemented,
            originIn=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            conversionProfileIdFilter=NotImplemented,
            assetParamsIdFilter=NotImplemented):
        VidiunConversionProfileAssetParamsBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            conversionProfileIdEqual,
            conversionProfileIdIn,
            assetParamsIdEqual,
            assetParamsIdIn,
            readyBehaviorEqual,
            readyBehaviorIn,
            originEqual,
            originIn,
            systemNameEqual,
            systemNameIn)

        # @var VidiunConversionProfileFilter
        self.conversionProfileIdFilter = conversionProfileIdFilter

        # @var VidiunAssetParamsFilter
        self.assetParamsIdFilter = assetParamsIdFilter


    PROPERTY_LOADERS = {
        'conversionProfileIdFilter': (VidiunObjectFactory.create, VidiunConversionProfileFilter), 
        'assetParamsIdFilter': (VidiunObjectFactory.create, VidiunAssetParamsFilter), 
    }

    def fromXml(self, node):
        VidiunConversionProfileAssetParamsBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunConversionProfileAssetParamsFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunConversionProfileAssetParamsBaseFilter.toParams(self)
        vparams.put("objectType", "VidiunConversionProfileAssetParamsFilter")
        vparams.addObjectIfDefined("conversionProfileIdFilter", self.conversionProfileIdFilter)
        vparams.addObjectIfDefined("assetParamsIdFilter", self.assetParamsIdFilter)
        return vparams

    def getConversionProfileIdFilter(self):
        return self.conversionProfileIdFilter

    def setConversionProfileIdFilter(self, newConversionProfileIdFilter):
        self.conversionProfileIdFilter = newConversionProfileIdFilter

    def getAssetParamsIdFilter(self):
        return self.assetParamsIdFilter

    def setAssetParamsIdFilter(self, newAssetParamsIdFilter):
        self.assetParamsIdFilter = newAssetParamsIdFilter


# @package Vidiun
# @subpackage Client
class VidiunCoordinatesContextField(VidiunStringField):
    """Represents the current request country context as calculated based on the IP address"""

    def __init__(self,
            description=NotImplemented,
            value=NotImplemented,
            geoCoderType=NotImplemented):
        VidiunStringField.__init__(self,
            description,
            value)

        # The ip geo coder engine to be used
        # @var VidiunGeoCoderType
        self.geoCoderType = geoCoderType


    PROPERTY_LOADERS = {
        'geoCoderType': (VidiunEnumsFactory.createString, "VidiunGeoCoderType"), 
    }

    def fromXml(self, node):
        VidiunStringField.fromXml(self, node)
        self.fromXmlImpl(node, VidiunCoordinatesContextField.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunStringField.toParams(self)
        vparams.put("objectType", "VidiunCoordinatesContextField")
        vparams.addStringEnumIfDefined("geoCoderType", self.geoCoderType)
        return vparams

    def getGeoCoderType(self):
        return self.geoCoderType

    def setGeoCoderType(self, newGeoCoderType):
        self.geoCoderType = newGeoCoderType


# @package Vidiun
# @subpackage Client
class VidiunCountryContextField(VidiunStringField):
    """Represents the current request country context as calculated based on the IP address"""

    def __init__(self,
            description=NotImplemented,
            value=NotImplemented,
            geoCoderType=NotImplemented):
        VidiunStringField.__init__(self,
            description,
            value)

        # The ip geo coder engine to be used
        # @var VidiunGeoCoderType
        self.geoCoderType = geoCoderType


    PROPERTY_LOADERS = {
        'geoCoderType': (VidiunEnumsFactory.createString, "VidiunGeoCoderType"), 
    }

    def fromXml(self, node):
        VidiunStringField.fromXml(self, node)
        self.fromXmlImpl(node, VidiunCountryContextField.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunStringField.toParams(self)
        vparams.put("objectType", "VidiunCountryContextField")
        vparams.addStringEnumIfDefined("geoCoderType", self.geoCoderType)
        return vparams

    def getGeoCoderType(self):
        return self.geoCoderType

    def setGeoCoderType(self, newGeoCoderType):
        self.geoCoderType = newGeoCoderType


# @package Vidiun
# @subpackage Client
class VidiunDataEntryCompareAttributeCondition(VidiunSearchComparableAttributeCondition):
    """Auto-generated class.
     Used to search VidiunDataEntry attributes. Use VidiunDataEntryCompareAttribute enum to provide attribute name.
    /"""

    def __init__(self,
            value=NotImplemented,
            comparison=NotImplemented,
            attribute=NotImplemented):
        VidiunSearchComparableAttributeCondition.__init__(self,
            value,
            comparison)

        # @var VidiunDataEntryCompareAttribute
        self.attribute = attribute


    PROPERTY_LOADERS = {
        'attribute': (VidiunEnumsFactory.createString, "VidiunDataEntryCompareAttribute"), 
    }

    def fromXml(self, node):
        VidiunSearchComparableAttributeCondition.fromXml(self, node)
        self.fromXmlImpl(node, VidiunDataEntryCompareAttributeCondition.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunSearchComparableAttributeCondition.toParams(self)
        vparams.put("objectType", "VidiunDataEntryCompareAttributeCondition")
        vparams.addStringEnumIfDefined("attribute", self.attribute)
        return vparams

    def getAttribute(self):
        return self.attribute

    def setAttribute(self, newAttribute):
        self.attribute = newAttribute


# @package Vidiun
# @subpackage Client
class VidiunDataEntryMatchAttributeCondition(VidiunSearchMatchAttributeCondition):
    """Auto-generated class.
     Used to search VidiunDataEntry attributes. Use VidiunDataEntryMatchAttribute enum to provide attribute name.
    /"""

    def __init__(self,
            value=NotImplemented,
            not_=NotImplemented,
            attribute=NotImplemented):
        VidiunSearchMatchAttributeCondition.__init__(self,
            value,
            not_)

        # @var VidiunDataEntryMatchAttribute
        self.attribute = attribute


    PROPERTY_LOADERS = {
        'attribute': (VidiunEnumsFactory.createString, "VidiunDataEntryMatchAttribute"), 
    }

    def fromXml(self, node):
        VidiunSearchMatchAttributeCondition.fromXml(self, node)
        self.fromXmlImpl(node, VidiunDataEntryMatchAttributeCondition.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunSearchMatchAttributeCondition.toParams(self)
        vparams.put("objectType", "VidiunDataEntryMatchAttributeCondition")
        vparams.addStringEnumIfDefined("attribute", self.attribute)
        return vparams

    def getAttribute(self):
        return self.attribute

    def setAttribute(self, newAttribute):
        self.attribute = newAttribute


# @package Vidiun
# @subpackage Client
class VidiunDeliveryProfileAkamaiAppleHttpManifestBaseFilter(VidiunDeliveryProfileFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            streamerTypeEqual=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented):
        VidiunDeliveryProfileFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            partnerIdEqual,
            partnerIdIn,
            systemNameEqual,
            systemNameIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            streamerTypeEqual,
            statusEqual,
            statusIn)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunDeliveryProfileFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunDeliveryProfileAkamaiAppleHttpManifestBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunDeliveryProfileFilter.toParams(self)
        vparams.put("objectType", "VidiunDeliveryProfileAkamaiAppleHttpManifestBaseFilter")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunDeliveryProfileAkamaiHdsBaseFilter(VidiunDeliveryProfileFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            streamerTypeEqual=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented):
        VidiunDeliveryProfileFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            partnerIdEqual,
            partnerIdIn,
            systemNameEqual,
            systemNameIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            streamerTypeEqual,
            statusEqual,
            statusIn)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunDeliveryProfileFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunDeliveryProfileAkamaiHdsBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunDeliveryProfileFilter.toParams(self)
        vparams.put("objectType", "VidiunDeliveryProfileAkamaiHdsBaseFilter")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunDeliveryProfileAkamaiHttpBaseFilter(VidiunDeliveryProfileFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            streamerTypeEqual=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented):
        VidiunDeliveryProfileFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            partnerIdEqual,
            partnerIdIn,
            systemNameEqual,
            systemNameIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            streamerTypeEqual,
            statusEqual,
            statusIn)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunDeliveryProfileFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunDeliveryProfileAkamaiHttpBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunDeliveryProfileFilter.toParams(self)
        vparams.put("objectType", "VidiunDeliveryProfileAkamaiHttpBaseFilter")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunDeliveryProfileGenericAppleHttpBaseFilter(VidiunDeliveryProfileFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            streamerTypeEqual=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented):
        VidiunDeliveryProfileFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            partnerIdEqual,
            partnerIdIn,
            systemNameEqual,
            systemNameIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            streamerTypeEqual,
            statusEqual,
            statusIn)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunDeliveryProfileFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunDeliveryProfileGenericAppleHttpBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunDeliveryProfileFilter.toParams(self)
        vparams.put("objectType", "VidiunDeliveryProfileGenericAppleHttpBaseFilter")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunDeliveryProfileGenericHdsBaseFilter(VidiunDeliveryProfileFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            streamerTypeEqual=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented):
        VidiunDeliveryProfileFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            partnerIdEqual,
            partnerIdIn,
            systemNameEqual,
            systemNameIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            streamerTypeEqual,
            statusEqual,
            statusIn)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunDeliveryProfileFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunDeliveryProfileGenericHdsBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunDeliveryProfileFilter.toParams(self)
        vparams.put("objectType", "VidiunDeliveryProfileGenericHdsBaseFilter")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunDeliveryProfileGenericHttpBaseFilter(VidiunDeliveryProfileFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            streamerTypeEqual=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented):
        VidiunDeliveryProfileFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            partnerIdEqual,
            partnerIdIn,
            systemNameEqual,
            systemNameIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            streamerTypeEqual,
            statusEqual,
            statusIn)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunDeliveryProfileFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunDeliveryProfileGenericHttpBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunDeliveryProfileFilter.toParams(self)
        vparams.put("objectType", "VidiunDeliveryProfileGenericHttpBaseFilter")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunDeliveryProfileGenericSilverLightBaseFilter(VidiunDeliveryProfileFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            streamerTypeEqual=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented):
        VidiunDeliveryProfileFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            partnerIdEqual,
            partnerIdIn,
            systemNameEqual,
            systemNameIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            streamerTypeEqual,
            statusEqual,
            statusIn)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunDeliveryProfileFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunDeliveryProfileGenericSilverLightBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunDeliveryProfileFilter.toParams(self)
        vparams.put("objectType", "VidiunDeliveryProfileGenericSilverLightBaseFilter")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunDeliveryProfileLiveAppleHttpBaseFilter(VidiunDeliveryProfileFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            streamerTypeEqual=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented):
        VidiunDeliveryProfileFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            partnerIdEqual,
            partnerIdIn,
            systemNameEqual,
            systemNameIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            streamerTypeEqual,
            statusEqual,
            statusIn)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunDeliveryProfileFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunDeliveryProfileLiveAppleHttpBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunDeliveryProfileFilter.toParams(self)
        vparams.put("objectType", "VidiunDeliveryProfileLiveAppleHttpBaseFilter")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunDeliveryProfileRtmpBaseFilter(VidiunDeliveryProfileFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            streamerTypeEqual=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented):
        VidiunDeliveryProfileFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            partnerIdEqual,
            partnerIdIn,
            systemNameEqual,
            systemNameIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            streamerTypeEqual,
            statusEqual,
            statusIn)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunDeliveryProfileFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunDeliveryProfileRtmpBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunDeliveryProfileFilter.toParams(self)
        vparams.put("objectType", "VidiunDeliveryProfileRtmpBaseFilter")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunDeliveryServerNodeBaseFilter(VidiunServerNodeFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            heartbeatTimeGreaterThanOrEqual=NotImplemented,
            heartbeatTimeLessThanOrEqual=NotImplemented,
            nameEqual=NotImplemented,
            nameIn=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            hostNameLike=NotImplemented,
            hostNameMultiLikeOr=NotImplemented,
            hostNameMultiLikeAnd=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented,
            typeEqual=NotImplemented,
            typeIn=NotImplemented,
            tagsLike=NotImplemented,
            tagsMultiLikeOr=NotImplemented,
            tagsMultiLikeAnd=NotImplemented,
            dcEqual=NotImplemented,
            dcIn=NotImplemented,
            parentIdEqual=NotImplemented,
            parentIdIn=NotImplemented,
            playbackDomainLike=NotImplemented,
            playbackDomainMultiLikeOr=NotImplemented,
            playbackDomainMultiLikeAnd=NotImplemented):
        VidiunServerNodeFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            heartbeatTimeGreaterThanOrEqual,
            heartbeatTimeLessThanOrEqual,
            nameEqual,
            nameIn,
            systemNameEqual,
            systemNameIn,
            hostNameLike,
            hostNameMultiLikeOr,
            hostNameMultiLikeAnd,
            statusEqual,
            statusIn,
            typeEqual,
            typeIn,
            tagsLike,
            tagsMultiLikeOr,
            tagsMultiLikeAnd,
            dcEqual,
            dcIn,
            parentIdEqual,
            parentIdIn)

        # @var string
        self.playbackDomainLike = playbackDomainLike

        # @var string
        self.playbackDomainMultiLikeOr = playbackDomainMultiLikeOr

        # @var string
        self.playbackDomainMultiLikeAnd = playbackDomainMultiLikeAnd


    PROPERTY_LOADERS = {
        'playbackDomainLike': getXmlNodeText, 
        'playbackDomainMultiLikeOr': getXmlNodeText, 
        'playbackDomainMultiLikeAnd': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunServerNodeFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunDeliveryServerNodeBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunServerNodeFilter.toParams(self)
        vparams.put("objectType", "VidiunDeliveryServerNodeBaseFilter")
        vparams.addStringIfDefined("playbackDomainLike", self.playbackDomainLike)
        vparams.addStringIfDefined("playbackDomainMultiLikeOr", self.playbackDomainMultiLikeOr)
        vparams.addStringIfDefined("playbackDomainMultiLikeAnd", self.playbackDomainMultiLikeAnd)
        return vparams

    def getPlaybackDomainLike(self):
        return self.playbackDomainLike

    def setPlaybackDomainLike(self, newPlaybackDomainLike):
        self.playbackDomainLike = newPlaybackDomainLike

    def getPlaybackDomainMultiLikeOr(self):
        return self.playbackDomainMultiLikeOr

    def setPlaybackDomainMultiLikeOr(self, newPlaybackDomainMultiLikeOr):
        self.playbackDomainMultiLikeOr = newPlaybackDomainMultiLikeOr

    def getPlaybackDomainMultiLikeAnd(self):
        return self.playbackDomainMultiLikeAnd

    def setPlaybackDomainMultiLikeAnd(self, newPlaybackDomainMultiLikeAnd):
        self.playbackDomainMultiLikeAnd = newPlaybackDomainMultiLikeAnd


# @package Vidiun
# @subpackage Client
class VidiunDocumentEntryCompareAttributeCondition(VidiunSearchComparableAttributeCondition):
    """Auto-generated class.
     Used to search VidiunDocumentEntry attributes. Use VidiunDocumentEntryCompareAttribute enum to provide attribute name.
    /"""

    def __init__(self,
            value=NotImplemented,
            comparison=NotImplemented,
            attribute=NotImplemented):
        VidiunSearchComparableAttributeCondition.__init__(self,
            value,
            comparison)

        # @var VidiunDocumentEntryCompareAttribute
        self.attribute = attribute


    PROPERTY_LOADERS = {
        'attribute': (VidiunEnumsFactory.createString, "VidiunDocumentEntryCompareAttribute"), 
    }

    def fromXml(self, node):
        VidiunSearchComparableAttributeCondition.fromXml(self, node)
        self.fromXmlImpl(node, VidiunDocumentEntryCompareAttributeCondition.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunSearchComparableAttributeCondition.toParams(self)
        vparams.put("objectType", "VidiunDocumentEntryCompareAttributeCondition")
        vparams.addStringEnumIfDefined("attribute", self.attribute)
        return vparams

    def getAttribute(self):
        return self.attribute

    def setAttribute(self, newAttribute):
        self.attribute = newAttribute


# @package Vidiun
# @subpackage Client
class VidiunDocumentEntryMatchAttributeCondition(VidiunSearchMatchAttributeCondition):
    """Auto-generated class.
     Used to search VidiunDocumentEntry attributes. Use VidiunDocumentEntryMatchAttribute enum to provide attribute name.
    /"""

    def __init__(self,
            value=NotImplemented,
            not_=NotImplemented,
            attribute=NotImplemented):
        VidiunSearchMatchAttributeCondition.__init__(self,
            value,
            not_)

        # @var VidiunDocumentEntryMatchAttribute
        self.attribute = attribute


    PROPERTY_LOADERS = {
        'attribute': (VidiunEnumsFactory.createString, "VidiunDocumentEntryMatchAttribute"), 
    }

    def fromXml(self, node):
        VidiunSearchMatchAttributeCondition.fromXml(self, node)
        self.fromXmlImpl(node, VidiunDocumentEntryMatchAttributeCondition.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunSearchMatchAttributeCondition.toParams(self)
        vparams.put("objectType", "VidiunDocumentEntryMatchAttributeCondition")
        vparams.addStringEnumIfDefined("attribute", self.attribute)
        return vparams

    def getAttribute(self):
        return self.attribute

    def setAttribute(self, newAttribute):
        self.attribute = newAttribute


# @package Vidiun
# @subpackage Client
class VidiunEntryServerNodeFilter(VidiunEntryServerNodeBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            entryIdEqual=NotImplemented,
            entryIdIn=NotImplemented,
            serverNodeIdEqual=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented,
            serverTypeEqual=NotImplemented):
        VidiunEntryServerNodeBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            entryIdEqual,
            entryIdIn,
            serverNodeIdEqual,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            statusEqual,
            statusIn,
            serverTypeEqual)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunEntryServerNodeBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunEntryServerNodeFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunEntryServerNodeBaseFilter.toParams(self)
        vparams.put("objectType", "VidiunEntryServerNodeFilter")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunEvalBooleanField(VidiunBooleanField):
    """Evaluates PHP statement, depends on the execution context"""

    def __init__(self,
            description=NotImplemented,
            value=NotImplemented,
            code=NotImplemented):
        VidiunBooleanField.__init__(self,
            description,
            value)

        # PHP code
        # @var string
        self.code = code


    PROPERTY_LOADERS = {
        'code': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunBooleanField.fromXml(self, node)
        self.fromXmlImpl(node, VidiunEvalBooleanField.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunBooleanField.toParams(self)
        vparams.put("objectType", "VidiunEvalBooleanField")
        vparams.addStringIfDefined("code", self.code)
        return vparams

    def getCode(self):
        return self.code

    def setCode(self, newCode):
        self.code = newCode


# @package Vidiun
# @subpackage Client
class VidiunEvalStringField(VidiunStringField):
    """Evaluates PHP statement, depends on the execution context"""

    def __init__(self,
            description=NotImplemented,
            value=NotImplemented,
            code=NotImplemented):
        VidiunStringField.__init__(self,
            description,
            value)

        # PHP code
        # @var string
        self.code = code


    PROPERTY_LOADERS = {
        'code': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunStringField.fromXml(self, node)
        self.fromXmlImpl(node, VidiunEvalStringField.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunStringField.toParams(self)
        vparams.put("objectType", "VidiunEvalStringField")
        vparams.addStringIfDefined("code", self.code)
        return vparams

    def getCode(self):
        return self.code

    def setCode(self, newCode):
        self.code = newCode


# @package Vidiun
# @subpackage Client
class VidiunExternalMediaEntryCompareAttributeCondition(VidiunSearchComparableAttributeCondition):
    """Auto-generated class.
     Used to search VidiunExternalMediaEntry attributes. Use VidiunExternalMediaEntryCompareAttribute enum to provide attribute name.
    /"""

    def __init__(self,
            value=NotImplemented,
            comparison=NotImplemented,
            attribute=NotImplemented):
        VidiunSearchComparableAttributeCondition.__init__(self,
            value,
            comparison)

        # @var VidiunExternalMediaEntryCompareAttribute
        self.attribute = attribute


    PROPERTY_LOADERS = {
        'attribute': (VidiunEnumsFactory.createString, "VidiunExternalMediaEntryCompareAttribute"), 
    }

    def fromXml(self, node):
        VidiunSearchComparableAttributeCondition.fromXml(self, node)
        self.fromXmlImpl(node, VidiunExternalMediaEntryCompareAttributeCondition.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunSearchComparableAttributeCondition.toParams(self)
        vparams.put("objectType", "VidiunExternalMediaEntryCompareAttributeCondition")
        vparams.addStringEnumIfDefined("attribute", self.attribute)
        return vparams

    def getAttribute(self):
        return self.attribute

    def setAttribute(self, newAttribute):
        self.attribute = newAttribute


# @package Vidiun
# @subpackage Client
class VidiunExternalMediaEntryMatchAttributeCondition(VidiunSearchMatchAttributeCondition):
    """Auto-generated class.
     Used to search VidiunExternalMediaEntry attributes. Use VidiunExternalMediaEntryMatchAttribute enum to provide attribute name.
    /"""

    def __init__(self,
            value=NotImplemented,
            not_=NotImplemented,
            attribute=NotImplemented):
        VidiunSearchMatchAttributeCondition.__init__(self,
            value,
            not_)

        # @var VidiunExternalMediaEntryMatchAttribute
        self.attribute = attribute


    PROPERTY_LOADERS = {
        'attribute': (VidiunEnumsFactory.createString, "VidiunExternalMediaEntryMatchAttribute"), 
    }

    def fromXml(self, node):
        VidiunSearchMatchAttributeCondition.fromXml(self, node)
        self.fromXmlImpl(node, VidiunExternalMediaEntryMatchAttributeCondition.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunSearchMatchAttributeCondition.toParams(self)
        vparams.put("objectType", "VidiunExternalMediaEntryMatchAttributeCondition")
        vparams.addStringEnumIfDefined("attribute", self.attribute)
        return vparams

    def getAttribute(self):
        return self.attribute

    def setAttribute(self, newAttribute):
        self.attribute = newAttribute


# @package Vidiun
# @subpackage Client
class VidiunFileAssetFilter(VidiunFileAssetBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            partnerIdEqual=NotImplemented,
            fileAssetObjectTypeEqual=NotImplemented,
            objectIdEqual=NotImplemented,
            objectIdIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented):
        VidiunFileAssetBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            partnerIdEqual,
            fileAssetObjectTypeEqual,
            objectIdEqual,
            objectIdIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            statusEqual,
            statusIn)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunFileAssetBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunFileAssetFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunFileAssetBaseFilter.toParams(self)
        vparams.put("objectType", "VidiunFileAssetFilter")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunGenericSyndicationFeedBaseFilter(VidiunBaseSyndicationFeedFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented):
        VidiunBaseSyndicationFeedFilter.__init__(self,
            orderBy,
            advancedSearch)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunBaseSyndicationFeedFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunGenericSyndicationFeedBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunBaseSyndicationFeedFilter.toParams(self)
        vparams.put("objectType", "VidiunGenericSyndicationFeedBaseFilter")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunGoogleVideoSyndicationFeedBaseFilter(VidiunBaseSyndicationFeedFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented):
        VidiunBaseSyndicationFeedFilter.__init__(self,
            orderBy,
            advancedSearch)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunBaseSyndicationFeedFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunGoogleVideoSyndicationFeedBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunBaseSyndicationFeedFilter.toParams(self)
        vparams.put("objectType", "VidiunGoogleVideoSyndicationFeedBaseFilter")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunGroupUserFilter(VidiunGroupUserBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            userIdEqual=NotImplemented,
            userIdIn=NotImplemented,
            groupIdEqual=NotImplemented,
            groupIdIn=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented):
        VidiunGroupUserBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            userIdEqual,
            userIdIn,
            groupIdEqual,
            groupIdIn,
            statusEqual,
            statusIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunGroupUserBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunGroupUserFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunGroupUserBaseFilter.toParams(self)
        vparams.put("objectType", "VidiunGroupUserFilter")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunITunesSyndicationFeedBaseFilter(VidiunBaseSyndicationFeedFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented):
        VidiunBaseSyndicationFeedFilter.__init__(self,
            orderBy,
            advancedSearch)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunBaseSyndicationFeedFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunITunesSyndicationFeedBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunBaseSyndicationFeedFilter.toParams(self)
        vparams.put("objectType", "VidiunITunesSyndicationFeedBaseFilter")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunIpAddressContextField(VidiunStringField):
    """Represents the current request IP address context"""

    def __init__(self,
            description=NotImplemented,
            value=NotImplemented):
        VidiunStringField.__init__(self,
            description,
            value)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunStringField.fromXml(self, node)
        self.fromXmlImpl(node, VidiunIpAddressContextField.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunStringField.toParams(self)
        vparams.put("objectType", "VidiunIpAddressContextField")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunLiveChannelCompareAttributeCondition(VidiunSearchComparableAttributeCondition):
    """Auto-generated class.
     Used to search VidiunLiveChannel attributes. Use VidiunLiveChannelCompareAttribute enum to provide attribute name.
    /"""

    def __init__(self,
            value=NotImplemented,
            comparison=NotImplemented,
            attribute=NotImplemented):
        VidiunSearchComparableAttributeCondition.__init__(self,
            value,
            comparison)

        # @var VidiunLiveChannelCompareAttribute
        self.attribute = attribute


    PROPERTY_LOADERS = {
        'attribute': (VidiunEnumsFactory.createString, "VidiunLiveChannelCompareAttribute"), 
    }

    def fromXml(self, node):
        VidiunSearchComparableAttributeCondition.fromXml(self, node)
        self.fromXmlImpl(node, VidiunLiveChannelCompareAttributeCondition.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunSearchComparableAttributeCondition.toParams(self)
        vparams.put("objectType", "VidiunLiveChannelCompareAttributeCondition")
        vparams.addStringEnumIfDefined("attribute", self.attribute)
        return vparams

    def getAttribute(self):
        return self.attribute

    def setAttribute(self, newAttribute):
        self.attribute = newAttribute


# @package Vidiun
# @subpackage Client
class VidiunLiveChannelMatchAttributeCondition(VidiunSearchMatchAttributeCondition):
    """Auto-generated class.
     Used to search VidiunLiveChannel attributes. Use VidiunLiveChannelMatchAttribute enum to provide attribute name.
    /"""

    def __init__(self,
            value=NotImplemented,
            not_=NotImplemented,
            attribute=NotImplemented):
        VidiunSearchMatchAttributeCondition.__init__(self,
            value,
            not_)

        # @var VidiunLiveChannelMatchAttribute
        self.attribute = attribute


    PROPERTY_LOADERS = {
        'attribute': (VidiunEnumsFactory.createString, "VidiunLiveChannelMatchAttribute"), 
    }

    def fromXml(self, node):
        VidiunSearchMatchAttributeCondition.fromXml(self, node)
        self.fromXmlImpl(node, VidiunLiveChannelMatchAttributeCondition.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunSearchMatchAttributeCondition.toParams(self)
        vparams.put("objectType", "VidiunLiveChannelMatchAttributeCondition")
        vparams.addStringEnumIfDefined("attribute", self.attribute)
        return vparams

    def getAttribute(self):
        return self.attribute

    def setAttribute(self, newAttribute):
        self.attribute = newAttribute


# @package Vidiun
# @subpackage Client
class VidiunLiveChannelSegmentFilter(VidiunLiveChannelSegmentBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented,
            channelIdEqual=NotImplemented,
            channelIdIn=NotImplemented,
            startTimeGreaterThanOrEqual=NotImplemented,
            startTimeLessThanOrEqual=NotImplemented):
        VidiunLiveChannelSegmentBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            statusEqual,
            statusIn,
            channelIdEqual,
            channelIdIn,
            startTimeGreaterThanOrEqual,
            startTimeLessThanOrEqual)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunLiveChannelSegmentBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunLiveChannelSegmentFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunLiveChannelSegmentBaseFilter.toParams(self)
        vparams.put("objectType", "VidiunLiveChannelSegmentFilter")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunLiveEntryCompareAttributeCondition(VidiunSearchComparableAttributeCondition):
    """Auto-generated class.
     Used to search VidiunLiveEntry attributes. Use VidiunLiveEntryCompareAttribute enum to provide attribute name.
    /"""

    def __init__(self,
            value=NotImplemented,
            comparison=NotImplemented,
            attribute=NotImplemented):
        VidiunSearchComparableAttributeCondition.__init__(self,
            value,
            comparison)

        # @var VidiunLiveEntryCompareAttribute
        self.attribute = attribute


    PROPERTY_LOADERS = {
        'attribute': (VidiunEnumsFactory.createString, "VidiunLiveEntryCompareAttribute"), 
    }

    def fromXml(self, node):
        VidiunSearchComparableAttributeCondition.fromXml(self, node)
        self.fromXmlImpl(node, VidiunLiveEntryCompareAttributeCondition.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunSearchComparableAttributeCondition.toParams(self)
        vparams.put("objectType", "VidiunLiveEntryCompareAttributeCondition")
        vparams.addStringEnumIfDefined("attribute", self.attribute)
        return vparams

    def getAttribute(self):
        return self.attribute

    def setAttribute(self, newAttribute):
        self.attribute = newAttribute


# @package Vidiun
# @subpackage Client
class VidiunLiveEntryMatchAttributeCondition(VidiunSearchMatchAttributeCondition):
    """Auto-generated class.
     Used to search VidiunLiveEntry attributes. Use VidiunLiveEntryMatchAttribute enum to provide attribute name.
    /"""

    def __init__(self,
            value=NotImplemented,
            not_=NotImplemented,
            attribute=NotImplemented):
        VidiunSearchMatchAttributeCondition.__init__(self,
            value,
            not_)

        # @var VidiunLiveEntryMatchAttribute
        self.attribute = attribute


    PROPERTY_LOADERS = {
        'attribute': (VidiunEnumsFactory.createString, "VidiunLiveEntryMatchAttribute"), 
    }

    def fromXml(self, node):
        VidiunSearchMatchAttributeCondition.fromXml(self, node)
        self.fromXmlImpl(node, VidiunLiveEntryMatchAttributeCondition.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunSearchMatchAttributeCondition.toParams(self)
        vparams.put("objectType", "VidiunLiveEntryMatchAttributeCondition")
        vparams.addStringEnumIfDefined("attribute", self.attribute)
        return vparams

    def getAttribute(self):
        return self.attribute

    def setAttribute(self, newAttribute):
        self.attribute = newAttribute


# @package Vidiun
# @subpackage Client
class VidiunLiveStreamAdminEntryCompareAttributeCondition(VidiunSearchComparableAttributeCondition):
    """Auto-generated class.
     Used to search VidiunLiveStreamAdminEntry attributes. Use VidiunLiveStreamAdminEntryCompareAttribute enum to provide attribute name.
    /"""

    def __init__(self,
            value=NotImplemented,
            comparison=NotImplemented,
            attribute=NotImplemented):
        VidiunSearchComparableAttributeCondition.__init__(self,
            value,
            comparison)

        # @var VidiunLiveStreamAdminEntryCompareAttribute
        self.attribute = attribute


    PROPERTY_LOADERS = {
        'attribute': (VidiunEnumsFactory.createString, "VidiunLiveStreamAdminEntryCompareAttribute"), 
    }

    def fromXml(self, node):
        VidiunSearchComparableAttributeCondition.fromXml(self, node)
        self.fromXmlImpl(node, VidiunLiveStreamAdminEntryCompareAttributeCondition.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunSearchComparableAttributeCondition.toParams(self)
        vparams.put("objectType", "VidiunLiveStreamAdminEntryCompareAttributeCondition")
        vparams.addStringEnumIfDefined("attribute", self.attribute)
        return vparams

    def getAttribute(self):
        return self.attribute

    def setAttribute(self, newAttribute):
        self.attribute = newAttribute


# @package Vidiun
# @subpackage Client
class VidiunLiveStreamAdminEntryMatchAttributeCondition(VidiunSearchMatchAttributeCondition):
    """Auto-generated class.
     Used to search VidiunLiveStreamAdminEntry attributes. Use VidiunLiveStreamAdminEntryMatchAttribute enum to provide attribute name.
    /"""

    def __init__(self,
            value=NotImplemented,
            not_=NotImplemented,
            attribute=NotImplemented):
        VidiunSearchMatchAttributeCondition.__init__(self,
            value,
            not_)

        # @var VidiunLiveStreamAdminEntryMatchAttribute
        self.attribute = attribute


    PROPERTY_LOADERS = {
        'attribute': (VidiunEnumsFactory.createString, "VidiunLiveStreamAdminEntryMatchAttribute"), 
    }

    def fromXml(self, node):
        VidiunSearchMatchAttributeCondition.fromXml(self, node)
        self.fromXmlImpl(node, VidiunLiveStreamAdminEntryMatchAttributeCondition.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunSearchMatchAttributeCondition.toParams(self)
        vparams.put("objectType", "VidiunLiveStreamAdminEntryMatchAttributeCondition")
        vparams.addStringEnumIfDefined("attribute", self.attribute)
        return vparams

    def getAttribute(self):
        return self.attribute

    def setAttribute(self, newAttribute):
        self.attribute = newAttribute


# @package Vidiun
# @subpackage Client
class VidiunLiveStreamEntryCompareAttributeCondition(VidiunSearchComparableAttributeCondition):
    """Auto-generated class.
     Used to search VidiunLiveStreamEntry attributes. Use VidiunLiveStreamEntryCompareAttribute enum to provide attribute name.
    /"""

    def __init__(self,
            value=NotImplemented,
            comparison=NotImplemented,
            attribute=NotImplemented):
        VidiunSearchComparableAttributeCondition.__init__(self,
            value,
            comparison)

        # @var VidiunLiveStreamEntryCompareAttribute
        self.attribute = attribute


    PROPERTY_LOADERS = {
        'attribute': (VidiunEnumsFactory.createString, "VidiunLiveStreamEntryCompareAttribute"), 
    }

    def fromXml(self, node):
        VidiunSearchComparableAttributeCondition.fromXml(self, node)
        self.fromXmlImpl(node, VidiunLiveStreamEntryCompareAttributeCondition.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunSearchComparableAttributeCondition.toParams(self)
        vparams.put("objectType", "VidiunLiveStreamEntryCompareAttributeCondition")
        vparams.addStringEnumIfDefined("attribute", self.attribute)
        return vparams

    def getAttribute(self):
        return self.attribute

    def setAttribute(self, newAttribute):
        self.attribute = newAttribute


# @package Vidiun
# @subpackage Client
class VidiunLiveStreamEntryMatchAttributeCondition(VidiunSearchMatchAttributeCondition):
    """Auto-generated class.
     Used to search VidiunLiveStreamEntry attributes. Use VidiunLiveStreamEntryMatchAttribute enum to provide attribute name.
    /"""

    def __init__(self,
            value=NotImplemented,
            not_=NotImplemented,
            attribute=NotImplemented):
        VidiunSearchMatchAttributeCondition.__init__(self,
            value,
            not_)

        # @var VidiunLiveStreamEntryMatchAttribute
        self.attribute = attribute


    PROPERTY_LOADERS = {
        'attribute': (VidiunEnumsFactory.createString, "VidiunLiveStreamEntryMatchAttribute"), 
    }

    def fromXml(self, node):
        VidiunSearchMatchAttributeCondition.fromXml(self, node)
        self.fromXmlImpl(node, VidiunLiveStreamEntryMatchAttributeCondition.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunSearchMatchAttributeCondition.toParams(self)
        vparams.put("objectType", "VidiunLiveStreamEntryMatchAttributeCondition")
        vparams.addStringEnumIfDefined("attribute", self.attribute)
        return vparams

    def getAttribute(self):
        return self.attribute

    def setAttribute(self, newAttribute):
        self.attribute = newAttribute


# @package Vidiun
# @subpackage Client
class VidiunMediaEntryCompareAttributeCondition(VidiunSearchComparableAttributeCondition):
    """Auto-generated class.
     Used to search VidiunMediaEntry attributes. Use VidiunMediaEntryCompareAttribute enum to provide attribute name.
    /"""

    def __init__(self,
            value=NotImplemented,
            comparison=NotImplemented,
            attribute=NotImplemented):
        VidiunSearchComparableAttributeCondition.__init__(self,
            value,
            comparison)

        # @var VidiunMediaEntryCompareAttribute
        self.attribute = attribute


    PROPERTY_LOADERS = {
        'attribute': (VidiunEnumsFactory.createString, "VidiunMediaEntryCompareAttribute"), 
    }

    def fromXml(self, node):
        VidiunSearchComparableAttributeCondition.fromXml(self, node)
        self.fromXmlImpl(node, VidiunMediaEntryCompareAttributeCondition.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunSearchComparableAttributeCondition.toParams(self)
        vparams.put("objectType", "VidiunMediaEntryCompareAttributeCondition")
        vparams.addStringEnumIfDefined("attribute", self.attribute)
        return vparams

    def getAttribute(self):
        return self.attribute

    def setAttribute(self, newAttribute):
        self.attribute = newAttribute


# @package Vidiun
# @subpackage Client
class VidiunMediaEntryMatchAttributeCondition(VidiunSearchMatchAttributeCondition):
    """Auto-generated class.
     Used to search VidiunMediaEntry attributes. Use VidiunMediaEntryMatchAttribute enum to provide attribute name.
    /"""

    def __init__(self,
            value=NotImplemented,
            not_=NotImplemented,
            attribute=NotImplemented):
        VidiunSearchMatchAttributeCondition.__init__(self,
            value,
            not_)

        # @var VidiunMediaEntryMatchAttribute
        self.attribute = attribute


    PROPERTY_LOADERS = {
        'attribute': (VidiunEnumsFactory.createString, "VidiunMediaEntryMatchAttribute"), 
    }

    def fromXml(self, node):
        VidiunSearchMatchAttributeCondition.fromXml(self, node)
        self.fromXmlImpl(node, VidiunMediaEntryMatchAttributeCondition.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunSearchMatchAttributeCondition.toParams(self)
        vparams.put("objectType", "VidiunMediaEntryMatchAttributeCondition")
        vparams.addStringEnumIfDefined("attribute", self.attribute)
        return vparams

    def getAttribute(self):
        return self.attribute

    def setAttribute(self, newAttribute):
        self.attribute = newAttribute


# @package Vidiun
# @subpackage Client
class VidiunMediaFlavorParamsOutput(VidiunFlavorParamsOutput):
    def __init__(self,
            id=NotImplemented,
            partnerId=NotImplemented,
            name=NotImplemented,
            systemName=NotImplemented,
            description=NotImplemented,
            createdAt=NotImplemented,
            isSystemDefault=NotImplemented,
            tags=NotImplemented,
            requiredPermissions=NotImplemented,
            sourceRemoteStorageProfileId=NotImplemented,
            remoteStorageProfileIds=NotImplemented,
            mediaParserType=NotImplemented,
            sourceAssetParamsIds=NotImplemented,
            videoCodec=NotImplemented,
            videoBitrate=NotImplemented,
            audioCodec=NotImplemented,
            audioBitrate=NotImplemented,
            audioChannels=NotImplemented,
            audioSampleRate=NotImplemented,
            width=NotImplemented,
            height=NotImplemented,
            frameRate=NotImplemented,
            gopSize=NotImplemented,
            conversionEngines=NotImplemented,
            conversionEnginesExtraParams=NotImplemented,
            twoPass=NotImplemented,
            deinterlice=NotImplemented,
            rotate=NotImplemented,
            operators=NotImplemented,
            engineVersion=NotImplemented,
            format=NotImplemented,
            aspectRatioProcessingMode=NotImplemented,
            forceFrameToMultiplication16=NotImplemented,
            isGopInSec=NotImplemented,
            isAvoidVideoShrinkFramesizeToSource=NotImplemented,
            isAvoidVideoShrinkBitrateToSource=NotImplemented,
            isVideoFrameRateForLowBrAppleHls=NotImplemented,
            multiStream=NotImplemented,
            anamorphicPixels=NotImplemented,
            isAvoidForcedKeyFrames=NotImplemented,
            isCropIMX=NotImplemented,
            optimizationPolicy=NotImplemented,
            maxFrameRate=NotImplemented,
            videoConstantBitrate=NotImplemented,
            videoBitrateTolerance=NotImplemented,
            watermarkData=NotImplemented,
            subtitlesData=NotImplemented,
            isEncrypted=NotImplemented,
            contentAwareness=NotImplemented,
            clipOffset=NotImplemented,
            clipDuration=NotImplemented,
            flavorParamsId=NotImplemented,
            commandLinesStr=NotImplemented,
            flavorParamsVersion=NotImplemented,
            flavorAssetId=NotImplemented,
            flavorAssetVersion=NotImplemented,
            readyBehavior=NotImplemented):
        VidiunFlavorParamsOutput.__init__(self,
            id,
            partnerId,
            name,
            systemName,
            description,
            createdAt,
            isSystemDefault,
            tags,
            requiredPermissions,
            sourceRemoteStorageProfileId,
            remoteStorageProfileIds,
            mediaParserType,
            sourceAssetParamsIds,
            videoCodec,
            videoBitrate,
            audioCodec,
            audioBitrate,
            audioChannels,
            audioSampleRate,
            width,
            height,
            frameRate,
            gopSize,
            conversionEngines,
            conversionEnginesExtraParams,
            twoPass,
            deinterlice,
            rotate,
            operators,
            engineVersion,
            format,
            aspectRatioProcessingMode,
            forceFrameToMultiplication16,
            isGopInSec,
            isAvoidVideoShrinkFramesizeToSource,
            isAvoidVideoShrinkBitrateToSource,
            isVideoFrameRateForLowBrAppleHls,
            multiStream,
            anamorphicPixels,
            isAvoidForcedKeyFrames,
            isCropIMX,
            optimizationPolicy,
            maxFrameRate,
            videoConstantBitrate,
            videoBitrateTolerance,
            watermarkData,
            subtitlesData,
            isEncrypted,
            contentAwareness,
            clipOffset,
            clipDuration,
            flavorParamsId,
            commandLinesStr,
            flavorParamsVersion,
            flavorAssetId,
            flavorAssetVersion,
            readyBehavior)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunFlavorParamsOutput.fromXml(self, node)
        self.fromXmlImpl(node, VidiunMediaFlavorParamsOutput.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunFlavorParamsOutput.toParams(self)
        vparams.put("objectType", "VidiunMediaFlavorParamsOutput")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunMixEntryCompareAttributeCondition(VidiunSearchComparableAttributeCondition):
    """Auto-generated class.
     Used to search VidiunMixEntry attributes. Use VidiunMixEntryCompareAttribute enum to provide attribute name.
    /"""

    def __init__(self,
            value=NotImplemented,
            comparison=NotImplemented,
            attribute=NotImplemented):
        VidiunSearchComparableAttributeCondition.__init__(self,
            value,
            comparison)

        # @var VidiunMixEntryCompareAttribute
        self.attribute = attribute


    PROPERTY_LOADERS = {
        'attribute': (VidiunEnumsFactory.createString, "VidiunMixEntryCompareAttribute"), 
    }

    def fromXml(self, node):
        VidiunSearchComparableAttributeCondition.fromXml(self, node)
        self.fromXmlImpl(node, VidiunMixEntryCompareAttributeCondition.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunSearchComparableAttributeCondition.toParams(self)
        vparams.put("objectType", "VidiunMixEntryCompareAttributeCondition")
        vparams.addStringEnumIfDefined("attribute", self.attribute)
        return vparams

    def getAttribute(self):
        return self.attribute

    def setAttribute(self, newAttribute):
        self.attribute = newAttribute


# @package Vidiun
# @subpackage Client
class VidiunMixEntryMatchAttributeCondition(VidiunSearchMatchAttributeCondition):
    """Auto-generated class.
     Used to search VidiunMixEntry attributes. Use VidiunMixEntryMatchAttribute enum to provide attribute name.
    /"""

    def __init__(self,
            value=NotImplemented,
            not_=NotImplemented,
            attribute=NotImplemented):
        VidiunSearchMatchAttributeCondition.__init__(self,
            value,
            not_)

        # @var VidiunMixEntryMatchAttribute
        self.attribute = attribute


    PROPERTY_LOADERS = {
        'attribute': (VidiunEnumsFactory.createString, "VidiunMixEntryMatchAttribute"), 
    }

    def fromXml(self, node):
        VidiunSearchMatchAttributeCondition.fromXml(self, node)
        self.fromXmlImpl(node, VidiunMixEntryMatchAttributeCondition.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunSearchMatchAttributeCondition.toParams(self)
        vparams.put("objectType", "VidiunMixEntryMatchAttributeCondition")
        vparams.addStringEnumIfDefined("attribute", self.attribute)
        return vparams

    def getAttribute(self):
        return self.attribute

    def setAttribute(self, newAttribute):
        self.attribute = newAttribute


# @package Vidiun
# @subpackage Client
class VidiunObjectIdField(VidiunStringField):
    """Evaluates object ID according to given context"""

    def __init__(self,
            description=NotImplemented,
            value=NotImplemented):
        VidiunStringField.__init__(self,
            description,
            value)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunStringField.fromXml(self, node)
        self.fromXmlImpl(node, VidiunObjectIdField.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunStringField.toParams(self)
        vparams.put("objectType", "VidiunObjectIdField")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunPermissionFilter(VidiunPermissionBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            typeEqual=NotImplemented,
            typeIn=NotImplemented,
            nameEqual=NotImplemented,
            nameIn=NotImplemented,
            friendlyNameLike=NotImplemented,
            descriptionLike=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            dependsOnPermissionNamesMultiLikeOr=NotImplemented,
            dependsOnPermissionNamesMultiLikeAnd=NotImplemented,
            tagsMultiLikeOr=NotImplemented,
            tagsMultiLikeAnd=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented):
        VidiunPermissionBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            typeEqual,
            typeIn,
            nameEqual,
            nameIn,
            friendlyNameLike,
            descriptionLike,
            statusEqual,
            statusIn,
            partnerIdEqual,
            partnerIdIn,
            dependsOnPermissionNamesMultiLikeOr,
            dependsOnPermissionNamesMultiLikeAnd,
            tagsMultiLikeOr,
            tagsMultiLikeAnd,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunPermissionBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunPermissionFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunPermissionBaseFilter.toParams(self)
        vparams.put("objectType", "VidiunPermissionFilter")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunPermissionItemFilter(VidiunPermissionItemBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            typeEqual=NotImplemented,
            typeIn=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            tagsMultiLikeOr=NotImplemented,
            tagsMultiLikeAnd=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented):
        VidiunPermissionItemBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            typeEqual,
            typeIn,
            partnerIdEqual,
            partnerIdIn,
            tagsMultiLikeOr,
            tagsMultiLikeAnd,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunPermissionItemBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunPermissionItemFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunPermissionItemBaseFilter.toParams(self)
        vparams.put("objectType", "VidiunPermissionItemFilter")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunPlayableEntryCompareAttributeCondition(VidiunSearchComparableAttributeCondition):
    """Auto-generated class.
     Used to search VidiunPlayableEntry attributes. Use VidiunPlayableEntryCompareAttribute enum to provide attribute name.
    /"""

    def __init__(self,
            value=NotImplemented,
            comparison=NotImplemented,
            attribute=NotImplemented):
        VidiunSearchComparableAttributeCondition.__init__(self,
            value,
            comparison)

        # @var VidiunPlayableEntryCompareAttribute
        self.attribute = attribute


    PROPERTY_LOADERS = {
        'attribute': (VidiunEnumsFactory.createString, "VidiunPlayableEntryCompareAttribute"), 
    }

    def fromXml(self, node):
        VidiunSearchComparableAttributeCondition.fromXml(self, node)
        self.fromXmlImpl(node, VidiunPlayableEntryCompareAttributeCondition.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunSearchComparableAttributeCondition.toParams(self)
        vparams.put("objectType", "VidiunPlayableEntryCompareAttributeCondition")
        vparams.addStringEnumIfDefined("attribute", self.attribute)
        return vparams

    def getAttribute(self):
        return self.attribute

    def setAttribute(self, newAttribute):
        self.attribute = newAttribute


# @package Vidiun
# @subpackage Client
class VidiunPlayableEntryMatchAttributeCondition(VidiunSearchMatchAttributeCondition):
    """Auto-generated class.
     Used to search VidiunPlayableEntry attributes. Use VidiunPlayableEntryMatchAttribute enum to provide attribute name.
    /"""

    def __init__(self,
            value=NotImplemented,
            not_=NotImplemented,
            attribute=NotImplemented):
        VidiunSearchMatchAttributeCondition.__init__(self,
            value,
            not_)

        # @var VidiunPlayableEntryMatchAttribute
        self.attribute = attribute


    PROPERTY_LOADERS = {
        'attribute': (VidiunEnumsFactory.createString, "VidiunPlayableEntryMatchAttribute"), 
    }

    def fromXml(self, node):
        VidiunSearchMatchAttributeCondition.fromXml(self, node)
        self.fromXmlImpl(node, VidiunPlayableEntryMatchAttributeCondition.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunSearchMatchAttributeCondition.toParams(self)
        vparams.put("objectType", "VidiunPlayableEntryMatchAttributeCondition")
        vparams.addStringEnumIfDefined("attribute", self.attribute)
        return vparams

    def getAttribute(self):
        return self.attribute

    def setAttribute(self, newAttribute):
        self.attribute = newAttribute


# @package Vidiun
# @subpackage Client
class VidiunPlaylistCompareAttributeCondition(VidiunSearchComparableAttributeCondition):
    """Auto-generated class.
     Used to search VidiunPlaylist attributes. Use VidiunPlaylistCompareAttribute enum to provide attribute name.
    /"""

    def __init__(self,
            value=NotImplemented,
            comparison=NotImplemented,
            attribute=NotImplemented):
        VidiunSearchComparableAttributeCondition.__init__(self,
            value,
            comparison)

        # @var VidiunPlaylistCompareAttribute
        self.attribute = attribute


    PROPERTY_LOADERS = {
        'attribute': (VidiunEnumsFactory.createString, "VidiunPlaylistCompareAttribute"), 
    }

    def fromXml(self, node):
        VidiunSearchComparableAttributeCondition.fromXml(self, node)
        self.fromXmlImpl(node, VidiunPlaylistCompareAttributeCondition.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunSearchComparableAttributeCondition.toParams(self)
        vparams.put("objectType", "VidiunPlaylistCompareAttributeCondition")
        vparams.addStringEnumIfDefined("attribute", self.attribute)
        return vparams

    def getAttribute(self):
        return self.attribute

    def setAttribute(self, newAttribute):
        self.attribute = newAttribute


# @package Vidiun
# @subpackage Client
class VidiunPlaylistMatchAttributeCondition(VidiunSearchMatchAttributeCondition):
    """Auto-generated class.
     Used to search VidiunPlaylist attributes. Use VidiunPlaylistMatchAttribute enum to provide attribute name.
    /"""

    def __init__(self,
            value=NotImplemented,
            not_=NotImplemented,
            attribute=NotImplemented):
        VidiunSearchMatchAttributeCondition.__init__(self,
            value,
            not_)

        # @var VidiunPlaylistMatchAttribute
        self.attribute = attribute


    PROPERTY_LOADERS = {
        'attribute': (VidiunEnumsFactory.createString, "VidiunPlaylistMatchAttribute"), 
    }

    def fromXml(self, node):
        VidiunSearchMatchAttributeCondition.fromXml(self, node)
        self.fromXmlImpl(node, VidiunPlaylistMatchAttributeCondition.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunSearchMatchAttributeCondition.toParams(self)
        vparams.put("objectType", "VidiunPlaylistMatchAttributeCondition")
        vparams.addStringEnumIfDefined("attribute", self.attribute)
        return vparams

    def getAttribute(self):
        return self.attribute

    def setAttribute(self, newAttribute):
        self.attribute = newAttribute


# @package Vidiun
# @subpackage Client
class VidiunServerFileResource(VidiunDataCenterContentResource):
    """Used to ingest media file that is already accessible on the shared disc."""

    def __init__(self,
            localFilePath=NotImplemented,
            keepOriginalFile=NotImplemented):
        VidiunDataCenterContentResource.__init__(self)

        # Full path to the local file
        # @var string
        self.localFilePath = localFilePath

        # Should keep original file (false = mv, true = cp)
        # @var bool
        self.keepOriginalFile = keepOriginalFile


    PROPERTY_LOADERS = {
        'localFilePath': getXmlNodeText,
        'keepOriginalFile': getXmlNodeBool,
    }

    def fromXml(self, node):
        VidiunDataCenterContentResource.fromXml(self, node)
        self.fromXmlImpl(node, VidiunServerFileResource.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunDataCenterContentResource.toParams(self)
        vparams.put("objectType", "VidiunServerFileResource")
        vparams.addStringIfDefined("localFilePath", self.localFilePath)
        vparams.addBoolIfDefined("keepOriginalFile", self.keepOriginalFile)
        return vparams

    def getLocalFilePath(self):
        return self.localFilePath

    def setLocalFilePath(self, newLocalFilePath):
        self.localFilePath = newLocalFilePath

    def getKeepOriginalFile(self):
        return self.keepOriginalFile

    def setKeepOriginalFile(self, newKeepOriginalFile):
        self.keepOriginalFile = newKeepOriginalFile


# @package Vidiun
# @subpackage Client
class VidiunSshUrlResource(VidiunUrlResource):
    """Used to ingest media that is available on remote SSH server and accessible using the supplied URL, media file will be downloaded using import job in order to make the asset ready."""

    def __init__(self,
            url=NotImplemented,
            forceAsyncDownload=NotImplemented,
            privateKey=NotImplemented,
            publicKey=NotImplemented,
            keyPassphrase=NotImplemented):
        VidiunUrlResource.__init__(self,
            url,
            forceAsyncDownload)

        # SSH private key
        # @var string
        self.privateKey = privateKey

        # SSH public key
        # @var string
        self.publicKey = publicKey

        # Passphrase for SSH keys
        # @var string
        self.keyPassphrase = keyPassphrase


    PROPERTY_LOADERS = {
        'privateKey': getXmlNodeText, 
        'publicKey': getXmlNodeText, 
        'keyPassphrase': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunUrlResource.fromXml(self, node)
        self.fromXmlImpl(node, VidiunSshUrlResource.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunUrlResource.toParams(self)
        vparams.put("objectType", "VidiunSshUrlResource")
        vparams.addStringIfDefined("privateKey", self.privateKey)
        vparams.addStringIfDefined("publicKey", self.publicKey)
        vparams.addStringIfDefined("keyPassphrase", self.keyPassphrase)
        return vparams

    def getPrivateKey(self):
        return self.privateKey

    def setPrivateKey(self, newPrivateKey):
        self.privateKey = newPrivateKey

    def getPublicKey(self):
        return self.publicKey

    def setPublicKey(self, newPublicKey):
        self.publicKey = newPublicKey

    def getKeyPassphrase(self):
        return self.keyPassphrase

    def setKeyPassphrase(self, newKeyPassphrase):
        self.keyPassphrase = newKeyPassphrase


# @package Vidiun
# @subpackage Client
class VidiunTimeContextField(VidiunIntegerField):
    """Represents the current time context on Vidiun servers"""

    def __init__(self,
            description=NotImplemented,
            value=NotImplemented,
            offset=NotImplemented):
        VidiunIntegerField.__init__(self,
            description,
            value)

        # Time offset in seconds since current time
        # @var int
        self.offset = offset


    PROPERTY_LOADERS = {
        'offset': getXmlNodeInt, 
    }

    def fromXml(self, node):
        VidiunIntegerField.fromXml(self, node)
        self.fromXmlImpl(node, VidiunTimeContextField.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunIntegerField.toParams(self)
        vparams.put("objectType", "VidiunTimeContextField")
        vparams.addIntIfDefined("offset", self.offset)
        return vparams

    def getOffset(self):
        return self.offset

    def setOffset(self, newOffset):
        self.offset = newOffset


# @package Vidiun
# @subpackage Client
class VidiunTubeMogulSyndicationFeedBaseFilter(VidiunBaseSyndicationFeedFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented):
        VidiunBaseSyndicationFeedFilter.__init__(self,
            orderBy,
            advancedSearch)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunBaseSyndicationFeedFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunTubeMogulSyndicationFeedBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunBaseSyndicationFeedFilter.toParams(self)
        vparams.put("objectType", "VidiunTubeMogulSyndicationFeedBaseFilter")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunUploadedFileTokenResource(VidiunDataCenterContentResource):
    """Used to ingest media that uploaded to the system and represented by token that returned from upload.upload action or uploadToken.add action."""

    def __init__(self,
            token=NotImplemented):
        VidiunDataCenterContentResource.__init__(self)

        # Token that returned from upload.upload action or uploadToken.add action.
        # @var string
        self.token = token


    PROPERTY_LOADERS = {
        'token': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunDataCenterContentResource.fromXml(self, node)
        self.fromXmlImpl(node, VidiunUploadedFileTokenResource.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunDataCenterContentResource.toParams(self)
        vparams.put("objectType", "VidiunUploadedFileTokenResource")
        vparams.addStringIfDefined("token", self.token)
        return vparams

    def getToken(self):
        return self.token

    def setToken(self, newToken):
        self.token = newToken


# @package Vidiun
# @subpackage Client
class VidiunUserAgentCondition(VidiunRegexCondition):
    def __init__(self,
            type=NotImplemented,
            description=NotImplemented,
            not_=NotImplemented,
            values=NotImplemented):
        VidiunRegexCondition.__init__(self,
            type,
            description,
            not_,
            values)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunRegexCondition.fromXml(self, node)
        self.fromXmlImpl(node, VidiunUserAgentCondition.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunRegexCondition.toParams(self)
        vparams.put("objectType", "VidiunUserAgentCondition")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunUserAgentContextField(VidiunStringField):
    """Represents the current request user agent context"""

    def __init__(self,
            description=NotImplemented,
            value=NotImplemented):
        VidiunStringField.__init__(self,
            description,
            value)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunStringField.fromXml(self, node)
        self.fromXmlImpl(node, VidiunUserAgentContextField.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunStringField.toParams(self)
        vparams.put("objectType", "VidiunUserAgentContextField")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunUserEmailContextField(VidiunStringField):
    """Represents the current session user e-mail address context"""

    def __init__(self,
            description=NotImplemented,
            value=NotImplemented):
        VidiunStringField.__init__(self,
            description,
            value)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunStringField.fromXml(self, node)
        self.fromXmlImpl(node, VidiunUserEmailContextField.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunStringField.toParams(self)
        vparams.put("objectType", "VidiunUserEmailContextField")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunUserEntryFilter(VidiunUserEntryBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            idNotIn=NotImplemented,
            entryIdEqual=NotImplemented,
            entryIdIn=NotImplemented,
            entryIdNotIn=NotImplemented,
            userIdEqual=NotImplemented,
            userIdIn=NotImplemented,
            userIdNotIn=NotImplemented,
            statusEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            typeEqual=NotImplemented,
            userIdEqualCurrent=NotImplemented,
            isAnonymous=NotImplemented):
        VidiunUserEntryBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            idNotIn,
            entryIdEqual,
            entryIdIn,
            entryIdNotIn,
            userIdEqual,
            userIdIn,
            userIdNotIn,
            statusEqual,
            createdAtLessThanOrEqual,
            createdAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            typeEqual)

        # @var VidiunNullableBoolean
        self.userIdEqualCurrent = userIdEqualCurrent

        # @var VidiunNullableBoolean
        self.isAnonymous = isAnonymous


    PROPERTY_LOADERS = {
        'userIdEqualCurrent': (VidiunEnumsFactory.createInt, "VidiunNullableBoolean"), 
        'isAnonymous': (VidiunEnumsFactory.createInt, "VidiunNullableBoolean"), 
    }

    def fromXml(self, node):
        VidiunUserEntryBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunUserEntryFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunUserEntryBaseFilter.toParams(self)
        vparams.put("objectType", "VidiunUserEntryFilter")
        vparams.addIntEnumIfDefined("userIdEqualCurrent", self.userIdEqualCurrent)
        vparams.addIntEnumIfDefined("isAnonymous", self.isAnonymous)
        return vparams

    def getUserIdEqualCurrent(self):
        return self.userIdEqualCurrent

    def setUserIdEqualCurrent(self, newUserIdEqualCurrent):
        self.userIdEqualCurrent = newUserIdEqualCurrent

    def getIsAnonymous(self):
        return self.isAnonymous

    def setIsAnonymous(self, newIsAnonymous):
        self.isAnonymous = newIsAnonymous


# @package Vidiun
# @subpackage Client
class VidiunUserLoginDataFilter(VidiunUserLoginDataBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            loginEmailEqual=NotImplemented):
        VidiunUserLoginDataBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            loginEmailEqual)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunUserLoginDataBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunUserLoginDataFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunUserLoginDataBaseFilter.toParams(self)
        vparams.put("objectType", "VidiunUserLoginDataFilter")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunUserRoleFilter(VidiunUserRoleBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            nameEqual=NotImplemented,
            nameIn=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            descriptionLike=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            tagsMultiLikeOr=NotImplemented,
            tagsMultiLikeAnd=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented):
        VidiunUserRoleBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            nameEqual,
            nameIn,
            systemNameEqual,
            systemNameIn,
            descriptionLike,
            statusEqual,
            statusIn,
            partnerIdEqual,
            partnerIdIn,
            tagsMultiLikeOr,
            tagsMultiLikeAnd,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunUserRoleBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunUserRoleFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunUserRoleBaseFilter.toParams(self)
        vparams.put("objectType", "VidiunUserRoleFilter")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunWebcamTokenResource(VidiunDataCenterContentResource):
    """Used to ingest media that streamed to the system and represented by token that returned from media server such as FMS or red5."""

    def __init__(self,
            token=NotImplemented):
        VidiunDataCenterContentResource.__init__(self)

        # Token that returned from media server such as FMS or red5.
        # @var string
        self.token = token


    PROPERTY_LOADERS = {
        'token': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunDataCenterContentResource.fromXml(self, node)
        self.fromXmlImpl(node, VidiunWebcamTokenResource.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunDataCenterContentResource.toParams(self)
        vparams.put("objectType", "VidiunWebcamTokenResource")
        vparams.addStringIfDefined("token", self.token)
        return vparams

    def getToken(self):
        return self.token

    def setToken(self, newToken):
        self.token = newToken


# @package Vidiun
# @subpackage Client
class VidiunYahooSyndicationFeedBaseFilter(VidiunBaseSyndicationFeedFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented):
        VidiunBaseSyndicationFeedFilter.__init__(self,
            orderBy,
            advancedSearch)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunBaseSyndicationFeedFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunYahooSyndicationFeedBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunBaseSyndicationFeedFilter.toParams(self)
        vparams.put("objectType", "VidiunYahooSyndicationFeedBaseFilter")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunAdminUserBaseFilter(VidiunUserFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            partnerIdEqual=NotImplemented,
            typeEqual=NotImplemented,
            typeIn=NotImplemented,
            screenNameLike=NotImplemented,
            screenNameStartsWith=NotImplemented,
            emailLike=NotImplemented,
            emailStartsWith=NotImplemented,
            tagsMultiLikeOr=NotImplemented,
            tagsMultiLikeAnd=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            firstNameStartsWith=NotImplemented,
            lastNameStartsWith=NotImplemented,
            isAdminEqual=NotImplemented,
            idOrScreenNameStartsWith=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            loginEnabledEqual=NotImplemented,
            roleIdEqual=NotImplemented,
            roleIdsEqual=NotImplemented,
            roleIdsIn=NotImplemented,
            firstNameOrLastNameStartsWith=NotImplemented,
            permissionNamesMultiLikeOr=NotImplemented,
            permissionNamesMultiLikeAnd=NotImplemented):
        VidiunUserFilter.__init__(self,
            orderBy,
            advancedSearch,
            partnerIdEqual,
            typeEqual,
            typeIn,
            screenNameLike,
            screenNameStartsWith,
            emailLike,
            emailStartsWith,
            tagsMultiLikeOr,
            tagsMultiLikeAnd,
            statusEqual,
            statusIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            firstNameStartsWith,
            lastNameStartsWith,
            isAdminEqual,
            idOrScreenNameStartsWith,
            idEqual,
            idIn,
            loginEnabledEqual,
            roleIdEqual,
            roleIdsEqual,
            roleIdsIn,
            firstNameOrLastNameStartsWith,
            permissionNamesMultiLikeOr,
            permissionNamesMultiLikeAnd)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunUserFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunAdminUserBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunUserFilter.toParams(self)
        vparams.put("objectType", "VidiunAdminUserBaseFilter")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunAmazonS3StorageProfileFilter(VidiunAmazonS3StorageProfileBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented,
            protocolEqual=NotImplemented,
            protocolIn=NotImplemented):
        VidiunAmazonS3StorageProfileBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            partnerIdEqual,
            partnerIdIn,
            systemNameEqual,
            systemNameIn,
            statusEqual,
            statusIn,
            protocolEqual,
            protocolIn)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunAmazonS3StorageProfileBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunAmazonS3StorageProfileFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunAmazonS3StorageProfileBaseFilter.toParams(self)
        vparams.put("objectType", "VidiunAmazonS3StorageProfileFilter")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunApiActionPermissionItemBaseFilter(VidiunPermissionItemFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            typeEqual=NotImplemented,
            typeIn=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            tagsMultiLikeOr=NotImplemented,
            tagsMultiLikeAnd=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented):
        VidiunPermissionItemFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            typeEqual,
            typeIn,
            partnerIdEqual,
            partnerIdIn,
            tagsMultiLikeOr,
            tagsMultiLikeAnd,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunPermissionItemFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunApiActionPermissionItemBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunPermissionItemFilter.toParams(self)
        vparams.put("objectType", "VidiunApiActionPermissionItemBaseFilter")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunApiParameterPermissionItemBaseFilter(VidiunPermissionItemFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            typeEqual=NotImplemented,
            typeIn=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            tagsMultiLikeOr=NotImplemented,
            tagsMultiLikeAnd=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented):
        VidiunPermissionItemFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            typeEqual,
            typeIn,
            partnerIdEqual,
            partnerIdIn,
            tagsMultiLikeOr,
            tagsMultiLikeAnd,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunPermissionItemFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunApiParameterPermissionItemBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunPermissionItemFilter.toParams(self)
        vparams.put("objectType", "VidiunApiParameterPermissionItemBaseFilter")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunAssetParamsOutputBaseFilter(VidiunAssetParamsFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            isSystemDefaultEqual=NotImplemented,
            tagsEqual=NotImplemented):
        VidiunAssetParamsFilter.__init__(self,
            orderBy,
            advancedSearch,
            systemNameEqual,
            systemNameIn,
            isSystemDefaultEqual,
            tagsEqual)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunAssetParamsFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunAssetParamsOutputBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunAssetParamsFilter.toParams(self)
        vparams.put("objectType", "VidiunAssetParamsOutputBaseFilter")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunDataEntryBaseFilter(VidiunBaseEntryFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            idNotIn=NotImplemented,
            nameLike=NotImplemented,
            nameMultiLikeOr=NotImplemented,
            nameMultiLikeAnd=NotImplemented,
            nameEqual=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            userIdEqual=NotImplemented,
            userIdIn=NotImplemented,
            creatorIdEqual=NotImplemented,
            tagsLike=NotImplemented,
            tagsMultiLikeOr=NotImplemented,
            tagsMultiLikeAnd=NotImplemented,
            adminTagsLike=NotImplemented,
            adminTagsMultiLikeOr=NotImplemented,
            adminTagsMultiLikeAnd=NotImplemented,
            categoriesMatchAnd=NotImplemented,
            categoriesMatchOr=NotImplemented,
            categoriesNotContains=NotImplemented,
            categoriesIdsMatchAnd=NotImplemented,
            categoriesIdsMatchOr=NotImplemented,
            categoriesIdsNotContains=NotImplemented,
            categoriesIdsEmpty=NotImplemented,
            statusEqual=NotImplemented,
            statusNotEqual=NotImplemented,
            statusIn=NotImplemented,
            statusNotIn=NotImplemented,
            moderationStatusEqual=NotImplemented,
            moderationStatusNotEqual=NotImplemented,
            moderationStatusIn=NotImplemented,
            moderationStatusNotIn=NotImplemented,
            typeEqual=NotImplemented,
            typeIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            totalRankLessThanOrEqual=NotImplemented,
            totalRankGreaterThanOrEqual=NotImplemented,
            groupIdEqual=NotImplemented,
            searchTextMatchAnd=NotImplemented,
            searchTextMatchOr=NotImplemented,
            accessControlIdEqual=NotImplemented,
            accessControlIdIn=NotImplemented,
            startDateGreaterThanOrEqual=NotImplemented,
            startDateLessThanOrEqual=NotImplemented,
            startDateGreaterThanOrEqualOrNull=NotImplemented,
            startDateLessThanOrEqualOrNull=NotImplemented,
            endDateGreaterThanOrEqual=NotImplemented,
            endDateLessThanOrEqual=NotImplemented,
            endDateGreaterThanOrEqualOrNull=NotImplemented,
            endDateLessThanOrEqualOrNull=NotImplemented,
            referenceIdEqual=NotImplemented,
            referenceIdIn=NotImplemented,
            replacingEntryIdEqual=NotImplemented,
            replacingEntryIdIn=NotImplemented,
            replacedEntryIdEqual=NotImplemented,
            replacedEntryIdIn=NotImplemented,
            replacementStatusEqual=NotImplemented,
            replacementStatusIn=NotImplemented,
            partnerSortValueGreaterThanOrEqual=NotImplemented,
            partnerSortValueLessThanOrEqual=NotImplemented,
            rootEntryIdEqual=NotImplemented,
            rootEntryIdIn=NotImplemented,
            parentEntryIdEqual=NotImplemented,
            entitledUsersEditMatchAnd=NotImplemented,
            entitledUsersEditMatchOr=NotImplemented,
            entitledUsersPublishMatchAnd=NotImplemented,
            entitledUsersPublishMatchOr=NotImplemented,
            tagsNameMultiLikeOr=NotImplemented,
            tagsAdminTagsMultiLikeOr=NotImplemented,
            tagsAdminTagsNameMultiLikeOr=NotImplemented,
            tagsNameMultiLikeAnd=NotImplemented,
            tagsAdminTagsMultiLikeAnd=NotImplemented,
            tagsAdminTagsNameMultiLikeAnd=NotImplemented,
            freeText=NotImplemented,
            isRoot=NotImplemented,
            categoriesFullNameIn=NotImplemented,
            categoryAncestorIdIn=NotImplemented,
            redirectFromEntryId=NotImplemented):
        VidiunBaseEntryFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            idNotIn,
            nameLike,
            nameMultiLikeOr,
            nameMultiLikeAnd,
            nameEqual,
            partnerIdEqual,
            partnerIdIn,
            userIdEqual,
            userIdIn,
            creatorIdEqual,
            tagsLike,
            tagsMultiLikeOr,
            tagsMultiLikeAnd,
            adminTagsLike,
            adminTagsMultiLikeOr,
            adminTagsMultiLikeAnd,
            categoriesMatchAnd,
            categoriesMatchOr,
            categoriesNotContains,
            categoriesIdsMatchAnd,
            categoriesIdsMatchOr,
            categoriesIdsNotContains,
            categoriesIdsEmpty,
            statusEqual,
            statusNotEqual,
            statusIn,
            statusNotIn,
            moderationStatusEqual,
            moderationStatusNotEqual,
            moderationStatusIn,
            moderationStatusNotIn,
            typeEqual,
            typeIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            totalRankLessThanOrEqual,
            totalRankGreaterThanOrEqual,
            groupIdEqual,
            searchTextMatchAnd,
            searchTextMatchOr,
            accessControlIdEqual,
            accessControlIdIn,
            startDateGreaterThanOrEqual,
            startDateLessThanOrEqual,
            startDateGreaterThanOrEqualOrNull,
            startDateLessThanOrEqualOrNull,
            endDateGreaterThanOrEqual,
            endDateLessThanOrEqual,
            endDateGreaterThanOrEqualOrNull,
            endDateLessThanOrEqualOrNull,
            referenceIdEqual,
            referenceIdIn,
            replacingEntryIdEqual,
            replacingEntryIdIn,
            replacedEntryIdEqual,
            replacedEntryIdIn,
            replacementStatusEqual,
            replacementStatusIn,
            partnerSortValueGreaterThanOrEqual,
            partnerSortValueLessThanOrEqual,
            rootEntryIdEqual,
            rootEntryIdIn,
            parentEntryIdEqual,
            entitledUsersEditMatchAnd,
            entitledUsersEditMatchOr,
            entitledUsersPublishMatchAnd,
            entitledUsersPublishMatchOr,
            tagsNameMultiLikeOr,
            tagsAdminTagsMultiLikeOr,
            tagsAdminTagsNameMultiLikeOr,
            tagsNameMultiLikeAnd,
            tagsAdminTagsMultiLikeAnd,
            tagsAdminTagsNameMultiLikeAnd,
            freeText,
            isRoot,
            categoriesFullNameIn,
            categoryAncestorIdIn,
            redirectFromEntryId)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunBaseEntryFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunDataEntryBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunBaseEntryFilter.toParams(self)
        vparams.put("objectType", "VidiunDataEntryBaseFilter")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunDeliveryProfileAkamaiAppleHttpManifestFilter(VidiunDeliveryProfileAkamaiAppleHttpManifestBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            streamerTypeEqual=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented):
        VidiunDeliveryProfileAkamaiAppleHttpManifestBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            partnerIdEqual,
            partnerIdIn,
            systemNameEqual,
            systemNameIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            streamerTypeEqual,
            statusEqual,
            statusIn)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunDeliveryProfileAkamaiAppleHttpManifestBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunDeliveryProfileAkamaiAppleHttpManifestFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunDeliveryProfileAkamaiAppleHttpManifestBaseFilter.toParams(self)
        vparams.put("objectType", "VidiunDeliveryProfileAkamaiAppleHttpManifestFilter")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunDeliveryProfileAkamaiHdsFilter(VidiunDeliveryProfileAkamaiHdsBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            streamerTypeEqual=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented):
        VidiunDeliveryProfileAkamaiHdsBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            partnerIdEqual,
            partnerIdIn,
            systemNameEqual,
            systemNameIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            streamerTypeEqual,
            statusEqual,
            statusIn)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunDeliveryProfileAkamaiHdsBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunDeliveryProfileAkamaiHdsFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunDeliveryProfileAkamaiHdsBaseFilter.toParams(self)
        vparams.put("objectType", "VidiunDeliveryProfileAkamaiHdsFilter")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunDeliveryProfileAkamaiHttpFilter(VidiunDeliveryProfileAkamaiHttpBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            streamerTypeEqual=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented):
        VidiunDeliveryProfileAkamaiHttpBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            partnerIdEqual,
            partnerIdIn,
            systemNameEqual,
            systemNameIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            streamerTypeEqual,
            statusEqual,
            statusIn)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunDeliveryProfileAkamaiHttpBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunDeliveryProfileAkamaiHttpFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunDeliveryProfileAkamaiHttpBaseFilter.toParams(self)
        vparams.put("objectType", "VidiunDeliveryProfileAkamaiHttpFilter")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunDeliveryProfileGenericAppleHttpFilter(VidiunDeliveryProfileGenericAppleHttpBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            streamerTypeEqual=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented):
        VidiunDeliveryProfileGenericAppleHttpBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            partnerIdEqual,
            partnerIdIn,
            systemNameEqual,
            systemNameIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            streamerTypeEqual,
            statusEqual,
            statusIn)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunDeliveryProfileGenericAppleHttpBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunDeliveryProfileGenericAppleHttpFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunDeliveryProfileGenericAppleHttpBaseFilter.toParams(self)
        vparams.put("objectType", "VidiunDeliveryProfileGenericAppleHttpFilter")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunDeliveryProfileGenericHdsFilter(VidiunDeliveryProfileGenericHdsBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            streamerTypeEqual=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented):
        VidiunDeliveryProfileGenericHdsBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            partnerIdEqual,
            partnerIdIn,
            systemNameEqual,
            systemNameIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            streamerTypeEqual,
            statusEqual,
            statusIn)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunDeliveryProfileGenericHdsBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunDeliveryProfileGenericHdsFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunDeliveryProfileGenericHdsBaseFilter.toParams(self)
        vparams.put("objectType", "VidiunDeliveryProfileGenericHdsFilter")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunDeliveryProfileGenericHttpFilter(VidiunDeliveryProfileGenericHttpBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            streamerTypeEqual=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented):
        VidiunDeliveryProfileGenericHttpBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            partnerIdEqual,
            partnerIdIn,
            systemNameEqual,
            systemNameIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            streamerTypeEqual,
            statusEqual,
            statusIn)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunDeliveryProfileGenericHttpBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunDeliveryProfileGenericHttpFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunDeliveryProfileGenericHttpBaseFilter.toParams(self)
        vparams.put("objectType", "VidiunDeliveryProfileGenericHttpFilter")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunDeliveryProfileGenericSilverLightFilter(VidiunDeliveryProfileGenericSilverLightBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            streamerTypeEqual=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented):
        VidiunDeliveryProfileGenericSilverLightBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            partnerIdEqual,
            partnerIdIn,
            systemNameEqual,
            systemNameIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            streamerTypeEqual,
            statusEqual,
            statusIn)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunDeliveryProfileGenericSilverLightBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunDeliveryProfileGenericSilverLightFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunDeliveryProfileGenericSilverLightBaseFilter.toParams(self)
        vparams.put("objectType", "VidiunDeliveryProfileGenericSilverLightFilter")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunDeliveryProfileLiveAppleHttpFilter(VidiunDeliveryProfileLiveAppleHttpBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            streamerTypeEqual=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented):
        VidiunDeliveryProfileLiveAppleHttpBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            partnerIdEqual,
            partnerIdIn,
            systemNameEqual,
            systemNameIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            streamerTypeEqual,
            statusEqual,
            statusIn)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunDeliveryProfileLiveAppleHttpBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunDeliveryProfileLiveAppleHttpFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunDeliveryProfileLiveAppleHttpBaseFilter.toParams(self)
        vparams.put("objectType", "VidiunDeliveryProfileLiveAppleHttpFilter")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunDeliveryProfileRtmpFilter(VidiunDeliveryProfileRtmpBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            streamerTypeEqual=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented):
        VidiunDeliveryProfileRtmpBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            partnerIdEqual,
            partnerIdIn,
            systemNameEqual,
            systemNameIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            streamerTypeEqual,
            statusEqual,
            statusIn)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunDeliveryProfileRtmpBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunDeliveryProfileRtmpFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunDeliveryProfileRtmpBaseFilter.toParams(self)
        vparams.put("objectType", "VidiunDeliveryProfileRtmpFilter")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunDeliveryServerNodeFilter(VidiunDeliveryServerNodeBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            heartbeatTimeGreaterThanOrEqual=NotImplemented,
            heartbeatTimeLessThanOrEqual=NotImplemented,
            nameEqual=NotImplemented,
            nameIn=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            hostNameLike=NotImplemented,
            hostNameMultiLikeOr=NotImplemented,
            hostNameMultiLikeAnd=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented,
            typeEqual=NotImplemented,
            typeIn=NotImplemented,
            tagsLike=NotImplemented,
            tagsMultiLikeOr=NotImplemented,
            tagsMultiLikeAnd=NotImplemented,
            dcEqual=NotImplemented,
            dcIn=NotImplemented,
            parentIdEqual=NotImplemented,
            parentIdIn=NotImplemented,
            playbackDomainLike=NotImplemented,
            playbackDomainMultiLikeOr=NotImplemented,
            playbackDomainMultiLikeAnd=NotImplemented):
        VidiunDeliveryServerNodeBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            heartbeatTimeGreaterThanOrEqual,
            heartbeatTimeLessThanOrEqual,
            nameEqual,
            nameIn,
            systemNameEqual,
            systemNameIn,
            hostNameLike,
            hostNameMultiLikeOr,
            hostNameMultiLikeAnd,
            statusEqual,
            statusIn,
            typeEqual,
            typeIn,
            tagsLike,
            tagsMultiLikeOr,
            tagsMultiLikeAnd,
            dcEqual,
            dcIn,
            parentIdEqual,
            parentIdIn,
            playbackDomainLike,
            playbackDomainMultiLikeOr,
            playbackDomainMultiLikeAnd)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunDeliveryServerNodeBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunDeliveryServerNodeFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunDeliveryServerNodeBaseFilter.toParams(self)
        vparams.put("objectType", "VidiunDeliveryServerNodeFilter")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunFlavorAssetBaseFilter(VidiunAssetFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            entryIdEqual=NotImplemented,
            entryIdIn=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            sizeGreaterThanOrEqual=NotImplemented,
            sizeLessThanOrEqual=NotImplemented,
            tagsLike=NotImplemented,
            tagsMultiLikeOr=NotImplemented,
            tagsMultiLikeAnd=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            deletedAtGreaterThanOrEqual=NotImplemented,
            deletedAtLessThanOrEqual=NotImplemented,
            flavorParamsIdEqual=NotImplemented,
            flavorParamsIdIn=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented,
            statusNotIn=NotImplemented):
        VidiunAssetFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            entryIdEqual,
            entryIdIn,
            partnerIdEqual,
            partnerIdIn,
            sizeGreaterThanOrEqual,
            sizeLessThanOrEqual,
            tagsLike,
            tagsMultiLikeOr,
            tagsMultiLikeAnd,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            deletedAtGreaterThanOrEqual,
            deletedAtLessThanOrEqual)

        # @var int
        self.flavorParamsIdEqual = flavorParamsIdEqual

        # @var string
        self.flavorParamsIdIn = flavorParamsIdIn

        # @var VidiunFlavorAssetStatus
        self.statusEqual = statusEqual

        # @var string
        self.statusIn = statusIn

        # @var string
        self.statusNotIn = statusNotIn


    PROPERTY_LOADERS = {
        'flavorParamsIdEqual': getXmlNodeInt, 
        'flavorParamsIdIn': getXmlNodeText, 
        'statusEqual': (VidiunEnumsFactory.createInt, "VidiunFlavorAssetStatus"), 
        'statusIn': getXmlNodeText, 
        'statusNotIn': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunAssetFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunFlavorAssetBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunAssetFilter.toParams(self)
        vparams.put("objectType", "VidiunFlavorAssetBaseFilter")
        vparams.addIntIfDefined("flavorParamsIdEqual", self.flavorParamsIdEqual)
        vparams.addStringIfDefined("flavorParamsIdIn", self.flavorParamsIdIn)
        vparams.addIntEnumIfDefined("statusEqual", self.statusEqual)
        vparams.addStringIfDefined("statusIn", self.statusIn)
        vparams.addStringIfDefined("statusNotIn", self.statusNotIn)
        return vparams

    def getFlavorParamsIdEqual(self):
        return self.flavorParamsIdEqual

    def setFlavorParamsIdEqual(self, newFlavorParamsIdEqual):
        self.flavorParamsIdEqual = newFlavorParamsIdEqual

    def getFlavorParamsIdIn(self):
        return self.flavorParamsIdIn

    def setFlavorParamsIdIn(self, newFlavorParamsIdIn):
        self.flavorParamsIdIn = newFlavorParamsIdIn

    def getStatusEqual(self):
        return self.statusEqual

    def setStatusEqual(self, newStatusEqual):
        self.statusEqual = newStatusEqual

    def getStatusIn(self):
        return self.statusIn

    def setStatusIn(self, newStatusIn):
        self.statusIn = newStatusIn

    def getStatusNotIn(self):
        return self.statusNotIn

    def setStatusNotIn(self, newStatusNotIn):
        self.statusNotIn = newStatusNotIn


# @package Vidiun
# @subpackage Client
class VidiunFlavorParamsBaseFilter(VidiunAssetParamsFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            isSystemDefaultEqual=NotImplemented,
            tagsEqual=NotImplemented,
            formatEqual=NotImplemented):
        VidiunAssetParamsFilter.__init__(self,
            orderBy,
            advancedSearch,
            systemNameEqual,
            systemNameIn,
            isSystemDefaultEqual,
            tagsEqual)

        # @var VidiunContainerFormat
        self.formatEqual = formatEqual


    PROPERTY_LOADERS = {
        'formatEqual': (VidiunEnumsFactory.createString, "VidiunContainerFormat"), 
    }

    def fromXml(self, node):
        VidiunAssetParamsFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunFlavorParamsBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunAssetParamsFilter.toParams(self)
        vparams.put("objectType", "VidiunFlavorParamsBaseFilter")
        vparams.addStringEnumIfDefined("formatEqual", self.formatEqual)
        return vparams

    def getFormatEqual(self):
        return self.formatEqual

    def setFormatEqual(self, newFormatEqual):
        self.formatEqual = newFormatEqual


# @package Vidiun
# @subpackage Client
class VidiunGenericSyndicationFeedFilter(VidiunGenericSyndicationFeedBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented):
        VidiunGenericSyndicationFeedBaseFilter.__init__(self,
            orderBy,
            advancedSearch)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunGenericSyndicationFeedBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunGenericSyndicationFeedFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunGenericSyndicationFeedBaseFilter.toParams(self)
        vparams.put("objectType", "VidiunGenericSyndicationFeedFilter")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunGoogleVideoSyndicationFeedFilter(VidiunGoogleVideoSyndicationFeedBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented):
        VidiunGoogleVideoSyndicationFeedBaseFilter.__init__(self,
            orderBy,
            advancedSearch)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunGoogleVideoSyndicationFeedBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunGoogleVideoSyndicationFeedFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunGoogleVideoSyndicationFeedBaseFilter.toParams(self)
        vparams.put("objectType", "VidiunGoogleVideoSyndicationFeedFilter")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunITunesSyndicationFeedFilter(VidiunITunesSyndicationFeedBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented):
        VidiunITunesSyndicationFeedBaseFilter.__init__(self,
            orderBy,
            advancedSearch)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunITunesSyndicationFeedBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunITunesSyndicationFeedFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunITunesSyndicationFeedBaseFilter.toParams(self)
        vparams.put("objectType", "VidiunITunesSyndicationFeedFilter")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunLiveEntryServerNodeBaseFilter(VidiunEntryServerNodeFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            entryIdEqual=NotImplemented,
            entryIdIn=NotImplemented,
            serverNodeIdEqual=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented,
            serverTypeEqual=NotImplemented):
        VidiunEntryServerNodeFilter.__init__(self,
            orderBy,
            advancedSearch,
            entryIdEqual,
            entryIdIn,
            serverNodeIdEqual,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            statusEqual,
            statusIn,
            serverTypeEqual)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunEntryServerNodeFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunLiveEntryServerNodeBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunEntryServerNodeFilter.toParams(self)
        vparams.put("objectType", "VidiunLiveEntryServerNodeBaseFilter")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunPlaylistBaseFilter(VidiunBaseEntryFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            idNotIn=NotImplemented,
            nameLike=NotImplemented,
            nameMultiLikeOr=NotImplemented,
            nameMultiLikeAnd=NotImplemented,
            nameEqual=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            userIdEqual=NotImplemented,
            userIdIn=NotImplemented,
            creatorIdEqual=NotImplemented,
            tagsLike=NotImplemented,
            tagsMultiLikeOr=NotImplemented,
            tagsMultiLikeAnd=NotImplemented,
            adminTagsLike=NotImplemented,
            adminTagsMultiLikeOr=NotImplemented,
            adminTagsMultiLikeAnd=NotImplemented,
            categoriesMatchAnd=NotImplemented,
            categoriesMatchOr=NotImplemented,
            categoriesNotContains=NotImplemented,
            categoriesIdsMatchAnd=NotImplemented,
            categoriesIdsMatchOr=NotImplemented,
            categoriesIdsNotContains=NotImplemented,
            categoriesIdsEmpty=NotImplemented,
            statusEqual=NotImplemented,
            statusNotEqual=NotImplemented,
            statusIn=NotImplemented,
            statusNotIn=NotImplemented,
            moderationStatusEqual=NotImplemented,
            moderationStatusNotEqual=NotImplemented,
            moderationStatusIn=NotImplemented,
            moderationStatusNotIn=NotImplemented,
            typeEqual=NotImplemented,
            typeIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            totalRankLessThanOrEqual=NotImplemented,
            totalRankGreaterThanOrEqual=NotImplemented,
            groupIdEqual=NotImplemented,
            searchTextMatchAnd=NotImplemented,
            searchTextMatchOr=NotImplemented,
            accessControlIdEqual=NotImplemented,
            accessControlIdIn=NotImplemented,
            startDateGreaterThanOrEqual=NotImplemented,
            startDateLessThanOrEqual=NotImplemented,
            startDateGreaterThanOrEqualOrNull=NotImplemented,
            startDateLessThanOrEqualOrNull=NotImplemented,
            endDateGreaterThanOrEqual=NotImplemented,
            endDateLessThanOrEqual=NotImplemented,
            endDateGreaterThanOrEqualOrNull=NotImplemented,
            endDateLessThanOrEqualOrNull=NotImplemented,
            referenceIdEqual=NotImplemented,
            referenceIdIn=NotImplemented,
            replacingEntryIdEqual=NotImplemented,
            replacingEntryIdIn=NotImplemented,
            replacedEntryIdEqual=NotImplemented,
            replacedEntryIdIn=NotImplemented,
            replacementStatusEqual=NotImplemented,
            replacementStatusIn=NotImplemented,
            partnerSortValueGreaterThanOrEqual=NotImplemented,
            partnerSortValueLessThanOrEqual=NotImplemented,
            rootEntryIdEqual=NotImplemented,
            rootEntryIdIn=NotImplemented,
            parentEntryIdEqual=NotImplemented,
            entitledUsersEditMatchAnd=NotImplemented,
            entitledUsersEditMatchOr=NotImplemented,
            entitledUsersPublishMatchAnd=NotImplemented,
            entitledUsersPublishMatchOr=NotImplemented,
            tagsNameMultiLikeOr=NotImplemented,
            tagsAdminTagsMultiLikeOr=NotImplemented,
            tagsAdminTagsNameMultiLikeOr=NotImplemented,
            tagsNameMultiLikeAnd=NotImplemented,
            tagsAdminTagsMultiLikeAnd=NotImplemented,
            tagsAdminTagsNameMultiLikeAnd=NotImplemented,
            freeText=NotImplemented,
            isRoot=NotImplemented,
            categoriesFullNameIn=NotImplemented,
            categoryAncestorIdIn=NotImplemented,
            redirectFromEntryId=NotImplemented):
        VidiunBaseEntryFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            idNotIn,
            nameLike,
            nameMultiLikeOr,
            nameMultiLikeAnd,
            nameEqual,
            partnerIdEqual,
            partnerIdIn,
            userIdEqual,
            userIdIn,
            creatorIdEqual,
            tagsLike,
            tagsMultiLikeOr,
            tagsMultiLikeAnd,
            adminTagsLike,
            adminTagsMultiLikeOr,
            adminTagsMultiLikeAnd,
            categoriesMatchAnd,
            categoriesMatchOr,
            categoriesNotContains,
            categoriesIdsMatchAnd,
            categoriesIdsMatchOr,
            categoriesIdsNotContains,
            categoriesIdsEmpty,
            statusEqual,
            statusNotEqual,
            statusIn,
            statusNotIn,
            moderationStatusEqual,
            moderationStatusNotEqual,
            moderationStatusIn,
            moderationStatusNotIn,
            typeEqual,
            typeIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            totalRankLessThanOrEqual,
            totalRankGreaterThanOrEqual,
            groupIdEqual,
            searchTextMatchAnd,
            searchTextMatchOr,
            accessControlIdEqual,
            accessControlIdIn,
            startDateGreaterThanOrEqual,
            startDateLessThanOrEqual,
            startDateGreaterThanOrEqualOrNull,
            startDateLessThanOrEqualOrNull,
            endDateGreaterThanOrEqual,
            endDateLessThanOrEqual,
            endDateGreaterThanOrEqualOrNull,
            endDateLessThanOrEqualOrNull,
            referenceIdEqual,
            referenceIdIn,
            replacingEntryIdEqual,
            replacingEntryIdIn,
            replacedEntryIdEqual,
            replacedEntryIdIn,
            replacementStatusEqual,
            replacementStatusIn,
            partnerSortValueGreaterThanOrEqual,
            partnerSortValueLessThanOrEqual,
            rootEntryIdEqual,
            rootEntryIdIn,
            parentEntryIdEqual,
            entitledUsersEditMatchAnd,
            entitledUsersEditMatchOr,
            entitledUsersPublishMatchAnd,
            entitledUsersPublishMatchOr,
            tagsNameMultiLikeOr,
            tagsAdminTagsMultiLikeOr,
            tagsAdminTagsNameMultiLikeOr,
            tagsNameMultiLikeAnd,
            tagsAdminTagsMultiLikeAnd,
            tagsAdminTagsNameMultiLikeAnd,
            freeText,
            isRoot,
            categoriesFullNameIn,
            categoryAncestorIdIn,
            redirectFromEntryId)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunBaseEntryFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunPlaylistBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunBaseEntryFilter.toParams(self)
        vparams.put("objectType", "VidiunPlaylistBaseFilter")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunQuizUserEntryBaseFilter(VidiunUserEntryFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            idNotIn=NotImplemented,
            entryIdEqual=NotImplemented,
            entryIdIn=NotImplemented,
            entryIdNotIn=NotImplemented,
            userIdEqual=NotImplemented,
            userIdIn=NotImplemented,
            userIdNotIn=NotImplemented,
            statusEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            typeEqual=NotImplemented,
            userIdEqualCurrent=NotImplemented,
            isAnonymous=NotImplemented):
        VidiunUserEntryFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            idNotIn,
            entryIdEqual,
            entryIdIn,
            entryIdNotIn,
            userIdEqual,
            userIdIn,
            userIdNotIn,
            statusEqual,
            createdAtLessThanOrEqual,
            createdAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            typeEqual,
            userIdEqualCurrent,
            isAnonymous)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunUserEntryFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunQuizUserEntryBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunUserEntryFilter.toParams(self)
        vparams.put("objectType", "VidiunQuizUserEntryBaseFilter")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunThumbAssetBaseFilter(VidiunAssetFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            entryIdEqual=NotImplemented,
            entryIdIn=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            sizeGreaterThanOrEqual=NotImplemented,
            sizeLessThanOrEqual=NotImplemented,
            tagsLike=NotImplemented,
            tagsMultiLikeOr=NotImplemented,
            tagsMultiLikeAnd=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            deletedAtGreaterThanOrEqual=NotImplemented,
            deletedAtLessThanOrEqual=NotImplemented,
            thumbParamsIdEqual=NotImplemented,
            thumbParamsIdIn=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented,
            statusNotIn=NotImplemented):
        VidiunAssetFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            entryIdEqual,
            entryIdIn,
            partnerIdEqual,
            partnerIdIn,
            sizeGreaterThanOrEqual,
            sizeLessThanOrEqual,
            tagsLike,
            tagsMultiLikeOr,
            tagsMultiLikeAnd,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            deletedAtGreaterThanOrEqual,
            deletedAtLessThanOrEqual)

        # @var int
        self.thumbParamsIdEqual = thumbParamsIdEqual

        # @var string
        self.thumbParamsIdIn = thumbParamsIdIn

        # @var VidiunThumbAssetStatus
        self.statusEqual = statusEqual

        # @var string
        self.statusIn = statusIn

        # @var string
        self.statusNotIn = statusNotIn


    PROPERTY_LOADERS = {
        'thumbParamsIdEqual': getXmlNodeInt, 
        'thumbParamsIdIn': getXmlNodeText, 
        'statusEqual': (VidiunEnumsFactory.createInt, "VidiunThumbAssetStatus"), 
        'statusIn': getXmlNodeText, 
        'statusNotIn': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunAssetFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunThumbAssetBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunAssetFilter.toParams(self)
        vparams.put("objectType", "VidiunThumbAssetBaseFilter")
        vparams.addIntIfDefined("thumbParamsIdEqual", self.thumbParamsIdEqual)
        vparams.addStringIfDefined("thumbParamsIdIn", self.thumbParamsIdIn)
        vparams.addIntEnumIfDefined("statusEqual", self.statusEqual)
        vparams.addStringIfDefined("statusIn", self.statusIn)
        vparams.addStringIfDefined("statusNotIn", self.statusNotIn)
        return vparams

    def getThumbParamsIdEqual(self):
        return self.thumbParamsIdEqual

    def setThumbParamsIdEqual(self, newThumbParamsIdEqual):
        self.thumbParamsIdEqual = newThumbParamsIdEqual

    def getThumbParamsIdIn(self):
        return self.thumbParamsIdIn

    def setThumbParamsIdIn(self, newThumbParamsIdIn):
        self.thumbParamsIdIn = newThumbParamsIdIn

    def getStatusEqual(self):
        return self.statusEqual

    def setStatusEqual(self, newStatusEqual):
        self.statusEqual = newStatusEqual

    def getStatusIn(self):
        return self.statusIn

    def setStatusIn(self, newStatusIn):
        self.statusIn = newStatusIn

    def getStatusNotIn(self):
        return self.statusNotIn

    def setStatusNotIn(self, newStatusNotIn):
        self.statusNotIn = newStatusNotIn


# @package Vidiun
# @subpackage Client
class VidiunThumbParamsBaseFilter(VidiunAssetParamsFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            isSystemDefaultEqual=NotImplemented,
            tagsEqual=NotImplemented,
            formatEqual=NotImplemented):
        VidiunAssetParamsFilter.__init__(self,
            orderBy,
            advancedSearch,
            systemNameEqual,
            systemNameIn,
            isSystemDefaultEqual,
            tagsEqual)

        # @var VidiunContainerFormat
        self.formatEqual = formatEqual


    PROPERTY_LOADERS = {
        'formatEqual': (VidiunEnumsFactory.createString, "VidiunContainerFormat"), 
    }

    def fromXml(self, node):
        VidiunAssetParamsFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunThumbParamsBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunAssetParamsFilter.toParams(self)
        vparams.put("objectType", "VidiunThumbParamsBaseFilter")
        vparams.addStringEnumIfDefined("formatEqual", self.formatEqual)
        return vparams

    def getFormatEqual(self):
        return self.formatEqual

    def setFormatEqual(self, newFormatEqual):
        self.formatEqual = newFormatEqual


# @package Vidiun
# @subpackage Client
class VidiunTubeMogulSyndicationFeedFilter(VidiunTubeMogulSyndicationFeedBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented):
        VidiunTubeMogulSyndicationFeedBaseFilter.__init__(self,
            orderBy,
            advancedSearch)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunTubeMogulSyndicationFeedBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunTubeMogulSyndicationFeedFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunTubeMogulSyndicationFeedBaseFilter.toParams(self)
        vparams.put("objectType", "VidiunTubeMogulSyndicationFeedFilter")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunYahooSyndicationFeedFilter(VidiunYahooSyndicationFeedBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented):
        VidiunYahooSyndicationFeedBaseFilter.__init__(self,
            orderBy,
            advancedSearch)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunYahooSyndicationFeedBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunYahooSyndicationFeedFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunYahooSyndicationFeedBaseFilter.toParams(self)
        vparams.put("objectType", "VidiunYahooSyndicationFeedFilter")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunAdminUserFilter(VidiunAdminUserBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            partnerIdEqual=NotImplemented,
            typeEqual=NotImplemented,
            typeIn=NotImplemented,
            screenNameLike=NotImplemented,
            screenNameStartsWith=NotImplemented,
            emailLike=NotImplemented,
            emailStartsWith=NotImplemented,
            tagsMultiLikeOr=NotImplemented,
            tagsMultiLikeAnd=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            firstNameStartsWith=NotImplemented,
            lastNameStartsWith=NotImplemented,
            isAdminEqual=NotImplemented,
            idOrScreenNameStartsWith=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            loginEnabledEqual=NotImplemented,
            roleIdEqual=NotImplemented,
            roleIdsEqual=NotImplemented,
            roleIdsIn=NotImplemented,
            firstNameOrLastNameStartsWith=NotImplemented,
            permissionNamesMultiLikeOr=NotImplemented,
            permissionNamesMultiLikeAnd=NotImplemented):
        VidiunAdminUserBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            partnerIdEqual,
            typeEqual,
            typeIn,
            screenNameLike,
            screenNameStartsWith,
            emailLike,
            emailStartsWith,
            tagsMultiLikeOr,
            tagsMultiLikeAnd,
            statusEqual,
            statusIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            firstNameStartsWith,
            lastNameStartsWith,
            isAdminEqual,
            idOrScreenNameStartsWith,
            idEqual,
            idIn,
            loginEnabledEqual,
            roleIdEqual,
            roleIdsEqual,
            roleIdsIn,
            firstNameOrLastNameStartsWith,
            permissionNamesMultiLikeOr,
            permissionNamesMultiLikeAnd)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunAdminUserBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunAdminUserFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunAdminUserBaseFilter.toParams(self)
        vparams.put("objectType", "VidiunAdminUserFilter")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunApiActionPermissionItemFilter(VidiunApiActionPermissionItemBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            typeEqual=NotImplemented,
            typeIn=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            tagsMultiLikeOr=NotImplemented,
            tagsMultiLikeAnd=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented):
        VidiunApiActionPermissionItemBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            typeEqual,
            typeIn,
            partnerIdEqual,
            partnerIdIn,
            tagsMultiLikeOr,
            tagsMultiLikeAnd,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunApiActionPermissionItemBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunApiActionPermissionItemFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunApiActionPermissionItemBaseFilter.toParams(self)
        vparams.put("objectType", "VidiunApiActionPermissionItemFilter")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunApiParameterPermissionItemFilter(VidiunApiParameterPermissionItemBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            typeEqual=NotImplemented,
            typeIn=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            tagsMultiLikeOr=NotImplemented,
            tagsMultiLikeAnd=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented):
        VidiunApiParameterPermissionItemBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            typeEqual,
            typeIn,
            partnerIdEqual,
            partnerIdIn,
            tagsMultiLikeOr,
            tagsMultiLikeAnd,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunApiParameterPermissionItemBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunApiParameterPermissionItemFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunApiParameterPermissionItemBaseFilter.toParams(self)
        vparams.put("objectType", "VidiunApiParameterPermissionItemFilter")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunAssetParamsOutputFilter(VidiunAssetParamsOutputBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            isSystemDefaultEqual=NotImplemented,
            tagsEqual=NotImplemented):
        VidiunAssetParamsOutputBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            systemNameEqual,
            systemNameIn,
            isSystemDefaultEqual,
            tagsEqual)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunAssetParamsOutputBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunAssetParamsOutputFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunAssetParamsOutputBaseFilter.toParams(self)
        vparams.put("objectType", "VidiunAssetParamsOutputFilter")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunDataEntryFilter(VidiunDataEntryBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            idNotIn=NotImplemented,
            nameLike=NotImplemented,
            nameMultiLikeOr=NotImplemented,
            nameMultiLikeAnd=NotImplemented,
            nameEqual=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            userIdEqual=NotImplemented,
            userIdIn=NotImplemented,
            creatorIdEqual=NotImplemented,
            tagsLike=NotImplemented,
            tagsMultiLikeOr=NotImplemented,
            tagsMultiLikeAnd=NotImplemented,
            adminTagsLike=NotImplemented,
            adminTagsMultiLikeOr=NotImplemented,
            adminTagsMultiLikeAnd=NotImplemented,
            categoriesMatchAnd=NotImplemented,
            categoriesMatchOr=NotImplemented,
            categoriesNotContains=NotImplemented,
            categoriesIdsMatchAnd=NotImplemented,
            categoriesIdsMatchOr=NotImplemented,
            categoriesIdsNotContains=NotImplemented,
            categoriesIdsEmpty=NotImplemented,
            statusEqual=NotImplemented,
            statusNotEqual=NotImplemented,
            statusIn=NotImplemented,
            statusNotIn=NotImplemented,
            moderationStatusEqual=NotImplemented,
            moderationStatusNotEqual=NotImplemented,
            moderationStatusIn=NotImplemented,
            moderationStatusNotIn=NotImplemented,
            typeEqual=NotImplemented,
            typeIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            totalRankLessThanOrEqual=NotImplemented,
            totalRankGreaterThanOrEqual=NotImplemented,
            groupIdEqual=NotImplemented,
            searchTextMatchAnd=NotImplemented,
            searchTextMatchOr=NotImplemented,
            accessControlIdEqual=NotImplemented,
            accessControlIdIn=NotImplemented,
            startDateGreaterThanOrEqual=NotImplemented,
            startDateLessThanOrEqual=NotImplemented,
            startDateGreaterThanOrEqualOrNull=NotImplemented,
            startDateLessThanOrEqualOrNull=NotImplemented,
            endDateGreaterThanOrEqual=NotImplemented,
            endDateLessThanOrEqual=NotImplemented,
            endDateGreaterThanOrEqualOrNull=NotImplemented,
            endDateLessThanOrEqualOrNull=NotImplemented,
            referenceIdEqual=NotImplemented,
            referenceIdIn=NotImplemented,
            replacingEntryIdEqual=NotImplemented,
            replacingEntryIdIn=NotImplemented,
            replacedEntryIdEqual=NotImplemented,
            replacedEntryIdIn=NotImplemented,
            replacementStatusEqual=NotImplemented,
            replacementStatusIn=NotImplemented,
            partnerSortValueGreaterThanOrEqual=NotImplemented,
            partnerSortValueLessThanOrEqual=NotImplemented,
            rootEntryIdEqual=NotImplemented,
            rootEntryIdIn=NotImplemented,
            parentEntryIdEqual=NotImplemented,
            entitledUsersEditMatchAnd=NotImplemented,
            entitledUsersEditMatchOr=NotImplemented,
            entitledUsersPublishMatchAnd=NotImplemented,
            entitledUsersPublishMatchOr=NotImplemented,
            tagsNameMultiLikeOr=NotImplemented,
            tagsAdminTagsMultiLikeOr=NotImplemented,
            tagsAdminTagsNameMultiLikeOr=NotImplemented,
            tagsNameMultiLikeAnd=NotImplemented,
            tagsAdminTagsMultiLikeAnd=NotImplemented,
            tagsAdminTagsNameMultiLikeAnd=NotImplemented,
            freeText=NotImplemented,
            isRoot=NotImplemented,
            categoriesFullNameIn=NotImplemented,
            categoryAncestorIdIn=NotImplemented,
            redirectFromEntryId=NotImplemented):
        VidiunDataEntryBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            idNotIn,
            nameLike,
            nameMultiLikeOr,
            nameMultiLikeAnd,
            nameEqual,
            partnerIdEqual,
            partnerIdIn,
            userIdEqual,
            userIdIn,
            creatorIdEqual,
            tagsLike,
            tagsMultiLikeOr,
            tagsMultiLikeAnd,
            adminTagsLike,
            adminTagsMultiLikeOr,
            adminTagsMultiLikeAnd,
            categoriesMatchAnd,
            categoriesMatchOr,
            categoriesNotContains,
            categoriesIdsMatchAnd,
            categoriesIdsMatchOr,
            categoriesIdsNotContains,
            categoriesIdsEmpty,
            statusEqual,
            statusNotEqual,
            statusIn,
            statusNotIn,
            moderationStatusEqual,
            moderationStatusNotEqual,
            moderationStatusIn,
            moderationStatusNotIn,
            typeEqual,
            typeIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            totalRankLessThanOrEqual,
            totalRankGreaterThanOrEqual,
            groupIdEqual,
            searchTextMatchAnd,
            searchTextMatchOr,
            accessControlIdEqual,
            accessControlIdIn,
            startDateGreaterThanOrEqual,
            startDateLessThanOrEqual,
            startDateGreaterThanOrEqualOrNull,
            startDateLessThanOrEqualOrNull,
            endDateGreaterThanOrEqual,
            endDateLessThanOrEqual,
            endDateGreaterThanOrEqualOrNull,
            endDateLessThanOrEqualOrNull,
            referenceIdEqual,
            referenceIdIn,
            replacingEntryIdEqual,
            replacingEntryIdIn,
            replacedEntryIdEqual,
            replacedEntryIdIn,
            replacementStatusEqual,
            replacementStatusIn,
            partnerSortValueGreaterThanOrEqual,
            partnerSortValueLessThanOrEqual,
            rootEntryIdEqual,
            rootEntryIdIn,
            parentEntryIdEqual,
            entitledUsersEditMatchAnd,
            entitledUsersEditMatchOr,
            entitledUsersPublishMatchAnd,
            entitledUsersPublishMatchOr,
            tagsNameMultiLikeOr,
            tagsAdminTagsMultiLikeOr,
            tagsAdminTagsNameMultiLikeOr,
            tagsNameMultiLikeAnd,
            tagsAdminTagsMultiLikeAnd,
            tagsAdminTagsNameMultiLikeAnd,
            freeText,
            isRoot,
            categoriesFullNameIn,
            categoryAncestorIdIn,
            redirectFromEntryId)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunDataEntryBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunDataEntryFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunDataEntryBaseFilter.toParams(self)
        vparams.put("objectType", "VidiunDataEntryFilter")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunDeliveryProfileGenericRtmpBaseFilter(VidiunDeliveryProfileRtmpFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            streamerTypeEqual=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented):
        VidiunDeliveryProfileRtmpFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            partnerIdEqual,
            partnerIdIn,
            systemNameEqual,
            systemNameIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            streamerTypeEqual,
            statusEqual,
            statusIn)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunDeliveryProfileRtmpFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunDeliveryProfileGenericRtmpBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunDeliveryProfileRtmpFilter.toParams(self)
        vparams.put("objectType", "VidiunDeliveryProfileGenericRtmpBaseFilter")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunEdgeServerNodeBaseFilter(VidiunDeliveryServerNodeFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            heartbeatTimeGreaterThanOrEqual=NotImplemented,
            heartbeatTimeLessThanOrEqual=NotImplemented,
            nameEqual=NotImplemented,
            nameIn=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            hostNameLike=NotImplemented,
            hostNameMultiLikeOr=NotImplemented,
            hostNameMultiLikeAnd=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented,
            typeEqual=NotImplemented,
            typeIn=NotImplemented,
            tagsLike=NotImplemented,
            tagsMultiLikeOr=NotImplemented,
            tagsMultiLikeAnd=NotImplemented,
            dcEqual=NotImplemented,
            dcIn=NotImplemented,
            parentIdEqual=NotImplemented,
            parentIdIn=NotImplemented,
            playbackDomainLike=NotImplemented,
            playbackDomainMultiLikeOr=NotImplemented,
            playbackDomainMultiLikeAnd=NotImplemented):
        VidiunDeliveryServerNodeFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            heartbeatTimeGreaterThanOrEqual,
            heartbeatTimeLessThanOrEqual,
            nameEqual,
            nameIn,
            systemNameEqual,
            systemNameIn,
            hostNameLike,
            hostNameMultiLikeOr,
            hostNameMultiLikeAnd,
            statusEqual,
            statusIn,
            typeEqual,
            typeIn,
            tagsLike,
            tagsMultiLikeOr,
            tagsMultiLikeAnd,
            dcEqual,
            dcIn,
            parentIdEqual,
            parentIdIn,
            playbackDomainLike,
            playbackDomainMultiLikeOr,
            playbackDomainMultiLikeAnd)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunDeliveryServerNodeFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunEdgeServerNodeBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunDeliveryServerNodeFilter.toParams(self)
        vparams.put("objectType", "VidiunEdgeServerNodeBaseFilter")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunFlavorAssetFilter(VidiunFlavorAssetBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            entryIdEqual=NotImplemented,
            entryIdIn=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            sizeGreaterThanOrEqual=NotImplemented,
            sizeLessThanOrEqual=NotImplemented,
            tagsLike=NotImplemented,
            tagsMultiLikeOr=NotImplemented,
            tagsMultiLikeAnd=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            deletedAtGreaterThanOrEqual=NotImplemented,
            deletedAtLessThanOrEqual=NotImplemented,
            flavorParamsIdEqual=NotImplemented,
            flavorParamsIdIn=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented,
            statusNotIn=NotImplemented):
        VidiunFlavorAssetBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            entryIdEqual,
            entryIdIn,
            partnerIdEqual,
            partnerIdIn,
            sizeGreaterThanOrEqual,
            sizeLessThanOrEqual,
            tagsLike,
            tagsMultiLikeOr,
            tagsMultiLikeAnd,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            deletedAtGreaterThanOrEqual,
            deletedAtLessThanOrEqual,
            flavorParamsIdEqual,
            flavorParamsIdIn,
            statusEqual,
            statusIn,
            statusNotIn)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunFlavorAssetBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunFlavorAssetFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunFlavorAssetBaseFilter.toParams(self)
        vparams.put("objectType", "VidiunFlavorAssetFilter")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunFlavorParamsFilter(VidiunFlavorParamsBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            isSystemDefaultEqual=NotImplemented,
            tagsEqual=NotImplemented,
            formatEqual=NotImplemented):
        VidiunFlavorParamsBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            systemNameEqual,
            systemNameIn,
            isSystemDefaultEqual,
            tagsEqual,
            formatEqual)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunFlavorParamsBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunFlavorParamsFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunFlavorParamsBaseFilter.toParams(self)
        vparams.put("objectType", "VidiunFlavorParamsFilter")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunGenericXsltSyndicationFeedBaseFilter(VidiunGenericSyndicationFeedFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented):
        VidiunGenericSyndicationFeedFilter.__init__(self,
            orderBy,
            advancedSearch)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunGenericSyndicationFeedFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunGenericXsltSyndicationFeedBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunGenericSyndicationFeedFilter.toParams(self)
        vparams.put("objectType", "VidiunGenericXsltSyndicationFeedBaseFilter")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunLiveEntryServerNodeFilter(VidiunLiveEntryServerNodeBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            entryIdEqual=NotImplemented,
            entryIdIn=NotImplemented,
            serverNodeIdEqual=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented,
            serverTypeEqual=NotImplemented):
        VidiunLiveEntryServerNodeBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            entryIdEqual,
            entryIdIn,
            serverNodeIdEqual,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            statusEqual,
            statusIn,
            serverTypeEqual)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunLiveEntryServerNodeBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunLiveEntryServerNodeFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunLiveEntryServerNodeBaseFilter.toParams(self)
        vparams.put("objectType", "VidiunLiveEntryServerNodeFilter")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunLiveStreamAdminEntry(VidiunLiveStreamEntry):
    def __init__(self,
            id=NotImplemented,
            name=NotImplemented,
            description=NotImplemented,
            partnerId=NotImplemented,
            userId=NotImplemented,
            creatorId=NotImplemented,
            tags=NotImplemented,
            adminTags=NotImplemented,
            categories=NotImplemented,
            categoriesIds=NotImplemented,
            status=NotImplemented,
            moderationStatus=NotImplemented,
            moderationCount=NotImplemented,
            type=NotImplemented,
            createdAt=NotImplemented,
            updatedAt=NotImplemented,
            rank=NotImplemented,
            totalRank=NotImplemented,
            votes=NotImplemented,
            groupId=NotImplemented,
            partnerData=NotImplemented,
            downloadUrl=NotImplemented,
            searchText=NotImplemented,
            licenseType=NotImplemented,
            version=NotImplemented,
            thumbnailUrl=NotImplemented,
            accessControlId=NotImplemented,
            startDate=NotImplemented,
            endDate=NotImplemented,
            referenceId=NotImplemented,
            replacingEntryId=NotImplemented,
            replacedEntryId=NotImplemented,
            replacementStatus=NotImplemented,
            partnerSortValue=NotImplemented,
            conversionProfileId=NotImplemented,
            redirectEntryId=NotImplemented,
            rootEntryId=NotImplemented,
            parentEntryId=NotImplemented,
            operationAttributes=NotImplemented,
            entitledUsersEdit=NotImplemented,
            entitledUsersPublish=NotImplemented,
            capabilities=NotImplemented,
            templateEntryId=NotImplemented,
            plays=NotImplemented,
            views=NotImplemented,
            lastPlayedAt=NotImplemented,
            width=NotImplemented,
            height=NotImplemented,
            duration=NotImplemented,
            msDuration=NotImplemented,
            durationType=NotImplemented,
            mediaType=NotImplemented,
            conversionQuality=NotImplemented,
            sourceType=NotImplemented,
            searchProviderType=NotImplemented,
            searchProviderId=NotImplemented,
            creditUserName=NotImplemented,
            creditUrl=NotImplemented,
            mediaDate=NotImplemented,
            dataUrl=NotImplemented,
            flavorParamsIds=NotImplemented,
            isTrimDisabled=NotImplemented,
            offlineMessage=NotImplemented,
            recordStatus=NotImplemented,
            dvrStatus=NotImplemented,
            dvrWindow=NotImplemented,
            lastElapsedRecordingTime=NotImplemented,
            liveStreamConfigurations=NotImplemented,
            recordedEntryId=NotImplemented,
            pushPublishEnabled=NotImplemented,
            publishConfigurations=NotImplemented,
            firstBroadcast=NotImplemented,
            lastBroadcast=NotImplemented,
            currentBroadcastStartTime=NotImplemented,
            recordingOptions=NotImplemented,
            liveStatus=NotImplemented,
            streamRemoteId=NotImplemented,
            streamRemoteBackupId=NotImplemented,
            bitrates=NotImplemented,
            primaryBroadcastingUrl=NotImplemented,
            secondaryBroadcastingUrl=NotImplemented,
            primaryRtspBroadcastingUrl=NotImplemented,
            secondaryRtspBroadcastingUrl=NotImplemented,
            streamName=NotImplemented,
            streamUrl=NotImplemented,
            hlsStreamUrl=NotImplemented,
            urlManager=NotImplemented,
            encodingIP1=NotImplemented,
            encodingIP2=NotImplemented,
            streamPassword=NotImplemented,
            streamUsername=NotImplemented,
            primaryServerNodeId=NotImplemented):
        VidiunLiveStreamEntry.__init__(self,
            id,
            name,
            description,
            partnerId,
            userId,
            creatorId,
            tags,
            adminTags,
            categories,
            categoriesIds,
            status,
            moderationStatus,
            moderationCount,
            type,
            createdAt,
            updatedAt,
            rank,
            totalRank,
            votes,
            groupId,
            partnerData,
            downloadUrl,
            searchText,
            licenseType,
            version,
            thumbnailUrl,
            accessControlId,
            startDate,
            endDate,
            referenceId,
            replacingEntryId,
            replacedEntryId,
            replacementStatus,
            partnerSortValue,
            conversionProfileId,
            redirectEntryId,
            rootEntryId,
            parentEntryId,
            operationAttributes,
            entitledUsersEdit,
            entitledUsersPublish,
            capabilities,
            templateEntryId,
            plays,
            views,
            lastPlayedAt,
            width,
            height,
            duration,
            msDuration,
            durationType,
            mediaType,
            conversionQuality,
            sourceType,
            searchProviderType,
            searchProviderId,
            creditUserName,
            creditUrl,
            mediaDate,
            dataUrl,
            flavorParamsIds,
            isTrimDisabled,
            offlineMessage,
            recordStatus,
            dvrStatus,
            dvrWindow,
            lastElapsedRecordingTime,
            liveStreamConfigurations,
            recordedEntryId,
            pushPublishEnabled,
            publishConfigurations,
            firstBroadcast,
            lastBroadcast,
            currentBroadcastStartTime,
            recordingOptions,
            liveStatus,
            streamRemoteId,
            streamRemoteBackupId,
            bitrates,
            primaryBroadcastingUrl,
            secondaryBroadcastingUrl,
            primaryRtspBroadcastingUrl,
            secondaryRtspBroadcastingUrl,
            streamName,
            streamUrl,
            hlsStreamUrl,
            urlManager,
            encodingIP1,
            encodingIP2,
            streamPassword,
            streamUsername,
            primaryServerNodeId)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunLiveStreamEntry.fromXml(self, node)
        self.fromXmlImpl(node, VidiunLiveStreamAdminEntry.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunLiveStreamEntry.toParams(self)
        vparams.put("objectType", "VidiunLiveStreamAdminEntry")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunMediaServerNodeBaseFilter(VidiunDeliveryServerNodeFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            heartbeatTimeGreaterThanOrEqual=NotImplemented,
            heartbeatTimeLessThanOrEqual=NotImplemented,
            nameEqual=NotImplemented,
            nameIn=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            hostNameLike=NotImplemented,
            hostNameMultiLikeOr=NotImplemented,
            hostNameMultiLikeAnd=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented,
            typeEqual=NotImplemented,
            typeIn=NotImplemented,
            tagsLike=NotImplemented,
            tagsMultiLikeOr=NotImplemented,
            tagsMultiLikeAnd=NotImplemented,
            dcEqual=NotImplemented,
            dcIn=NotImplemented,
            parentIdEqual=NotImplemented,
            parentIdIn=NotImplemented,
            playbackDomainLike=NotImplemented,
            playbackDomainMultiLikeOr=NotImplemented,
            playbackDomainMultiLikeAnd=NotImplemented):
        VidiunDeliveryServerNodeFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            heartbeatTimeGreaterThanOrEqual,
            heartbeatTimeLessThanOrEqual,
            nameEqual,
            nameIn,
            systemNameEqual,
            systemNameIn,
            hostNameLike,
            hostNameMultiLikeOr,
            hostNameMultiLikeAnd,
            statusEqual,
            statusIn,
            typeEqual,
            typeIn,
            tagsLike,
            tagsMultiLikeOr,
            tagsMultiLikeAnd,
            dcEqual,
            dcIn,
            parentIdEqual,
            parentIdIn,
            playbackDomainLike,
            playbackDomainMultiLikeOr,
            playbackDomainMultiLikeAnd)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunDeliveryServerNodeFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunMediaServerNodeBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunDeliveryServerNodeFilter.toParams(self)
        vparams.put("objectType", "VidiunMediaServerNodeBaseFilter")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunPlaylistFilter(VidiunPlaylistBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            idNotIn=NotImplemented,
            nameLike=NotImplemented,
            nameMultiLikeOr=NotImplemented,
            nameMultiLikeAnd=NotImplemented,
            nameEqual=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            userIdEqual=NotImplemented,
            userIdIn=NotImplemented,
            creatorIdEqual=NotImplemented,
            tagsLike=NotImplemented,
            tagsMultiLikeOr=NotImplemented,
            tagsMultiLikeAnd=NotImplemented,
            adminTagsLike=NotImplemented,
            adminTagsMultiLikeOr=NotImplemented,
            adminTagsMultiLikeAnd=NotImplemented,
            categoriesMatchAnd=NotImplemented,
            categoriesMatchOr=NotImplemented,
            categoriesNotContains=NotImplemented,
            categoriesIdsMatchAnd=NotImplemented,
            categoriesIdsMatchOr=NotImplemented,
            categoriesIdsNotContains=NotImplemented,
            categoriesIdsEmpty=NotImplemented,
            statusEqual=NotImplemented,
            statusNotEqual=NotImplemented,
            statusIn=NotImplemented,
            statusNotIn=NotImplemented,
            moderationStatusEqual=NotImplemented,
            moderationStatusNotEqual=NotImplemented,
            moderationStatusIn=NotImplemented,
            moderationStatusNotIn=NotImplemented,
            typeEqual=NotImplemented,
            typeIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            totalRankLessThanOrEqual=NotImplemented,
            totalRankGreaterThanOrEqual=NotImplemented,
            groupIdEqual=NotImplemented,
            searchTextMatchAnd=NotImplemented,
            searchTextMatchOr=NotImplemented,
            accessControlIdEqual=NotImplemented,
            accessControlIdIn=NotImplemented,
            startDateGreaterThanOrEqual=NotImplemented,
            startDateLessThanOrEqual=NotImplemented,
            startDateGreaterThanOrEqualOrNull=NotImplemented,
            startDateLessThanOrEqualOrNull=NotImplemented,
            endDateGreaterThanOrEqual=NotImplemented,
            endDateLessThanOrEqual=NotImplemented,
            endDateGreaterThanOrEqualOrNull=NotImplemented,
            endDateLessThanOrEqualOrNull=NotImplemented,
            referenceIdEqual=NotImplemented,
            referenceIdIn=NotImplemented,
            replacingEntryIdEqual=NotImplemented,
            replacingEntryIdIn=NotImplemented,
            replacedEntryIdEqual=NotImplemented,
            replacedEntryIdIn=NotImplemented,
            replacementStatusEqual=NotImplemented,
            replacementStatusIn=NotImplemented,
            partnerSortValueGreaterThanOrEqual=NotImplemented,
            partnerSortValueLessThanOrEqual=NotImplemented,
            rootEntryIdEqual=NotImplemented,
            rootEntryIdIn=NotImplemented,
            parentEntryIdEqual=NotImplemented,
            entitledUsersEditMatchAnd=NotImplemented,
            entitledUsersEditMatchOr=NotImplemented,
            entitledUsersPublishMatchAnd=NotImplemented,
            entitledUsersPublishMatchOr=NotImplemented,
            tagsNameMultiLikeOr=NotImplemented,
            tagsAdminTagsMultiLikeOr=NotImplemented,
            tagsAdminTagsNameMultiLikeOr=NotImplemented,
            tagsNameMultiLikeAnd=NotImplemented,
            tagsAdminTagsMultiLikeAnd=NotImplemented,
            tagsAdminTagsNameMultiLikeAnd=NotImplemented,
            freeText=NotImplemented,
            isRoot=NotImplemented,
            categoriesFullNameIn=NotImplemented,
            categoryAncestorIdIn=NotImplemented,
            redirectFromEntryId=NotImplemented):
        VidiunPlaylistBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            idNotIn,
            nameLike,
            nameMultiLikeOr,
            nameMultiLikeAnd,
            nameEqual,
            partnerIdEqual,
            partnerIdIn,
            userIdEqual,
            userIdIn,
            creatorIdEqual,
            tagsLike,
            tagsMultiLikeOr,
            tagsMultiLikeAnd,
            adminTagsLike,
            adminTagsMultiLikeOr,
            adminTagsMultiLikeAnd,
            categoriesMatchAnd,
            categoriesMatchOr,
            categoriesNotContains,
            categoriesIdsMatchAnd,
            categoriesIdsMatchOr,
            categoriesIdsNotContains,
            categoriesIdsEmpty,
            statusEqual,
            statusNotEqual,
            statusIn,
            statusNotIn,
            moderationStatusEqual,
            moderationStatusNotEqual,
            moderationStatusIn,
            moderationStatusNotIn,
            typeEqual,
            typeIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            totalRankLessThanOrEqual,
            totalRankGreaterThanOrEqual,
            groupIdEqual,
            searchTextMatchAnd,
            searchTextMatchOr,
            accessControlIdEqual,
            accessControlIdIn,
            startDateGreaterThanOrEqual,
            startDateLessThanOrEqual,
            startDateGreaterThanOrEqualOrNull,
            startDateLessThanOrEqualOrNull,
            endDateGreaterThanOrEqual,
            endDateLessThanOrEqual,
            endDateGreaterThanOrEqualOrNull,
            endDateLessThanOrEqualOrNull,
            referenceIdEqual,
            referenceIdIn,
            replacingEntryIdEqual,
            replacingEntryIdIn,
            replacedEntryIdEqual,
            replacedEntryIdIn,
            replacementStatusEqual,
            replacementStatusIn,
            partnerSortValueGreaterThanOrEqual,
            partnerSortValueLessThanOrEqual,
            rootEntryIdEqual,
            rootEntryIdIn,
            parentEntryIdEqual,
            entitledUsersEditMatchAnd,
            entitledUsersEditMatchOr,
            entitledUsersPublishMatchAnd,
            entitledUsersPublishMatchOr,
            tagsNameMultiLikeOr,
            tagsAdminTagsMultiLikeOr,
            tagsAdminTagsNameMultiLikeOr,
            tagsNameMultiLikeAnd,
            tagsAdminTagsMultiLikeAnd,
            tagsAdminTagsNameMultiLikeAnd,
            freeText,
            isRoot,
            categoriesFullNameIn,
            categoryAncestorIdIn,
            redirectFromEntryId)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunPlaylistBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunPlaylistFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunPlaylistBaseFilter.toParams(self)
        vparams.put("objectType", "VidiunPlaylistFilter")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunQuizUserEntryFilter(VidiunQuizUserEntryBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            idNotIn=NotImplemented,
            entryIdEqual=NotImplemented,
            entryIdIn=NotImplemented,
            entryIdNotIn=NotImplemented,
            userIdEqual=NotImplemented,
            userIdIn=NotImplemented,
            userIdNotIn=NotImplemented,
            statusEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            typeEqual=NotImplemented,
            userIdEqualCurrent=NotImplemented,
            isAnonymous=NotImplemented):
        VidiunQuizUserEntryBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            idNotIn,
            entryIdEqual,
            entryIdIn,
            entryIdNotIn,
            userIdEqual,
            userIdIn,
            userIdNotIn,
            statusEqual,
            createdAtLessThanOrEqual,
            createdAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            typeEqual,
            userIdEqualCurrent,
            isAnonymous)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunQuizUserEntryBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunQuizUserEntryFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunQuizUserEntryBaseFilter.toParams(self)
        vparams.put("objectType", "VidiunQuizUserEntryFilter")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunThumbAssetFilter(VidiunThumbAssetBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            entryIdEqual=NotImplemented,
            entryIdIn=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            sizeGreaterThanOrEqual=NotImplemented,
            sizeLessThanOrEqual=NotImplemented,
            tagsLike=NotImplemented,
            tagsMultiLikeOr=NotImplemented,
            tagsMultiLikeAnd=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            deletedAtGreaterThanOrEqual=NotImplemented,
            deletedAtLessThanOrEqual=NotImplemented,
            thumbParamsIdEqual=NotImplemented,
            thumbParamsIdIn=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented,
            statusNotIn=NotImplemented,
            typeIn=NotImplemented):
        VidiunThumbAssetBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            entryIdEqual,
            entryIdIn,
            partnerIdEqual,
            partnerIdIn,
            sizeGreaterThanOrEqual,
            sizeLessThanOrEqual,
            tagsLike,
            tagsMultiLikeOr,
            tagsMultiLikeAnd,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            deletedAtGreaterThanOrEqual,
            deletedAtLessThanOrEqual,
            thumbParamsIdEqual,
            thumbParamsIdIn,
            statusEqual,
            statusIn,
            statusNotIn)

        # @var string
        self.typeIn = typeIn


    PROPERTY_LOADERS = {
        'typeIn': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunThumbAssetBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunThumbAssetFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunThumbAssetBaseFilter.toParams(self)
        vparams.put("objectType", "VidiunThumbAssetFilter")
        vparams.addStringIfDefined("typeIn", self.typeIn)
        return vparams

    def getTypeIn(self):
        return self.typeIn

    def setTypeIn(self, newTypeIn):
        self.typeIn = newTypeIn


# @package Vidiun
# @subpackage Client
class VidiunThumbParamsFilter(VidiunThumbParamsBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            isSystemDefaultEqual=NotImplemented,
            tagsEqual=NotImplemented,
            formatEqual=NotImplemented):
        VidiunThumbParamsBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            systemNameEqual,
            systemNameIn,
            isSystemDefaultEqual,
            tagsEqual,
            formatEqual)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunThumbParamsBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunThumbParamsFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunThumbParamsBaseFilter.toParams(self)
        vparams.put("objectType", "VidiunThumbParamsFilter")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunDeliveryProfileGenericRtmpFilter(VidiunDeliveryProfileGenericRtmpBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            streamerTypeEqual=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented):
        VidiunDeliveryProfileGenericRtmpBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            partnerIdEqual,
            partnerIdIn,
            systemNameEqual,
            systemNameIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            streamerTypeEqual,
            statusEqual,
            statusIn)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunDeliveryProfileGenericRtmpBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunDeliveryProfileGenericRtmpFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunDeliveryProfileGenericRtmpBaseFilter.toParams(self)
        vparams.put("objectType", "VidiunDeliveryProfileGenericRtmpFilter")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunEdgeServerNodeFilter(VidiunEdgeServerNodeBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            heartbeatTimeGreaterThanOrEqual=NotImplemented,
            heartbeatTimeLessThanOrEqual=NotImplemented,
            nameEqual=NotImplemented,
            nameIn=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            hostNameLike=NotImplemented,
            hostNameMultiLikeOr=NotImplemented,
            hostNameMultiLikeAnd=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented,
            typeEqual=NotImplemented,
            typeIn=NotImplemented,
            tagsLike=NotImplemented,
            tagsMultiLikeOr=NotImplemented,
            tagsMultiLikeAnd=NotImplemented,
            dcEqual=NotImplemented,
            dcIn=NotImplemented,
            parentIdEqual=NotImplemented,
            parentIdIn=NotImplemented,
            playbackDomainLike=NotImplemented,
            playbackDomainMultiLikeOr=NotImplemented,
            playbackDomainMultiLikeAnd=NotImplemented):
        VidiunEdgeServerNodeBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            heartbeatTimeGreaterThanOrEqual,
            heartbeatTimeLessThanOrEqual,
            nameEqual,
            nameIn,
            systemNameEqual,
            systemNameIn,
            hostNameLike,
            hostNameMultiLikeOr,
            hostNameMultiLikeAnd,
            statusEqual,
            statusIn,
            typeEqual,
            typeIn,
            tagsLike,
            tagsMultiLikeOr,
            tagsMultiLikeAnd,
            dcEqual,
            dcIn,
            parentIdEqual,
            parentIdIn,
            playbackDomainLike,
            playbackDomainMultiLikeOr,
            playbackDomainMultiLikeAnd)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunEdgeServerNodeBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunEdgeServerNodeFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunEdgeServerNodeBaseFilter.toParams(self)
        vparams.put("objectType", "VidiunEdgeServerNodeFilter")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunFlavorParamsOutputBaseFilter(VidiunFlavorParamsFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            isSystemDefaultEqual=NotImplemented,
            tagsEqual=NotImplemented,
            formatEqual=NotImplemented,
            flavorParamsIdEqual=NotImplemented,
            flavorParamsVersionEqual=NotImplemented,
            flavorAssetIdEqual=NotImplemented,
            flavorAssetVersionEqual=NotImplemented):
        VidiunFlavorParamsFilter.__init__(self,
            orderBy,
            advancedSearch,
            systemNameEqual,
            systemNameIn,
            isSystemDefaultEqual,
            tagsEqual,
            formatEqual)

        # @var int
        self.flavorParamsIdEqual = flavorParamsIdEqual

        # @var string
        self.flavorParamsVersionEqual = flavorParamsVersionEqual

        # @var string
        self.flavorAssetIdEqual = flavorAssetIdEqual

        # @var string
        self.flavorAssetVersionEqual = flavorAssetVersionEqual


    PROPERTY_LOADERS = {
        'flavorParamsIdEqual': getXmlNodeInt, 
        'flavorParamsVersionEqual': getXmlNodeText, 
        'flavorAssetIdEqual': getXmlNodeText, 
        'flavorAssetVersionEqual': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunFlavorParamsFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunFlavorParamsOutputBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunFlavorParamsFilter.toParams(self)
        vparams.put("objectType", "VidiunFlavorParamsOutputBaseFilter")
        vparams.addIntIfDefined("flavorParamsIdEqual", self.flavorParamsIdEqual)
        vparams.addStringIfDefined("flavorParamsVersionEqual", self.flavorParamsVersionEqual)
        vparams.addStringIfDefined("flavorAssetIdEqual", self.flavorAssetIdEqual)
        vparams.addStringIfDefined("flavorAssetVersionEqual", self.flavorAssetVersionEqual)
        return vparams

    def getFlavorParamsIdEqual(self):
        return self.flavorParamsIdEqual

    def setFlavorParamsIdEqual(self, newFlavorParamsIdEqual):
        self.flavorParamsIdEqual = newFlavorParamsIdEqual

    def getFlavorParamsVersionEqual(self):
        return self.flavorParamsVersionEqual

    def setFlavorParamsVersionEqual(self, newFlavorParamsVersionEqual):
        self.flavorParamsVersionEqual = newFlavorParamsVersionEqual

    def getFlavorAssetIdEqual(self):
        return self.flavorAssetIdEqual

    def setFlavorAssetIdEqual(self, newFlavorAssetIdEqual):
        self.flavorAssetIdEqual = newFlavorAssetIdEqual

    def getFlavorAssetVersionEqual(self):
        return self.flavorAssetVersionEqual

    def setFlavorAssetVersionEqual(self, newFlavorAssetVersionEqual):
        self.flavorAssetVersionEqual = newFlavorAssetVersionEqual


# @package Vidiun
# @subpackage Client
class VidiunGenericXsltSyndicationFeedFilter(VidiunGenericXsltSyndicationFeedBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented):
        VidiunGenericXsltSyndicationFeedBaseFilter.__init__(self,
            orderBy,
            advancedSearch)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunGenericXsltSyndicationFeedBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunGenericXsltSyndicationFeedFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunGenericXsltSyndicationFeedBaseFilter.toParams(self)
        vparams.put("objectType", "VidiunGenericXsltSyndicationFeedFilter")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunLiveAssetBaseFilter(VidiunFlavorAssetFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            entryIdEqual=NotImplemented,
            entryIdIn=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            sizeGreaterThanOrEqual=NotImplemented,
            sizeLessThanOrEqual=NotImplemented,
            tagsLike=NotImplemented,
            tagsMultiLikeOr=NotImplemented,
            tagsMultiLikeAnd=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            deletedAtGreaterThanOrEqual=NotImplemented,
            deletedAtLessThanOrEqual=NotImplemented,
            flavorParamsIdEqual=NotImplemented,
            flavorParamsIdIn=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented,
            statusNotIn=NotImplemented):
        VidiunFlavorAssetFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            entryIdEqual,
            entryIdIn,
            partnerIdEqual,
            partnerIdIn,
            sizeGreaterThanOrEqual,
            sizeLessThanOrEqual,
            tagsLike,
            tagsMultiLikeOr,
            tagsMultiLikeAnd,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            deletedAtGreaterThanOrEqual,
            deletedAtLessThanOrEqual,
            flavorParamsIdEqual,
            flavorParamsIdIn,
            statusEqual,
            statusIn,
            statusNotIn)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunFlavorAssetFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunLiveAssetBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunFlavorAssetFilter.toParams(self)
        vparams.put("objectType", "VidiunLiveAssetBaseFilter")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunLiveParamsBaseFilter(VidiunFlavorParamsFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            isSystemDefaultEqual=NotImplemented,
            tagsEqual=NotImplemented,
            formatEqual=NotImplemented):
        VidiunFlavorParamsFilter.__init__(self,
            orderBy,
            advancedSearch,
            systemNameEqual,
            systemNameIn,
            isSystemDefaultEqual,
            tagsEqual,
            formatEqual)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunFlavorParamsFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunLiveParamsBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunFlavorParamsFilter.toParams(self)
        vparams.put("objectType", "VidiunLiveParamsBaseFilter")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunMediaFlavorParamsBaseFilter(VidiunFlavorParamsFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            isSystemDefaultEqual=NotImplemented,
            tagsEqual=NotImplemented,
            formatEqual=NotImplemented):
        VidiunFlavorParamsFilter.__init__(self,
            orderBy,
            advancedSearch,
            systemNameEqual,
            systemNameIn,
            isSystemDefaultEqual,
            tagsEqual,
            formatEqual)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunFlavorParamsFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunMediaFlavorParamsBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunFlavorParamsFilter.toParams(self)
        vparams.put("objectType", "VidiunMediaFlavorParamsBaseFilter")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunMediaServerNodeFilter(VidiunMediaServerNodeBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            heartbeatTimeGreaterThanOrEqual=NotImplemented,
            heartbeatTimeLessThanOrEqual=NotImplemented,
            nameEqual=NotImplemented,
            nameIn=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            hostNameLike=NotImplemented,
            hostNameMultiLikeOr=NotImplemented,
            hostNameMultiLikeAnd=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented,
            typeEqual=NotImplemented,
            typeIn=NotImplemented,
            tagsLike=NotImplemented,
            tagsMultiLikeOr=NotImplemented,
            tagsMultiLikeAnd=NotImplemented,
            dcEqual=NotImplemented,
            dcIn=NotImplemented,
            parentIdEqual=NotImplemented,
            parentIdIn=NotImplemented,
            playbackDomainLike=NotImplemented,
            playbackDomainMultiLikeOr=NotImplemented,
            playbackDomainMultiLikeAnd=NotImplemented):
        VidiunMediaServerNodeBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            heartbeatTimeGreaterThanOrEqual,
            heartbeatTimeLessThanOrEqual,
            nameEqual,
            nameIn,
            systemNameEqual,
            systemNameIn,
            hostNameLike,
            hostNameMultiLikeOr,
            hostNameMultiLikeAnd,
            statusEqual,
            statusIn,
            typeEqual,
            typeIn,
            tagsLike,
            tagsMultiLikeOr,
            tagsMultiLikeAnd,
            dcEqual,
            dcIn,
            parentIdEqual,
            parentIdIn,
            playbackDomainLike,
            playbackDomainMultiLikeOr,
            playbackDomainMultiLikeAnd)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunMediaServerNodeBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunMediaServerNodeFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunMediaServerNodeBaseFilter.toParams(self)
        vparams.put("objectType", "VidiunMediaServerNodeFilter")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunMixEntryBaseFilter(VidiunPlayableEntryFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            idNotIn=NotImplemented,
            nameLike=NotImplemented,
            nameMultiLikeOr=NotImplemented,
            nameMultiLikeAnd=NotImplemented,
            nameEqual=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            userIdEqual=NotImplemented,
            userIdIn=NotImplemented,
            creatorIdEqual=NotImplemented,
            tagsLike=NotImplemented,
            tagsMultiLikeOr=NotImplemented,
            tagsMultiLikeAnd=NotImplemented,
            adminTagsLike=NotImplemented,
            adminTagsMultiLikeOr=NotImplemented,
            adminTagsMultiLikeAnd=NotImplemented,
            categoriesMatchAnd=NotImplemented,
            categoriesMatchOr=NotImplemented,
            categoriesNotContains=NotImplemented,
            categoriesIdsMatchAnd=NotImplemented,
            categoriesIdsMatchOr=NotImplemented,
            categoriesIdsNotContains=NotImplemented,
            categoriesIdsEmpty=NotImplemented,
            statusEqual=NotImplemented,
            statusNotEqual=NotImplemented,
            statusIn=NotImplemented,
            statusNotIn=NotImplemented,
            moderationStatusEqual=NotImplemented,
            moderationStatusNotEqual=NotImplemented,
            moderationStatusIn=NotImplemented,
            moderationStatusNotIn=NotImplemented,
            typeEqual=NotImplemented,
            typeIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            totalRankLessThanOrEqual=NotImplemented,
            totalRankGreaterThanOrEqual=NotImplemented,
            groupIdEqual=NotImplemented,
            searchTextMatchAnd=NotImplemented,
            searchTextMatchOr=NotImplemented,
            accessControlIdEqual=NotImplemented,
            accessControlIdIn=NotImplemented,
            startDateGreaterThanOrEqual=NotImplemented,
            startDateLessThanOrEqual=NotImplemented,
            startDateGreaterThanOrEqualOrNull=NotImplemented,
            startDateLessThanOrEqualOrNull=NotImplemented,
            endDateGreaterThanOrEqual=NotImplemented,
            endDateLessThanOrEqual=NotImplemented,
            endDateGreaterThanOrEqualOrNull=NotImplemented,
            endDateLessThanOrEqualOrNull=NotImplemented,
            referenceIdEqual=NotImplemented,
            referenceIdIn=NotImplemented,
            replacingEntryIdEqual=NotImplemented,
            replacingEntryIdIn=NotImplemented,
            replacedEntryIdEqual=NotImplemented,
            replacedEntryIdIn=NotImplemented,
            replacementStatusEqual=NotImplemented,
            replacementStatusIn=NotImplemented,
            partnerSortValueGreaterThanOrEqual=NotImplemented,
            partnerSortValueLessThanOrEqual=NotImplemented,
            rootEntryIdEqual=NotImplemented,
            rootEntryIdIn=NotImplemented,
            parentEntryIdEqual=NotImplemented,
            entitledUsersEditMatchAnd=NotImplemented,
            entitledUsersEditMatchOr=NotImplemented,
            entitledUsersPublishMatchAnd=NotImplemented,
            entitledUsersPublishMatchOr=NotImplemented,
            tagsNameMultiLikeOr=NotImplemented,
            tagsAdminTagsMultiLikeOr=NotImplemented,
            tagsAdminTagsNameMultiLikeOr=NotImplemented,
            tagsNameMultiLikeAnd=NotImplemented,
            tagsAdminTagsMultiLikeAnd=NotImplemented,
            tagsAdminTagsNameMultiLikeAnd=NotImplemented,
            freeText=NotImplemented,
            isRoot=NotImplemented,
            categoriesFullNameIn=NotImplemented,
            categoryAncestorIdIn=NotImplemented,
            redirectFromEntryId=NotImplemented,
            lastPlayedAtGreaterThanOrEqual=NotImplemented,
            lastPlayedAtLessThanOrEqual=NotImplemented,
            durationLessThan=NotImplemented,
            durationGreaterThan=NotImplemented,
            durationLessThanOrEqual=NotImplemented,
            durationGreaterThanOrEqual=NotImplemented,
            durationTypeMatchOr=NotImplemented):
        VidiunPlayableEntryFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            idNotIn,
            nameLike,
            nameMultiLikeOr,
            nameMultiLikeAnd,
            nameEqual,
            partnerIdEqual,
            partnerIdIn,
            userIdEqual,
            userIdIn,
            creatorIdEqual,
            tagsLike,
            tagsMultiLikeOr,
            tagsMultiLikeAnd,
            adminTagsLike,
            adminTagsMultiLikeOr,
            adminTagsMultiLikeAnd,
            categoriesMatchAnd,
            categoriesMatchOr,
            categoriesNotContains,
            categoriesIdsMatchAnd,
            categoriesIdsMatchOr,
            categoriesIdsNotContains,
            categoriesIdsEmpty,
            statusEqual,
            statusNotEqual,
            statusIn,
            statusNotIn,
            moderationStatusEqual,
            moderationStatusNotEqual,
            moderationStatusIn,
            moderationStatusNotIn,
            typeEqual,
            typeIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            totalRankLessThanOrEqual,
            totalRankGreaterThanOrEqual,
            groupIdEqual,
            searchTextMatchAnd,
            searchTextMatchOr,
            accessControlIdEqual,
            accessControlIdIn,
            startDateGreaterThanOrEqual,
            startDateLessThanOrEqual,
            startDateGreaterThanOrEqualOrNull,
            startDateLessThanOrEqualOrNull,
            endDateGreaterThanOrEqual,
            endDateLessThanOrEqual,
            endDateGreaterThanOrEqualOrNull,
            endDateLessThanOrEqualOrNull,
            referenceIdEqual,
            referenceIdIn,
            replacingEntryIdEqual,
            replacingEntryIdIn,
            replacedEntryIdEqual,
            replacedEntryIdIn,
            replacementStatusEqual,
            replacementStatusIn,
            partnerSortValueGreaterThanOrEqual,
            partnerSortValueLessThanOrEqual,
            rootEntryIdEqual,
            rootEntryIdIn,
            parentEntryIdEqual,
            entitledUsersEditMatchAnd,
            entitledUsersEditMatchOr,
            entitledUsersPublishMatchAnd,
            entitledUsersPublishMatchOr,
            tagsNameMultiLikeOr,
            tagsAdminTagsMultiLikeOr,
            tagsAdminTagsNameMultiLikeOr,
            tagsNameMultiLikeAnd,
            tagsAdminTagsMultiLikeAnd,
            tagsAdminTagsNameMultiLikeAnd,
            freeText,
            isRoot,
            categoriesFullNameIn,
            categoryAncestorIdIn,
            redirectFromEntryId,
            lastPlayedAtGreaterThanOrEqual,
            lastPlayedAtLessThanOrEqual,
            durationLessThan,
            durationGreaterThan,
            durationLessThanOrEqual,
            durationGreaterThanOrEqual,
            durationTypeMatchOr)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunPlayableEntryFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunMixEntryBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunPlayableEntryFilter.toParams(self)
        vparams.put("objectType", "VidiunMixEntryBaseFilter")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunThumbParamsOutputBaseFilter(VidiunThumbParamsFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            isSystemDefaultEqual=NotImplemented,
            tagsEqual=NotImplemented,
            formatEqual=NotImplemented,
            thumbParamsIdEqual=NotImplemented,
            thumbParamsVersionEqual=NotImplemented,
            thumbAssetIdEqual=NotImplemented,
            thumbAssetVersionEqual=NotImplemented):
        VidiunThumbParamsFilter.__init__(self,
            orderBy,
            advancedSearch,
            systemNameEqual,
            systemNameIn,
            isSystemDefaultEqual,
            tagsEqual,
            formatEqual)

        # @var int
        self.thumbParamsIdEqual = thumbParamsIdEqual

        # @var string
        self.thumbParamsVersionEqual = thumbParamsVersionEqual

        # @var string
        self.thumbAssetIdEqual = thumbAssetIdEqual

        # @var string
        self.thumbAssetVersionEqual = thumbAssetVersionEqual


    PROPERTY_LOADERS = {
        'thumbParamsIdEqual': getXmlNodeInt, 
        'thumbParamsVersionEqual': getXmlNodeText, 
        'thumbAssetIdEqual': getXmlNodeText, 
        'thumbAssetVersionEqual': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunThumbParamsFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunThumbParamsOutputBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunThumbParamsFilter.toParams(self)
        vparams.put("objectType", "VidiunThumbParamsOutputBaseFilter")
        vparams.addIntIfDefined("thumbParamsIdEqual", self.thumbParamsIdEqual)
        vparams.addStringIfDefined("thumbParamsVersionEqual", self.thumbParamsVersionEqual)
        vparams.addStringIfDefined("thumbAssetIdEqual", self.thumbAssetIdEqual)
        vparams.addStringIfDefined("thumbAssetVersionEqual", self.thumbAssetVersionEqual)
        return vparams

    def getThumbParamsIdEqual(self):
        return self.thumbParamsIdEqual

    def setThumbParamsIdEqual(self, newThumbParamsIdEqual):
        self.thumbParamsIdEqual = newThumbParamsIdEqual

    def getThumbParamsVersionEqual(self):
        return self.thumbParamsVersionEqual

    def setThumbParamsVersionEqual(self, newThumbParamsVersionEqual):
        self.thumbParamsVersionEqual = newThumbParamsVersionEqual

    def getThumbAssetIdEqual(self):
        return self.thumbAssetIdEqual

    def setThumbAssetIdEqual(self, newThumbAssetIdEqual):
        self.thumbAssetIdEqual = newThumbAssetIdEqual

    def getThumbAssetVersionEqual(self):
        return self.thumbAssetVersionEqual

    def setThumbAssetVersionEqual(self, newThumbAssetVersionEqual):
        self.thumbAssetVersionEqual = newThumbAssetVersionEqual


# @package Vidiun
# @subpackage Client
class VidiunFlavorParamsOutputFilter(VidiunFlavorParamsOutputBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            isSystemDefaultEqual=NotImplemented,
            tagsEqual=NotImplemented,
            formatEqual=NotImplemented,
            flavorParamsIdEqual=NotImplemented,
            flavorParamsVersionEqual=NotImplemented,
            flavorAssetIdEqual=NotImplemented,
            flavorAssetVersionEqual=NotImplemented):
        VidiunFlavorParamsOutputBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            systemNameEqual,
            systemNameIn,
            isSystemDefaultEqual,
            tagsEqual,
            formatEqual,
            flavorParamsIdEqual,
            flavorParamsVersionEqual,
            flavorAssetIdEqual,
            flavorAssetVersionEqual)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunFlavorParamsOutputBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunFlavorParamsOutputFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunFlavorParamsOutputBaseFilter.toParams(self)
        vparams.put("objectType", "VidiunFlavorParamsOutputFilter")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunLiveAssetFilter(VidiunLiveAssetBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            entryIdEqual=NotImplemented,
            entryIdIn=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            sizeGreaterThanOrEqual=NotImplemented,
            sizeLessThanOrEqual=NotImplemented,
            tagsLike=NotImplemented,
            tagsMultiLikeOr=NotImplemented,
            tagsMultiLikeAnd=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            deletedAtGreaterThanOrEqual=NotImplemented,
            deletedAtLessThanOrEqual=NotImplemented,
            flavorParamsIdEqual=NotImplemented,
            flavorParamsIdIn=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented,
            statusNotIn=NotImplemented):
        VidiunLiveAssetBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            entryIdEqual,
            entryIdIn,
            partnerIdEqual,
            partnerIdIn,
            sizeGreaterThanOrEqual,
            sizeLessThanOrEqual,
            tagsLike,
            tagsMultiLikeOr,
            tagsMultiLikeAnd,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            deletedAtGreaterThanOrEqual,
            deletedAtLessThanOrEqual,
            flavorParamsIdEqual,
            flavorParamsIdIn,
            statusEqual,
            statusIn,
            statusNotIn)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunLiveAssetBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunLiveAssetFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunLiveAssetBaseFilter.toParams(self)
        vparams.put("objectType", "VidiunLiveAssetFilter")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunLiveParamsFilter(VidiunLiveParamsBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            isSystemDefaultEqual=NotImplemented,
            tagsEqual=NotImplemented,
            formatEqual=NotImplemented):
        VidiunLiveParamsBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            systemNameEqual,
            systemNameIn,
            isSystemDefaultEqual,
            tagsEqual,
            formatEqual)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunLiveParamsBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunLiveParamsFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunLiveParamsBaseFilter.toParams(self)
        vparams.put("objectType", "VidiunLiveParamsFilter")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunMediaFlavorParamsFilter(VidiunMediaFlavorParamsBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            isSystemDefaultEqual=NotImplemented,
            tagsEqual=NotImplemented,
            formatEqual=NotImplemented):
        VidiunMediaFlavorParamsBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            systemNameEqual,
            systemNameIn,
            isSystemDefaultEqual,
            tagsEqual,
            formatEqual)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunMediaFlavorParamsBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunMediaFlavorParamsFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunMediaFlavorParamsBaseFilter.toParams(self)
        vparams.put("objectType", "VidiunMediaFlavorParamsFilter")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunMixEntryFilter(VidiunMixEntryBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            idNotIn=NotImplemented,
            nameLike=NotImplemented,
            nameMultiLikeOr=NotImplemented,
            nameMultiLikeAnd=NotImplemented,
            nameEqual=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            userIdEqual=NotImplemented,
            userIdIn=NotImplemented,
            creatorIdEqual=NotImplemented,
            tagsLike=NotImplemented,
            tagsMultiLikeOr=NotImplemented,
            tagsMultiLikeAnd=NotImplemented,
            adminTagsLike=NotImplemented,
            adminTagsMultiLikeOr=NotImplemented,
            adminTagsMultiLikeAnd=NotImplemented,
            categoriesMatchAnd=NotImplemented,
            categoriesMatchOr=NotImplemented,
            categoriesNotContains=NotImplemented,
            categoriesIdsMatchAnd=NotImplemented,
            categoriesIdsMatchOr=NotImplemented,
            categoriesIdsNotContains=NotImplemented,
            categoriesIdsEmpty=NotImplemented,
            statusEqual=NotImplemented,
            statusNotEqual=NotImplemented,
            statusIn=NotImplemented,
            statusNotIn=NotImplemented,
            moderationStatusEqual=NotImplemented,
            moderationStatusNotEqual=NotImplemented,
            moderationStatusIn=NotImplemented,
            moderationStatusNotIn=NotImplemented,
            typeEqual=NotImplemented,
            typeIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            totalRankLessThanOrEqual=NotImplemented,
            totalRankGreaterThanOrEqual=NotImplemented,
            groupIdEqual=NotImplemented,
            searchTextMatchAnd=NotImplemented,
            searchTextMatchOr=NotImplemented,
            accessControlIdEqual=NotImplemented,
            accessControlIdIn=NotImplemented,
            startDateGreaterThanOrEqual=NotImplemented,
            startDateLessThanOrEqual=NotImplemented,
            startDateGreaterThanOrEqualOrNull=NotImplemented,
            startDateLessThanOrEqualOrNull=NotImplemented,
            endDateGreaterThanOrEqual=NotImplemented,
            endDateLessThanOrEqual=NotImplemented,
            endDateGreaterThanOrEqualOrNull=NotImplemented,
            endDateLessThanOrEqualOrNull=NotImplemented,
            referenceIdEqual=NotImplemented,
            referenceIdIn=NotImplemented,
            replacingEntryIdEqual=NotImplemented,
            replacingEntryIdIn=NotImplemented,
            replacedEntryIdEqual=NotImplemented,
            replacedEntryIdIn=NotImplemented,
            replacementStatusEqual=NotImplemented,
            replacementStatusIn=NotImplemented,
            partnerSortValueGreaterThanOrEqual=NotImplemented,
            partnerSortValueLessThanOrEqual=NotImplemented,
            rootEntryIdEqual=NotImplemented,
            rootEntryIdIn=NotImplemented,
            parentEntryIdEqual=NotImplemented,
            entitledUsersEditMatchAnd=NotImplemented,
            entitledUsersEditMatchOr=NotImplemented,
            entitledUsersPublishMatchAnd=NotImplemented,
            entitledUsersPublishMatchOr=NotImplemented,
            tagsNameMultiLikeOr=NotImplemented,
            tagsAdminTagsMultiLikeOr=NotImplemented,
            tagsAdminTagsNameMultiLikeOr=NotImplemented,
            tagsNameMultiLikeAnd=NotImplemented,
            tagsAdminTagsMultiLikeAnd=NotImplemented,
            tagsAdminTagsNameMultiLikeAnd=NotImplemented,
            freeText=NotImplemented,
            isRoot=NotImplemented,
            categoriesFullNameIn=NotImplemented,
            categoryAncestorIdIn=NotImplemented,
            redirectFromEntryId=NotImplemented,
            lastPlayedAtGreaterThanOrEqual=NotImplemented,
            lastPlayedAtLessThanOrEqual=NotImplemented,
            durationLessThan=NotImplemented,
            durationGreaterThan=NotImplemented,
            durationLessThanOrEqual=NotImplemented,
            durationGreaterThanOrEqual=NotImplemented,
            durationTypeMatchOr=NotImplemented):
        VidiunMixEntryBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            idNotIn,
            nameLike,
            nameMultiLikeOr,
            nameMultiLikeAnd,
            nameEqual,
            partnerIdEqual,
            partnerIdIn,
            userIdEqual,
            userIdIn,
            creatorIdEqual,
            tagsLike,
            tagsMultiLikeOr,
            tagsMultiLikeAnd,
            adminTagsLike,
            adminTagsMultiLikeOr,
            adminTagsMultiLikeAnd,
            categoriesMatchAnd,
            categoriesMatchOr,
            categoriesNotContains,
            categoriesIdsMatchAnd,
            categoriesIdsMatchOr,
            categoriesIdsNotContains,
            categoriesIdsEmpty,
            statusEqual,
            statusNotEqual,
            statusIn,
            statusNotIn,
            moderationStatusEqual,
            moderationStatusNotEqual,
            moderationStatusIn,
            moderationStatusNotIn,
            typeEqual,
            typeIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            totalRankLessThanOrEqual,
            totalRankGreaterThanOrEqual,
            groupIdEqual,
            searchTextMatchAnd,
            searchTextMatchOr,
            accessControlIdEqual,
            accessControlIdIn,
            startDateGreaterThanOrEqual,
            startDateLessThanOrEqual,
            startDateGreaterThanOrEqualOrNull,
            startDateLessThanOrEqualOrNull,
            endDateGreaterThanOrEqual,
            endDateLessThanOrEqual,
            endDateGreaterThanOrEqualOrNull,
            endDateLessThanOrEqualOrNull,
            referenceIdEqual,
            referenceIdIn,
            replacingEntryIdEqual,
            replacingEntryIdIn,
            replacedEntryIdEqual,
            replacedEntryIdIn,
            replacementStatusEqual,
            replacementStatusIn,
            partnerSortValueGreaterThanOrEqual,
            partnerSortValueLessThanOrEqual,
            rootEntryIdEqual,
            rootEntryIdIn,
            parentEntryIdEqual,
            entitledUsersEditMatchAnd,
            entitledUsersEditMatchOr,
            entitledUsersPublishMatchAnd,
            entitledUsersPublishMatchOr,
            tagsNameMultiLikeOr,
            tagsAdminTagsMultiLikeOr,
            tagsAdminTagsNameMultiLikeOr,
            tagsNameMultiLikeAnd,
            tagsAdminTagsMultiLikeAnd,
            tagsAdminTagsNameMultiLikeAnd,
            freeText,
            isRoot,
            categoriesFullNameIn,
            categoryAncestorIdIn,
            redirectFromEntryId,
            lastPlayedAtGreaterThanOrEqual,
            lastPlayedAtLessThanOrEqual,
            durationLessThan,
            durationGreaterThan,
            durationLessThanOrEqual,
            durationGreaterThanOrEqual,
            durationTypeMatchOr)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunMixEntryBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunMixEntryFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunMixEntryBaseFilter.toParams(self)
        vparams.put("objectType", "VidiunMixEntryFilter")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunThumbParamsOutputFilter(VidiunThumbParamsOutputBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            isSystemDefaultEqual=NotImplemented,
            tagsEqual=NotImplemented,
            formatEqual=NotImplemented,
            thumbParamsIdEqual=NotImplemented,
            thumbParamsVersionEqual=NotImplemented,
            thumbAssetIdEqual=NotImplemented,
            thumbAssetVersionEqual=NotImplemented):
        VidiunThumbParamsOutputBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            systemNameEqual,
            systemNameIn,
            isSystemDefaultEqual,
            tagsEqual,
            formatEqual,
            thumbParamsIdEqual,
            thumbParamsVersionEqual,
            thumbAssetIdEqual,
            thumbAssetVersionEqual)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunThumbParamsOutputBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunThumbParamsOutputFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunThumbParamsOutputBaseFilter.toParams(self)
        vparams.put("objectType", "VidiunThumbParamsOutputFilter")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunLiveEntryBaseFilter(VidiunMediaEntryFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            idNotIn=NotImplemented,
            nameLike=NotImplemented,
            nameMultiLikeOr=NotImplemented,
            nameMultiLikeAnd=NotImplemented,
            nameEqual=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            userIdEqual=NotImplemented,
            userIdIn=NotImplemented,
            creatorIdEqual=NotImplemented,
            tagsLike=NotImplemented,
            tagsMultiLikeOr=NotImplemented,
            tagsMultiLikeAnd=NotImplemented,
            adminTagsLike=NotImplemented,
            adminTagsMultiLikeOr=NotImplemented,
            adminTagsMultiLikeAnd=NotImplemented,
            categoriesMatchAnd=NotImplemented,
            categoriesMatchOr=NotImplemented,
            categoriesNotContains=NotImplemented,
            categoriesIdsMatchAnd=NotImplemented,
            categoriesIdsMatchOr=NotImplemented,
            categoriesIdsNotContains=NotImplemented,
            categoriesIdsEmpty=NotImplemented,
            statusEqual=NotImplemented,
            statusNotEqual=NotImplemented,
            statusIn=NotImplemented,
            statusNotIn=NotImplemented,
            moderationStatusEqual=NotImplemented,
            moderationStatusNotEqual=NotImplemented,
            moderationStatusIn=NotImplemented,
            moderationStatusNotIn=NotImplemented,
            typeEqual=NotImplemented,
            typeIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            totalRankLessThanOrEqual=NotImplemented,
            totalRankGreaterThanOrEqual=NotImplemented,
            groupIdEqual=NotImplemented,
            searchTextMatchAnd=NotImplemented,
            searchTextMatchOr=NotImplemented,
            accessControlIdEqual=NotImplemented,
            accessControlIdIn=NotImplemented,
            startDateGreaterThanOrEqual=NotImplemented,
            startDateLessThanOrEqual=NotImplemented,
            startDateGreaterThanOrEqualOrNull=NotImplemented,
            startDateLessThanOrEqualOrNull=NotImplemented,
            endDateGreaterThanOrEqual=NotImplemented,
            endDateLessThanOrEqual=NotImplemented,
            endDateGreaterThanOrEqualOrNull=NotImplemented,
            endDateLessThanOrEqualOrNull=NotImplemented,
            referenceIdEqual=NotImplemented,
            referenceIdIn=NotImplemented,
            replacingEntryIdEqual=NotImplemented,
            replacingEntryIdIn=NotImplemented,
            replacedEntryIdEqual=NotImplemented,
            replacedEntryIdIn=NotImplemented,
            replacementStatusEqual=NotImplemented,
            replacementStatusIn=NotImplemented,
            partnerSortValueGreaterThanOrEqual=NotImplemented,
            partnerSortValueLessThanOrEqual=NotImplemented,
            rootEntryIdEqual=NotImplemented,
            rootEntryIdIn=NotImplemented,
            parentEntryIdEqual=NotImplemented,
            entitledUsersEditMatchAnd=NotImplemented,
            entitledUsersEditMatchOr=NotImplemented,
            entitledUsersPublishMatchAnd=NotImplemented,
            entitledUsersPublishMatchOr=NotImplemented,
            tagsNameMultiLikeOr=NotImplemented,
            tagsAdminTagsMultiLikeOr=NotImplemented,
            tagsAdminTagsNameMultiLikeOr=NotImplemented,
            tagsNameMultiLikeAnd=NotImplemented,
            tagsAdminTagsMultiLikeAnd=NotImplemented,
            tagsAdminTagsNameMultiLikeAnd=NotImplemented,
            freeText=NotImplemented,
            isRoot=NotImplemented,
            categoriesFullNameIn=NotImplemented,
            categoryAncestorIdIn=NotImplemented,
            redirectFromEntryId=NotImplemented,
            lastPlayedAtGreaterThanOrEqual=NotImplemented,
            lastPlayedAtLessThanOrEqual=NotImplemented,
            durationLessThan=NotImplemented,
            durationGreaterThan=NotImplemented,
            durationLessThanOrEqual=NotImplemented,
            durationGreaterThanOrEqual=NotImplemented,
            durationTypeMatchOr=NotImplemented,
            mediaTypeEqual=NotImplemented,
            mediaTypeIn=NotImplemented,
            sourceTypeEqual=NotImplemented,
            sourceTypeNotEqual=NotImplemented,
            sourceTypeIn=NotImplemented,
            sourceTypeNotIn=NotImplemented,
            mediaDateGreaterThanOrEqual=NotImplemented,
            mediaDateLessThanOrEqual=NotImplemented,
            flavorParamsIdsMatchOr=NotImplemented,
            flavorParamsIdsMatchAnd=NotImplemented):
        VidiunMediaEntryFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            idNotIn,
            nameLike,
            nameMultiLikeOr,
            nameMultiLikeAnd,
            nameEqual,
            partnerIdEqual,
            partnerIdIn,
            userIdEqual,
            userIdIn,
            creatorIdEqual,
            tagsLike,
            tagsMultiLikeOr,
            tagsMultiLikeAnd,
            adminTagsLike,
            adminTagsMultiLikeOr,
            adminTagsMultiLikeAnd,
            categoriesMatchAnd,
            categoriesMatchOr,
            categoriesNotContains,
            categoriesIdsMatchAnd,
            categoriesIdsMatchOr,
            categoriesIdsNotContains,
            categoriesIdsEmpty,
            statusEqual,
            statusNotEqual,
            statusIn,
            statusNotIn,
            moderationStatusEqual,
            moderationStatusNotEqual,
            moderationStatusIn,
            moderationStatusNotIn,
            typeEqual,
            typeIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            totalRankLessThanOrEqual,
            totalRankGreaterThanOrEqual,
            groupIdEqual,
            searchTextMatchAnd,
            searchTextMatchOr,
            accessControlIdEqual,
            accessControlIdIn,
            startDateGreaterThanOrEqual,
            startDateLessThanOrEqual,
            startDateGreaterThanOrEqualOrNull,
            startDateLessThanOrEqualOrNull,
            endDateGreaterThanOrEqual,
            endDateLessThanOrEqual,
            endDateGreaterThanOrEqualOrNull,
            endDateLessThanOrEqualOrNull,
            referenceIdEqual,
            referenceIdIn,
            replacingEntryIdEqual,
            replacingEntryIdIn,
            replacedEntryIdEqual,
            replacedEntryIdIn,
            replacementStatusEqual,
            replacementStatusIn,
            partnerSortValueGreaterThanOrEqual,
            partnerSortValueLessThanOrEqual,
            rootEntryIdEqual,
            rootEntryIdIn,
            parentEntryIdEqual,
            entitledUsersEditMatchAnd,
            entitledUsersEditMatchOr,
            entitledUsersPublishMatchAnd,
            entitledUsersPublishMatchOr,
            tagsNameMultiLikeOr,
            tagsAdminTagsMultiLikeOr,
            tagsAdminTagsNameMultiLikeOr,
            tagsNameMultiLikeAnd,
            tagsAdminTagsMultiLikeAnd,
            tagsAdminTagsNameMultiLikeAnd,
            freeText,
            isRoot,
            categoriesFullNameIn,
            categoryAncestorIdIn,
            redirectFromEntryId,
            lastPlayedAtGreaterThanOrEqual,
            lastPlayedAtLessThanOrEqual,
            durationLessThan,
            durationGreaterThan,
            durationLessThanOrEqual,
            durationGreaterThanOrEqual,
            durationTypeMatchOr,
            mediaTypeEqual,
            mediaTypeIn,
            sourceTypeEqual,
            sourceTypeNotEqual,
            sourceTypeIn,
            sourceTypeNotIn,
            mediaDateGreaterThanOrEqual,
            mediaDateLessThanOrEqual,
            flavorParamsIdsMatchOr,
            flavorParamsIdsMatchAnd)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunMediaEntryFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunLiveEntryBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunMediaEntryFilter.toParams(self)
        vparams.put("objectType", "VidiunLiveEntryBaseFilter")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunMediaFlavorParamsOutputBaseFilter(VidiunFlavorParamsOutputFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            isSystemDefaultEqual=NotImplemented,
            tagsEqual=NotImplemented,
            formatEqual=NotImplemented,
            flavorParamsIdEqual=NotImplemented,
            flavorParamsVersionEqual=NotImplemented,
            flavorAssetIdEqual=NotImplemented,
            flavorAssetVersionEqual=NotImplemented):
        VidiunFlavorParamsOutputFilter.__init__(self,
            orderBy,
            advancedSearch,
            systemNameEqual,
            systemNameIn,
            isSystemDefaultEqual,
            tagsEqual,
            formatEqual,
            flavorParamsIdEqual,
            flavorParamsVersionEqual,
            flavorAssetIdEqual,
            flavorAssetVersionEqual)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunFlavorParamsOutputFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunMediaFlavorParamsOutputBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunFlavorParamsOutputFilter.toParams(self)
        vparams.put("objectType", "VidiunMediaFlavorParamsOutputBaseFilter")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunLiveEntryFilter(VidiunLiveEntryBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            idNotIn=NotImplemented,
            nameLike=NotImplemented,
            nameMultiLikeOr=NotImplemented,
            nameMultiLikeAnd=NotImplemented,
            nameEqual=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            userIdEqual=NotImplemented,
            userIdIn=NotImplemented,
            creatorIdEqual=NotImplemented,
            tagsLike=NotImplemented,
            tagsMultiLikeOr=NotImplemented,
            tagsMultiLikeAnd=NotImplemented,
            adminTagsLike=NotImplemented,
            adminTagsMultiLikeOr=NotImplemented,
            adminTagsMultiLikeAnd=NotImplemented,
            categoriesMatchAnd=NotImplemented,
            categoriesMatchOr=NotImplemented,
            categoriesNotContains=NotImplemented,
            categoriesIdsMatchAnd=NotImplemented,
            categoriesIdsMatchOr=NotImplemented,
            categoriesIdsNotContains=NotImplemented,
            categoriesIdsEmpty=NotImplemented,
            statusEqual=NotImplemented,
            statusNotEqual=NotImplemented,
            statusIn=NotImplemented,
            statusNotIn=NotImplemented,
            moderationStatusEqual=NotImplemented,
            moderationStatusNotEqual=NotImplemented,
            moderationStatusIn=NotImplemented,
            moderationStatusNotIn=NotImplemented,
            typeEqual=NotImplemented,
            typeIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            totalRankLessThanOrEqual=NotImplemented,
            totalRankGreaterThanOrEqual=NotImplemented,
            groupIdEqual=NotImplemented,
            searchTextMatchAnd=NotImplemented,
            searchTextMatchOr=NotImplemented,
            accessControlIdEqual=NotImplemented,
            accessControlIdIn=NotImplemented,
            startDateGreaterThanOrEqual=NotImplemented,
            startDateLessThanOrEqual=NotImplemented,
            startDateGreaterThanOrEqualOrNull=NotImplemented,
            startDateLessThanOrEqualOrNull=NotImplemented,
            endDateGreaterThanOrEqual=NotImplemented,
            endDateLessThanOrEqual=NotImplemented,
            endDateGreaterThanOrEqualOrNull=NotImplemented,
            endDateLessThanOrEqualOrNull=NotImplemented,
            referenceIdEqual=NotImplemented,
            referenceIdIn=NotImplemented,
            replacingEntryIdEqual=NotImplemented,
            replacingEntryIdIn=NotImplemented,
            replacedEntryIdEqual=NotImplemented,
            replacedEntryIdIn=NotImplemented,
            replacementStatusEqual=NotImplemented,
            replacementStatusIn=NotImplemented,
            partnerSortValueGreaterThanOrEqual=NotImplemented,
            partnerSortValueLessThanOrEqual=NotImplemented,
            rootEntryIdEqual=NotImplemented,
            rootEntryIdIn=NotImplemented,
            parentEntryIdEqual=NotImplemented,
            entitledUsersEditMatchAnd=NotImplemented,
            entitledUsersEditMatchOr=NotImplemented,
            entitledUsersPublishMatchAnd=NotImplemented,
            entitledUsersPublishMatchOr=NotImplemented,
            tagsNameMultiLikeOr=NotImplemented,
            tagsAdminTagsMultiLikeOr=NotImplemented,
            tagsAdminTagsNameMultiLikeOr=NotImplemented,
            tagsNameMultiLikeAnd=NotImplemented,
            tagsAdminTagsMultiLikeAnd=NotImplemented,
            tagsAdminTagsNameMultiLikeAnd=NotImplemented,
            freeText=NotImplemented,
            isRoot=NotImplemented,
            categoriesFullNameIn=NotImplemented,
            categoryAncestorIdIn=NotImplemented,
            redirectFromEntryId=NotImplemented,
            lastPlayedAtGreaterThanOrEqual=NotImplemented,
            lastPlayedAtLessThanOrEqual=NotImplemented,
            durationLessThan=NotImplemented,
            durationGreaterThan=NotImplemented,
            durationLessThanOrEqual=NotImplemented,
            durationGreaterThanOrEqual=NotImplemented,
            durationTypeMatchOr=NotImplemented,
            mediaTypeEqual=NotImplemented,
            mediaTypeIn=NotImplemented,
            sourceTypeEqual=NotImplemented,
            sourceTypeNotEqual=NotImplemented,
            sourceTypeIn=NotImplemented,
            sourceTypeNotIn=NotImplemented,
            mediaDateGreaterThanOrEqual=NotImplemented,
            mediaDateLessThanOrEqual=NotImplemented,
            flavorParamsIdsMatchOr=NotImplemented,
            flavorParamsIdsMatchAnd=NotImplemented,
            isLive=NotImplemented,
            isRecordedEntryIdEmpty=NotImplemented,
            hasMediaServerHostname=NotImplemented):
        VidiunLiveEntryBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            idNotIn,
            nameLike,
            nameMultiLikeOr,
            nameMultiLikeAnd,
            nameEqual,
            partnerIdEqual,
            partnerIdIn,
            userIdEqual,
            userIdIn,
            creatorIdEqual,
            tagsLike,
            tagsMultiLikeOr,
            tagsMultiLikeAnd,
            adminTagsLike,
            adminTagsMultiLikeOr,
            adminTagsMultiLikeAnd,
            categoriesMatchAnd,
            categoriesMatchOr,
            categoriesNotContains,
            categoriesIdsMatchAnd,
            categoriesIdsMatchOr,
            categoriesIdsNotContains,
            categoriesIdsEmpty,
            statusEqual,
            statusNotEqual,
            statusIn,
            statusNotIn,
            moderationStatusEqual,
            moderationStatusNotEqual,
            moderationStatusIn,
            moderationStatusNotIn,
            typeEqual,
            typeIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            totalRankLessThanOrEqual,
            totalRankGreaterThanOrEqual,
            groupIdEqual,
            searchTextMatchAnd,
            searchTextMatchOr,
            accessControlIdEqual,
            accessControlIdIn,
            startDateGreaterThanOrEqual,
            startDateLessThanOrEqual,
            startDateGreaterThanOrEqualOrNull,
            startDateLessThanOrEqualOrNull,
            endDateGreaterThanOrEqual,
            endDateLessThanOrEqual,
            endDateGreaterThanOrEqualOrNull,
            endDateLessThanOrEqualOrNull,
            referenceIdEqual,
            referenceIdIn,
            replacingEntryIdEqual,
            replacingEntryIdIn,
            replacedEntryIdEqual,
            replacedEntryIdIn,
            replacementStatusEqual,
            replacementStatusIn,
            partnerSortValueGreaterThanOrEqual,
            partnerSortValueLessThanOrEqual,
            rootEntryIdEqual,
            rootEntryIdIn,
            parentEntryIdEqual,
            entitledUsersEditMatchAnd,
            entitledUsersEditMatchOr,
            entitledUsersPublishMatchAnd,
            entitledUsersPublishMatchOr,
            tagsNameMultiLikeOr,
            tagsAdminTagsMultiLikeOr,
            tagsAdminTagsNameMultiLikeOr,
            tagsNameMultiLikeAnd,
            tagsAdminTagsMultiLikeAnd,
            tagsAdminTagsNameMultiLikeAnd,
            freeText,
            isRoot,
            categoriesFullNameIn,
            categoryAncestorIdIn,
            redirectFromEntryId,
            lastPlayedAtGreaterThanOrEqual,
            lastPlayedAtLessThanOrEqual,
            durationLessThan,
            durationGreaterThan,
            durationLessThanOrEqual,
            durationGreaterThanOrEqual,
            durationTypeMatchOr,
            mediaTypeEqual,
            mediaTypeIn,
            sourceTypeEqual,
            sourceTypeNotEqual,
            sourceTypeIn,
            sourceTypeNotIn,
            mediaDateGreaterThanOrEqual,
            mediaDateLessThanOrEqual,
            flavorParamsIdsMatchOr,
            flavorParamsIdsMatchAnd)

        # @var VidiunNullableBoolean
        self.isLive = isLive

        # @var VidiunNullableBoolean
        self.isRecordedEntryIdEmpty = isRecordedEntryIdEmpty

        # @var string
        self.hasMediaServerHostname = hasMediaServerHostname


    PROPERTY_LOADERS = {
        'isLive': (VidiunEnumsFactory.createInt, "VidiunNullableBoolean"), 
        'isRecordedEntryIdEmpty': (VidiunEnumsFactory.createInt, "VidiunNullableBoolean"), 
        'hasMediaServerHostname': getXmlNodeText, 
    }

    def fromXml(self, node):
        VidiunLiveEntryBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunLiveEntryFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunLiveEntryBaseFilter.toParams(self)
        vparams.put("objectType", "VidiunLiveEntryFilter")
        vparams.addIntEnumIfDefined("isLive", self.isLive)
        vparams.addIntEnumIfDefined("isRecordedEntryIdEmpty", self.isRecordedEntryIdEmpty)
        vparams.addStringIfDefined("hasMediaServerHostname", self.hasMediaServerHostname)
        return vparams

    def getIsLive(self):
        return self.isLive

    def setIsLive(self, newIsLive):
        self.isLive = newIsLive

    def getIsRecordedEntryIdEmpty(self):
        return self.isRecordedEntryIdEmpty

    def setIsRecordedEntryIdEmpty(self, newIsRecordedEntryIdEmpty):
        self.isRecordedEntryIdEmpty = newIsRecordedEntryIdEmpty

    def getHasMediaServerHostname(self):
        return self.hasMediaServerHostname

    def setHasMediaServerHostname(self, newHasMediaServerHostname):
        self.hasMediaServerHostname = newHasMediaServerHostname


# @package Vidiun
# @subpackage Client
class VidiunMediaFlavorParamsOutputFilter(VidiunMediaFlavorParamsOutputBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            isSystemDefaultEqual=NotImplemented,
            tagsEqual=NotImplemented,
            formatEqual=NotImplemented,
            flavorParamsIdEqual=NotImplemented,
            flavorParamsVersionEqual=NotImplemented,
            flavorAssetIdEqual=NotImplemented,
            flavorAssetVersionEqual=NotImplemented):
        VidiunMediaFlavorParamsOutputBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            systemNameEqual,
            systemNameIn,
            isSystemDefaultEqual,
            tagsEqual,
            formatEqual,
            flavorParamsIdEqual,
            flavorParamsVersionEqual,
            flavorAssetIdEqual,
            flavorAssetVersionEqual)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunMediaFlavorParamsOutputBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunMediaFlavorParamsOutputFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunMediaFlavorParamsOutputBaseFilter.toParams(self)
        vparams.put("objectType", "VidiunMediaFlavorParamsOutputFilter")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunLiveChannelBaseFilter(VidiunLiveEntryFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            idNotIn=NotImplemented,
            nameLike=NotImplemented,
            nameMultiLikeOr=NotImplemented,
            nameMultiLikeAnd=NotImplemented,
            nameEqual=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            userIdEqual=NotImplemented,
            userIdIn=NotImplemented,
            creatorIdEqual=NotImplemented,
            tagsLike=NotImplemented,
            tagsMultiLikeOr=NotImplemented,
            tagsMultiLikeAnd=NotImplemented,
            adminTagsLike=NotImplemented,
            adminTagsMultiLikeOr=NotImplemented,
            adminTagsMultiLikeAnd=NotImplemented,
            categoriesMatchAnd=NotImplemented,
            categoriesMatchOr=NotImplemented,
            categoriesNotContains=NotImplemented,
            categoriesIdsMatchAnd=NotImplemented,
            categoriesIdsMatchOr=NotImplemented,
            categoriesIdsNotContains=NotImplemented,
            categoriesIdsEmpty=NotImplemented,
            statusEqual=NotImplemented,
            statusNotEqual=NotImplemented,
            statusIn=NotImplemented,
            statusNotIn=NotImplemented,
            moderationStatusEqual=NotImplemented,
            moderationStatusNotEqual=NotImplemented,
            moderationStatusIn=NotImplemented,
            moderationStatusNotIn=NotImplemented,
            typeEqual=NotImplemented,
            typeIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            totalRankLessThanOrEqual=NotImplemented,
            totalRankGreaterThanOrEqual=NotImplemented,
            groupIdEqual=NotImplemented,
            searchTextMatchAnd=NotImplemented,
            searchTextMatchOr=NotImplemented,
            accessControlIdEqual=NotImplemented,
            accessControlIdIn=NotImplemented,
            startDateGreaterThanOrEqual=NotImplemented,
            startDateLessThanOrEqual=NotImplemented,
            startDateGreaterThanOrEqualOrNull=NotImplemented,
            startDateLessThanOrEqualOrNull=NotImplemented,
            endDateGreaterThanOrEqual=NotImplemented,
            endDateLessThanOrEqual=NotImplemented,
            endDateGreaterThanOrEqualOrNull=NotImplemented,
            endDateLessThanOrEqualOrNull=NotImplemented,
            referenceIdEqual=NotImplemented,
            referenceIdIn=NotImplemented,
            replacingEntryIdEqual=NotImplemented,
            replacingEntryIdIn=NotImplemented,
            replacedEntryIdEqual=NotImplemented,
            replacedEntryIdIn=NotImplemented,
            replacementStatusEqual=NotImplemented,
            replacementStatusIn=NotImplemented,
            partnerSortValueGreaterThanOrEqual=NotImplemented,
            partnerSortValueLessThanOrEqual=NotImplemented,
            rootEntryIdEqual=NotImplemented,
            rootEntryIdIn=NotImplemented,
            parentEntryIdEqual=NotImplemented,
            entitledUsersEditMatchAnd=NotImplemented,
            entitledUsersEditMatchOr=NotImplemented,
            entitledUsersPublishMatchAnd=NotImplemented,
            entitledUsersPublishMatchOr=NotImplemented,
            tagsNameMultiLikeOr=NotImplemented,
            tagsAdminTagsMultiLikeOr=NotImplemented,
            tagsAdminTagsNameMultiLikeOr=NotImplemented,
            tagsNameMultiLikeAnd=NotImplemented,
            tagsAdminTagsMultiLikeAnd=NotImplemented,
            tagsAdminTagsNameMultiLikeAnd=NotImplemented,
            freeText=NotImplemented,
            isRoot=NotImplemented,
            categoriesFullNameIn=NotImplemented,
            categoryAncestorIdIn=NotImplemented,
            redirectFromEntryId=NotImplemented,
            lastPlayedAtGreaterThanOrEqual=NotImplemented,
            lastPlayedAtLessThanOrEqual=NotImplemented,
            durationLessThan=NotImplemented,
            durationGreaterThan=NotImplemented,
            durationLessThanOrEqual=NotImplemented,
            durationGreaterThanOrEqual=NotImplemented,
            durationTypeMatchOr=NotImplemented,
            mediaTypeEqual=NotImplemented,
            mediaTypeIn=NotImplemented,
            sourceTypeEqual=NotImplemented,
            sourceTypeNotEqual=NotImplemented,
            sourceTypeIn=NotImplemented,
            sourceTypeNotIn=NotImplemented,
            mediaDateGreaterThanOrEqual=NotImplemented,
            mediaDateLessThanOrEqual=NotImplemented,
            flavorParamsIdsMatchOr=NotImplemented,
            flavorParamsIdsMatchAnd=NotImplemented,
            isLive=NotImplemented,
            isRecordedEntryIdEmpty=NotImplemented,
            hasMediaServerHostname=NotImplemented):
        VidiunLiveEntryFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            idNotIn,
            nameLike,
            nameMultiLikeOr,
            nameMultiLikeAnd,
            nameEqual,
            partnerIdEqual,
            partnerIdIn,
            userIdEqual,
            userIdIn,
            creatorIdEqual,
            tagsLike,
            tagsMultiLikeOr,
            tagsMultiLikeAnd,
            adminTagsLike,
            adminTagsMultiLikeOr,
            adminTagsMultiLikeAnd,
            categoriesMatchAnd,
            categoriesMatchOr,
            categoriesNotContains,
            categoriesIdsMatchAnd,
            categoriesIdsMatchOr,
            categoriesIdsNotContains,
            categoriesIdsEmpty,
            statusEqual,
            statusNotEqual,
            statusIn,
            statusNotIn,
            moderationStatusEqual,
            moderationStatusNotEqual,
            moderationStatusIn,
            moderationStatusNotIn,
            typeEqual,
            typeIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            totalRankLessThanOrEqual,
            totalRankGreaterThanOrEqual,
            groupIdEqual,
            searchTextMatchAnd,
            searchTextMatchOr,
            accessControlIdEqual,
            accessControlIdIn,
            startDateGreaterThanOrEqual,
            startDateLessThanOrEqual,
            startDateGreaterThanOrEqualOrNull,
            startDateLessThanOrEqualOrNull,
            endDateGreaterThanOrEqual,
            endDateLessThanOrEqual,
            endDateGreaterThanOrEqualOrNull,
            endDateLessThanOrEqualOrNull,
            referenceIdEqual,
            referenceIdIn,
            replacingEntryIdEqual,
            replacingEntryIdIn,
            replacedEntryIdEqual,
            replacedEntryIdIn,
            replacementStatusEqual,
            replacementStatusIn,
            partnerSortValueGreaterThanOrEqual,
            partnerSortValueLessThanOrEqual,
            rootEntryIdEqual,
            rootEntryIdIn,
            parentEntryIdEqual,
            entitledUsersEditMatchAnd,
            entitledUsersEditMatchOr,
            entitledUsersPublishMatchAnd,
            entitledUsersPublishMatchOr,
            tagsNameMultiLikeOr,
            tagsAdminTagsMultiLikeOr,
            tagsAdminTagsNameMultiLikeOr,
            tagsNameMultiLikeAnd,
            tagsAdminTagsMultiLikeAnd,
            tagsAdminTagsNameMultiLikeAnd,
            freeText,
            isRoot,
            categoriesFullNameIn,
            categoryAncestorIdIn,
            redirectFromEntryId,
            lastPlayedAtGreaterThanOrEqual,
            lastPlayedAtLessThanOrEqual,
            durationLessThan,
            durationGreaterThan,
            durationLessThanOrEqual,
            durationGreaterThanOrEqual,
            durationTypeMatchOr,
            mediaTypeEqual,
            mediaTypeIn,
            sourceTypeEqual,
            sourceTypeNotEqual,
            sourceTypeIn,
            sourceTypeNotIn,
            mediaDateGreaterThanOrEqual,
            mediaDateLessThanOrEqual,
            flavorParamsIdsMatchOr,
            flavorParamsIdsMatchAnd,
            isLive,
            isRecordedEntryIdEmpty,
            hasMediaServerHostname)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunLiveEntryFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunLiveChannelBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunLiveEntryFilter.toParams(self)
        vparams.put("objectType", "VidiunLiveChannelBaseFilter")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunLiveStreamEntryBaseFilter(VidiunLiveEntryFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            idNotIn=NotImplemented,
            nameLike=NotImplemented,
            nameMultiLikeOr=NotImplemented,
            nameMultiLikeAnd=NotImplemented,
            nameEqual=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            userIdEqual=NotImplemented,
            userIdIn=NotImplemented,
            creatorIdEqual=NotImplemented,
            tagsLike=NotImplemented,
            tagsMultiLikeOr=NotImplemented,
            tagsMultiLikeAnd=NotImplemented,
            adminTagsLike=NotImplemented,
            adminTagsMultiLikeOr=NotImplemented,
            adminTagsMultiLikeAnd=NotImplemented,
            categoriesMatchAnd=NotImplemented,
            categoriesMatchOr=NotImplemented,
            categoriesNotContains=NotImplemented,
            categoriesIdsMatchAnd=NotImplemented,
            categoriesIdsMatchOr=NotImplemented,
            categoriesIdsNotContains=NotImplemented,
            categoriesIdsEmpty=NotImplemented,
            statusEqual=NotImplemented,
            statusNotEqual=NotImplemented,
            statusIn=NotImplemented,
            statusNotIn=NotImplemented,
            moderationStatusEqual=NotImplemented,
            moderationStatusNotEqual=NotImplemented,
            moderationStatusIn=NotImplemented,
            moderationStatusNotIn=NotImplemented,
            typeEqual=NotImplemented,
            typeIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            totalRankLessThanOrEqual=NotImplemented,
            totalRankGreaterThanOrEqual=NotImplemented,
            groupIdEqual=NotImplemented,
            searchTextMatchAnd=NotImplemented,
            searchTextMatchOr=NotImplemented,
            accessControlIdEqual=NotImplemented,
            accessControlIdIn=NotImplemented,
            startDateGreaterThanOrEqual=NotImplemented,
            startDateLessThanOrEqual=NotImplemented,
            startDateGreaterThanOrEqualOrNull=NotImplemented,
            startDateLessThanOrEqualOrNull=NotImplemented,
            endDateGreaterThanOrEqual=NotImplemented,
            endDateLessThanOrEqual=NotImplemented,
            endDateGreaterThanOrEqualOrNull=NotImplemented,
            endDateLessThanOrEqualOrNull=NotImplemented,
            referenceIdEqual=NotImplemented,
            referenceIdIn=NotImplemented,
            replacingEntryIdEqual=NotImplemented,
            replacingEntryIdIn=NotImplemented,
            replacedEntryIdEqual=NotImplemented,
            replacedEntryIdIn=NotImplemented,
            replacementStatusEqual=NotImplemented,
            replacementStatusIn=NotImplemented,
            partnerSortValueGreaterThanOrEqual=NotImplemented,
            partnerSortValueLessThanOrEqual=NotImplemented,
            rootEntryIdEqual=NotImplemented,
            rootEntryIdIn=NotImplemented,
            parentEntryIdEqual=NotImplemented,
            entitledUsersEditMatchAnd=NotImplemented,
            entitledUsersEditMatchOr=NotImplemented,
            entitledUsersPublishMatchAnd=NotImplemented,
            entitledUsersPublishMatchOr=NotImplemented,
            tagsNameMultiLikeOr=NotImplemented,
            tagsAdminTagsMultiLikeOr=NotImplemented,
            tagsAdminTagsNameMultiLikeOr=NotImplemented,
            tagsNameMultiLikeAnd=NotImplemented,
            tagsAdminTagsMultiLikeAnd=NotImplemented,
            tagsAdminTagsNameMultiLikeAnd=NotImplemented,
            freeText=NotImplemented,
            isRoot=NotImplemented,
            categoriesFullNameIn=NotImplemented,
            categoryAncestorIdIn=NotImplemented,
            redirectFromEntryId=NotImplemented,
            lastPlayedAtGreaterThanOrEqual=NotImplemented,
            lastPlayedAtLessThanOrEqual=NotImplemented,
            durationLessThan=NotImplemented,
            durationGreaterThan=NotImplemented,
            durationLessThanOrEqual=NotImplemented,
            durationGreaterThanOrEqual=NotImplemented,
            durationTypeMatchOr=NotImplemented,
            mediaTypeEqual=NotImplemented,
            mediaTypeIn=NotImplemented,
            sourceTypeEqual=NotImplemented,
            sourceTypeNotEqual=NotImplemented,
            sourceTypeIn=NotImplemented,
            sourceTypeNotIn=NotImplemented,
            mediaDateGreaterThanOrEqual=NotImplemented,
            mediaDateLessThanOrEqual=NotImplemented,
            flavorParamsIdsMatchOr=NotImplemented,
            flavorParamsIdsMatchAnd=NotImplemented,
            isLive=NotImplemented,
            isRecordedEntryIdEmpty=NotImplemented,
            hasMediaServerHostname=NotImplemented):
        VidiunLiveEntryFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            idNotIn,
            nameLike,
            nameMultiLikeOr,
            nameMultiLikeAnd,
            nameEqual,
            partnerIdEqual,
            partnerIdIn,
            userIdEqual,
            userIdIn,
            creatorIdEqual,
            tagsLike,
            tagsMultiLikeOr,
            tagsMultiLikeAnd,
            adminTagsLike,
            adminTagsMultiLikeOr,
            adminTagsMultiLikeAnd,
            categoriesMatchAnd,
            categoriesMatchOr,
            categoriesNotContains,
            categoriesIdsMatchAnd,
            categoriesIdsMatchOr,
            categoriesIdsNotContains,
            categoriesIdsEmpty,
            statusEqual,
            statusNotEqual,
            statusIn,
            statusNotIn,
            moderationStatusEqual,
            moderationStatusNotEqual,
            moderationStatusIn,
            moderationStatusNotIn,
            typeEqual,
            typeIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            totalRankLessThanOrEqual,
            totalRankGreaterThanOrEqual,
            groupIdEqual,
            searchTextMatchAnd,
            searchTextMatchOr,
            accessControlIdEqual,
            accessControlIdIn,
            startDateGreaterThanOrEqual,
            startDateLessThanOrEqual,
            startDateGreaterThanOrEqualOrNull,
            startDateLessThanOrEqualOrNull,
            endDateGreaterThanOrEqual,
            endDateLessThanOrEqual,
            endDateGreaterThanOrEqualOrNull,
            endDateLessThanOrEqualOrNull,
            referenceIdEqual,
            referenceIdIn,
            replacingEntryIdEqual,
            replacingEntryIdIn,
            replacedEntryIdEqual,
            replacedEntryIdIn,
            replacementStatusEqual,
            replacementStatusIn,
            partnerSortValueGreaterThanOrEqual,
            partnerSortValueLessThanOrEqual,
            rootEntryIdEqual,
            rootEntryIdIn,
            parentEntryIdEqual,
            entitledUsersEditMatchAnd,
            entitledUsersEditMatchOr,
            entitledUsersPublishMatchAnd,
            entitledUsersPublishMatchOr,
            tagsNameMultiLikeOr,
            tagsAdminTagsMultiLikeOr,
            tagsAdminTagsNameMultiLikeOr,
            tagsNameMultiLikeAnd,
            tagsAdminTagsMultiLikeAnd,
            tagsAdminTagsNameMultiLikeAnd,
            freeText,
            isRoot,
            categoriesFullNameIn,
            categoryAncestorIdIn,
            redirectFromEntryId,
            lastPlayedAtGreaterThanOrEqual,
            lastPlayedAtLessThanOrEqual,
            durationLessThan,
            durationGreaterThan,
            durationLessThanOrEqual,
            durationGreaterThanOrEqual,
            durationTypeMatchOr,
            mediaTypeEqual,
            mediaTypeIn,
            sourceTypeEqual,
            sourceTypeNotEqual,
            sourceTypeIn,
            sourceTypeNotIn,
            mediaDateGreaterThanOrEqual,
            mediaDateLessThanOrEqual,
            flavorParamsIdsMatchOr,
            flavorParamsIdsMatchAnd,
            isLive,
            isRecordedEntryIdEmpty,
            hasMediaServerHostname)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunLiveEntryFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunLiveStreamEntryBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunLiveEntryFilter.toParams(self)
        vparams.put("objectType", "VidiunLiveStreamEntryBaseFilter")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunLiveChannelFilter(VidiunLiveChannelBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            idNotIn=NotImplemented,
            nameLike=NotImplemented,
            nameMultiLikeOr=NotImplemented,
            nameMultiLikeAnd=NotImplemented,
            nameEqual=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            userIdEqual=NotImplemented,
            userIdIn=NotImplemented,
            creatorIdEqual=NotImplemented,
            tagsLike=NotImplemented,
            tagsMultiLikeOr=NotImplemented,
            tagsMultiLikeAnd=NotImplemented,
            adminTagsLike=NotImplemented,
            adminTagsMultiLikeOr=NotImplemented,
            adminTagsMultiLikeAnd=NotImplemented,
            categoriesMatchAnd=NotImplemented,
            categoriesMatchOr=NotImplemented,
            categoriesNotContains=NotImplemented,
            categoriesIdsMatchAnd=NotImplemented,
            categoriesIdsMatchOr=NotImplemented,
            categoriesIdsNotContains=NotImplemented,
            categoriesIdsEmpty=NotImplemented,
            statusEqual=NotImplemented,
            statusNotEqual=NotImplemented,
            statusIn=NotImplemented,
            statusNotIn=NotImplemented,
            moderationStatusEqual=NotImplemented,
            moderationStatusNotEqual=NotImplemented,
            moderationStatusIn=NotImplemented,
            moderationStatusNotIn=NotImplemented,
            typeEqual=NotImplemented,
            typeIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            totalRankLessThanOrEqual=NotImplemented,
            totalRankGreaterThanOrEqual=NotImplemented,
            groupIdEqual=NotImplemented,
            searchTextMatchAnd=NotImplemented,
            searchTextMatchOr=NotImplemented,
            accessControlIdEqual=NotImplemented,
            accessControlIdIn=NotImplemented,
            startDateGreaterThanOrEqual=NotImplemented,
            startDateLessThanOrEqual=NotImplemented,
            startDateGreaterThanOrEqualOrNull=NotImplemented,
            startDateLessThanOrEqualOrNull=NotImplemented,
            endDateGreaterThanOrEqual=NotImplemented,
            endDateLessThanOrEqual=NotImplemented,
            endDateGreaterThanOrEqualOrNull=NotImplemented,
            endDateLessThanOrEqualOrNull=NotImplemented,
            referenceIdEqual=NotImplemented,
            referenceIdIn=NotImplemented,
            replacingEntryIdEqual=NotImplemented,
            replacingEntryIdIn=NotImplemented,
            replacedEntryIdEqual=NotImplemented,
            replacedEntryIdIn=NotImplemented,
            replacementStatusEqual=NotImplemented,
            replacementStatusIn=NotImplemented,
            partnerSortValueGreaterThanOrEqual=NotImplemented,
            partnerSortValueLessThanOrEqual=NotImplemented,
            rootEntryIdEqual=NotImplemented,
            rootEntryIdIn=NotImplemented,
            parentEntryIdEqual=NotImplemented,
            entitledUsersEditMatchAnd=NotImplemented,
            entitledUsersEditMatchOr=NotImplemented,
            entitledUsersPublishMatchAnd=NotImplemented,
            entitledUsersPublishMatchOr=NotImplemented,
            tagsNameMultiLikeOr=NotImplemented,
            tagsAdminTagsMultiLikeOr=NotImplemented,
            tagsAdminTagsNameMultiLikeOr=NotImplemented,
            tagsNameMultiLikeAnd=NotImplemented,
            tagsAdminTagsMultiLikeAnd=NotImplemented,
            tagsAdminTagsNameMultiLikeAnd=NotImplemented,
            freeText=NotImplemented,
            isRoot=NotImplemented,
            categoriesFullNameIn=NotImplemented,
            categoryAncestorIdIn=NotImplemented,
            redirectFromEntryId=NotImplemented,
            lastPlayedAtGreaterThanOrEqual=NotImplemented,
            lastPlayedAtLessThanOrEqual=NotImplemented,
            durationLessThan=NotImplemented,
            durationGreaterThan=NotImplemented,
            durationLessThanOrEqual=NotImplemented,
            durationGreaterThanOrEqual=NotImplemented,
            durationTypeMatchOr=NotImplemented,
            mediaTypeEqual=NotImplemented,
            mediaTypeIn=NotImplemented,
            sourceTypeEqual=NotImplemented,
            sourceTypeNotEqual=NotImplemented,
            sourceTypeIn=NotImplemented,
            sourceTypeNotIn=NotImplemented,
            mediaDateGreaterThanOrEqual=NotImplemented,
            mediaDateLessThanOrEqual=NotImplemented,
            flavorParamsIdsMatchOr=NotImplemented,
            flavorParamsIdsMatchAnd=NotImplemented,
            isLive=NotImplemented,
            isRecordedEntryIdEmpty=NotImplemented,
            hasMediaServerHostname=NotImplemented):
        VidiunLiveChannelBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            idNotIn,
            nameLike,
            nameMultiLikeOr,
            nameMultiLikeAnd,
            nameEqual,
            partnerIdEqual,
            partnerIdIn,
            userIdEqual,
            userIdIn,
            creatorIdEqual,
            tagsLike,
            tagsMultiLikeOr,
            tagsMultiLikeAnd,
            adminTagsLike,
            adminTagsMultiLikeOr,
            adminTagsMultiLikeAnd,
            categoriesMatchAnd,
            categoriesMatchOr,
            categoriesNotContains,
            categoriesIdsMatchAnd,
            categoriesIdsMatchOr,
            categoriesIdsNotContains,
            categoriesIdsEmpty,
            statusEqual,
            statusNotEqual,
            statusIn,
            statusNotIn,
            moderationStatusEqual,
            moderationStatusNotEqual,
            moderationStatusIn,
            moderationStatusNotIn,
            typeEqual,
            typeIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            totalRankLessThanOrEqual,
            totalRankGreaterThanOrEqual,
            groupIdEqual,
            searchTextMatchAnd,
            searchTextMatchOr,
            accessControlIdEqual,
            accessControlIdIn,
            startDateGreaterThanOrEqual,
            startDateLessThanOrEqual,
            startDateGreaterThanOrEqualOrNull,
            startDateLessThanOrEqualOrNull,
            endDateGreaterThanOrEqual,
            endDateLessThanOrEqual,
            endDateGreaterThanOrEqualOrNull,
            endDateLessThanOrEqualOrNull,
            referenceIdEqual,
            referenceIdIn,
            replacingEntryIdEqual,
            replacingEntryIdIn,
            replacedEntryIdEqual,
            replacedEntryIdIn,
            replacementStatusEqual,
            replacementStatusIn,
            partnerSortValueGreaterThanOrEqual,
            partnerSortValueLessThanOrEqual,
            rootEntryIdEqual,
            rootEntryIdIn,
            parentEntryIdEqual,
            entitledUsersEditMatchAnd,
            entitledUsersEditMatchOr,
            entitledUsersPublishMatchAnd,
            entitledUsersPublishMatchOr,
            tagsNameMultiLikeOr,
            tagsAdminTagsMultiLikeOr,
            tagsAdminTagsNameMultiLikeOr,
            tagsNameMultiLikeAnd,
            tagsAdminTagsMultiLikeAnd,
            tagsAdminTagsNameMultiLikeAnd,
            freeText,
            isRoot,
            categoriesFullNameIn,
            categoryAncestorIdIn,
            redirectFromEntryId,
            lastPlayedAtGreaterThanOrEqual,
            lastPlayedAtLessThanOrEqual,
            durationLessThan,
            durationGreaterThan,
            durationLessThanOrEqual,
            durationGreaterThanOrEqual,
            durationTypeMatchOr,
            mediaTypeEqual,
            mediaTypeIn,
            sourceTypeEqual,
            sourceTypeNotEqual,
            sourceTypeIn,
            sourceTypeNotIn,
            mediaDateGreaterThanOrEqual,
            mediaDateLessThanOrEqual,
            flavorParamsIdsMatchOr,
            flavorParamsIdsMatchAnd,
            isLive,
            isRecordedEntryIdEmpty,
            hasMediaServerHostname)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunLiveChannelBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunLiveChannelFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunLiveChannelBaseFilter.toParams(self)
        vparams.put("objectType", "VidiunLiveChannelFilter")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunLiveStreamEntryFilter(VidiunLiveStreamEntryBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            idNotIn=NotImplemented,
            nameLike=NotImplemented,
            nameMultiLikeOr=NotImplemented,
            nameMultiLikeAnd=NotImplemented,
            nameEqual=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            userIdEqual=NotImplemented,
            userIdIn=NotImplemented,
            creatorIdEqual=NotImplemented,
            tagsLike=NotImplemented,
            tagsMultiLikeOr=NotImplemented,
            tagsMultiLikeAnd=NotImplemented,
            adminTagsLike=NotImplemented,
            adminTagsMultiLikeOr=NotImplemented,
            adminTagsMultiLikeAnd=NotImplemented,
            categoriesMatchAnd=NotImplemented,
            categoriesMatchOr=NotImplemented,
            categoriesNotContains=NotImplemented,
            categoriesIdsMatchAnd=NotImplemented,
            categoriesIdsMatchOr=NotImplemented,
            categoriesIdsNotContains=NotImplemented,
            categoriesIdsEmpty=NotImplemented,
            statusEqual=NotImplemented,
            statusNotEqual=NotImplemented,
            statusIn=NotImplemented,
            statusNotIn=NotImplemented,
            moderationStatusEqual=NotImplemented,
            moderationStatusNotEqual=NotImplemented,
            moderationStatusIn=NotImplemented,
            moderationStatusNotIn=NotImplemented,
            typeEqual=NotImplemented,
            typeIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            totalRankLessThanOrEqual=NotImplemented,
            totalRankGreaterThanOrEqual=NotImplemented,
            groupIdEqual=NotImplemented,
            searchTextMatchAnd=NotImplemented,
            searchTextMatchOr=NotImplemented,
            accessControlIdEqual=NotImplemented,
            accessControlIdIn=NotImplemented,
            startDateGreaterThanOrEqual=NotImplemented,
            startDateLessThanOrEqual=NotImplemented,
            startDateGreaterThanOrEqualOrNull=NotImplemented,
            startDateLessThanOrEqualOrNull=NotImplemented,
            endDateGreaterThanOrEqual=NotImplemented,
            endDateLessThanOrEqual=NotImplemented,
            endDateGreaterThanOrEqualOrNull=NotImplemented,
            endDateLessThanOrEqualOrNull=NotImplemented,
            referenceIdEqual=NotImplemented,
            referenceIdIn=NotImplemented,
            replacingEntryIdEqual=NotImplemented,
            replacingEntryIdIn=NotImplemented,
            replacedEntryIdEqual=NotImplemented,
            replacedEntryIdIn=NotImplemented,
            replacementStatusEqual=NotImplemented,
            replacementStatusIn=NotImplemented,
            partnerSortValueGreaterThanOrEqual=NotImplemented,
            partnerSortValueLessThanOrEqual=NotImplemented,
            rootEntryIdEqual=NotImplemented,
            rootEntryIdIn=NotImplemented,
            parentEntryIdEqual=NotImplemented,
            entitledUsersEditMatchAnd=NotImplemented,
            entitledUsersEditMatchOr=NotImplemented,
            entitledUsersPublishMatchAnd=NotImplemented,
            entitledUsersPublishMatchOr=NotImplemented,
            tagsNameMultiLikeOr=NotImplemented,
            tagsAdminTagsMultiLikeOr=NotImplemented,
            tagsAdminTagsNameMultiLikeOr=NotImplemented,
            tagsNameMultiLikeAnd=NotImplemented,
            tagsAdminTagsMultiLikeAnd=NotImplemented,
            tagsAdminTagsNameMultiLikeAnd=NotImplemented,
            freeText=NotImplemented,
            isRoot=NotImplemented,
            categoriesFullNameIn=NotImplemented,
            categoryAncestorIdIn=NotImplemented,
            redirectFromEntryId=NotImplemented,
            lastPlayedAtGreaterThanOrEqual=NotImplemented,
            lastPlayedAtLessThanOrEqual=NotImplemented,
            durationLessThan=NotImplemented,
            durationGreaterThan=NotImplemented,
            durationLessThanOrEqual=NotImplemented,
            durationGreaterThanOrEqual=NotImplemented,
            durationTypeMatchOr=NotImplemented,
            mediaTypeEqual=NotImplemented,
            mediaTypeIn=NotImplemented,
            sourceTypeEqual=NotImplemented,
            sourceTypeNotEqual=NotImplemented,
            sourceTypeIn=NotImplemented,
            sourceTypeNotIn=NotImplemented,
            mediaDateGreaterThanOrEqual=NotImplemented,
            mediaDateLessThanOrEqual=NotImplemented,
            flavorParamsIdsMatchOr=NotImplemented,
            flavorParamsIdsMatchAnd=NotImplemented,
            isLive=NotImplemented,
            isRecordedEntryIdEmpty=NotImplemented,
            hasMediaServerHostname=NotImplemented):
        VidiunLiveStreamEntryBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            idNotIn,
            nameLike,
            nameMultiLikeOr,
            nameMultiLikeAnd,
            nameEqual,
            partnerIdEqual,
            partnerIdIn,
            userIdEqual,
            userIdIn,
            creatorIdEqual,
            tagsLike,
            tagsMultiLikeOr,
            tagsMultiLikeAnd,
            adminTagsLike,
            adminTagsMultiLikeOr,
            adminTagsMultiLikeAnd,
            categoriesMatchAnd,
            categoriesMatchOr,
            categoriesNotContains,
            categoriesIdsMatchAnd,
            categoriesIdsMatchOr,
            categoriesIdsNotContains,
            categoriesIdsEmpty,
            statusEqual,
            statusNotEqual,
            statusIn,
            statusNotIn,
            moderationStatusEqual,
            moderationStatusNotEqual,
            moderationStatusIn,
            moderationStatusNotIn,
            typeEqual,
            typeIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            totalRankLessThanOrEqual,
            totalRankGreaterThanOrEqual,
            groupIdEqual,
            searchTextMatchAnd,
            searchTextMatchOr,
            accessControlIdEqual,
            accessControlIdIn,
            startDateGreaterThanOrEqual,
            startDateLessThanOrEqual,
            startDateGreaterThanOrEqualOrNull,
            startDateLessThanOrEqualOrNull,
            endDateGreaterThanOrEqual,
            endDateLessThanOrEqual,
            endDateGreaterThanOrEqualOrNull,
            endDateLessThanOrEqualOrNull,
            referenceIdEqual,
            referenceIdIn,
            replacingEntryIdEqual,
            replacingEntryIdIn,
            replacedEntryIdEqual,
            replacedEntryIdIn,
            replacementStatusEqual,
            replacementStatusIn,
            partnerSortValueGreaterThanOrEqual,
            partnerSortValueLessThanOrEqual,
            rootEntryIdEqual,
            rootEntryIdIn,
            parentEntryIdEqual,
            entitledUsersEditMatchAnd,
            entitledUsersEditMatchOr,
            entitledUsersPublishMatchAnd,
            entitledUsersPublishMatchOr,
            tagsNameMultiLikeOr,
            tagsAdminTagsMultiLikeOr,
            tagsAdminTagsNameMultiLikeOr,
            tagsNameMultiLikeAnd,
            tagsAdminTagsMultiLikeAnd,
            tagsAdminTagsNameMultiLikeAnd,
            freeText,
            isRoot,
            categoriesFullNameIn,
            categoryAncestorIdIn,
            redirectFromEntryId,
            lastPlayedAtGreaterThanOrEqual,
            lastPlayedAtLessThanOrEqual,
            durationLessThan,
            durationGreaterThan,
            durationLessThanOrEqual,
            durationGreaterThanOrEqual,
            durationTypeMatchOr,
            mediaTypeEqual,
            mediaTypeIn,
            sourceTypeEqual,
            sourceTypeNotEqual,
            sourceTypeIn,
            sourceTypeNotIn,
            mediaDateGreaterThanOrEqual,
            mediaDateLessThanOrEqual,
            flavorParamsIdsMatchOr,
            flavorParamsIdsMatchAnd,
            isLive,
            isRecordedEntryIdEmpty,
            hasMediaServerHostname)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunLiveStreamEntryBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunLiveStreamEntryFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunLiveStreamEntryBaseFilter.toParams(self)
        vparams.put("objectType", "VidiunLiveStreamEntryFilter")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunLiveStreamAdminEntryBaseFilter(VidiunLiveStreamEntryFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            idNotIn=NotImplemented,
            nameLike=NotImplemented,
            nameMultiLikeOr=NotImplemented,
            nameMultiLikeAnd=NotImplemented,
            nameEqual=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            userIdEqual=NotImplemented,
            userIdIn=NotImplemented,
            creatorIdEqual=NotImplemented,
            tagsLike=NotImplemented,
            tagsMultiLikeOr=NotImplemented,
            tagsMultiLikeAnd=NotImplemented,
            adminTagsLike=NotImplemented,
            adminTagsMultiLikeOr=NotImplemented,
            adminTagsMultiLikeAnd=NotImplemented,
            categoriesMatchAnd=NotImplemented,
            categoriesMatchOr=NotImplemented,
            categoriesNotContains=NotImplemented,
            categoriesIdsMatchAnd=NotImplemented,
            categoriesIdsMatchOr=NotImplemented,
            categoriesIdsNotContains=NotImplemented,
            categoriesIdsEmpty=NotImplemented,
            statusEqual=NotImplemented,
            statusNotEqual=NotImplemented,
            statusIn=NotImplemented,
            statusNotIn=NotImplemented,
            moderationStatusEqual=NotImplemented,
            moderationStatusNotEqual=NotImplemented,
            moderationStatusIn=NotImplemented,
            moderationStatusNotIn=NotImplemented,
            typeEqual=NotImplemented,
            typeIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            totalRankLessThanOrEqual=NotImplemented,
            totalRankGreaterThanOrEqual=NotImplemented,
            groupIdEqual=NotImplemented,
            searchTextMatchAnd=NotImplemented,
            searchTextMatchOr=NotImplemented,
            accessControlIdEqual=NotImplemented,
            accessControlIdIn=NotImplemented,
            startDateGreaterThanOrEqual=NotImplemented,
            startDateLessThanOrEqual=NotImplemented,
            startDateGreaterThanOrEqualOrNull=NotImplemented,
            startDateLessThanOrEqualOrNull=NotImplemented,
            endDateGreaterThanOrEqual=NotImplemented,
            endDateLessThanOrEqual=NotImplemented,
            endDateGreaterThanOrEqualOrNull=NotImplemented,
            endDateLessThanOrEqualOrNull=NotImplemented,
            referenceIdEqual=NotImplemented,
            referenceIdIn=NotImplemented,
            replacingEntryIdEqual=NotImplemented,
            replacingEntryIdIn=NotImplemented,
            replacedEntryIdEqual=NotImplemented,
            replacedEntryIdIn=NotImplemented,
            replacementStatusEqual=NotImplemented,
            replacementStatusIn=NotImplemented,
            partnerSortValueGreaterThanOrEqual=NotImplemented,
            partnerSortValueLessThanOrEqual=NotImplemented,
            rootEntryIdEqual=NotImplemented,
            rootEntryIdIn=NotImplemented,
            parentEntryIdEqual=NotImplemented,
            entitledUsersEditMatchAnd=NotImplemented,
            entitledUsersEditMatchOr=NotImplemented,
            entitledUsersPublishMatchAnd=NotImplemented,
            entitledUsersPublishMatchOr=NotImplemented,
            tagsNameMultiLikeOr=NotImplemented,
            tagsAdminTagsMultiLikeOr=NotImplemented,
            tagsAdminTagsNameMultiLikeOr=NotImplemented,
            tagsNameMultiLikeAnd=NotImplemented,
            tagsAdminTagsMultiLikeAnd=NotImplemented,
            tagsAdminTagsNameMultiLikeAnd=NotImplemented,
            freeText=NotImplemented,
            isRoot=NotImplemented,
            categoriesFullNameIn=NotImplemented,
            categoryAncestorIdIn=NotImplemented,
            redirectFromEntryId=NotImplemented,
            lastPlayedAtGreaterThanOrEqual=NotImplemented,
            lastPlayedAtLessThanOrEqual=NotImplemented,
            durationLessThan=NotImplemented,
            durationGreaterThan=NotImplemented,
            durationLessThanOrEqual=NotImplemented,
            durationGreaterThanOrEqual=NotImplemented,
            durationTypeMatchOr=NotImplemented,
            mediaTypeEqual=NotImplemented,
            mediaTypeIn=NotImplemented,
            sourceTypeEqual=NotImplemented,
            sourceTypeNotEqual=NotImplemented,
            sourceTypeIn=NotImplemented,
            sourceTypeNotIn=NotImplemented,
            mediaDateGreaterThanOrEqual=NotImplemented,
            mediaDateLessThanOrEqual=NotImplemented,
            flavorParamsIdsMatchOr=NotImplemented,
            flavorParamsIdsMatchAnd=NotImplemented,
            isLive=NotImplemented,
            isRecordedEntryIdEmpty=NotImplemented,
            hasMediaServerHostname=NotImplemented):
        VidiunLiveStreamEntryFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            idNotIn,
            nameLike,
            nameMultiLikeOr,
            nameMultiLikeAnd,
            nameEqual,
            partnerIdEqual,
            partnerIdIn,
            userIdEqual,
            userIdIn,
            creatorIdEqual,
            tagsLike,
            tagsMultiLikeOr,
            tagsMultiLikeAnd,
            adminTagsLike,
            adminTagsMultiLikeOr,
            adminTagsMultiLikeAnd,
            categoriesMatchAnd,
            categoriesMatchOr,
            categoriesNotContains,
            categoriesIdsMatchAnd,
            categoriesIdsMatchOr,
            categoriesIdsNotContains,
            categoriesIdsEmpty,
            statusEqual,
            statusNotEqual,
            statusIn,
            statusNotIn,
            moderationStatusEqual,
            moderationStatusNotEqual,
            moderationStatusIn,
            moderationStatusNotIn,
            typeEqual,
            typeIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            totalRankLessThanOrEqual,
            totalRankGreaterThanOrEqual,
            groupIdEqual,
            searchTextMatchAnd,
            searchTextMatchOr,
            accessControlIdEqual,
            accessControlIdIn,
            startDateGreaterThanOrEqual,
            startDateLessThanOrEqual,
            startDateGreaterThanOrEqualOrNull,
            startDateLessThanOrEqualOrNull,
            endDateGreaterThanOrEqual,
            endDateLessThanOrEqual,
            endDateGreaterThanOrEqualOrNull,
            endDateLessThanOrEqualOrNull,
            referenceIdEqual,
            referenceIdIn,
            replacingEntryIdEqual,
            replacingEntryIdIn,
            replacedEntryIdEqual,
            replacedEntryIdIn,
            replacementStatusEqual,
            replacementStatusIn,
            partnerSortValueGreaterThanOrEqual,
            partnerSortValueLessThanOrEqual,
            rootEntryIdEqual,
            rootEntryIdIn,
            parentEntryIdEqual,
            entitledUsersEditMatchAnd,
            entitledUsersEditMatchOr,
            entitledUsersPublishMatchAnd,
            entitledUsersPublishMatchOr,
            tagsNameMultiLikeOr,
            tagsAdminTagsMultiLikeOr,
            tagsAdminTagsNameMultiLikeOr,
            tagsNameMultiLikeAnd,
            tagsAdminTagsMultiLikeAnd,
            tagsAdminTagsNameMultiLikeAnd,
            freeText,
            isRoot,
            categoriesFullNameIn,
            categoryAncestorIdIn,
            redirectFromEntryId,
            lastPlayedAtGreaterThanOrEqual,
            lastPlayedAtLessThanOrEqual,
            durationLessThan,
            durationGreaterThan,
            durationLessThanOrEqual,
            durationGreaterThanOrEqual,
            durationTypeMatchOr,
            mediaTypeEqual,
            mediaTypeIn,
            sourceTypeEqual,
            sourceTypeNotEqual,
            sourceTypeIn,
            sourceTypeNotIn,
            mediaDateGreaterThanOrEqual,
            mediaDateLessThanOrEqual,
            flavorParamsIdsMatchOr,
            flavorParamsIdsMatchAnd,
            isLive,
            isRecordedEntryIdEmpty,
            hasMediaServerHostname)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunLiveStreamEntryFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunLiveStreamAdminEntryBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunLiveStreamEntryFilter.toParams(self)
        vparams.put("objectType", "VidiunLiveStreamAdminEntryBaseFilter")
        return vparams


# @package Vidiun
# @subpackage Client
class VidiunLiveStreamAdminEntryFilter(VidiunLiveStreamAdminEntryBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            idNotIn=NotImplemented,
            nameLike=NotImplemented,
            nameMultiLikeOr=NotImplemented,
            nameMultiLikeAnd=NotImplemented,
            nameEqual=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            userIdEqual=NotImplemented,
            userIdIn=NotImplemented,
            creatorIdEqual=NotImplemented,
            tagsLike=NotImplemented,
            tagsMultiLikeOr=NotImplemented,
            tagsMultiLikeAnd=NotImplemented,
            adminTagsLike=NotImplemented,
            adminTagsMultiLikeOr=NotImplemented,
            adminTagsMultiLikeAnd=NotImplemented,
            categoriesMatchAnd=NotImplemented,
            categoriesMatchOr=NotImplemented,
            categoriesNotContains=NotImplemented,
            categoriesIdsMatchAnd=NotImplemented,
            categoriesIdsMatchOr=NotImplemented,
            categoriesIdsNotContains=NotImplemented,
            categoriesIdsEmpty=NotImplemented,
            statusEqual=NotImplemented,
            statusNotEqual=NotImplemented,
            statusIn=NotImplemented,
            statusNotIn=NotImplemented,
            moderationStatusEqual=NotImplemented,
            moderationStatusNotEqual=NotImplemented,
            moderationStatusIn=NotImplemented,
            moderationStatusNotIn=NotImplemented,
            typeEqual=NotImplemented,
            typeIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            totalRankLessThanOrEqual=NotImplemented,
            totalRankGreaterThanOrEqual=NotImplemented,
            groupIdEqual=NotImplemented,
            searchTextMatchAnd=NotImplemented,
            searchTextMatchOr=NotImplemented,
            accessControlIdEqual=NotImplemented,
            accessControlIdIn=NotImplemented,
            startDateGreaterThanOrEqual=NotImplemented,
            startDateLessThanOrEqual=NotImplemented,
            startDateGreaterThanOrEqualOrNull=NotImplemented,
            startDateLessThanOrEqualOrNull=NotImplemented,
            endDateGreaterThanOrEqual=NotImplemented,
            endDateLessThanOrEqual=NotImplemented,
            endDateGreaterThanOrEqualOrNull=NotImplemented,
            endDateLessThanOrEqualOrNull=NotImplemented,
            referenceIdEqual=NotImplemented,
            referenceIdIn=NotImplemented,
            replacingEntryIdEqual=NotImplemented,
            replacingEntryIdIn=NotImplemented,
            replacedEntryIdEqual=NotImplemented,
            replacedEntryIdIn=NotImplemented,
            replacementStatusEqual=NotImplemented,
            replacementStatusIn=NotImplemented,
            partnerSortValueGreaterThanOrEqual=NotImplemented,
            partnerSortValueLessThanOrEqual=NotImplemented,
            rootEntryIdEqual=NotImplemented,
            rootEntryIdIn=NotImplemented,
            parentEntryIdEqual=NotImplemented,
            entitledUsersEditMatchAnd=NotImplemented,
            entitledUsersEditMatchOr=NotImplemented,
            entitledUsersPublishMatchAnd=NotImplemented,
            entitledUsersPublishMatchOr=NotImplemented,
            tagsNameMultiLikeOr=NotImplemented,
            tagsAdminTagsMultiLikeOr=NotImplemented,
            tagsAdminTagsNameMultiLikeOr=NotImplemented,
            tagsNameMultiLikeAnd=NotImplemented,
            tagsAdminTagsMultiLikeAnd=NotImplemented,
            tagsAdminTagsNameMultiLikeAnd=NotImplemented,
            freeText=NotImplemented,
            isRoot=NotImplemented,
            categoriesFullNameIn=NotImplemented,
            categoryAncestorIdIn=NotImplemented,
            redirectFromEntryId=NotImplemented,
            lastPlayedAtGreaterThanOrEqual=NotImplemented,
            lastPlayedAtLessThanOrEqual=NotImplemented,
            durationLessThan=NotImplemented,
            durationGreaterThan=NotImplemented,
            durationLessThanOrEqual=NotImplemented,
            durationGreaterThanOrEqual=NotImplemented,
            durationTypeMatchOr=NotImplemented,
            mediaTypeEqual=NotImplemented,
            mediaTypeIn=NotImplemented,
            sourceTypeEqual=NotImplemented,
            sourceTypeNotEqual=NotImplemented,
            sourceTypeIn=NotImplemented,
            sourceTypeNotIn=NotImplemented,
            mediaDateGreaterThanOrEqual=NotImplemented,
            mediaDateLessThanOrEqual=NotImplemented,
            flavorParamsIdsMatchOr=NotImplemented,
            flavorParamsIdsMatchAnd=NotImplemented,
            isLive=NotImplemented,
            isRecordedEntryIdEmpty=NotImplemented,
            hasMediaServerHostname=NotImplemented):
        VidiunLiveStreamAdminEntryBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            idNotIn,
            nameLike,
            nameMultiLikeOr,
            nameMultiLikeAnd,
            nameEqual,
            partnerIdEqual,
            partnerIdIn,
            userIdEqual,
            userIdIn,
            creatorIdEqual,
            tagsLike,
            tagsMultiLikeOr,
            tagsMultiLikeAnd,
            adminTagsLike,
            adminTagsMultiLikeOr,
            adminTagsMultiLikeAnd,
            categoriesMatchAnd,
            categoriesMatchOr,
            categoriesNotContains,
            categoriesIdsMatchAnd,
            categoriesIdsMatchOr,
            categoriesIdsNotContains,
            categoriesIdsEmpty,
            statusEqual,
            statusNotEqual,
            statusIn,
            statusNotIn,
            moderationStatusEqual,
            moderationStatusNotEqual,
            moderationStatusIn,
            moderationStatusNotIn,
            typeEqual,
            typeIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            totalRankLessThanOrEqual,
            totalRankGreaterThanOrEqual,
            groupIdEqual,
            searchTextMatchAnd,
            searchTextMatchOr,
            accessControlIdEqual,
            accessControlIdIn,
            startDateGreaterThanOrEqual,
            startDateLessThanOrEqual,
            startDateGreaterThanOrEqualOrNull,
            startDateLessThanOrEqualOrNull,
            endDateGreaterThanOrEqual,
            endDateLessThanOrEqual,
            endDateGreaterThanOrEqualOrNull,
            endDateLessThanOrEqualOrNull,
            referenceIdEqual,
            referenceIdIn,
            replacingEntryIdEqual,
            replacingEntryIdIn,
            replacedEntryIdEqual,
            replacedEntryIdIn,
            replacementStatusEqual,
            replacementStatusIn,
            partnerSortValueGreaterThanOrEqual,
            partnerSortValueLessThanOrEqual,
            rootEntryIdEqual,
            rootEntryIdIn,
            parentEntryIdEqual,
            entitledUsersEditMatchAnd,
            entitledUsersEditMatchOr,
            entitledUsersPublishMatchAnd,
            entitledUsersPublishMatchOr,
            tagsNameMultiLikeOr,
            tagsAdminTagsMultiLikeOr,
            tagsAdminTagsNameMultiLikeOr,
            tagsNameMultiLikeAnd,
            tagsAdminTagsMultiLikeAnd,
            tagsAdminTagsNameMultiLikeAnd,
            freeText,
            isRoot,
            categoriesFullNameIn,
            categoryAncestorIdIn,
            redirectFromEntryId,
            lastPlayedAtGreaterThanOrEqual,
            lastPlayedAtLessThanOrEqual,
            durationLessThan,
            durationGreaterThan,
            durationLessThanOrEqual,
            durationGreaterThanOrEqual,
            durationTypeMatchOr,
            mediaTypeEqual,
            mediaTypeIn,
            sourceTypeEqual,
            sourceTypeNotEqual,
            sourceTypeIn,
            sourceTypeNotIn,
            mediaDateGreaterThanOrEqual,
            mediaDateLessThanOrEqual,
            flavorParamsIdsMatchOr,
            flavorParamsIdsMatchAnd,
            isLive,
            isRecordedEntryIdEmpty,
            hasMediaServerHostname)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        VidiunLiveStreamAdminEntryBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, VidiunLiveStreamAdminEntryFilter.PROPERTY_LOADERS)

    def toParams(self):
        vparams = VidiunLiveStreamAdminEntryBaseFilter.toParams(self)
        vparams.put("objectType", "VidiunLiveStreamAdminEntryFilter")
        return vparams


########## services ##########

# @package Vidiun
# @subpackage Client
class VidiunAccessControlProfileService(VidiunServiceBase):
    """Manage access control profiles"""

    def __init__(self, client = None):
        VidiunServiceBase.__init__(self, client)

    def add(self, accessControlProfile):
        """Add new access control profile"""

        vparams = VidiunParams()
        vparams.addObjectIfDefined("accessControlProfile", accessControlProfile)
        self.client.queueServiceActionCall("accesscontrolprofile", "add", VidiunAccessControlProfile, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunAccessControlProfile)

    def get(self, id):
        """Get access control profile by id"""

        vparams = VidiunParams()
        vparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("accesscontrolprofile", "get", VidiunAccessControlProfile, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunAccessControlProfile)

    def update(self, id, accessControlProfile):
        """Update access control profile by id"""

        vparams = VidiunParams()
        vparams.addIntIfDefined("id", id);
        vparams.addObjectIfDefined("accessControlProfile", accessControlProfile)
        self.client.queueServiceActionCall("accesscontrolprofile", "update", VidiunAccessControlProfile, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunAccessControlProfile)

    def delete(self, id):
        """Delete access control profile by id"""

        vparams = VidiunParams()
        vparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("accesscontrolprofile", "delete", None, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def list(self, filter = NotImplemented, pager = NotImplemented):
        """List access control profiles by filter and pager"""

        vparams = VidiunParams()
        vparams.addObjectIfDefined("filter", filter)
        vparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("accesscontrolprofile", "list", VidiunAccessControlProfileListResponse, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunAccessControlProfileListResponse)


# @package Vidiun
# @subpackage Client
class VidiunAccessControlService(VidiunServiceBase):
    """Add & Manage Access Controls"""

    def __init__(self, client = None):
        VidiunServiceBase.__init__(self, client)

    def add(self, accessControl):
        """Add new Access Control Profile"""

        vparams = VidiunParams()
        vparams.addObjectIfDefined("accessControl", accessControl)
        self.client.queueServiceActionCall("accesscontrol", "add", VidiunAccessControl, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunAccessControl)

    def get(self, id):
        """Get Access Control Profile by id"""

        vparams = VidiunParams()
        vparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("accesscontrol", "get", VidiunAccessControl, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunAccessControl)

    def update(self, id, accessControl):
        """Update Access Control Profile by id"""

        vparams = VidiunParams()
        vparams.addIntIfDefined("id", id);
        vparams.addObjectIfDefined("accessControl", accessControl)
        self.client.queueServiceActionCall("accesscontrol", "update", VidiunAccessControl, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunAccessControl)

    def delete(self, id):
        """Delete Access Control Profile by id"""

        vparams = VidiunParams()
        vparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("accesscontrol", "delete", None, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def list(self, filter = NotImplemented, pager = NotImplemented):
        """List Access Control Profiles by filter and pager"""

        vparams = VidiunParams()
        vparams.addObjectIfDefined("filter", filter)
        vparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("accesscontrol", "list", VidiunAccessControlListResponse, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunAccessControlListResponse)


# @package Vidiun
# @subpackage Client
class VidiunAdminUserService(VidiunServiceBase):
    """Manage details for the administrative user"""

    def __init__(self, client = None):
        VidiunServiceBase.__init__(self, client)

    def updatePassword(self, email, password, newEmail = "", newPassword = ""):
        """Update admin user password and email"""

        vparams = VidiunParams()
        vparams.addStringIfDefined("email", email)
        vparams.addStringIfDefined("password", password)
        vparams.addStringIfDefined("newEmail", newEmail)
        vparams.addStringIfDefined("newPassword", newPassword)
        self.client.queueServiceActionCall("adminuser", "updatePassword", VidiunAdminUser, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunAdminUser)

    def resetPassword(self, email):
        """Reset admin user password and send it to the users email address"""

        vparams = VidiunParams()
        vparams.addStringIfDefined("email", email)
        self.client.queueServiceActionCall("adminuser", "resetPassword", None, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def login(self, email, password, partnerId = NotImplemented):
        """Get an admin session using admin email and password (Used for login to the VMC application)"""

        vparams = VidiunParams()
        vparams.addStringIfDefined("email", email)
        vparams.addStringIfDefined("password", password)
        vparams.addIntIfDefined("partnerId", partnerId);
        self.client.queueServiceActionCall("adminuser", "login", None, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeText(resultNode)

    def setInitialPassword(self, hashKey, newPassword):
        """Set initial users password"""

        vparams = VidiunParams()
        vparams.addStringIfDefined("hashKey", hashKey)
        vparams.addStringIfDefined("newPassword", newPassword)
        self.client.queueServiceActionCall("adminuser", "setInitialPassword", None, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()


# @package Vidiun
# @subpackage Client
class VidiunAnalyticsService(VidiunServiceBase):
    """api for getting analytics data"""

    def __init__(self, client = None):
        VidiunServiceBase.__init__(self, client)

    def query(self, filter):
        """report query action allows to get a analytics data for specific query dimensions, metrics and filters."""

        vparams = VidiunParams()
        vparams.addObjectIfDefined("filter", filter)
        self.client.queueServiceActionCall("analytics", "query", VidiunReportResponse, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunReportResponse)


# @package Vidiun
# @subpackage Client
class VidiunAppTokenService(VidiunServiceBase):
    """Manage application authentication tokens"""

    def __init__(self, client = None):
        VidiunServiceBase.__init__(self, client)

    def add(self, appToken):
        """Add new application authentication token"""

        vparams = VidiunParams()
        vparams.addObjectIfDefined("appToken", appToken)
        self.client.queueServiceActionCall("apptoken", "add", VidiunAppToken, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunAppToken)

    def get(self, id):
        """Get application authentication token by id"""

        vparams = VidiunParams()
        vparams.addStringIfDefined("id", id)
        self.client.queueServiceActionCall("apptoken", "get", VidiunAppToken, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunAppToken)

    def update(self, id, appToken):
        """Update application authentication token by id"""

        vparams = VidiunParams()
        vparams.addStringIfDefined("id", id)
        vparams.addObjectIfDefined("appToken", appToken)
        self.client.queueServiceActionCall("apptoken", "update", VidiunAppToken, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunAppToken)

    def delete(self, id):
        """Delete application authentication token by id"""

        vparams = VidiunParams()
        vparams.addStringIfDefined("id", id)
        self.client.queueServiceActionCall("apptoken", "delete", None, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def list(self, filter = NotImplemented, pager = NotImplemented):
        """List application authentication tokens by filter and pager"""

        vparams = VidiunParams()
        vparams.addObjectIfDefined("filter", filter)
        vparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("apptoken", "list", VidiunAppTokenListResponse, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunAppTokenListResponse)

    def startSession(self, id, tokenHash, userId = NotImplemented, type = NotImplemented, expiry = NotImplemented):
        """Starts a new VS (vidiun Session) based on application authentication token id"""

        vparams = VidiunParams()
        vparams.addStringIfDefined("id", id)
        vparams.addStringIfDefined("tokenHash", tokenHash)
        vparams.addStringIfDefined("userId", userId)
        vparams.addIntIfDefined("type", type);
        vparams.addIntIfDefined("expiry", expiry);
        self.client.queueServiceActionCall("apptoken", "startSession", VidiunSessionInfo, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunSessionInfo)


# @package Vidiun
# @subpackage Client
class VidiunBaseEntryService(VidiunServiceBase):
    """Base Entry Service"""

    def __init__(self, client = None):
        VidiunServiceBase.__init__(self, client)

    def add(self, entry, type = NotImplemented):
        """Generic add entry, should be used when the uploaded entry type is not known."""

        vparams = VidiunParams()
        vparams.addObjectIfDefined("entry", entry)
        vparams.addStringIfDefined("type", type)
        self.client.queueServiceActionCall("baseentry", "add", VidiunBaseEntry, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunBaseEntry)

    def addContent(self, entryId, resource):
        """Attach content resource to entry in status NO_MEDIA"""

        vparams = VidiunParams()
        vparams.addStringIfDefined("entryId", entryId)
        vparams.addObjectIfDefined("resource", resource)
        self.client.queueServiceActionCall("baseentry", "addContent", VidiunBaseEntry, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunBaseEntry)

    def addFromUploadedFile(self, entry, uploadTokenId, type = NotImplemented):
        """Generic add entry using an uploaded file, should be used when the uploaded entry type is not known."""

        vparams = VidiunParams()
        vparams.addObjectIfDefined("entry", entry)
        vparams.addStringIfDefined("uploadTokenId", uploadTokenId)
        vparams.addStringIfDefined("type", type)
        self.client.queueServiceActionCall("baseentry", "addFromUploadedFile", VidiunBaseEntry, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunBaseEntry)

    def get(self, entryId, version = -1):
        """Get base entry by ID."""

        vparams = VidiunParams()
        vparams.addStringIfDefined("entryId", entryId)
        vparams.addIntIfDefined("version", version);
        self.client.queueServiceActionCall("baseentry", "get", VidiunBaseEntry, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunBaseEntry)

    def getRemotePaths(self, entryId):
        """Get remote storage existing paths for the asset."""

        vparams = VidiunParams()
        vparams.addStringIfDefined("entryId", entryId)
        self.client.queueServiceActionCall("baseentry", "getRemotePaths", VidiunRemotePathListResponse, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunRemotePathListResponse)

    def update(self, entryId, baseEntry):
        """Update base entry. Only the properties that were set will be updated."""

        vparams = VidiunParams()
        vparams.addStringIfDefined("entryId", entryId)
        vparams.addObjectIfDefined("baseEntry", baseEntry)
        self.client.queueServiceActionCall("baseentry", "update", VidiunBaseEntry, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunBaseEntry)

    def updateContent(self, entryId, resource, conversionProfileId = NotImplemented, advancedOptions = NotImplemented):
        """Update the content resource associated with the entry."""

        vparams = VidiunParams()
        vparams.addStringIfDefined("entryId", entryId)
        vparams.addObjectIfDefined("resource", resource)
        vparams.addIntIfDefined("conversionProfileId", conversionProfileId);
        vparams.addObjectIfDefined("advancedOptions", advancedOptions)
        self.client.queueServiceActionCall("baseentry", "updateContent", VidiunBaseEntry, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunBaseEntry)

    def getByIds(self, entryIds):
        """Get an array of VidiunBaseEntry objects by a comma-separated list of ids."""

        vparams = VidiunParams()
        vparams.addStringIfDefined("entryIds", entryIds)
        self.client.queueServiceActionCall("baseentry", "getByIds", VidiunBaseEntry, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.createArray(resultNode, VidiunBaseEntry)

    def delete(self, entryId):
        """Delete an entry."""

        vparams = VidiunParams()
        vparams.addStringIfDefined("entryId", entryId)
        self.client.queueServiceActionCall("baseentry", "delete", None, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def list(self, filter = NotImplemented, pager = NotImplemented):
        """List base entries by filter with paging support."""

        vparams = VidiunParams()
        vparams.addObjectIfDefined("filter", filter)
        vparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("baseentry", "list", VidiunBaseEntryListResponse, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunBaseEntryListResponse)

    def listByReferenceId(self, refId, pager = NotImplemented):
        """List base entries by filter according to reference id"""

        vparams = VidiunParams()
        vparams.addStringIfDefined("refId", refId)
        vparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("baseentry", "listByReferenceId", VidiunBaseEntryListResponse, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunBaseEntryListResponse)

    def count(self, filter = NotImplemented):
        """Count base entries by filter."""

        vparams = VidiunParams()
        vparams.addObjectIfDefined("filter", filter)
        self.client.queueServiceActionCall("baseentry", "count", None, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeInt(resultNode)

    def upload(self, fileData):
        """Upload a file to Vidiun, that can be used to create an entry."""

        vparams = VidiunParams()
        vfiles = VidiunFiles()
        vfiles.put("fileData", fileData);
        self.client.queueServiceActionCall("baseentry", "upload", None, vparams, vfiles)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeText(resultNode)

    def updateThumbnailJpeg(self, entryId, fileData):
        """Update entry thumbnail using a raw jpeg file."""

        vparams = VidiunParams()
        vparams.addStringIfDefined("entryId", entryId)
        vfiles = VidiunFiles()
        vfiles.put("fileData", fileData);
        self.client.queueServiceActionCall("baseentry", "updateThumbnailJpeg", VidiunBaseEntry, vparams, vfiles)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunBaseEntry)

    def updateThumbnailFromUrl(self, entryId, url):
        """Update entry thumbnail using url."""

        vparams = VidiunParams()
        vparams.addStringIfDefined("entryId", entryId)
        vparams.addStringIfDefined("url", url)
        self.client.queueServiceActionCall("baseentry", "updateThumbnailFromUrl", VidiunBaseEntry, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunBaseEntry)

    def updateThumbnailFromSourceEntry(self, entryId, sourceEntryId, timeOffset):
        """Update entry thumbnail from a different entry by a specified time offset (in seconds)."""

        vparams = VidiunParams()
        vparams.addStringIfDefined("entryId", entryId)
        vparams.addStringIfDefined("sourceEntryId", sourceEntryId)
        vparams.addIntIfDefined("timeOffset", timeOffset);
        self.client.queueServiceActionCall("baseentry", "updateThumbnailFromSourceEntry", VidiunBaseEntry, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunBaseEntry)

    def flag(self, moderationFlag):
        """Flag inappropriate entry for moderation."""

        vparams = VidiunParams()
        vparams.addObjectIfDefined("moderationFlag", moderationFlag)
        self.client.queueServiceActionCall("baseentry", "flag", None, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def reject(self, entryId):
        """Reject the entry and mark the pending flags (if any) as moderated (this will make the entry non-playable)."""

        vparams = VidiunParams()
        vparams.addStringIfDefined("entryId", entryId)
        self.client.queueServiceActionCall("baseentry", "reject", None, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def approve(self, entryId):
        """Approve the entry and mark the pending flags (if any) as moderated (this will make the entry playable)."""

        vparams = VidiunParams()
        vparams.addStringIfDefined("entryId", entryId)
        self.client.queueServiceActionCall("baseentry", "approve", None, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def listFlags(self, entryId, pager = NotImplemented):
        """List all pending flags for the entry."""

        vparams = VidiunParams()
        vparams.addStringIfDefined("entryId", entryId)
        vparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("baseentry", "listFlags", VidiunModerationFlagListResponse, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunModerationFlagListResponse)

    def anonymousRank(self, entryId, rank):
        """Anonymously rank an entry, no validation is done on duplicate rankings."""

        vparams = VidiunParams()
        vparams.addStringIfDefined("entryId", entryId)
        vparams.addIntIfDefined("rank", rank);
        self.client.queueServiceActionCall("baseentry", "anonymousRank", None, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def getContextData(self, entryId, contextDataParams):
        """This action delivers entry-related data, based on the user's context: access control, restriction, playback format and storage information."""

        vparams = VidiunParams()
        vparams.addStringIfDefined("entryId", entryId)
        vparams.addObjectIfDefined("contextDataParams", contextDataParams)
        self.client.queueServiceActionCall("baseentry", "getContextData", VidiunEntryContextDataResult, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunEntryContextDataResult)

    def export(self, entryId, storageProfileId):
        vparams = VidiunParams()
        vparams.addStringIfDefined("entryId", entryId)
        vparams.addIntIfDefined("storageProfileId", storageProfileId);
        self.client.queueServiceActionCall("baseentry", "export", VidiunBaseEntry, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunBaseEntry)

    def index(self, id, shouldUpdate = True):
        """Index an entry by id."""

        vparams = VidiunParams()
        vparams.addStringIfDefined("id", id)
        vparams.addBoolIfDefined("shouldUpdate", shouldUpdate);
        self.client.queueServiceActionCall("baseentry", "index", None, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeInt(resultNode)

    def clone(self, entryId, cloneOptions = NotImplemented):
        """Clone an entry with optional attributes to apply to the clone"""

        vparams = VidiunParams()
        vparams.addStringIfDefined("entryId", entryId)
        vparams.addArrayIfDefined("cloneOptions", cloneOptions)
        self.client.queueServiceActionCall("baseentry", "clone", VidiunBaseEntry, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunBaseEntry)


# @package Vidiun
# @subpackage Client
class VidiunBulkUploadService(VidiunServiceBase):
    """Bulk upload service is used to upload & manage bulk uploads using CSV files.
     This service manages only entry bulk uploads."""

    def __init__(self, client = None):
        VidiunServiceBase.__init__(self, client)

    def add(self, conversionProfileId, csvFileData, bulkUploadType = NotImplemented, uploadedBy = NotImplemented, fileName = NotImplemented):
        """Add new bulk upload batch job
        	 Conversion profile id can be specified in the API or in the CSV file, the one in the CSV file will be stronger.
        	 If no conversion profile was specified, partner's default will be used"""

        vparams = VidiunParams()
        vparams.addIntIfDefined("conversionProfileId", conversionProfileId);
        vfiles = VidiunFiles()
        vfiles.put("csvFileData", csvFileData);
        vparams.addStringIfDefined("bulkUploadType", bulkUploadType)
        vparams.addStringIfDefined("uploadedBy", uploadedBy)
        vparams.addStringIfDefined("fileName", fileName)
        self.client.queueServiceActionCall("bulkupload", "add", VidiunBulkUpload, vparams, vfiles)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunBulkUpload)

    def get(self, id):
        """Get bulk upload batch job by id"""

        vparams = VidiunParams()
        vparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("bulkupload", "get", VidiunBulkUpload, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunBulkUpload)

    def list(self, pager = NotImplemented):
        """List bulk upload batch jobs"""

        vparams = VidiunParams()
        vparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("bulkupload", "list", VidiunBulkUploadListResponse, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunBulkUploadListResponse)

    def serve(self, id):
        """serve action returan the original file."""

        vparams = VidiunParams()
        vparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall('bulkupload', 'serve', None ,vparams)
        return self.client.getServeUrl()

    def serveLog(self, id):
        """serveLog action returan the original file."""

        vparams = VidiunParams()
        vparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall('bulkupload', 'serveLog', None ,vparams)
        return self.client.getServeUrl()

    def abort(self, id):
        """Aborts the bulk upload and all its child jobs"""

        vparams = VidiunParams()
        vparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("bulkupload", "abort", VidiunBulkUpload, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunBulkUpload)


# @package Vidiun
# @subpackage Client
class VidiunCategoryEntryService(VidiunServiceBase):
    """Add & Manage CategoryEntry - assign entry to category"""

    def __init__(self, client = None):
        VidiunServiceBase.__init__(self, client)

    def add(self, categoryEntry):
        """Add new CategoryEntry"""

        vparams = VidiunParams()
        vparams.addObjectIfDefined("categoryEntry", categoryEntry)
        self.client.queueServiceActionCall("categoryentry", "add", VidiunCategoryEntry, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunCategoryEntry)

    def delete(self, entryId, categoryId):
        """Delete CategoryEntry"""

        vparams = VidiunParams()
        vparams.addStringIfDefined("entryId", entryId)
        vparams.addIntIfDefined("categoryId", categoryId);
        self.client.queueServiceActionCall("categoryentry", "delete", None, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def list(self, filter = NotImplemented, pager = NotImplemented):
        """List all categoryEntry"""

        vparams = VidiunParams()
        vparams.addObjectIfDefined("filter", filter)
        vparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("categoryentry", "list", VidiunCategoryEntryListResponse, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunCategoryEntryListResponse)

    def index(self, entryId, categoryId, shouldUpdate = True):
        """Index CategoryEntry by Id"""

        vparams = VidiunParams()
        vparams.addStringIfDefined("entryId", entryId)
        vparams.addIntIfDefined("categoryId", categoryId);
        vparams.addBoolIfDefined("shouldUpdate", shouldUpdate);
        self.client.queueServiceActionCall("categoryentry", "index", None, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeInt(resultNode)

    def activate(self, entryId, categoryId):
        """activate CategoryEntry when it is pending moderation"""

        vparams = VidiunParams()
        vparams.addStringIfDefined("entryId", entryId)
        vparams.addIntIfDefined("categoryId", categoryId);
        self.client.queueServiceActionCall("categoryentry", "activate", None, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def reject(self, entryId, categoryId):
        """activate CategoryEntry when it is pending moderation"""

        vparams = VidiunParams()
        vparams.addStringIfDefined("entryId", entryId)
        vparams.addIntIfDefined("categoryId", categoryId);
        self.client.queueServiceActionCall("categoryentry", "reject", None, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def syncPrivacyContext(self, entryId, categoryId):
        """update privacy context from the category"""

        vparams = VidiunParams()
        vparams.addStringIfDefined("entryId", entryId)
        vparams.addIntIfDefined("categoryId", categoryId);
        self.client.queueServiceActionCall("categoryentry", "syncPrivacyContext", None, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def addFromBulkUpload(self, bulkUploadData, bulkUploadCategoryEntryData = NotImplemented):
        vparams = VidiunParams()
        vparams.addObjectIfDefined("bulkUploadData", bulkUploadData)
        vparams.addObjectIfDefined("bulkUploadCategoryEntryData", bulkUploadCategoryEntryData)
        self.client.queueServiceActionCall("categoryentry", "addFromBulkUpload", VidiunBulkUpload, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunBulkUpload)


# @package Vidiun
# @subpackage Client
class VidiunCategoryService(VidiunServiceBase):
    """Add & Manage Categories"""

    def __init__(self, client = None):
        VidiunServiceBase.__init__(self, client)

    def add(self, category):
        """Add new Category"""

        vparams = VidiunParams()
        vparams.addObjectIfDefined("category", category)
        self.client.queueServiceActionCall("category", "add", VidiunCategory, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunCategory)

    def get(self, id):
        """Get Category by id"""

        vparams = VidiunParams()
        vparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("category", "get", VidiunCategory, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunCategory)

    def update(self, id, category):
        """Update Category"""

        vparams = VidiunParams()
        vparams.addIntIfDefined("id", id);
        vparams.addObjectIfDefined("category", category)
        self.client.queueServiceActionCall("category", "update", VidiunCategory, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunCategory)

    def delete(self, id, moveEntriesToParentCategory = 1):
        """Delete a Category"""

        vparams = VidiunParams()
        vparams.addIntIfDefined("id", id);
        vparams.addIntIfDefined("moveEntriesToParentCategory", moveEntriesToParentCategory);
        self.client.queueServiceActionCall("category", "delete", None, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def list(self, filter = NotImplemented, pager = NotImplemented):
        """List all categories"""

        vparams = VidiunParams()
        vparams.addObjectIfDefined("filter", filter)
        vparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("category", "list", VidiunCategoryListResponse, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunCategoryListResponse)

    def index(self, id, shouldUpdate = True):
        """Index Category by id"""

        vparams = VidiunParams()
        vparams.addIntIfDefined("id", id);
        vparams.addBoolIfDefined("shouldUpdate", shouldUpdate);
        self.client.queueServiceActionCall("category", "index", None, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeInt(resultNode)

    def move(self, categoryIds, targetCategoryParentId):
        """Move categories that belong to the same parent category to a target categroy - enabled only for ks with disable entitlement"""

        vparams = VidiunParams()
        vparams.addStringIfDefined("categoryIds", categoryIds)
        vparams.addIntIfDefined("targetCategoryParentId", targetCategoryParentId);
        self.client.queueServiceActionCall("category", "move", VidiunCategoryListResponse, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunCategoryListResponse)

    def unlockCategories(self):
        """Unlock categories"""

        vparams = VidiunParams()
        self.client.queueServiceActionCall("category", "unlockCategories", None, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def addFromBulkUpload(self, fileData, bulkUploadData = NotImplemented, bulkUploadCategoryData = NotImplemented):
        vparams = VidiunParams()
        vfiles = VidiunFiles()
        vfiles.put("fileData", fileData);
        vparams.addObjectIfDefined("bulkUploadData", bulkUploadData)
        vparams.addObjectIfDefined("bulkUploadCategoryData", bulkUploadCategoryData)
        self.client.queueServiceActionCall("category", "addFromBulkUpload", VidiunBulkUpload, vparams, vfiles)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunBulkUpload)


# @package Vidiun
# @subpackage Client
class VidiunCategoryUserService(VidiunServiceBase):
    """Add & Manage CategoryUser - membership of a user in a category"""

    def __init__(self, client = None):
        VidiunServiceBase.__init__(self, client)

    def add(self, categoryUser):
        """Add new CategoryUser"""

        vparams = VidiunParams()
        vparams.addObjectIfDefined("categoryUser", categoryUser)
        self.client.queueServiceActionCall("categoryuser", "add", VidiunCategoryUser, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunCategoryUser)

    def get(self, categoryId, userId):
        """Get CategoryUser by id"""

        vparams = VidiunParams()
        vparams.addIntIfDefined("categoryId", categoryId);
        vparams.addStringIfDefined("userId", userId)
        self.client.queueServiceActionCall("categoryuser", "get", VidiunCategoryUser, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunCategoryUser)

    def update(self, categoryId, userId, categoryUser, override = False):
        """Update CategoryUser by id"""

        vparams = VidiunParams()
        vparams.addIntIfDefined("categoryId", categoryId);
        vparams.addStringIfDefined("userId", userId)
        vparams.addObjectIfDefined("categoryUser", categoryUser)
        vparams.addBoolIfDefined("override", override);
        self.client.queueServiceActionCall("categoryuser", "update", VidiunCategoryUser, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunCategoryUser)

    def delete(self, categoryId, userId):
        """Delete a CategoryUser"""

        vparams = VidiunParams()
        vparams.addIntIfDefined("categoryId", categoryId);
        vparams.addStringIfDefined("userId", userId)
        self.client.queueServiceActionCall("categoryuser", "delete", None, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def activate(self, categoryId, userId):
        """activate CategoryUser"""

        vparams = VidiunParams()
        vparams.addIntIfDefined("categoryId", categoryId);
        vparams.addStringIfDefined("userId", userId)
        self.client.queueServiceActionCall("categoryuser", "activate", VidiunCategoryUser, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunCategoryUser)

    def deactivate(self, categoryId, userId):
        """reject CategoryUser"""

        vparams = VidiunParams()
        vparams.addIntIfDefined("categoryId", categoryId);
        vparams.addStringIfDefined("userId", userId)
        self.client.queueServiceActionCall("categoryuser", "deactivate", VidiunCategoryUser, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunCategoryUser)

    def list(self, filter = NotImplemented, pager = NotImplemented):
        """List all categories"""

        vparams = VidiunParams()
        vparams.addObjectIfDefined("filter", filter)
        vparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("categoryuser", "list", VidiunCategoryUserListResponse, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunCategoryUserListResponse)

    def copyFromCategory(self, categoryId):
        """Copy all memeber from parent category"""

        vparams = VidiunParams()
        vparams.addIntIfDefined("categoryId", categoryId);
        self.client.queueServiceActionCall("categoryuser", "copyFromCategory", None, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def index(self, userId, categoryId, shouldUpdate = True):
        """Index CategoryUser by userid and category id"""

        vparams = VidiunParams()
        vparams.addStringIfDefined("userId", userId)
        vparams.addIntIfDefined("categoryId", categoryId);
        vparams.addBoolIfDefined("shouldUpdate", shouldUpdate);
        self.client.queueServiceActionCall("categoryuser", "index", None, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeInt(resultNode)

    def addFromBulkUpload(self, fileData, bulkUploadData = NotImplemented, bulkUploadCategoryUserData = NotImplemented):
        vparams = VidiunParams()
        vfiles = VidiunFiles()
        vfiles.put("fileData", fileData);
        vparams.addObjectIfDefined("bulkUploadData", bulkUploadData)
        vparams.addObjectIfDefined("bulkUploadCategoryUserData", bulkUploadCategoryUserData)
        self.client.queueServiceActionCall("categoryuser", "addFromBulkUpload", VidiunBulkUpload, vparams, vfiles)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunBulkUpload)


# @package Vidiun
# @subpackage Client
class VidiunConversionProfileAssetParamsService(VidiunServiceBase):
    """Manage the connection between Conversion Profiles and Asset Params"""

    def __init__(self, client = None):
        VidiunServiceBase.__init__(self, client)

    def list(self, filter = NotImplemented, pager = NotImplemented):
        """Lists asset parmas of conversion profile by ID"""

        vparams = VidiunParams()
        vparams.addObjectIfDefined("filter", filter)
        vparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("conversionprofileassetparams", "list", VidiunConversionProfileAssetParamsListResponse, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunConversionProfileAssetParamsListResponse)

    def update(self, conversionProfileId, assetParamsId, conversionProfileAssetParams):
        """Update asset parmas of conversion profile by ID"""

        vparams = VidiunParams()
        vparams.addIntIfDefined("conversionProfileId", conversionProfileId);
        vparams.addIntIfDefined("assetParamsId", assetParamsId);
        vparams.addObjectIfDefined("conversionProfileAssetParams", conversionProfileAssetParams)
        self.client.queueServiceActionCall("conversionprofileassetparams", "update", VidiunConversionProfileAssetParams, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunConversionProfileAssetParams)


# @package Vidiun
# @subpackage Client
class VidiunConversionProfileService(VidiunServiceBase):
    """Add & Manage Conversion Profiles"""

    def __init__(self, client = None):
        VidiunServiceBase.__init__(self, client)

    def setAsDefault(self, id):
        """Set Conversion Profile to be the partner default"""

        vparams = VidiunParams()
        vparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("conversionprofile", "setAsDefault", VidiunConversionProfile, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunConversionProfile)

    def getDefault(self, type = NotImplemented):
        """Get the partner's default conversion profile"""

        vparams = VidiunParams()
        vparams.addStringIfDefined("type", type)
        self.client.queueServiceActionCall("conversionprofile", "getDefault", VidiunConversionProfile, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunConversionProfile)

    def add(self, conversionProfile):
        """Add new Conversion Profile"""

        vparams = VidiunParams()
        vparams.addObjectIfDefined("conversionProfile", conversionProfile)
        self.client.queueServiceActionCall("conversionprofile", "add", VidiunConversionProfile, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunConversionProfile)

    def get(self, id):
        """Get Conversion Profile by ID"""

        vparams = VidiunParams()
        vparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("conversionprofile", "get", VidiunConversionProfile, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunConversionProfile)

    def update(self, id, conversionProfile):
        """Update Conversion Profile by ID"""

        vparams = VidiunParams()
        vparams.addIntIfDefined("id", id);
        vparams.addObjectIfDefined("conversionProfile", conversionProfile)
        self.client.queueServiceActionCall("conversionprofile", "update", VidiunConversionProfile, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunConversionProfile)

    def delete(self, id):
        """Delete Conversion Profile by ID"""

        vparams = VidiunParams()
        vparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("conversionprofile", "delete", None, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def list(self, filter = NotImplemented, pager = NotImplemented):
        """List Conversion Profiles by filter with paging support"""

        vparams = VidiunParams()
        vparams.addObjectIfDefined("filter", filter)
        vparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("conversionprofile", "list", VidiunConversionProfileListResponse, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunConversionProfileListResponse)


# @package Vidiun
# @subpackage Client
class VidiunDataService(VidiunServiceBase):
    """Data service lets you manage data content (textual content)"""

    def __init__(self, client = None):
        VidiunServiceBase.__init__(self, client)

    def add(self, dataEntry):
        """Adds a new data entry"""

        vparams = VidiunParams()
        vparams.addObjectIfDefined("dataEntry", dataEntry)
        self.client.queueServiceActionCall("data", "add", VidiunDataEntry, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunDataEntry)

    def get(self, entryId, version = -1):
        """Get data entry by ID."""

        vparams = VidiunParams()
        vparams.addStringIfDefined("entryId", entryId)
        vparams.addIntIfDefined("version", version);
        self.client.queueServiceActionCall("data", "get", VidiunDataEntry, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunDataEntry)

    def update(self, entryId, documentEntry):
        """Update data entry. Only the properties that were set will be updated."""

        vparams = VidiunParams()
        vparams.addStringIfDefined("entryId", entryId)
        vparams.addObjectIfDefined("documentEntry", documentEntry)
        self.client.queueServiceActionCall("data", "update", VidiunDataEntry, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunDataEntry)

    def delete(self, entryId):
        """Delete a data entry."""

        vparams = VidiunParams()
        vparams.addStringIfDefined("entryId", entryId)
        self.client.queueServiceActionCall("data", "delete", None, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def list(self, filter = NotImplemented, pager = NotImplemented):
        """List data entries by filter with paging support."""

        vparams = VidiunParams()
        vparams.addObjectIfDefined("filter", filter)
        vparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("data", "list", VidiunDataListResponse, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunDataListResponse)

    def serve(self, entryId, version = -1, forceProxy = False):
        """serve action returan the file from dataContent field."""

        vparams = VidiunParams()
        vparams.addStringIfDefined("entryId", entryId)
        vparams.addIntIfDefined("version", version);
        vparams.addBoolIfDefined("forceProxy", forceProxy);
        self.client.queueServiceActionCall('data', 'serve', None ,vparams)
        return self.client.getServeUrl()


# @package Vidiun
# @subpackage Client
class VidiunDeliveryProfileService(VidiunServiceBase):
    """delivery service is used to control delivery objects"""

    def __init__(self, client = None):
        VidiunServiceBase.__init__(self, client)

    def add(self, delivery):
        """Add new delivery."""

        vparams = VidiunParams()
        vparams.addObjectIfDefined("delivery", delivery)
        self.client.queueServiceActionCall("deliveryprofile", "add", VidiunDeliveryProfile, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunDeliveryProfile)

    def update(self, id, delivery):
        """Update exisiting delivery"""

        vparams = VidiunParams()
        vparams.addStringIfDefined("id", id)
        vparams.addObjectIfDefined("delivery", delivery)
        self.client.queueServiceActionCall("deliveryprofile", "update", VidiunDeliveryProfile, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunDeliveryProfile)

    def get(self, id):
        """Get delivery by id"""

        vparams = VidiunParams()
        vparams.addStringIfDefined("id", id)
        self.client.queueServiceActionCall("deliveryprofile", "get", VidiunDeliveryProfile, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunDeliveryProfile)

    def clone(self, deliveryId):
        """Add delivery based on existing delivery.
        	Must provide valid sourceDeliveryId"""

        vparams = VidiunParams()
        vparams.addIntIfDefined("deliveryId", deliveryId);
        self.client.queueServiceActionCall("deliveryprofile", "clone", VidiunDeliveryProfile, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunDeliveryProfile)

    def list(self, filter = NotImplemented, pager = NotImplemented):
        """Retrieve a list of available delivery depends on the filter given"""

        vparams = VidiunParams()
        vparams.addObjectIfDefined("filter", filter)
        vparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("deliveryprofile", "list", VidiunDeliveryProfileListResponse, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunDeliveryProfileListResponse)


# @package Vidiun
# @subpackage Client
class VidiunEmailIngestionProfileService(VidiunServiceBase):
    """EmailIngestionProfile service lets you manage email ingestion profile records"""

    def __init__(self, client = None):
        VidiunServiceBase.__init__(self, client)

    def add(self, EmailIP):
        """EmailIngestionProfile Add action allows you to add a EmailIngestionProfile to Vidiun DB"""

        vparams = VidiunParams()
        vparams.addObjectIfDefined("EmailIP", EmailIP)
        self.client.queueServiceActionCall("emailingestionprofile", "add", VidiunEmailIngestionProfile, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunEmailIngestionProfile)

    def getByEmailAddress(self, emailAddress):
        """Retrieve a EmailIngestionProfile by email address"""

        vparams = VidiunParams()
        vparams.addStringIfDefined("emailAddress", emailAddress)
        self.client.queueServiceActionCall("emailingestionprofile", "getByEmailAddress", VidiunEmailIngestionProfile, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunEmailIngestionProfile)

    def get(self, id):
        """Retrieve a EmailIngestionProfile by id"""

        vparams = VidiunParams()
        vparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("emailingestionprofile", "get", VidiunEmailIngestionProfile, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunEmailIngestionProfile)

    def update(self, id, EmailIP):
        """Update an existing EmailIngestionProfile"""

        vparams = VidiunParams()
        vparams.addIntIfDefined("id", id);
        vparams.addObjectIfDefined("EmailIP", EmailIP)
        self.client.queueServiceActionCall("emailingestionprofile", "update", VidiunEmailIngestionProfile, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunEmailIngestionProfile)

    def delete(self, id):
        """Delete an existing EmailIngestionProfile"""

        vparams = VidiunParams()
        vparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("emailingestionprofile", "delete", None, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def addMediaEntry(self, mediaEntry, uploadTokenId, emailProfId, fromAddress, emailMsgId):
        """add VidiunMediaEntry from email ingestion"""

        vparams = VidiunParams()
        vparams.addObjectIfDefined("mediaEntry", mediaEntry)
        vparams.addStringIfDefined("uploadTokenId", uploadTokenId)
        vparams.addIntIfDefined("emailProfId", emailProfId);
        vparams.addStringIfDefined("fromAddress", fromAddress)
        vparams.addStringIfDefined("emailMsgId", emailMsgId)
        self.client.queueServiceActionCall("emailingestionprofile", "addMediaEntry", VidiunMediaEntry, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunMediaEntry)


# @package Vidiun
# @subpackage Client
class VidiunEntryServerNodeService(VidiunServiceBase):
    """Base class for entry server node"""

    def __init__(self, client = None):
        VidiunServiceBase.__init__(self, client)

    def update(self, id, entryServerNode):
        vparams = VidiunParams()
        vparams.addIntIfDefined("id", id);
        vparams.addObjectIfDefined("entryServerNode", entryServerNode)
        self.client.queueServiceActionCall("entryservernode", "update", VidiunEntryServerNode, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunEntryServerNode)

    def list(self, filter = NotImplemented, pager = NotImplemented):
        vparams = VidiunParams()
        vparams.addObjectIfDefined("filter", filter)
        vparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("entryservernode", "list", VidiunEntryServerNodeListResponse, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunEntryServerNodeListResponse)

    def get(self, id):
        vparams = VidiunParams()
        vparams.addStringIfDefined("id", id)
        self.client.queueServiceActionCall("entryservernode", "get", VidiunEntryServerNode, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunEntryServerNode)

    def validateRegisteredEntryServerNode(self, id):
        """Validates server node still registered on entry"""

        vparams = VidiunParams()
        vparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("entryservernode", "validateRegisteredEntryServerNode", None, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()


# @package Vidiun
# @subpackage Client
class VidiunFileAssetService(VidiunServiceBase):
    """Manage file assets"""

    def __init__(self, client = None):
        VidiunServiceBase.__init__(self, client)

    def add(self, fileAsset):
        """Add new file asset"""

        vparams = VidiunParams()
        vparams.addObjectIfDefined("fileAsset", fileAsset)
        self.client.queueServiceActionCall("fileasset", "add", VidiunFileAsset, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunFileAsset)

    def get(self, id):
        """Get file asset by id"""

        vparams = VidiunParams()
        vparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("fileasset", "get", VidiunFileAsset, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunFileAsset)

    def update(self, id, fileAsset):
        """Update file asset by id"""

        vparams = VidiunParams()
        vparams.addIntIfDefined("id", id);
        vparams.addObjectIfDefined("fileAsset", fileAsset)
        self.client.queueServiceActionCall("fileasset", "update", VidiunFileAsset, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunFileAsset)

    def delete(self, id):
        """Delete file asset by id"""

        vparams = VidiunParams()
        vparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("fileasset", "delete", None, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def serve(self, id):
        """Serve file asset by id"""

        vparams = VidiunParams()
        vparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall('fileasset', 'serve', None ,vparams)
        return self.client.getServeUrl()

    def setContent(self, id, contentResource):
        """Set content of file asset"""

        vparams = VidiunParams()
        vparams.addStringIfDefined("id", id)
        vparams.addObjectIfDefined("contentResource", contentResource)
        self.client.queueServiceActionCall("fileasset", "setContent", VidiunFileAsset, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunFileAsset)

    def list(self, filter, pager = NotImplemented):
        """List file assets by filter and pager"""

        vparams = VidiunParams()
        vparams.addObjectIfDefined("filter", filter)
        vparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("fileasset", "list", VidiunFileAssetListResponse, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunFileAssetListResponse)


# @package Vidiun
# @subpackage Client
class VidiunFlavorAssetService(VidiunServiceBase):
    """Retrieve information and invoke actions on Flavor Asset"""

    def __init__(self, client = None):
        VidiunServiceBase.__init__(self, client)

    def add(self, entryId, flavorAsset):
        """Add flavor asset"""

        vparams = VidiunParams()
        vparams.addStringIfDefined("entryId", entryId)
        vparams.addObjectIfDefined("flavorAsset", flavorAsset)
        self.client.queueServiceActionCall("flavorasset", "add", VidiunFlavorAsset, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunFlavorAsset)

    def update(self, id, flavorAsset):
        """Update flavor asset"""

        vparams = VidiunParams()
        vparams.addStringIfDefined("id", id)
        vparams.addObjectIfDefined("flavorAsset", flavorAsset)
        self.client.queueServiceActionCall("flavorasset", "update", VidiunFlavorAsset, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunFlavorAsset)

    def setContent(self, id, contentResource):
        """Update content of flavor asset"""

        vparams = VidiunParams()
        vparams.addStringIfDefined("id", id)
        vparams.addObjectIfDefined("contentResource", contentResource)
        self.client.queueServiceActionCall("flavorasset", "setContent", VidiunFlavorAsset, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunFlavorAsset)

    def get(self, id):
        """Get Flavor Asset by ID"""

        vparams = VidiunParams()
        vparams.addStringIfDefined("id", id)
        self.client.queueServiceActionCall("flavorasset", "get", VidiunFlavorAsset, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunFlavorAsset)

    def getByEntryId(self, entryId):
        """Get Flavor Assets for Entry"""

        vparams = VidiunParams()
        vparams.addStringIfDefined("entryId", entryId)
        self.client.queueServiceActionCall("flavorasset", "getByEntryId", VidiunFlavorAsset, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.createArray(resultNode, VidiunFlavorAsset)

    def list(self, filter = NotImplemented, pager = NotImplemented):
        """List Flavor Assets by filter and pager"""

        vparams = VidiunParams()
        vparams.addObjectIfDefined("filter", filter)
        vparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("flavorasset", "list", VidiunFlavorAssetListResponse, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunFlavorAssetListResponse)

    def getWebPlayableByEntryId(self, entryId):
        """Get web playable Flavor Assets for Entry"""

        vparams = VidiunParams()
        vparams.addStringIfDefined("entryId", entryId)
        self.client.queueServiceActionCall("flavorasset", "getWebPlayableByEntryId", VidiunFlavorAsset, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.createArray(resultNode, VidiunFlavorAsset)

    def convert(self, entryId, flavorParamsId, priority = 0):
        """Add and convert new Flavor Asset for Entry with specific Flavor Params"""

        vparams = VidiunParams()
        vparams.addStringIfDefined("entryId", entryId)
        vparams.addIntIfDefined("flavorParamsId", flavorParamsId);
        vparams.addIntIfDefined("priority", priority);
        self.client.queueServiceActionCall("flavorasset", "convert", None, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def reconvert(self, id):
        """Reconvert Flavor Asset by ID"""

        vparams = VidiunParams()
        vparams.addStringIfDefined("id", id)
        self.client.queueServiceActionCall("flavorasset", "reconvert", None, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def delete(self, id):
        """Delete Flavor Asset by ID"""

        vparams = VidiunParams()
        vparams.addStringIfDefined("id", id)
        self.client.queueServiceActionCall("flavorasset", "delete", None, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def getUrl(self, id, storageId = NotImplemented, forceProxy = False, options = NotImplemented):
        """Get download URL for the asset"""

        vparams = VidiunParams()
        vparams.addStringIfDefined("id", id)
        vparams.addIntIfDefined("storageId", storageId);
        vparams.addBoolIfDefined("forceProxy", forceProxy);
        vparams.addObjectIfDefined("options", options)
        self.client.queueServiceActionCall("flavorasset", "getUrl", None, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeText(resultNode)

    def getRemotePaths(self, id):
        """Get remote storage existing paths for the asset"""

        vparams = VidiunParams()
        vparams.addStringIfDefined("id", id)
        self.client.queueServiceActionCall("flavorasset", "getRemotePaths", VidiunRemotePathListResponse, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunRemotePathListResponse)

    def getDownloadUrl(self, id, useCdn = False):
        """Get download URL for the Flavor Asset"""

        vparams = VidiunParams()
        vparams.addStringIfDefined("id", id)
        vparams.addBoolIfDefined("useCdn", useCdn);
        self.client.queueServiceActionCall("flavorasset", "getDownloadUrl", None, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeText(resultNode)

    def getFlavorAssetsWithParams(self, entryId):
        """Get Flavor Asset with the relevant Flavor Params (Flavor Params can exist without Flavor Asset & vice versa)"""

        vparams = VidiunParams()
        vparams.addStringIfDefined("entryId", entryId)
        self.client.queueServiceActionCall("flavorasset", "getFlavorAssetsWithParams", VidiunFlavorAssetWithParams, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.createArray(resultNode, VidiunFlavorAssetWithParams)

    def export(self, assetId, storageProfileId):
        """manually export an asset"""

        vparams = VidiunParams()
        vparams.addStringIfDefined("assetId", assetId)
        vparams.addIntIfDefined("storageProfileId", storageProfileId);
        self.client.queueServiceActionCall("flavorasset", "export", VidiunFlavorAsset, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunFlavorAsset)

    def setAsSource(self, assetId):
        """Set a given flavor as the original flavor"""

        vparams = VidiunParams()
        vparams.addStringIfDefined("assetId", assetId)
        self.client.queueServiceActionCall("flavorasset", "setAsSource", None, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def deleteLocalContent(self, assetId):
        """delete all local file syncs for this asset"""

        vparams = VidiunParams()
        vparams.addStringIfDefined("assetId", assetId)
        self.client.queueServiceActionCall("flavorasset", "deleteLocalContent", None, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()


# @package Vidiun
# @subpackage Client
class VidiunFlavorParamsOutputService(VidiunServiceBase):
    """Flavor Params Output service"""

    def __init__(self, client = None):
        VidiunServiceBase.__init__(self, client)

    def get(self, id):
        """Get flavor params output object by ID"""

        vparams = VidiunParams()
        vparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("flavorparamsoutput", "get", VidiunFlavorParamsOutput, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunFlavorParamsOutput)

    def list(self, filter = NotImplemented, pager = NotImplemented):
        """List flavor params output objects by filter and pager"""

        vparams = VidiunParams()
        vparams.addObjectIfDefined("filter", filter)
        vparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("flavorparamsoutput", "list", VidiunFlavorParamsOutputListResponse, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunFlavorParamsOutputListResponse)


# @package Vidiun
# @subpackage Client
class VidiunFlavorParamsService(VidiunServiceBase):
    """Add & Manage Flavor Params"""

    def __init__(self, client = None):
        VidiunServiceBase.__init__(self, client)

    def add(self, flavorParams):
        """Add new Flavor Params"""

        vparams = VidiunParams()
        vparams.addObjectIfDefined("flavorParams", flavorParams)
        self.client.queueServiceActionCall("flavorparams", "add", VidiunFlavorParams, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunFlavorParams)

    def get(self, id):
        """Get Flavor Params by ID"""

        vparams = VidiunParams()
        vparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("flavorparams", "get", VidiunFlavorParams, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunFlavorParams)

    def update(self, id, flavorParams):
        """Update Flavor Params by ID"""

        vparams = VidiunParams()
        vparams.addIntIfDefined("id", id);
        vparams.addObjectIfDefined("flavorParams", flavorParams)
        self.client.queueServiceActionCall("flavorparams", "update", VidiunFlavorParams, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunFlavorParams)

    def delete(self, id):
        """Delete Flavor Params by ID"""

        vparams = VidiunParams()
        vparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("flavorparams", "delete", None, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def list(self, filter = NotImplemented, pager = NotImplemented):
        """List Flavor Params by filter with paging support (By default - all system default params will be listed too)"""

        vparams = VidiunParams()
        vparams.addObjectIfDefined("filter", filter)
        vparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("flavorparams", "list", VidiunFlavorParamsListResponse, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunFlavorParamsListResponse)

    def getByConversionProfileId(self, conversionProfileId):
        """Get Flavor Params by Conversion Profile ID"""

        vparams = VidiunParams()
        vparams.addIntIfDefined("conversionProfileId", conversionProfileId);
        self.client.queueServiceActionCall("flavorparams", "getByConversionProfileId", VidiunFlavorParams, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.createArray(resultNode, VidiunFlavorParams)


# @package Vidiun
# @subpackage Client
class VidiunGroupUserService(VidiunServiceBase):
    """Add & Manage GroupUser"""

    def __init__(self, client = None):
        VidiunServiceBase.__init__(self, client)

    def add(self, groupUser):
        """Add new GroupUser"""

        vparams = VidiunParams()
        vparams.addObjectIfDefined("groupUser", groupUser)
        self.client.queueServiceActionCall("groupuser", "add", VidiunGroupUser, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunGroupUser)

    def delete(self, userId, groupId):
        """delete by userId and groupId"""

        vparams = VidiunParams()
        vparams.addStringIfDefined("userId", userId)
        vparams.addStringIfDefined("groupId", groupId)
        self.client.queueServiceActionCall("groupuser", "delete", None, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def list(self, filter = NotImplemented, pager = NotImplemented):
        """List all GroupUsers"""

        vparams = VidiunParams()
        vparams.addObjectIfDefined("filter", filter)
        vparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("groupuser", "list", VidiunGroupUserListResponse, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunGroupUserListResponse)


# @package Vidiun
# @subpackage Client
class VidiunLiveChannelSegmentService(VidiunServiceBase):
    """Manage live channel segments"""

    def __init__(self, client = None):
        VidiunServiceBase.__init__(self, client)

    def add(self, liveChannelSegment):
        """Add new live channel segment"""

        vparams = VidiunParams()
        vparams.addObjectIfDefined("liveChannelSegment", liveChannelSegment)
        self.client.queueServiceActionCall("livechannelsegment", "add", VidiunLiveChannelSegment, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunLiveChannelSegment)

    def get(self, id):
        """Get live channel segment by id"""

        vparams = VidiunParams()
        vparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("livechannelsegment", "get", VidiunLiveChannelSegment, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunLiveChannelSegment)

    def update(self, id, liveChannelSegment):
        """Update live channel segment by id"""

        vparams = VidiunParams()
        vparams.addIntIfDefined("id", id);
        vparams.addObjectIfDefined("liveChannelSegment", liveChannelSegment)
        self.client.queueServiceActionCall("livechannelsegment", "update", VidiunLiveChannelSegment, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunLiveChannelSegment)

    def delete(self, id):
        """Delete live channel segment by id"""

        vparams = VidiunParams()
        vparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("livechannelsegment", "delete", None, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def list(self, filter = NotImplemented, pager = NotImplemented):
        """List live channel segments by filter and pager"""

        vparams = VidiunParams()
        vparams.addObjectIfDefined("filter", filter)
        vparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("livechannelsegment", "list", VidiunLiveChannelSegmentListResponse, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunLiveChannelSegmentListResponse)


# @package Vidiun
# @subpackage Client
class VidiunLiveChannelService(VidiunServiceBase):
    """Live Channel service lets you manage live channels"""

    def __init__(self, client = None):
        VidiunServiceBase.__init__(self, client)

    def add(self, liveChannel):
        """Adds new live channel."""

        vparams = VidiunParams()
        vparams.addObjectIfDefined("liveChannel", liveChannel)
        self.client.queueServiceActionCall("livechannel", "add", VidiunLiveChannel, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunLiveChannel)

    def get(self, id):
        """Get live channel by ID."""

        vparams = VidiunParams()
        vparams.addStringIfDefined("id", id)
        self.client.queueServiceActionCall("livechannel", "get", VidiunLiveChannel, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunLiveChannel)

    def update(self, id, liveChannel):
        """Update live channel. Only the properties that were set will be updated."""

        vparams = VidiunParams()
        vparams.addStringIfDefined("id", id)
        vparams.addObjectIfDefined("liveChannel", liveChannel)
        self.client.queueServiceActionCall("livechannel", "update", VidiunLiveChannel, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunLiveChannel)

    def delete(self, id):
        """Delete a live channel."""

        vparams = VidiunParams()
        vparams.addStringIfDefined("id", id)
        self.client.queueServiceActionCall("livechannel", "delete", None, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def list(self, filter = NotImplemented, pager = NotImplemented):
        """List live channels by filter with paging support."""

        vparams = VidiunParams()
        vparams.addObjectIfDefined("filter", filter)
        vparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("livechannel", "list", VidiunLiveChannelListResponse, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunLiveChannelListResponse)

    def isLive(self, id):
        """Delivering the status of a live channel (on-air/offline)"""

        vparams = VidiunParams()
        vparams.addStringIfDefined("id", id)
        self.client.queueServiceActionCall("livechannel", "isLive", None, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)

    def appendRecording(self, entryId, assetId, mediaServerIndex, resource, duration, isLastChunk = False):
        """Append recorded video to live entry"""

        vparams = VidiunParams()
        vparams.addStringIfDefined("entryId", entryId)
        vparams.addStringIfDefined("assetId", assetId)
        vparams.addStringIfDefined("mediaServerIndex", mediaServerIndex)
        vparams.addObjectIfDefined("resource", resource)
        vparams.addFloatIfDefined("duration", duration)
        vparams.addBoolIfDefined("isLastChunk", isLastChunk);
        self.client.queueServiceActionCall("livechannel", "appendRecording", VidiunLiveEntry, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunLiveEntry)

    def registerMediaServer(self, entryId, hostname, mediaServerIndex, applicationName = NotImplemented, liveEntryStatus = 1):
        """Register media server to live entry"""

        vparams = VidiunParams()
        vparams.addStringIfDefined("entryId", entryId)
        vparams.addStringIfDefined("hostname", hostname)
        vparams.addStringIfDefined("mediaServerIndex", mediaServerIndex)
        vparams.addStringIfDefined("applicationName", applicationName)
        vparams.addIntIfDefined("liveEntryStatus", liveEntryStatus);
        self.client.queueServiceActionCall("livechannel", "registerMediaServer", VidiunLiveEntry, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunLiveEntry)

    def unregisterMediaServer(self, entryId, hostname, mediaServerIndex):
        """Unregister media server from live entry"""

        vparams = VidiunParams()
        vparams.addStringIfDefined("entryId", entryId)
        vparams.addStringIfDefined("hostname", hostname)
        vparams.addStringIfDefined("mediaServerIndex", mediaServerIndex)
        self.client.queueServiceActionCall("livechannel", "unregisterMediaServer", VidiunLiveEntry, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunLiveEntry)

    def validateRegisteredMediaServers(self, entryId):
        """Validates all registered media servers"""

        vparams = VidiunParams()
        vparams.addStringIfDefined("entryId", entryId)
        self.client.queueServiceActionCall("livechannel", "validateRegisteredMediaServers", None, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def setRecordedContent(self, entryId, mediaServerIndex, resource, duration, recordedEntryId = None, flavorParamsId = None):
        """Sey recorded video to live entry"""

        vparams = VidiunParams()
        vparams.addStringIfDefined("entryId", entryId)
        vparams.addStringIfDefined("mediaServerIndex", mediaServerIndex)
        vparams.addObjectIfDefined("resource", resource)
        vparams.addFloatIfDefined("duration", duration)
        vparams.addStringIfDefined("recordedEntryId", recordedEntryId)
        vparams.addIntIfDefined("flavorParamsId", flavorParamsId)
        self.client.queueServiceActionCall("livestream", "setRecordedContent", VidiunLiveEntry, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode, header = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunLiveEntry), header


# @package Vidiun
# @subpackage Client
class VidiunLiveReportsService(VidiunServiceBase):
    def __init__(self, client = None):
        VidiunServiceBase.__init__(self, client)

    def getEvents(self, reportType, filter = NotImplemented, pager = NotImplemented):
        vparams = VidiunParams()
        vparams.addStringIfDefined("reportType", reportType)
        vparams.addObjectIfDefined("filter", filter)
        vparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("livereports", "getEvents", VidiunReportGraph, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.createArray(resultNode, VidiunReportGraph)

    def getReport(self, reportType, filter = NotImplemented, pager = NotImplemented):
        vparams = VidiunParams()
        vparams.addStringIfDefined("reportType", reportType)
        vparams.addObjectIfDefined("filter", filter)
        vparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("livereports", "getReport", VidiunLiveStatsListResponse, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunLiveStatsListResponse)

    def exportToCsv(self, reportType, params):
        vparams = VidiunParams()
        vparams.addIntIfDefined("reportType", reportType);
        vparams.addObjectIfDefined("params", params)
        self.client.queueServiceActionCall("livereports", "exportToCsv", VidiunLiveReportExportResponse, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunLiveReportExportResponse)

    def serveReport(self, id):
        """Will serve a requested report"""

        vparams = VidiunParams()
        vparams.addStringIfDefined("id", id)
        self.client.queueServiceActionCall("livereports", "serveReport", None, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeText(resultNode)


# @package Vidiun
# @subpackage Client
class VidiunLiveStatsService(VidiunServiceBase):
    """Stats Service"""

    def __init__(self, client = None):
        VidiunServiceBase.__init__(self, client)

    def collect(self, event):
        """Will write to the event log a single line representing the event
        	 VidiunStatsEvent $event"""

        vparams = VidiunParams()
        vparams.addObjectIfDefined("event", event)
        self.client.queueServiceActionCall("livestats", "collect", None, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)


# @package Vidiun
# @subpackage Client
class VidiunLiveStreamService(VidiunServiceBase):
    """Live Stream service lets you manage live stream entries"""

    def __init__(self, client = None):
        VidiunServiceBase.__init__(self, client)

    def add(self, liveStreamEntry, sourceType = NotImplemented):
        """Adds new live stream entry.
        	 The entry will be queued for provision."""

        vparams = VidiunParams()
        vparams.addObjectIfDefined("liveStreamEntry", liveStreamEntry)
        vparams.addStringIfDefined("sourceType", sourceType)
        self.client.queueServiceActionCall("livestream", "add", VidiunLiveStreamEntry, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunLiveStreamEntry)

    def get(self, entryId, version = -1):
        """Get live stream entry by ID."""

        vparams = VidiunParams()
        vparams.addStringIfDefined("entryId", entryId)
        vparams.addIntIfDefined("version", version);
        self.client.queueServiceActionCall("livestream", "get", VidiunLiveStreamEntry, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode, header = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunLiveStreamEntry), header

    def authenticate(self, entryId, token, hostname = NotImplemented, mediaServerIndex = NotImplemented, applicationName = NotImplemented):
        """Authenticate live-stream entry against stream token and partner limitations"""

        vparams = VidiunParams()
        vparams.addStringIfDefined("entryId", entryId)
        vparams.addStringIfDefined("token", token)
        vparams.addStringIfDefined("hostname", hostname)
        vparams.addStringIfDefined("mediaServerIndex", mediaServerIndex)
        vparams.addStringIfDefined("applicationName", applicationName)
        self.client.queueServiceActionCall("livestream", "authenticate", VidiunLiveStreamEntry, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunLiveStreamEntry)

    def update(self, entryId, liveStreamEntry):
        """Update live stream entry. Only the properties that were set will be updated."""

        vparams = VidiunParams()
        vparams.addStringIfDefined("entryId", entryId)
        vparams.addObjectIfDefined("liveStreamEntry", liveStreamEntry)
        self.client.queueServiceActionCall("livestream", "update", VidiunLiveStreamEntry, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunLiveStreamEntry)

    def delete(self, entryId):
        """Delete a live stream entry."""

        vparams = VidiunParams()
        vparams.addStringIfDefined("entryId", entryId)
        self.client.queueServiceActionCall("livestream", "delete", None, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def list(self, filter = NotImplemented, pager = NotImplemented):
        """List live stream entries by filter with paging support."""

        vparams = VidiunParams()
        vparams.addObjectIfDefined("filter", filter)
        vparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("livestream", "list", VidiunLiveStreamListResponse, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunLiveStreamListResponse)

    def updateOfflineThumbnailJpeg(self, entryId, fileData):
        """Update live stream entry thumbnail using a raw jpeg file"""

        vparams = VidiunParams()
        vparams.addStringIfDefined("entryId", entryId)
        vfiles = VidiunFiles()
        vfiles.put("fileData", fileData);
        self.client.queueServiceActionCall("livestream", "updateOfflineThumbnailJpeg", VidiunLiveStreamEntry, vparams, vfiles)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunLiveStreamEntry)

    def updateOfflineThumbnailFromUrl(self, entryId, url):
        """Update entry thumbnail using url"""

        vparams = VidiunParams()
        vparams.addStringIfDefined("entryId", entryId)
        vparams.addStringIfDefined("url", url)
        self.client.queueServiceActionCall("livestream", "updateOfflineThumbnailFromUrl", VidiunLiveStreamEntry, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunLiveStreamEntry)

    def isLive(self, id, protocol):
        """Delivering the status of a live stream (on-air/offline) if it is possible"""

        vparams = VidiunParams()
        vparams.addStringIfDefined("id", id)
        vparams.addStringIfDefined("protocol", protocol)
        self.client.queueServiceActionCall("livestream", "isLive", None, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)

    def addLiveStreamPushPublishConfiguration(self, entryId, protocol, url = NotImplemented, liveStreamConfiguration = NotImplemented):
        """Add new pushPublish configuration to entry"""

        vparams = VidiunParams()
        vparams.addStringIfDefined("entryId", entryId)
        vparams.addStringIfDefined("protocol", protocol)
        vparams.addStringIfDefined("url", url)
        vparams.addObjectIfDefined("liveStreamConfiguration", liveStreamConfiguration)
        self.client.queueServiceActionCall("livestream", "addLiveStreamPushPublishConfiguration", VidiunLiveStreamEntry, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunLiveStreamEntry)

    def removeLiveStreamPushPublishConfiguration(self, entryId, protocol):
        """Remove push publish configuration from entry"""

        vparams = VidiunParams()
        vparams.addStringIfDefined("entryId", entryId)
        vparams.addStringIfDefined("protocol", protocol)
        self.client.queueServiceActionCall("livestream", "removeLiveStreamPushPublishConfiguration", VidiunLiveStreamEntry, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunLiveStreamEntry)

    def appendRecording(self, entryId, assetId, mediaServerIndex, resource, duration, isLastChunk = False):
        """Append recorded video to live entry"""

        vparams = VidiunParams()
        vparams.addStringIfDefined("entryId", entryId)
        vparams.addStringIfDefined("assetId", assetId)
        vparams.addStringIfDefined("mediaServerIndex", mediaServerIndex)
        vparams.addObjectIfDefined("resource", resource)
        vparams.addFloatIfDefined("duration", duration)
        vparams.addBoolIfDefined("isLastChunk", isLastChunk);
        self.client.queueServiceActionCall("livestream", "appendRecording", VidiunLiveEntry, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunLiveEntry)

    def registerMediaServer(self, entryId, hostname, mediaServerIndex, applicationName = NotImplemented, liveEntryStatus = 1):
        """Register media server to live entry"""

        vparams = VidiunParams()
        vparams.addStringIfDefined("entryId", entryId)
        vparams.addStringIfDefined("hostname", hostname)
        vparams.addStringIfDefined("mediaServerIndex", mediaServerIndex)
        vparams.addStringIfDefined("applicationName", applicationName)
        vparams.addIntIfDefined("liveEntryStatus", liveEntryStatus);
        self.client.queueServiceActionCall("livestream", "registerMediaServer", VidiunLiveEntry, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunLiveEntry)

    def unregisterMediaServer(self, entryId, hostname, mediaServerIndex):
        """Unregister media server from live entry"""

        vparams = VidiunParams()
        vparams.addStringIfDefined("entryId", entryId)
        vparams.addStringIfDefined("hostname", hostname)
        vparams.addStringIfDefined("mediaServerIndex", mediaServerIndex)
        self.client.queueServiceActionCall("livestream", "unregisterMediaServer", VidiunLiveEntry, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunLiveEntry)

    def validateRegisteredMediaServers(self, entryId):
        """Validates all registered media servers"""

        vparams = VidiunParams()
        vparams.addStringIfDefined("entryId", entryId)
        self.client.queueServiceActionCall("livestream", "validateRegisteredMediaServers", None, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def setRecordedContent(self, entryId, mediaServerIndex, resource, duration, recordedEntryId = None, flavorParamsId = None):
        """Sey recorded video to live entry"""

        vparams = VidiunParams()
        vparams.addStringIfDefined("entryId", entryId)
        vparams.addStringIfDefined("mediaServerIndex", mediaServerIndex)
        vparams.addObjectIfDefined("resource", resource)
        vparams.addFloatIfDefined("duration", duration)
        vparams.addStringIfDefined("recordedEntryId", recordedEntryId)
        vparams.addIntIfDefined("flavorParamsId", flavorParamsId)
        self.client.queueServiceActionCall("livestream", "setRecordedContent", VidiunLiveEntry, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode, header = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunLiveEntry), header

    def createPeriodicSyncPoints(self, entryId, interval, duration):
        """Creates perioding metadata sync-point events on a live stream"""

        vparams = VidiunParams()
        vparams.addStringIfDefined("entryId", entryId)
        vparams.addIntIfDefined("interval", interval);
        vparams.addIntIfDefined("duration", duration);
        self.client.queueServiceActionCall("livestream", "createPeriodicSyncPoints", None, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()


# @package Vidiun
# @subpackage Client
class VidiunMediaInfoService(VidiunServiceBase):
    """Media Info service"""

    def __init__(self, client = None):
        VidiunServiceBase.__init__(self, client)

    def list(self, filter = NotImplemented, pager = NotImplemented):
        """List media info objects by filter and pager"""

        vparams = VidiunParams()
        vparams.addObjectIfDefined("filter", filter)
        vparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("mediainfo", "list", VidiunMediaInfoListResponse, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunMediaInfoListResponse)


# @package Vidiun
# @subpackage Client
class VidiunMediaService(VidiunServiceBase):
    """Media service lets you upload and manage media files (images / videos & audio)"""

    def __init__(self, client = None):
        VidiunServiceBase.__init__(self, client)

    def add(self, entry):
        """Add entry"""

        vparams = VidiunParams()
        vparams.addObjectIfDefined("entry", entry)
        self.client.queueServiceActionCall("media", "add", VidiunMediaEntry, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode, header = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunMediaEntry), header

    def addContent(self, entryId, resource = NotImplemented):
        """Add content to media entry which is not yet associated with content (therefore is in status NO_CONTENT).
             If the requirement is to replace the entry's associated content, use action updateContent."""

        vparams = VidiunParams()
        vparams.addStringIfDefined("entryId", entryId)
        vparams.addObjectIfDefined("resource", resource)
        self.client.queueServiceActionCall("media", "addContent", VidiunMediaEntry, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode, header = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunMediaEntry), header

    def addFromBulk(self, mediaEntry, url, bulkUploadId):
        """Adds new media entry by importing an HTTP or FTP URL.
        	 The entry will be queued for import and then for conversion.
        	 This action should be exposed only to the batches"""

        vparams = VidiunParams()
        vparams.addObjectIfDefined("mediaEntry", mediaEntry)
        vparams.addStringIfDefined("url", url)
        vparams.addIntIfDefined("bulkUploadId", bulkUploadId);
        self.client.queueServiceActionCall("media", "addFromBulk", VidiunMediaEntry, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunMediaEntry)

    def addFromUrl(self, mediaEntry, url):
        """Adds new media entry by importing an HTTP or FTP URL.
        	 The entry will be queued for import and then for conversion."""

        vparams = VidiunParams()
        vparams.addObjectIfDefined("mediaEntry", mediaEntry)
        vparams.addStringIfDefined("url", url)
        self.client.queueServiceActionCall("media", "addFromUrl", VidiunMediaEntry, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunMediaEntry)

    def addFromSearchResult(self, mediaEntry = NotImplemented, searchResult = NotImplemented):
        """Adds new media entry by importing the media file from a search provider.
        	 This action should be used with the search service result."""

        vparams = VidiunParams()
        vparams.addObjectIfDefined("mediaEntry", mediaEntry)
        vparams.addObjectIfDefined("searchResult", searchResult)
        self.client.queueServiceActionCall("media", "addFromSearchResult", VidiunMediaEntry, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunMediaEntry)

    def addFromUploadedFile(self, mediaEntry, uploadTokenId):
        """Add new entry after the specific media file was uploaded and the upload token id exists"""

        vparams = VidiunParams()
        vparams.addObjectIfDefined("mediaEntry", mediaEntry)
        vparams.addStringIfDefined("uploadTokenId", uploadTokenId)
        self.client.queueServiceActionCall("media", "addFromUploadedFile", VidiunMediaEntry, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunMediaEntry)

    def addFromRecordedWebcam(self, mediaEntry, webcamTokenId):
        """Add new entry after the file was recored on the server and the token id exists"""

        vparams = VidiunParams()
        vparams.addObjectIfDefined("mediaEntry", mediaEntry)
        vparams.addStringIfDefined("webcamTokenId", webcamTokenId)
        self.client.queueServiceActionCall("media", "addFromRecordedWebcam", VidiunMediaEntry, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunMediaEntry)

    def addFromEntry(self, sourceEntryId, mediaEntry = NotImplemented, sourceFlavorParamsId = NotImplemented):
        """Copy entry into new entry"""

        vparams = VidiunParams()
        vparams.addStringIfDefined("sourceEntryId", sourceEntryId)
        vparams.addObjectIfDefined("mediaEntry", mediaEntry)
        vparams.addIntIfDefined("sourceFlavorParamsId", sourceFlavorParamsId);
        self.client.queueServiceActionCall("media", "addFromEntry", VidiunMediaEntry, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunMediaEntry)

    def addFromFlavorAsset(self, sourceFlavorAssetId, mediaEntry = NotImplemented):
        """Copy flavor asset into new entry"""

        vparams = VidiunParams()
        vparams.addStringIfDefined("sourceFlavorAssetId", sourceFlavorAssetId)
        vparams.addObjectIfDefined("mediaEntry", mediaEntry)
        self.client.queueServiceActionCall("media", "addFromFlavorAsset", VidiunMediaEntry, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunMediaEntry)

    def convert(self, entryId, conversionProfileId = NotImplemented, dynamicConversionAttributes = NotImplemented):
        """Convert entry"""

        vparams = VidiunParams()
        vparams.addStringIfDefined("entryId", entryId)
        vparams.addIntIfDefined("conversionProfileId", conversionProfileId);
        vparams.addArrayIfDefined("dynamicConversionAttributes", dynamicConversionAttributes)
        self.client.queueServiceActionCall("media", "convert", None, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeInt(resultNode)

    def get(self, entryId, version = -1):
        """Get media entry by ID."""

        vparams = VidiunParams()
        vparams.addStringIfDefined("entryId", entryId)
        vparams.addIntIfDefined("version", version);
        self.client.queueServiceActionCall("media", "get", VidiunMediaEntry, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode, header = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunMediaEntry), header

    def getMrss(self, entryId, extendingItemsArray = NotImplemented, features = NotImplemented):
        """Get MRSS by entry id
             XML will return as an escaped string"""

        vparams = VidiunParams()
        vparams.addStringIfDefined("entryId", entryId)
        vparams.addArrayIfDefined("extendingItemsArray", extendingItemsArray)
        vparams.addStringIfDefined("features", features)
        self.client.queueServiceActionCall("media", "getMrss", None, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeText(resultNode)

    def update(self, entryId, mediaEntry):
        """Update media entry. Only the properties that were set will be updated."""

        vparams = VidiunParams()
        vparams.addStringIfDefined("entryId", entryId)
        vparams.addObjectIfDefined("mediaEntry", mediaEntry)
        self.client.queueServiceActionCall("media", "update", VidiunMediaEntry, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode, header = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunMediaEntry), header

    def updateContent(self, entryId, resource, conversionProfileId = NotImplemented, advancedOptions = NotImplemented):
        """Replace content associated with the media entry."""

        vparams = VidiunParams()
        vparams.addStringIfDefined("entryId", entryId)
        vparams.addObjectIfDefined("resource", resource)
        vparams.addIntIfDefined("conversionProfileId", conversionProfileId);
        vparams.addObjectIfDefined("advancedOptions", advancedOptions)
        self.client.queueServiceActionCall("media", "updateContent", VidiunMediaEntry, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode, header = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunMediaEntry), header

    def delete(self, entryId):
        """Delete a media entry."""

        vparams = VidiunParams()
        vparams.addStringIfDefined("entryId", entryId)
        self.client.queueServiceActionCall("media", "delete", None, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def approveReplace(self, entryId):
        """Approves media replacement"""

        vparams = VidiunParams()
        vparams.addStringIfDefined("entryId", entryId)
        self.client.queueServiceActionCall("media", "approveReplace", VidiunMediaEntry, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunMediaEntry)

    def cancelReplace(self, entryId):
        """Cancels media replacement"""

        vparams = VidiunParams()
        vparams.addStringIfDefined("entryId", entryId)
        self.client.queueServiceActionCall("media", "cancelReplace", VidiunMediaEntry, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode, header = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunMediaEntry), header

    def list(self, filter = NotImplemented, pager = NotImplemented):
        """List media entries by filter with paging support."""

        vparams = VidiunParams()
        vparams.addObjectIfDefined("filter", filter)
        vparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("media", "list", VidiunMediaListResponse, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunMediaListResponse)

    def count(self, filter = NotImplemented):
        """Count media entries by filter."""

        vparams = VidiunParams()
        vparams.addObjectIfDefined("filter", filter)
        self.client.queueServiceActionCall("media", "count", None, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeInt(resultNode)

    def upload(self, fileData):
        """Upload a media file to Vidiun, then the file can be used to create a media entry."""

        vparams = VidiunParams()
        vfiles = VidiunFiles()
        vfiles.put("fileData", fileData);
        self.client.queueServiceActionCall("media", "upload", None, vparams, vfiles)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeText(resultNode)

    def updateThumbnail(self, entryId, timeOffset, flavorParamsId = NotImplemented):
        """Update media entry thumbnail by a specified time offset (In seconds)
        	 If flavor params id not specified, source flavor will be used by default"""

        vparams = VidiunParams()
        vparams.addStringIfDefined("entryId", entryId)
        vparams.addIntIfDefined("timeOffset", timeOffset);
        vparams.addIntIfDefined("flavorParamsId", flavorParamsId);
        self.client.queueServiceActionCall("media", "updateThumbnail", VidiunMediaEntry, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunMediaEntry)

    def updateThumbnailFromSourceEntry(self, entryId, sourceEntryId, timeOffset, flavorParamsId = NotImplemented):
        """Update media entry thumbnail from a different entry by a specified time offset (In seconds)
        	 If flavor params id not specified, source flavor will be used by default"""

        vparams = VidiunParams()
        vparams.addStringIfDefined("entryId", entryId)
        vparams.addStringIfDefined("sourceEntryId", sourceEntryId)
        vparams.addIntIfDefined("timeOffset", timeOffset);
        vparams.addIntIfDefined("flavorParamsId", flavorParamsId);
        self.client.queueServiceActionCall("media", "updateThumbnailFromSourceEntry", VidiunMediaEntry, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunMediaEntry)

    def updateThumbnailJpeg(self, entryId, fileData):
        """Update media entry thumbnail using a raw jpeg file"""

        vparams = VidiunParams()
        vparams.addStringIfDefined("entryId", entryId)
        vfiles = VidiunFiles()
        vfiles.put("fileData", fileData);
        self.client.queueServiceActionCall("media", "updateThumbnailJpeg", VidiunMediaEntry, vparams, vfiles)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunMediaEntry)

    def updateThumbnailFromUrl(self, entryId, url):
        """Update entry thumbnail using url"""

        vparams = VidiunParams()
        vparams.addStringIfDefined("entryId", entryId)
        vparams.addStringIfDefined("url", url)
        self.client.queueServiceActionCall("media", "updateThumbnailFromUrl", VidiunBaseEntry, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunBaseEntry)

    def requestConversion(self, entryId, fileFormat):
        """Request a new conversion job, this can be used to convert the media entry to a different format"""

        vparams = VidiunParams()
        vparams.addStringIfDefined("entryId", entryId)
        vparams.addStringIfDefined("fileFormat", fileFormat)
        self.client.queueServiceActionCall("media", "requestConversion", None, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeInt(resultNode)

    def flag(self, moderationFlag):
        """Flag inappropriate media entry for moderation"""

        vparams = VidiunParams()
        vparams.addObjectIfDefined("moderationFlag", moderationFlag)
        self.client.queueServiceActionCall("media", "flag", None, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def reject(self, entryId):
        """Reject the media entry and mark the pending flags (if any) as moderated (this will make the entry non playable)"""

        vparams = VidiunParams()
        vparams.addStringIfDefined("entryId", entryId)
        self.client.queueServiceActionCall("media", "reject", None, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def approve(self, entryId):
        """Approve the media entry and mark the pending flags (if any) as moderated (this will make the entry playable)"""

        vparams = VidiunParams()
        vparams.addStringIfDefined("entryId", entryId)
        self.client.queueServiceActionCall("media", "approve", None, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def listFlags(self, entryId, pager = NotImplemented):
        """List all pending flags for the media entry"""

        vparams = VidiunParams()
        vparams.addStringIfDefined("entryId", entryId)
        vparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("media", "listFlags", VidiunModerationFlagListResponse, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunModerationFlagListResponse)

    def anonymousRank(self, entryId, rank):
        """Anonymously rank a media entry, no validation is done on duplicate rankings"""

        vparams = VidiunParams()
        vparams.addStringIfDefined("entryId", entryId)
        vparams.addIntIfDefined("rank", rank);
        self.client.queueServiceActionCall("media", "anonymousRank", None, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def bulkUploadAdd(self, fileData, bulkUploadData = NotImplemented, bulkUploadEntryData = NotImplemented):
        """Add new bulk upload batch job
        	 Conversion profile id can be specified in the API or in the CSV file, the one in the CSV file will be stronger.
        	 If no conversion profile was specified, partner's default will be used"""

        vparams = VidiunParams()
        vfiles = VidiunFiles()
        vfiles.put("fileData", fileData);
        vparams.addObjectIfDefined("bulkUploadData", bulkUploadData)
        vparams.addObjectIfDefined("bulkUploadEntryData", bulkUploadEntryData)
        self.client.queueServiceActionCall("media", "bulkUploadAdd", VidiunBulkUpload, vparams, vfiles)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunBulkUpload)


# @package Vidiun
# @subpackage Client
class VidiunMixingService(VidiunServiceBase):
    """A Mix is an XML unique format invented by Vidiun, it allows the user to create a mix of videos and images, in and out points, transitions, text overlays, soundtrack, effects and much more...
     Mixing service lets you create a new mix, manage its metadata and make basic manipulations."""

    def __init__(self, client = None):
        VidiunServiceBase.__init__(self, client)

    def add(self, mixEntry):
        """Adds a new mix.
        	 If the dataContent is null, a default timeline will be created."""

        vparams = VidiunParams()
        vparams.addObjectIfDefined("mixEntry", mixEntry)
        self.client.queueServiceActionCall("mixing", "add", VidiunMixEntry, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunMixEntry)

    def get(self, entryId, version = -1):
        """Get mix entry by id."""

        vparams = VidiunParams()
        vparams.addStringIfDefined("entryId", entryId)
        vparams.addIntIfDefined("version", version);
        self.client.queueServiceActionCall("mixing", "get", VidiunMixEntry, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunMixEntry)

    def update(self, entryId, mixEntry):
        """Update mix entry. Only the properties that were set will be updated."""

        vparams = VidiunParams()
        vparams.addStringIfDefined("entryId", entryId)
        vparams.addObjectIfDefined("mixEntry", mixEntry)
        self.client.queueServiceActionCall("mixing", "update", VidiunMixEntry, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunMixEntry)

    def delete(self, entryId):
        """Delete a mix entry."""

        vparams = VidiunParams()
        vparams.addStringIfDefined("entryId", entryId)
        self.client.queueServiceActionCall("mixing", "delete", None, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def list(self, filter = NotImplemented, pager = NotImplemented):
        """List entries by filter with paging support.
        	 Return parameter is an array of mix entries."""

        vparams = VidiunParams()
        vparams.addObjectIfDefined("filter", filter)
        vparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("mixing", "list", VidiunMixListResponse, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunMixListResponse)

    def count(self, filter = NotImplemented):
        """Count mix entries by filter."""

        vparams = VidiunParams()
        vparams.addObjectIfDefined("filter", filter)
        self.client.queueServiceActionCall("mixing", "count", None, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeInt(resultNode)

    def clone(self, entryId):
        """Clones an existing mix."""

        vparams = VidiunParams()
        vparams.addStringIfDefined("entryId", entryId)
        self.client.queueServiceActionCall("mixing", "clone", VidiunMixEntry, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunMixEntry)

    def appendMediaEntry(self, mixEntryId, mediaEntryId):
        """Appends a media entry to a the end of the mix timeline, this will save the mix timeline as a new version."""

        vparams = VidiunParams()
        vparams.addStringIfDefined("mixEntryId", mixEntryId)
        vparams.addStringIfDefined("mediaEntryId", mediaEntryId)
        self.client.queueServiceActionCall("mixing", "appendMediaEntry", VidiunMixEntry, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunMixEntry)

    def getMixesByMediaId(self, mediaEntryId):
        """Get the mixes in which the media entry is included"""

        vparams = VidiunParams()
        vparams.addStringIfDefined("mediaEntryId", mediaEntryId)
        self.client.queueServiceActionCall("mixing", "getMixesByMediaId", VidiunMixEntry, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.createArray(resultNode, VidiunMixEntry)

    def getReadyMediaEntries(self, mixId, version = -1):
        """Get all ready media entries that exist in the given mix id"""

        vparams = VidiunParams()
        vparams.addStringIfDefined("mixId", mixId)
        vparams.addIntIfDefined("version", version);
        self.client.queueServiceActionCall("mixing", "getReadyMediaEntries", VidiunMediaEntry, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.createArray(resultNode, VidiunMediaEntry)

    def anonymousRank(self, entryId, rank):
        """Anonymously rank a mix entry, no validation is done on duplicate rankings"""

        vparams = VidiunParams()
        vparams.addStringIfDefined("entryId", entryId)
        vparams.addIntIfDefined("rank", rank);
        self.client.queueServiceActionCall("mixing", "anonymousRank", None, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()


# @package Vidiun
# @subpackage Client
class VidiunNotificationService(VidiunServiceBase):
    """Notification Service"""

    def __init__(self, client = None):
        VidiunServiceBase.__init__(self, client)

    def getClientNotification(self, entryId, type):
        """Return the notifications for a specific entry id and type"""

        vparams = VidiunParams()
        vparams.addStringIfDefined("entryId", entryId)
        vparams.addIntIfDefined("type", type);
        self.client.queueServiceActionCall("notification", "getClientNotification", VidiunClientNotification, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunClientNotification)


# @package Vidiun
# @subpackage Client
class VidiunPartnerService(VidiunServiceBase):
    """partner service allows you to change/manage your partner personal details and settings as well"""

    def __init__(self, client = None):
        VidiunServiceBase.__init__(self, client)

    def register(self, partner, cmsPassword = "", templatePartnerId = NotImplemented, silent = False):
        """Create a new Partner object"""

        vparams = VidiunParams()
        vparams.addObjectIfDefined("partner", partner)
        vparams.addStringIfDefined("cmsPassword", cmsPassword)
        vparams.addIntIfDefined("templatePartnerId", templatePartnerId);
        vparams.addBoolIfDefined("silent", silent);
        self.client.queueServiceActionCall("partner", "register", VidiunPartner, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunPartner)

    def update(self, partner, allowEmpty = False):
        """Update details and settings of an existing partner"""

        vparams = VidiunParams()
        vparams.addObjectIfDefined("partner", partner)
        vparams.addBoolIfDefined("allowEmpty", allowEmpty);
        self.client.queueServiceActionCall("partner", "update", VidiunPartner, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunPartner)

    def get(self, id = NotImplemented):
        """Retrieve partner object by Id"""

        vparams = VidiunParams()
        vparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("partner", "get", VidiunPartner, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunPartner)

    def getSecrets(self, partnerId, adminEmail, cmsPassword):
        """Retrieve partner secret and admin secret"""

        vparams = VidiunParams()
        vparams.addIntIfDefined("partnerId", partnerId);
        vparams.addStringIfDefined("adminEmail", adminEmail)
        vparams.addStringIfDefined("cmsPassword", cmsPassword)
        self.client.queueServiceActionCall("partner", "getSecrets", VidiunPartner, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunPartner)

    def getInfo(self):
        """Retrieve all info attributed to the partner
        	 This action expects no parameters. It returns information for the current VS partnerId."""

        vparams = VidiunParams()
        self.client.queueServiceActionCall("partner", "getInfo", VidiunPartner, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunPartner)

    def getUsage(self, year = "", month = 1, resolution = NotImplemented):
        """Get usage statistics for a partner
        	 Calculation is done according to partner's package
        	 Additional data returned is a graph points of streaming usage in a timeframe
        	 The resolution can be "days" or "months" """

        vparams = VidiunParams()
        vparams.addIntIfDefined("year", year);
        vparams.addIntIfDefined("month", month);
        vparams.addStringIfDefined("resolution", resolution)
        self.client.queueServiceActionCall("partner", "getUsage", VidiunPartnerUsage, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunPartnerUsage)

    def getStatistics(self):
        """Get usage statistics for a partner
        	 Calculation is done according to partner's package"""

        vparams = VidiunParams()
        self.client.queueServiceActionCall("partner", "getStatistics", VidiunPartnerStatistics, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunPartnerStatistics)

    def listPartnersForUser(self, partnerFilter = NotImplemented, pager = NotImplemented):
        """Retrieve a list of partner objects which the current user is allowed to access."""

        vparams = VidiunParams()
        vparams.addObjectIfDefined("partnerFilter", partnerFilter)
        vparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("partner", "listPartnersForUser", VidiunPartnerListResponse, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunPartnerListResponse)

    def list(self, filter = NotImplemented, pager = NotImplemented):
        """List partners by filter with paging support
        	 Current implementation will only list the sub partners of the partner initiating the api call (using the current VS).
        	 This action is only partially implemented to support listing sub partners of a VAR partner."""

        vparams = VidiunParams()
        vparams.addObjectIfDefined("filter", filter)
        vparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("partner", "list", VidiunPartnerListResponse, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunPartnerListResponse)

    def listFeatureStatus(self):
        """List partner's current processes' statuses"""

        vparams = VidiunParams()
        self.client.queueServiceActionCall("partner", "listFeatureStatus", VidiunFeatureStatusListResponse, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunFeatureStatusListResponse)

    def count(self, filter = NotImplemented):
        """Count partner's existing sub-publishers (count includes the partner itself)."""

        vparams = VidiunParams()
        vparams.addObjectIfDefined("filter", filter)
        self.client.queueServiceActionCall("partner", "count", None, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeInt(resultNode)


# @package Vidiun
# @subpackage Client
class VidiunPermissionItemService(VidiunServiceBase):
    """PermissionItem service lets you create and manage permission items"""

    def __init__(self, client = None):
        VidiunServiceBase.__init__(self, client)

    def add(self, permissionItem):
        """Adds a new permission item object to the account.
        	 This action is available only to Vidiun system administrators."""

        vparams = VidiunParams()
        vparams.addObjectIfDefined("permissionItem", permissionItem)
        self.client.queueServiceActionCall("permissionitem", "add", VidiunPermissionItem, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunPermissionItem)

    def get(self, permissionItemId):
        """Retrieves a permission item object using its ID."""

        vparams = VidiunParams()
        vparams.addIntIfDefined("permissionItemId", permissionItemId);
        self.client.queueServiceActionCall("permissionitem", "get", VidiunPermissionItem, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunPermissionItem)

    def update(self, permissionItemId, permissionItem):
        """Updates an existing permission item object.
        	 This action is available only to Vidiun system administrators."""

        vparams = VidiunParams()
        vparams.addIntIfDefined("permissionItemId", permissionItemId);
        vparams.addObjectIfDefined("permissionItem", permissionItem)
        self.client.queueServiceActionCall("permissionitem", "update", VidiunPermissionItem, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunPermissionItem)

    def delete(self, permissionItemId):
        """Deletes an existing permission item object.
        	 This action is available only to Vidiun system administrators."""

        vparams = VidiunParams()
        vparams.addIntIfDefined("permissionItemId", permissionItemId);
        self.client.queueServiceActionCall("permissionitem", "delete", VidiunPermissionItem, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunPermissionItem)

    def list(self, filter = NotImplemented, pager = NotImplemented):
        """Lists permission item objects that are associated with an account."""

        vparams = VidiunParams()
        vparams.addObjectIfDefined("filter", filter)
        vparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("permissionitem", "list", VidiunPermissionItemListResponse, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunPermissionItemListResponse)


# @package Vidiun
# @subpackage Client
class VidiunPermissionService(VidiunServiceBase):
    """Permission service lets you create and manage user permissions"""

    def __init__(self, client = None):
        VidiunServiceBase.__init__(self, client)

    def add(self, permission):
        """Adds a new permission object to the account."""

        vparams = VidiunParams()
        vparams.addObjectIfDefined("permission", permission)
        self.client.queueServiceActionCall("permission", "add", VidiunPermission, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunPermission)

    def get(self, permissionName):
        """Retrieves a permission object using its ID."""

        vparams = VidiunParams()
        vparams.addStringIfDefined("permissionName", permissionName)
        self.client.queueServiceActionCall("permission", "get", VidiunPermission, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunPermission)

    def update(self, permissionName, permission):
        """Updates an existing permission object."""

        vparams = VidiunParams()
        vparams.addStringIfDefined("permissionName", permissionName)
        vparams.addObjectIfDefined("permission", permission)
        self.client.queueServiceActionCall("permission", "update", VidiunPermission, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunPermission)

    def delete(self, permissionName):
        """Deletes an existing permission object."""

        vparams = VidiunParams()
        vparams.addStringIfDefined("permissionName", permissionName)
        self.client.queueServiceActionCall("permission", "delete", VidiunPermission, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunPermission)

    def list(self, filter = NotImplemented, pager = NotImplemented):
        """Lists permission objects that are associated with an account.
        	 Blocked permissions are listed unless you use a filter to exclude them.
        	 Blocked permissions are listed unless you use a filter to exclude them."""

        vparams = VidiunParams()
        vparams.addObjectIfDefined("filter", filter)
        vparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("permission", "list", VidiunPermissionListResponse, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunPermissionListResponse)

    def getCurrentPermissions(self):
        """Retrieves a list of permissions that apply to the current VS."""

        vparams = VidiunParams()
        self.client.queueServiceActionCall("permission", "getCurrentPermissions", None, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeText(resultNode)


# @package Vidiun
# @subpackage Client
class VidiunPlaylistService(VidiunServiceBase):
    """Playlist service lets you create,manage and play your playlists
     Playlists could be static (containing a fixed list of entries) or dynamic (baseed on a filter)"""

    def __init__(self, client = None):
        VidiunServiceBase.__init__(self, client)

    def add(self, playlist, updateStats = False):
        """Add new playlist
        	 Note that all entries used in a playlist will become public and may appear in VidiunNetwork"""

        vparams = VidiunParams()
        vparams.addObjectIfDefined("playlist", playlist)
        vparams.addBoolIfDefined("updateStats", updateStats);
        self.client.queueServiceActionCall("playlist", "add", VidiunPlaylist, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunPlaylist)

    def get(self, id, version = -1):
        """Retrieve a playlist"""

        vparams = VidiunParams()
        vparams.addStringIfDefined("id", id)
        vparams.addIntIfDefined("version", version);
        self.client.queueServiceActionCall("playlist", "get", VidiunPlaylist, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunPlaylist)

    def update(self, id, playlist, updateStats = False):
        """Update existing playlist
        	 Note - you cannot change playlist type. updated playlist must be of the same type."""

        vparams = VidiunParams()
        vparams.addStringIfDefined("id", id)
        vparams.addObjectIfDefined("playlist", playlist)
        vparams.addBoolIfDefined("updateStats", updateStats);
        self.client.queueServiceActionCall("playlist", "update", VidiunPlaylist, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunPlaylist)

    def delete(self, id):
        """Delete existing playlist"""

        vparams = VidiunParams()
        vparams.addStringIfDefined("id", id)
        self.client.queueServiceActionCall("playlist", "delete", None, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def clone(self, id, newPlaylist = NotImplemented):
        """Clone an existing playlist"""

        vparams = VidiunParams()
        vparams.addStringIfDefined("id", id)
        vparams.addObjectIfDefined("newPlaylist", newPlaylist)
        self.client.queueServiceActionCall("playlist", "clone", VidiunPlaylist, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunPlaylist)

    def list(self, filter = NotImplemented, pager = NotImplemented):
        """List available playlists"""

        vparams = VidiunParams()
        vparams.addObjectIfDefined("filter", filter)
        vparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("playlist", "list", VidiunPlaylistListResponse, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunPlaylistListResponse)

    def execute(self, id, detailed = "", playlistContext = NotImplemented, filter = NotImplemented, pager = NotImplemented):
        """Retrieve playlist for playing purpose"""

        vparams = VidiunParams()
        vparams.addStringIfDefined("id", id)
        vparams.addStringIfDefined("detailed", detailed)
        vparams.addObjectIfDefined("playlistContext", playlistContext)
        vparams.addObjectIfDefined("filter", filter)
        vparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("playlist", "execute", VidiunBaseEntry, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.createArray(resultNode, VidiunBaseEntry)

    def executeFromContent(self, playlistType, playlistContent, detailed = "", pager = NotImplemented):
        """Retrieve playlist for playing purpose, based on content"""

        vparams = VidiunParams()
        vparams.addIntIfDefined("playlistType", playlistType);
        vparams.addStringIfDefined("playlistContent", playlistContent)
        vparams.addStringIfDefined("detailed", detailed)
        vparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("playlist", "executeFromContent", VidiunBaseEntry, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.createArray(resultNode, VidiunBaseEntry)

    def executeFromFilters(self, filters, totalResults, detailed = "1", pager = NotImplemented):
        """Revrieve playlist for playing purpose, based on media entry filters"""

        vparams = VidiunParams()
        vparams.addArrayIfDefined("filters", filters)
        vparams.addIntIfDefined("totalResults", totalResults);
        vparams.addStringIfDefined("detailed", detailed)
        vparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("playlist", "executeFromFilters", VidiunBaseEntry, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.createArray(resultNode, VidiunBaseEntry)

    def getStatsFromContent(self, playlistType, playlistContent):
        """Retrieve playlist statistics"""

        vparams = VidiunParams()
        vparams.addIntIfDefined("playlistType", playlistType);
        vparams.addStringIfDefined("playlistContent", playlistContent)
        self.client.queueServiceActionCall("playlist", "getStatsFromContent", VidiunPlaylist, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunPlaylist)


# @package Vidiun
# @subpackage Client
class VidiunReportService(VidiunServiceBase):
    """api for getting reports data by the report type and some inputFilter"""

    def __init__(self, client = None):
        VidiunServiceBase.__init__(self, client)

    def getGraphs(self, reportType, reportInputFilter, dimension = NotImplemented, objectIds = NotImplemented):
        """report getGraphs action allows to get a graph data for a specific report."""

        vparams = VidiunParams()
        vparams.addStringIfDefined("reportType", reportType)
        vparams.addObjectIfDefined("reportInputFilter", reportInputFilter)
        vparams.addStringIfDefined("dimension", dimension)
        vparams.addStringIfDefined("objectIds", objectIds)
        self.client.queueServiceActionCall("report", "getGraphs", VidiunReportGraph, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.createArray(resultNode, VidiunReportGraph)

    def getTotal(self, reportType, reportInputFilter, objectIds = NotImplemented):
        """report getTotal action allows to get a graph data for a specific report."""

        vparams = VidiunParams()
        vparams.addStringIfDefined("reportType", reportType)
        vparams.addObjectIfDefined("reportInputFilter", reportInputFilter)
        vparams.addStringIfDefined("objectIds", objectIds)
        self.client.queueServiceActionCall("report", "getTotal", VidiunReportTotal, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunReportTotal)

    def getBaseTotal(self, reportType, reportInputFilter, objectIds = NotImplemented):
        """report getBaseTotal action allows to get a the total base for storage reports"""

        vparams = VidiunParams()
        vparams.addStringIfDefined("reportType", reportType)
        vparams.addObjectIfDefined("reportInputFilter", reportInputFilter)
        vparams.addStringIfDefined("objectIds", objectIds)
        self.client.queueServiceActionCall("report", "getBaseTotal", VidiunReportBaseTotal, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.createArray(resultNode, VidiunReportBaseTotal)

    def getTable(self, reportType, reportInputFilter, pager, order = NotImplemented, objectIds = NotImplemented):
        """report getTable action allows to get a graph data for a specific report."""

        vparams = VidiunParams()
        vparams.addStringIfDefined("reportType", reportType)
        vparams.addObjectIfDefined("reportInputFilter", reportInputFilter)
        vparams.addObjectIfDefined("pager", pager)
        vparams.addStringIfDefined("order", order)
        vparams.addStringIfDefined("objectIds", objectIds)
        self.client.queueServiceActionCall("report", "getTable", VidiunReportTable, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunReportTable)

    def getUrlForReportAsCsv(self, reportTitle, reportText, headers, reportType, reportInputFilter, dimension = NotImplemented, pager = NotImplemented, order = NotImplemented, objectIds = NotImplemented):
        """will create a Csv file for the given report and return the URL to access it"""

        vparams = VidiunParams()
        vparams.addStringIfDefined("reportTitle", reportTitle)
        vparams.addStringIfDefined("reportText", reportText)
        vparams.addStringIfDefined("headers", headers)
        vparams.addStringIfDefined("reportType", reportType)
        vparams.addObjectIfDefined("reportInputFilter", reportInputFilter)
        vparams.addStringIfDefined("dimension", dimension)
        vparams.addObjectIfDefined("pager", pager)
        vparams.addStringIfDefined("order", order)
        vparams.addStringIfDefined("objectIds", objectIds)
        self.client.queueServiceActionCall("report", "getUrlForReportAsCsv", None, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeText(resultNode)

    def serve(self, id):
        """Will serve a requested report"""

        vparams = VidiunParams()
        vparams.addStringIfDefined("id", id)
        self.client.queueServiceActionCall("report", "serve", None, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeText(resultNode)

    def execute(self, id, params = NotImplemented):
        vparams = VidiunParams()
        vparams.addIntIfDefined("id", id);
        vparams.addArrayIfDefined("params", params)
        self.client.queueServiceActionCall("report", "execute", VidiunReportResponse, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunReportResponse)

    def getCsv(self, id, params = NotImplemented):
        vparams = VidiunParams()
        vparams.addIntIfDefined("id", id);
        vparams.addArrayIfDefined("params", params)
        self.client.queueServiceActionCall('report', 'getCsv', None ,vparams)
        return self.client.getServeUrl()

    def getCsvFromStringParams(self, id, params = NotImplemented):
        """Returns report CSV file executed by string params with the following convention: param1=value1;param2=value2"""

        vparams = VidiunParams()
        vparams.addIntIfDefined("id", id);
        vparams.addStringIfDefined("params", params)
        self.client.queueServiceActionCall('report', 'getCsvFromStringParams', None ,vparams)
        return self.client.getServeUrl()


# @package Vidiun
# @subpackage Client
class VidiunResponseProfileService(VidiunServiceBase):
    """Manage response profiles"""

    def __init__(self, client = None):
        VidiunServiceBase.__init__(self, client)

    def add(self, addResponseProfile):
        """Add new response profile"""

        vparams = VidiunParams()
        vparams.addObjectIfDefined("addResponseProfile", addResponseProfile)
        self.client.queueServiceActionCall("responseprofile", "add", VidiunResponseProfile, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunResponseProfile)

    def get(self, id):
        """Get response profile by id"""

        vparams = VidiunParams()
        vparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("responseprofile", "get", VidiunResponseProfile, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunResponseProfile)

    def update(self, id, updateResponseProfile):
        """Update response profile by id"""

        vparams = VidiunParams()
        vparams.addIntIfDefined("id", id);
        vparams.addObjectIfDefined("updateResponseProfile", updateResponseProfile)
        self.client.queueServiceActionCall("responseprofile", "update", VidiunResponseProfile, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunResponseProfile)

    def updateStatus(self, id, status):
        """Update response profile status by id"""

        vparams = VidiunParams()
        vparams.addIntIfDefined("id", id);
        vparams.addIntIfDefined("status", status);
        self.client.queueServiceActionCall("responseprofile", "updateStatus", VidiunResponseProfile, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunResponseProfile)

    def delete(self, id):
        """Delete response profile by id"""

        vparams = VidiunParams()
        vparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("responseprofile", "delete", None, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def list(self, filter = NotImplemented, pager = NotImplemented):
        """List response profiles by filter and pager"""

        vparams = VidiunParams()
        vparams.addObjectIfDefined("filter", filter)
        vparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("responseprofile", "list", VidiunResponseProfileListResponse, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunResponseProfileListResponse)

    def recalculate(self, options):
        """Recalculate response profile cached objects"""

        vparams = VidiunParams()
        vparams.addObjectIfDefined("options", options)
        self.client.queueServiceActionCall("responseprofile", "recalculate", VidiunResponseProfileCacheRecalculateResults, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunResponseProfileCacheRecalculateResults)

    def clone(self, id, profile):
        """Clone an existing response profile"""

        vparams = VidiunParams()
        vparams.addIntIfDefined("id", id);
        vparams.addObjectIfDefined("profile", profile)
        self.client.queueServiceActionCall("responseprofile", "clone", VidiunResponseProfile, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunResponseProfile)


# @package Vidiun
# @subpackage Client
class VidiunSchemaService(VidiunServiceBase):
    """Expose the schema definitions for syndication MRSS, bulk upload XML and other schema types."""

    def __init__(self, client = None):
        VidiunServiceBase.__init__(self, client)

    def serve(self, type):
        """Serves the requested XSD according to the type and name."""

        vparams = VidiunParams()
        vparams.addStringIfDefined("type", type)
        self.client.queueServiceActionCall('schema', 'serve', None ,vparams)
        return self.client.getServeUrl()


# @package Vidiun
# @subpackage Client
class VidiunSearchService(VidiunServiceBase):
    """Search service allows you to search for media in various media providers
     This service is being used mostly by the CW component"""

    def __init__(self, client = None):
        VidiunServiceBase.__init__(self, client)

    def search(self, search, pager = NotImplemented):
        """Search for media in one of the supported media providers"""

        vparams = VidiunParams()
        vparams.addObjectIfDefined("search", search)
        vparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("search", "search", VidiunSearchResultResponse, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunSearchResultResponse)

    def getMediaInfo(self, searchResult):
        """Retrieve extra information about media found in search action
        	 Some providers return only part of the fields needed to create entry from, use this action to get the rest of the fields."""

        vparams = VidiunParams()
        vparams.addObjectIfDefined("searchResult", searchResult)
        self.client.queueServiceActionCall("search", "getMediaInfo", VidiunSearchResult, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunSearchResult)

    def searchUrl(self, mediaType, url):
        """Search for media given a specific URL
        	 Vidiun supports a searchURL action on some of the media providers.
        	 This action will return a VidiunSearchResult object based on a given URL (assuming the media provider is supported)"""

        vparams = VidiunParams()
        vparams.addIntIfDefined("mediaType", mediaType);
        vparams.addStringIfDefined("url", url)
        self.client.queueServiceActionCall("search", "searchUrl", VidiunSearchResult, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunSearchResult)

    def externalLogin(self, searchSource, userName, password):
        vparams = VidiunParams()
        vparams.addIntIfDefined("searchSource", searchSource);
        vparams.addStringIfDefined("userName", userName)
        vparams.addStringIfDefined("password", password)
        self.client.queueServiceActionCall("search", "externalLogin", VidiunSearchAuthData, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunSearchAuthData)


# @package Vidiun
# @subpackage Client
class VidiunServerNodeService(VidiunServiceBase):
    """Server Node service"""

    def __init__(self, client = None):
        VidiunServiceBase.__init__(self, client)

    def add(self, serverNode):
        """Adds a server node to the Vidiun DB."""

        vparams = VidiunParams()
        vparams.addObjectIfDefined("serverNode", serverNode)
        self.client.queueServiceActionCall("servernode", "add", VidiunServerNode, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunServerNode)

    def get(self, serverNodeId):
        """Get server node by id"""

        vparams = VidiunParams()
        vparams.addIntIfDefined("serverNodeId", serverNodeId);
        self.client.queueServiceActionCall("servernode", "get", VidiunServerNode, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunServerNode)

    def update(self, serverNodeId, serverNode):
        """Update server node by id"""

        vparams = VidiunParams()
        vparams.addIntIfDefined("serverNodeId", serverNodeId);
        vparams.addObjectIfDefined("serverNode", serverNode)
        self.client.queueServiceActionCall("servernode", "update", VidiunServerNode, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunServerNode)

    def delete(self, serverNodeId):
        """delete server node by id"""

        vparams = VidiunParams()
        vparams.addStringIfDefined("serverNodeId", serverNodeId)
        self.client.queueServiceActionCall("servernode", "delete", None, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def disable(self, serverNodeId):
        """Disable server node by id"""

        vparams = VidiunParams()
        vparams.addStringIfDefined("serverNodeId", serverNodeId)
        self.client.queueServiceActionCall("servernode", "disable", VidiunServerNode, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunServerNode)

    def enable(self, serverNodeId):
        """Enable server node by id"""

        vparams = VidiunParams()
        vparams.addStringIfDefined("serverNodeId", serverNodeId)
        self.client.queueServiceActionCall("servernode", "enable", VidiunServerNode, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunServerNode)

    def list(self, filter = NotImplemented, pager = NotImplemented):
        vparams = VidiunParams()
        vparams.addObjectIfDefined("filter", filter)
        vparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("servernode", "list", VidiunServerNodeListResponse, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunServerNodeListResponse)

    def reportStatus(self, hostName, serverNode = NotImplemented):
        """Update server node status"""

        vparams = VidiunParams()
        vparams.addStringIfDefined("hostName", hostName)
        vparams.addObjectIfDefined("serverNode", serverNode)
        self.client.queueServiceActionCall("servernode", "reportStatus", VidiunServerNode, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunServerNode)


# @package Vidiun
# @subpackage Client
class VidiunSessionService(VidiunServiceBase):
    """Session service"""

    def __init__(self, client = None):
        VidiunServiceBase.__init__(self, client)

    def start(self, secret, userId = "", type = 0, partnerId = NotImplemented, expiry = 86400, privileges = NotImplemented):
        """Start a session with Vidiun's server.
        	 The result VS is the session key that you should pass to all services that requires a ticket."""

        vparams = VidiunParams()
        vparams.addStringIfDefined("secret", secret)
        vparams.addStringIfDefined("userId", userId)
        vparams.addIntIfDefined("type", type);
        vparams.addIntIfDefined("partnerId", partnerId);
        vparams.addIntIfDefined("expiry", expiry);
        vparams.addStringIfDefined("privileges", privileges)
        self.client.queueServiceActionCall("session", "start", None, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return (getXmlNodeText(resultNode[0]), resultNode[1])

    def end(self):
        """End a session with the Vidiun server, making the current VS invalid."""

        vparams = VidiunParams()
        self.client.queueServiceActionCall("session", "end", None, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def impersonate(self, secret, impersonatedPartnerId, userId = "", type = 0, partnerId = NotImplemented, expiry = 86400, privileges = NotImplemented):
        """Start an impersonated session with Vidiun's server.
        	 The result VS is the session key that you should pass to all services that requires a ticket."""

        vparams = VidiunParams()
        vparams.addStringIfDefined("secret", secret)
        vparams.addIntIfDefined("impersonatedPartnerId", impersonatedPartnerId);
        vparams.addStringIfDefined("userId", userId)
        vparams.addIntIfDefined("type", type);
        vparams.addIntIfDefined("partnerId", partnerId);
        vparams.addIntIfDefined("expiry", expiry);
        vparams.addStringIfDefined("privileges", privileges)
        self.client.queueServiceActionCall("session", "impersonate", None, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeText(resultNode)

    def impersonateByVs(self, session, type = NotImplemented, expiry = NotImplemented, privileges = NotImplemented):
        """Start an impersonated session with Vidiun's server.
        	 The result VS info contains the session key that you should pass to all services that requires a ticket.
        	 Type, expiry and privileges won't be changed if they're not set"""

        vparams = VidiunParams()
        vparams.addStringIfDefined("session", session)
        vparams.addIntIfDefined("type", type);
        vparams.addIntIfDefined("expiry", expiry);
        vparams.addStringIfDefined("privileges", privileges)
        self.client.queueServiceActionCall("session", "impersonateByVs", VidiunSessionInfo, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunSessionInfo)

    def get(self, session = NotImplemented):
        """Parse session key and return its info"""

        vparams = VidiunParams()
        vparams.addStringIfDefined("session", session)
        self.client.queueServiceActionCall("session", "get", VidiunSessionInfo, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunSessionInfo)

    def startWidgetSession(self, widgetId, expiry = 86400):
        """Start a session for Vidiun's flash widgets"""

        vparams = VidiunParams()
        vparams.addStringIfDefined("widgetId", widgetId)
        vparams.addIntIfDefined("expiry", expiry);
        self.client.queueServiceActionCall("session", "startWidgetSession", VidiunStartWidgetSessionResponse, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunStartWidgetSessionResponse)


# @package Vidiun
# @subpackage Client
class VidiunStatsService(VidiunServiceBase):
    """Stats Service"""

    def __init__(self, client = None):
        VidiunServiceBase.__init__(self, client)

    def collect(self, event):
        """Will write to the event log a single line representing the event
        	 client version - will help interprete the line structure. different client versions might have slightly different data/data formats in the line
        event_id - number is the row number in yuval's excel
        datetime - same format as MySql's datetime - can change and should reflect the time zone
        session id - can be some big random number or guid
        partner id
        entry id
        unique viewer
        widget id
        ui_conf id
        uid - the puser id as set by the ppartner
        current point - in milliseconds
        duration - milliseconds
        user ip
        process duration - in milliseconds
        control id
        seek
        new point
        referrer
        	
        	
        	 VidiunStatsEvent $event"""

        vparams = VidiunParams()
        vparams.addObjectIfDefined("event", event)
        self.client.queueServiceActionCall("stats", "collect", None, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)

    def vmcCollect(self, vmcEvent):
        """Will collect the vmcEvent sent form the VMC client
        	 // this will actually be an empty function because all events will be sent using GET and will anyway be logged in the apache log"""

        vparams = VidiunParams()
        vparams.addObjectIfDefined("vmcEvent", vmcEvent)
        self.client.queueServiceActionCall("stats", "vmcCollect", None, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def reportVceError(self, vidiunCEError):
        vparams = VidiunParams()
        vparams.addObjectIfDefined("vidiunCEError", vidiunCEError)
        self.client.queueServiceActionCall("stats", "reportVceError", VidiunCEError, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunCEError)

    def reportError(self, errorCode, errorMessage):
        """Use this action to report errors to the vidiun server."""

        vparams = VidiunParams()
        vparams.addStringIfDefined("errorCode", errorCode)
        vparams.addStringIfDefined("errorMessage", errorMessage)
        self.client.queueServiceActionCall("stats", "reportError", None, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()


# @package Vidiun
# @subpackage Client
class VidiunStorageProfileService(VidiunServiceBase):
    """Storage Profiles service"""

    def __init__(self, client = None):
        VidiunServiceBase.__init__(self, client)

    def add(self, storageProfile):
        """Adds a storage profile to the Vidiun DB."""

        vparams = VidiunParams()
        vparams.addObjectIfDefined("storageProfile", storageProfile)
        self.client.queueServiceActionCall("storageprofile", "add", VidiunStorageProfile, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunStorageProfile)

    def updateStatus(self, storageId, status):
        vparams = VidiunParams()
        vparams.addIntIfDefined("storageId", storageId);
        vparams.addIntIfDefined("status", status);
        self.client.queueServiceActionCall("storageprofile", "updateStatus", None, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def get(self, storageProfileId):
        """Get storage profile by id"""

        vparams = VidiunParams()
        vparams.addIntIfDefined("storageProfileId", storageProfileId);
        self.client.queueServiceActionCall("storageprofile", "get", VidiunStorageProfile, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunStorageProfile)

    def update(self, storageProfileId, storageProfile):
        """Update storage profile by id"""

        vparams = VidiunParams()
        vparams.addIntIfDefined("storageProfileId", storageProfileId);
        vparams.addObjectIfDefined("storageProfile", storageProfile)
        self.client.queueServiceActionCall("storageprofile", "update", VidiunStorageProfile, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunStorageProfile)

    def list(self, filter = NotImplemented, pager = NotImplemented):
        vparams = VidiunParams()
        vparams.addObjectIfDefined("filter", filter)
        vparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("storageprofile", "list", VidiunStorageProfileListResponse, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunStorageProfileListResponse)


# @package Vidiun
# @subpackage Client
class VidiunSyndicationFeedService(VidiunServiceBase):
    """Add & Manage Syndication Feeds"""

    def __init__(self, client = None):
        VidiunServiceBase.__init__(self, client)

    def add(self, syndicationFeed):
        """Add new Syndication Feed"""

        vparams = VidiunParams()
        vparams.addObjectIfDefined("syndicationFeed", syndicationFeed)
        self.client.queueServiceActionCall("syndicationfeed", "add", VidiunBaseSyndicationFeed, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunBaseSyndicationFeed)

    def get(self, id):
        """Get Syndication Feed by ID"""

        vparams = VidiunParams()
        vparams.addStringIfDefined("id", id)
        self.client.queueServiceActionCall("syndicationfeed", "get", VidiunBaseSyndicationFeed, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunBaseSyndicationFeed)

    def update(self, id, syndicationFeed):
        """Update Syndication Feed by ID"""

        vparams = VidiunParams()
        vparams.addStringIfDefined("id", id)
        vparams.addObjectIfDefined("syndicationFeed", syndicationFeed)
        self.client.queueServiceActionCall("syndicationfeed", "update", VidiunBaseSyndicationFeed, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunBaseSyndicationFeed)

    def delete(self, id):
        """Delete Syndication Feed by ID"""

        vparams = VidiunParams()
        vparams.addStringIfDefined("id", id)
        self.client.queueServiceActionCall("syndicationfeed", "delete", None, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def list(self, filter = NotImplemented, pager = NotImplemented):
        """List Syndication Feeds by filter with paging support"""

        vparams = VidiunParams()
        vparams.addObjectIfDefined("filter", filter)
        vparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("syndicationfeed", "list", VidiunBaseSyndicationFeedListResponse, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunBaseSyndicationFeedListResponse)

    def getEntryCount(self, feedId):
        """get entry count for a syndication feed"""

        vparams = VidiunParams()
        vparams.addStringIfDefined("feedId", feedId)
        self.client.queueServiceActionCall("syndicationfeed", "getEntryCount", VidiunSyndicationFeedEntryCount, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunSyndicationFeedEntryCount)

    def requestConversion(self, feedId):
        """request conversion for all entries that doesnt have the required flavor param
        	 returns a comma-separated ids of conversion jobs"""

        vparams = VidiunParams()
        vparams.addStringIfDefined("feedId", feedId)
        self.client.queueServiceActionCall("syndicationfeed", "requestConversion", None, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeText(resultNode)


# @package Vidiun
# @subpackage Client
class VidiunSystemService(VidiunServiceBase):
    """System service is used for internal system helpers & to retrieve system level information"""

    def __init__(self, client = None):
        VidiunServiceBase.__init__(self, client)

    def ping(self):
        vparams = VidiunParams()
        self.client.queueServiceActionCall("system", "ping", None, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)

    def pingDatabase(self):
        vparams = VidiunParams()
        self.client.queueServiceActionCall("system", "pingDatabase", None, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)

    def getTime(self):
        vparams = VidiunParams()
        self.client.queueServiceActionCall("system", "getTime", None, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeInt(resultNode)

    def getVersion(self):
        vparams = VidiunParams()
        self.client.queueServiceActionCall("system", "getVersion", None, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeText(resultNode)


# @package Vidiun
# @subpackage Client
class VidiunThumbAssetService(VidiunServiceBase):
    """Retrieve information and invoke actions on Thumb Asset"""

    def __init__(self, client = None):
        VidiunServiceBase.__init__(self, client)

    def add(self, entryId, thumbAsset):
        """Add thumbnail asset"""

        vparams = VidiunParams()
        vparams.addStringIfDefined("entryId", entryId)
        vparams.addObjectIfDefined("thumbAsset", thumbAsset)
        self.client.queueServiceActionCall("thumbasset", "add", VidiunThumbAsset, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunThumbAsset)

    def setContent(self, id, contentResource):
        """Update content of thumbnail asset"""

        vparams = VidiunParams()
        vparams.addStringIfDefined("id", id)
        vparams.addObjectIfDefined("contentResource", contentResource)
        self.client.queueServiceActionCall("thumbasset", "setContent", VidiunThumbAsset, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunThumbAsset)

    def update(self, id, thumbAsset):
        """Update thumbnail asset"""

        vparams = VidiunParams()
        vparams.addStringIfDefined("id", id)
        vparams.addObjectIfDefined("thumbAsset", thumbAsset)
        self.client.queueServiceActionCall("thumbasset", "update", VidiunThumbAsset, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunThumbAsset)

    def serveByEntryId(self, entryId, thumbParamId = NotImplemented):
        """Serves thumbnail by entry id and thumnail params id"""

        vparams = VidiunParams()
        vparams.addStringIfDefined("entryId", entryId)
        vparams.addIntIfDefined("thumbParamId", thumbParamId);
        self.client.queueServiceActionCall('thumbasset', 'serveByEntryId', None ,vparams)
        return self.client.getServeUrl()

    def serve(self, thumbAssetId, version = NotImplemented, thumbParams = NotImplemented, options = NotImplemented):
        """Serves thumbnail by its id"""

        vparams = VidiunParams()
        vparams.addStringIfDefined("thumbAssetId", thumbAssetId)
        vparams.addIntIfDefined("version", version);
        vparams.addObjectIfDefined("thumbParams", thumbParams)
        vparams.addObjectIfDefined("options", options)
        self.client.queueServiceActionCall('thumbasset', 'serve', None ,vparams)
        return self.client.getServeUrl()

    def setAsDefault(self, thumbAssetId):
        """Tags the thumbnail as DEFAULT_THUMB and removes that tag from all other thumbnail assets of the entry.
        	 Create a new file sync link on the entry thumbnail that points to the thumbnail asset file sync."""

        vparams = VidiunParams()
        vparams.addStringIfDefined("thumbAssetId", thumbAssetId)
        self.client.queueServiceActionCall("thumbasset", "setAsDefault", None, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def generateByEntryId(self, entryId, destThumbParamsId):
        vparams = VidiunParams()
        vparams.addStringIfDefined("entryId", entryId)
        vparams.addIntIfDefined("destThumbParamsId", destThumbParamsId);
        self.client.queueServiceActionCall("thumbasset", "generateByEntryId", VidiunThumbAsset, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunThumbAsset)

    def generate(self, entryId, thumbParams, sourceAssetId = NotImplemented):
        vparams = VidiunParams()
        vparams.addStringIfDefined("entryId", entryId)
        vparams.addObjectIfDefined("thumbParams", thumbParams)
        vparams.addStringIfDefined("sourceAssetId", sourceAssetId)
        self.client.queueServiceActionCall("thumbasset", "generate", VidiunThumbAsset, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunThumbAsset)

    def regenerate(self, thumbAssetId):
        vparams = VidiunParams()
        vparams.addStringIfDefined("thumbAssetId", thumbAssetId)
        self.client.queueServiceActionCall("thumbasset", "regenerate", VidiunThumbAsset, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunThumbAsset)

    def get(self, thumbAssetId):
        vparams = VidiunParams()
        vparams.addStringIfDefined("thumbAssetId", thumbAssetId)
        self.client.queueServiceActionCall("thumbasset", "get", VidiunThumbAsset, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunThumbAsset)

    def getByEntryId(self, entryId):
        vparams = VidiunParams()
        vparams.addStringIfDefined("entryId", entryId)
        self.client.queueServiceActionCall("thumbasset", "getByEntryId", VidiunThumbAsset, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.createArray(resultNode, VidiunThumbAsset)

    def list(self, filter = NotImplemented, pager = NotImplemented):
        """List Thumbnail Assets by filter and pager"""

        vparams = VidiunParams()
        vparams.addObjectIfDefined("filter", filter)
        vparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("thumbasset", "list", VidiunThumbAssetListResponse, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunThumbAssetListResponse)

    def addFromUrl(self, entryId, url):
        vparams = VidiunParams()
        vparams.addStringIfDefined("entryId", entryId)
        vparams.addStringIfDefined("url", url)
        self.client.queueServiceActionCall("thumbasset", "addFromUrl", VidiunThumbAsset, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunThumbAsset)

    def addFromImage(self, entryId, fileData):
        vparams = VidiunParams()
        vparams.addStringIfDefined("entryId", entryId)
        vfiles = VidiunFiles()
        vfiles.put("fileData", fileData);
        self.client.queueServiceActionCall("thumbasset", "addFromImage", VidiunThumbAsset, vparams, vfiles)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunThumbAsset)

    def delete(self, thumbAssetId):
        vparams = VidiunParams()
        vparams.addStringIfDefined("thumbAssetId", thumbAssetId)
        self.client.queueServiceActionCall("thumbasset", "delete", None, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def getUrl(self, id, storageId = NotImplemented, thumbParams = NotImplemented):
        """Get download URL for the asset"""

        vparams = VidiunParams()
        vparams.addStringIfDefined("id", id)
        vparams.addIntIfDefined("storageId", storageId);
        vparams.addObjectIfDefined("thumbParams", thumbParams)
        self.client.queueServiceActionCall("thumbasset", "getUrl", None, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeText(resultNode)

    def getRemotePaths(self, id):
        """Get remote storage existing paths for the asset"""

        vparams = VidiunParams()
        vparams.addStringIfDefined("id", id)
        self.client.queueServiceActionCall("thumbasset", "getRemotePaths", VidiunRemotePathListResponse, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunRemotePathListResponse)

    def export(self, assetId, storageProfileId):
        """manually export an asset"""

        vparams = VidiunParams()
        vparams.addStringIfDefined("assetId", assetId)
        vparams.addIntIfDefined("storageProfileId", storageProfileId);
        self.client.queueServiceActionCall("thumbasset", "export", VidiunFlavorAsset, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunFlavorAsset)


# @package Vidiun
# @subpackage Client
class VidiunThumbParamsOutputService(VidiunServiceBase):
    """Thumbnail Params Output service"""

    def __init__(self, client = None):
        VidiunServiceBase.__init__(self, client)

    def get(self, id):
        """Get thumb params output object by ID"""

        vparams = VidiunParams()
        vparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("thumbparamsoutput", "get", VidiunThumbParamsOutput, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunThumbParamsOutput)

    def list(self, filter = NotImplemented, pager = NotImplemented):
        """List thumb params output objects by filter and pager"""

        vparams = VidiunParams()
        vparams.addObjectIfDefined("filter", filter)
        vparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("thumbparamsoutput", "list", VidiunThumbParamsOutputListResponse, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunThumbParamsOutputListResponse)


# @package Vidiun
# @subpackage Client
class VidiunThumbParamsService(VidiunServiceBase):
    """Add & Manage Thumb Params"""

    def __init__(self, client = None):
        VidiunServiceBase.__init__(self, client)

    def add(self, thumbParams):
        """Add new Thumb Params"""

        vparams = VidiunParams()
        vparams.addObjectIfDefined("thumbParams", thumbParams)
        self.client.queueServiceActionCall("thumbparams", "add", VidiunThumbParams, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunThumbParams)

    def get(self, id):
        """Get Thumb Params by ID"""

        vparams = VidiunParams()
        vparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("thumbparams", "get", VidiunThumbParams, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunThumbParams)

    def update(self, id, thumbParams):
        """Update Thumb Params by ID"""

        vparams = VidiunParams()
        vparams.addIntIfDefined("id", id);
        vparams.addObjectIfDefined("thumbParams", thumbParams)
        self.client.queueServiceActionCall("thumbparams", "update", VidiunThumbParams, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunThumbParams)

    def delete(self, id):
        """Delete Thumb Params by ID"""

        vparams = VidiunParams()
        vparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("thumbparams", "delete", None, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def list(self, filter = NotImplemented, pager = NotImplemented):
        """List Thumb Params by filter with paging support (By default - all system default params will be listed too)"""

        vparams = VidiunParams()
        vparams.addObjectIfDefined("filter", filter)
        vparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("thumbparams", "list", VidiunThumbParamsListResponse, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunThumbParamsListResponse)

    def getByConversionProfileId(self, conversionProfileId):
        """Get Thumb Params by Conversion Profile ID"""

        vparams = VidiunParams()
        vparams.addIntIfDefined("conversionProfileId", conversionProfileId);
        self.client.queueServiceActionCall("thumbparams", "getByConversionProfileId", VidiunThumbParams, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.createArray(resultNode, VidiunThumbParams)


# @package Vidiun
# @subpackage Client
class VidiunUiConfService(VidiunServiceBase):
    """UiConf service lets you create and manage your UIConfs for the various flash components
     This service is used by the VMC-ApplicationStudio"""

    def __init__(self, client = None):
        VidiunServiceBase.__init__(self, client)

    def add(self, uiConf):
        """UIConf Add action allows you to add a UIConf to Vidiun DB"""

        vparams = VidiunParams()
        vparams.addObjectIfDefined("uiConf", uiConf)
        self.client.queueServiceActionCall("uiconf", "add", VidiunUiConf, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunUiConf)

    def update(self, id, uiConf):
        """Update an existing UIConf"""

        vparams = VidiunParams()
        vparams.addIntIfDefined("id", id);
        vparams.addObjectIfDefined("uiConf", uiConf)
        self.client.queueServiceActionCall("uiconf", "update", VidiunUiConf, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunUiConf)

    def get(self, id):
        """Retrieve a UIConf by id"""

        vparams = VidiunParams()
        vparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("uiconf", "get", VidiunUiConf, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunUiConf)

    def delete(self, id):
        """Delete an existing UIConf"""

        vparams = VidiunParams()
        vparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("uiconf", "delete", None, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def clone(self, id):
        """Clone an existing UIConf"""

        vparams = VidiunParams()
        vparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("uiconf", "clone", VidiunUiConf, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunUiConf)

    def listTemplates(self, filter = NotImplemented, pager = NotImplemented):
        """retrieve a list of available template UIConfs"""

        vparams = VidiunParams()
        vparams.addObjectIfDefined("filter", filter)
        vparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("uiconf", "listTemplates", VidiunUiConfListResponse, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunUiConfListResponse)

    def list(self, filter = NotImplemented, pager = NotImplemented):
        """Retrieve a list of available UIConfs"""

        vparams = VidiunParams()
        vparams.addObjectIfDefined("filter", filter)
        vparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("uiconf", "list", VidiunUiConfListResponse, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunUiConfListResponse)

    def getAvailableTypes(self):
        """Retrieve a list of all available versions by object type"""

        vparams = VidiunParams()
        self.client.queueServiceActionCall("uiconf", "getAvailableTypes", VidiunUiConfTypeInfo, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.createArray(resultNode, VidiunUiConfTypeInfo)


# @package Vidiun
# @subpackage Client
class VidiunUploadService(VidiunServiceBase):
    def __init__(self, client = None):
        VidiunServiceBase.__init__(self, client)

    def upload(self, fileData):
        vparams = VidiunParams()
        vfiles = VidiunFiles()
        vfiles.put("fileData", fileData);
        self.client.queueServiceActionCall("upload", "upload", None, vparams, vfiles)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeText(resultNode)

    def getUploadedFileTokenByFileName(self, fileName):
        vparams = VidiunParams()
        vparams.addStringIfDefined("fileName", fileName)
        self.client.queueServiceActionCall("upload", "getUploadedFileTokenByFileName", VidiunUploadResponse, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunUploadResponse)


# @package Vidiun
# @subpackage Client
class VidiunUploadTokenService(VidiunServiceBase):
    def __init__(self, client = None):
        VidiunServiceBase.__init__(self, client)

    def add(self, uploadToken = NotImplemented):
        """Adds new upload token to upload a file"""

        vparams = VidiunParams()
        vparams.addObjectIfDefined("uploadToken", uploadToken)
        self.client.queueServiceActionCall("uploadtoken", "add", VidiunUploadToken, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode, header = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunUploadToken), header

    def get(self, uploadTokenId):
        """Get upload token by id"""

        vparams = VidiunParams()
        vparams.addStringIfDefined("uploadTokenId", uploadTokenId)
        self.client.queueServiceActionCall("uploadtoken", "get", VidiunUploadToken, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode, header = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunUploadToken), header

    def upload(self, uploadTokenId, fileData, resume = False, finalChunk = True, resumeAt = -1):
        """Upload a file using the upload token id, returns an error on failure (an exception will be thrown when using one of the Vidiun clients)
        	 Chunks can be uploaded in parallel and they will be appended according to their resumeAt position.
        	 A parallel upload session should have three stages:
        	 1. A single upload with resume=false and finalChunk=false
        	 2. Parallel upload requests each with resume=true,finalChunk=false and the expected resumetAt position.
        	 If a chunk fails to upload it can be re-uploaded.
        	 3. After all of the chunks have been uploaded a final chunk (can be of zero size) should be uploaded 
        	 with resume=true, finalChunk=true and the expected resumeAt position. In case an UPLOAD_TOKEN_CANNOT_MATCH_EXPECTED_SIZE exception
        	 has been returned (indicating not all of the chunks were appended yet) the final request can be retried."""

        vparams = VidiunParams()
        vparams.addStringIfDefined("uploadTokenId", uploadTokenId)
        vfiles = VidiunFiles()
        vfiles.put("fileData", fileData);
        vparams.addBoolIfDefined("resume", resume);
        vparams.addBoolIfDefined("finalChunk", finalChunk);
        vparams.addFloatIfDefined("resumeAt", resumeAt)
        self.client.queueServiceActionCall("uploadtoken", "upload", VidiunUploadToken, vparams, vfiles)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode , header= self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunUploadToken), header

    def delete(self, uploadTokenId):
        """Deletes the upload token by upload token id"""

        vparams = VidiunParams()
        vparams.addStringIfDefined("uploadTokenId", uploadTokenId)
        self.client.queueServiceActionCall("uploadtoken", "delete", None, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def list(self, filter = NotImplemented, pager = NotImplemented):
        """List upload token by filter with pager support. 
        	 When using a user session the service will be restricted to users objects only."""

        vparams = VidiunParams()
        vparams.addObjectIfDefined("filter", filter)
        vparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("uploadtoken", "list", VidiunUploadTokenListResponse, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode, header  = self.client.doQueue()
        return (VidiunObjectFactory.create(resultNode, VidiunUploadTokenListResponse), header)


# @package Vidiun
# @subpackage Client
class VidiunUserEntryService(VidiunServiceBase):
    def __init__(self, client = None):
        VidiunServiceBase.__init__(self, client)

    def add(self, userEntry):
        """Adds a user_entry to the Vidiun DB."""

        vparams = VidiunParams()
        vparams.addObjectIfDefined("userEntry", userEntry)
        self.client.queueServiceActionCall("userentry", "add", VidiunUserEntry, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunUserEntry)

    def update(self, id, userEntry):
        vparams = VidiunParams()
        vparams.addIntIfDefined("id", id);
        vparams.addObjectIfDefined("userEntry", userEntry)
        self.client.queueServiceActionCall("userentry", "update", None, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def delete(self, id):
        vparams = VidiunParams()
        vparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("userentry", "delete", VidiunUserEntry, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunUserEntry)

    def list(self, filter, pager = NotImplemented):
        vparams = VidiunParams()
        vparams.addObjectIfDefined("filter", filter)
        vparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("userentry", "list", VidiunUserEntryListResponse, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunUserEntryListResponse)

    def get(self, id):
        vparams = VidiunParams()
        vparams.addStringIfDefined("id", id)
        self.client.queueServiceActionCall("userentry", "get", VidiunUserEntry, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunUserEntry)

    def submitQuiz(self, id):
        """Submits the quiz so that it's status will be submitted and calculates the score for the quiz"""

        vparams = VidiunParams()
        vparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("userentry", "submitQuiz", VidiunQuizUserEntry, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunQuizUserEntry)


# @package Vidiun
# @subpackage Client
class VidiunUserRoleService(VidiunServiceBase):
    """UserRole service lets you create and manage user roles"""

    def __init__(self, client = None):
        VidiunServiceBase.__init__(self, client)

    def add(self, userRole):
        """Adds a new user role object to the account."""

        vparams = VidiunParams()
        vparams.addObjectIfDefined("userRole", userRole)
        self.client.queueServiceActionCall("userrole", "add", VidiunUserRole, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunUserRole)

    def get(self, userRoleId):
        """Retrieves a user role object using its ID."""

        vparams = VidiunParams()
        vparams.addIntIfDefined("userRoleId", userRoleId);
        self.client.queueServiceActionCall("userrole", "get", VidiunUserRole, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunUserRole)

    def update(self, userRoleId, userRole):
        """Updates an existing user role object."""

        vparams = VidiunParams()
        vparams.addIntIfDefined("userRoleId", userRoleId);
        vparams.addObjectIfDefined("userRole", userRole)
        self.client.queueServiceActionCall("userrole", "update", VidiunUserRole, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunUserRole)

    def delete(self, userRoleId):
        """Deletes an existing user role object."""

        vparams = VidiunParams()
        vparams.addIntIfDefined("userRoleId", userRoleId);
        self.client.queueServiceActionCall("userrole", "delete", VidiunUserRole, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunUserRole)

    def list(self, filter = NotImplemented, pager = NotImplemented):
        """Lists user role objects that are associated with an account.
        	 Blocked user roles are listed unless you use a filter to exclude them.
        	 Deleted user roles are not listed unless you use a filter to include them."""

        vparams = VidiunParams()
        vparams.addObjectIfDefined("filter", filter)
        vparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("userrole", "list", VidiunUserRoleListResponse, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunUserRoleListResponse)

    def clone(self, userRoleId):
        """Creates a new user role object that is a duplicate of an existing role."""

        vparams = VidiunParams()
        vparams.addIntIfDefined("userRoleId", userRoleId);
        self.client.queueServiceActionCall("userrole", "clone", VidiunUserRole, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunUserRole)


# @package Vidiun
# @subpackage Client
class VidiunUserService(VidiunServiceBase):
    """Manage partner users on Vidiun's side
     The userId in vidiun is the unique Id in the partner's system, and the [partnerId,Id] couple are unique key in vidiun's DB"""

    def __init__(self, client = None):
        VidiunServiceBase.__init__(self, client)

    def add(self, user):
        """Adds a new user to an existing account in the Vidiun database.
        	 Input param $id is the unique identifier in the partner's system."""

        vparams = VidiunParams()
        vparams.addObjectIfDefined("user", user)
        self.client.queueServiceActionCall("user", "add", VidiunUser, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunUser)

    def update(self, userId, user):
        """Updates an existing user object.
        	 You can also use this action to update the userId."""

        vparams = VidiunParams()
        vparams.addStringIfDefined("userId", userId)
        vparams.addObjectIfDefined("user", user)
        self.client.queueServiceActionCall("user", "update", VidiunUser, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunUser)

    def get(self, userId = NotImplemented):
        """Retrieves a user object for a specified user ID."""

        vparams = VidiunParams()
        vparams.addStringIfDefined("userId", userId)
        self.client.queueServiceActionCall("user", "get", VidiunUser, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunUser)

    def getByLoginId(self, loginId):
        """Retrieves a user object for a user's login ID and partner ID.
        	 A login ID is the email address used by a user to log into the system."""

        vparams = VidiunParams()
        vparams.addStringIfDefined("loginId", loginId)
        self.client.queueServiceActionCall("user", "getByLoginId", VidiunUser, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunUser)

    def delete(self, userId):
        """Deletes a user from a partner account."""

        vparams = VidiunParams()
        vparams.addStringIfDefined("userId", userId)
        self.client.queueServiceActionCall("user", "delete", VidiunUser, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunUser)

    def list(self, filter = NotImplemented, pager = NotImplemented):
        """Lists user objects that are associated with an account.
        	 Blocked users are listed unless you use a filter to exclude them.
        	 Deleted users are not listed unless you use a filter to include them."""

        vparams = VidiunParams()
        vparams.addObjectIfDefined("filter", filter)
        vparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("user", "list", VidiunUserListResponse, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunUserListResponse)

    def notifyBan(self, userId):
        """Notifies that a user is banned from an account."""

        vparams = VidiunParams()
        vparams.addStringIfDefined("userId", userId)
        self.client.queueServiceActionCall("user", "notifyBan", None, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def login(self, partnerId, userId, password, expiry = 86400, privileges = "*"):
        """Logs a user into a partner account with a partner ID, a partner user ID (puser), and a user password."""

        vparams = VidiunParams()
        vparams.addIntIfDefined("partnerId", partnerId);
        vparams.addStringIfDefined("userId", userId)
        vparams.addStringIfDefined("password", password)
        vparams.addIntIfDefined("expiry", expiry);
        vparams.addStringIfDefined("privileges", privileges)
        self.client.queueServiceActionCall("user", "login", None, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeText(resultNode)

    def loginByLoginId(self, loginId, password, partnerId = NotImplemented, expiry = 86400, privileges = "*"):
        """Logs a user into a partner account with a user login ID and a user password."""

        vparams = VidiunParams()
        vparams.addStringIfDefined("loginId", loginId)
        vparams.addStringIfDefined("password", password)
        vparams.addIntIfDefined("partnerId", partnerId);
        vparams.addIntIfDefined("expiry", expiry);
        vparams.addStringIfDefined("privileges", privileges)
        self.client.queueServiceActionCall("user", "loginByLoginId", None, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeText(resultNode)

    def updateLoginData(self, oldLoginId, password, newLoginId = "", newPassword = "", newFirstName = NotImplemented, newLastName = NotImplemented):
        """Updates a user's login data: email, password, name."""

        vparams = VidiunParams()
        vparams.addStringIfDefined("oldLoginId", oldLoginId)
        vparams.addStringIfDefined("password", password)
        vparams.addStringIfDefined("newLoginId", newLoginId)
        vparams.addStringIfDefined("newPassword", newPassword)
        vparams.addStringIfDefined("newFirstName", newFirstName)
        vparams.addStringIfDefined("newLastName", newLastName)
        self.client.queueServiceActionCall("user", "updateLoginData", None, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def resetPassword(self, email):
        """Reset user's password and send the user an email to generate a new one."""

        vparams = VidiunParams()
        vparams.addStringIfDefined("email", email)
        self.client.queueServiceActionCall("user", "resetPassword", None, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def setInitialPassword(self, hashKey, newPassword):
        """Set initial users password"""

        vparams = VidiunParams()
        vparams.addStringIfDefined("hashKey", hashKey)
        vparams.addStringIfDefined("newPassword", newPassword)
        self.client.queueServiceActionCall("user", "setInitialPassword", None, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def enableLogin(self, userId, loginId, password = NotImplemented):
        """Enables a user to log into a partner account using an email address and a password"""

        vparams = VidiunParams()
        vparams.addStringIfDefined("userId", userId)
        vparams.addStringIfDefined("loginId", loginId)
        vparams.addStringIfDefined("password", password)
        self.client.queueServiceActionCall("user", "enableLogin", VidiunUser, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunUser)

    def disableLogin(self, userId = NotImplemented, loginId = NotImplemented):
        """Disables a user's ability to log into a partner account using an email address and a password.
        	 You may use either a userId or a loginId parameter for this action."""

        vparams = VidiunParams()
        vparams.addStringIfDefined("userId", userId)
        vparams.addStringIfDefined("loginId", loginId)
        self.client.queueServiceActionCall("user", "disableLogin", VidiunUser, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunUser)

    def index(self, id, shouldUpdate = True):
        """Index an entry by id."""

        vparams = VidiunParams()
        vparams.addStringIfDefined("id", id)
        vparams.addBoolIfDefined("shouldUpdate", shouldUpdate);
        self.client.queueServiceActionCall("user", "index", None, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeText(resultNode)

    def addFromBulkUpload(self, fileData, bulkUploadData = NotImplemented, bulkUploadUserData = NotImplemented):
        vparams = VidiunParams()
        vfiles = VidiunFiles()
        vfiles.put("fileData", fileData);
        vparams.addObjectIfDefined("bulkUploadData", bulkUploadData)
        vparams.addObjectIfDefined("bulkUploadUserData", bulkUploadUserData)
        self.client.queueServiceActionCall("user", "addFromBulkUpload", VidiunBulkUpload, vparams, vfiles)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunBulkUpload)

    def checkLoginDataExists(self, filter):
        """Action which checks whther user login"""

        vparams = VidiunParams()
        vparams.addObjectIfDefined("filter", filter)
        self.client.queueServiceActionCall("user", "checkLoginDataExists", None, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)


# @package Vidiun
# @subpackage Client
class VidiunWidgetService(VidiunServiceBase):
    """widget service for full widget management"""

    def __init__(self, client = None):
        VidiunServiceBase.__init__(self, client)

    def add(self, widget):
        """Add new widget, can be attached to entry or vshow
        	 SourceWidget is ignored."""

        vparams = VidiunParams()
        vparams.addObjectIfDefined("widget", widget)
        self.client.queueServiceActionCall("widget", "add", VidiunWidget, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunWidget)

    def update(self, id, widget):
        """Update exisiting widget"""

        vparams = VidiunParams()
        vparams.addStringIfDefined("id", id)
        vparams.addObjectIfDefined("widget", widget)
        self.client.queueServiceActionCall("widget", "update", VidiunWidget, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunWidget)

    def get(self, id):
        """Get widget by id"""

        vparams = VidiunParams()
        vparams.addStringIfDefined("id", id)
        self.client.queueServiceActionCall("widget", "get", VidiunWidget, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunWidget)

    def clone(self, widget):
        """Add widget based on existing widget.
        	 Must provide valid sourceWidgetId"""

        vparams = VidiunParams()
        vparams.addObjectIfDefined("widget", widget)
        self.client.queueServiceActionCall("widget", "clone", VidiunWidget, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunWidget)

    def list(self, filter = NotImplemented, pager = NotImplemented):
        """Retrieve a list of available widget depends on the filter given"""

        vparams = VidiunParams()
        vparams.addObjectIfDefined("filter", filter)
        vparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("widget", "list", VidiunWidgetListResponse, vparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return VidiunObjectFactory.create(resultNode, VidiunWidgetListResponse)

########## main ##########
class VidiunCoreClient(VidiunClientPlugin):
    # VidiunCoreClient
    instance = None

    # @return VidiunCoreClient
    @staticmethod
    def get():
        if VidiunCoreClient.instance == None:
            VidiunCoreClient.instance = VidiunCoreClient()
        return VidiunCoreClient.instance

    # @return array<VidiunServiceBase>
    def getServices(self):
        return {
            'accessControlProfile': VidiunAccessControlProfileService,
            'accessControl': VidiunAccessControlService,
            'adminUser': VidiunAdminUserService,
            'analytics': VidiunAnalyticsService,
            'appToken': VidiunAppTokenService,
            'baseEntry': VidiunBaseEntryService,
            'bulkUpload': VidiunBulkUploadService,
            'categoryEntry': VidiunCategoryEntryService,
            'category': VidiunCategoryService,
            'categoryUser': VidiunCategoryUserService,
            'conversionProfileAssetParams': VidiunConversionProfileAssetParamsService,
            'conversionProfile': VidiunConversionProfileService,
            'data': VidiunDataService,
            'deliveryProfile': VidiunDeliveryProfileService,
            'EmailIngestionProfile': VidiunEmailIngestionProfileService,
            'entryServerNode': VidiunEntryServerNodeService,
            'fileAsset': VidiunFileAssetService,
            'flavorAsset': VidiunFlavorAssetService,
            'flavorParamsOutput': VidiunFlavorParamsOutputService,
            'flavorParams': VidiunFlavorParamsService,
            'groupUser': VidiunGroupUserService,
            'liveChannelSegment': VidiunLiveChannelSegmentService,
            'liveChannel': VidiunLiveChannelService,
            'liveReports': VidiunLiveReportsService,
            'liveStats': VidiunLiveStatsService,
            'liveStream': VidiunLiveStreamService,
            'mediaInfo': VidiunMediaInfoService,
            'media': VidiunMediaService,
            'mixing': VidiunMixingService,
            'notification': VidiunNotificationService,
            'partner': VidiunPartnerService,
            'permissionItem': VidiunPermissionItemService,
            'permission': VidiunPermissionService,
            'playlist': VidiunPlaylistService,
            'report': VidiunReportService,
            'responseProfile': VidiunResponseProfileService,
            'schema': VidiunSchemaService,
            'search': VidiunSearchService,
            'serverNode': VidiunServerNodeService,
            'session': VidiunSessionService,
            'stats': VidiunStatsService,
            'storageProfile': VidiunStorageProfileService,
            'syndicationFeed': VidiunSyndicationFeedService,
            'system': VidiunSystemService,
            'thumbAsset': VidiunThumbAssetService,
            'thumbParamsOutput': VidiunThumbParamsOutputService,
            'thumbParams': VidiunThumbParamsService,
            'uiConf': VidiunUiConfService,
            'upload': VidiunUploadService,
            'uploadToken': VidiunUploadTokenService,
            'userEntry': VidiunUserEntryService,
            'userRole': VidiunUserRoleService,
            'user': VidiunUserService,
            'widget': VidiunWidgetService,
        }

    def getEnums(self):
        return {
            'VidiunAppTokenStatus': VidiunAppTokenStatus,
            'VidiunAppearInListType': VidiunAppearInListType,
            'VidiunAssetParamsDeletePolicy': VidiunAssetParamsDeletePolicy,
            'VidiunAssetParamsOrigin': VidiunAssetParamsOrigin,
            'VidiunBatchJobErrorTypes': VidiunBatchJobErrorTypes,
            'VidiunBatchJobStatus': VidiunBatchJobStatus,
            'VidiunBitRateMode': VidiunBitRateMode,
            'VidiunCategoryEntryStatus': VidiunCategoryEntryStatus,
            'VidiunCategoryStatus': VidiunCategoryStatus,
            'VidiunCategoryUserPermissionLevel': VidiunCategoryUserPermissionLevel,
            'VidiunCategoryUserStatus': VidiunCategoryUserStatus,
            'VidiunCommercialUseType': VidiunCommercialUseType,
            'VidiunContributionPolicyType': VidiunContributionPolicyType,
            'VidiunControlPanelCommandStatus': VidiunControlPanelCommandStatus,
            'VidiunControlPanelCommandTargetType': VidiunControlPanelCommandTargetType,
            'VidiunControlPanelCommandType': VidiunControlPanelCommandType,
            'VidiunCountryRestrictionType': VidiunCountryRestrictionType,
            'VidiunDVRStatus': VidiunDVRStatus,
            'VidiunDeliveryStatus': VidiunDeliveryStatus,
            'VidiunDirectoryRestrictionType': VidiunDirectoryRestrictionType,
            'VidiunEditorType': VidiunEditorType,
            'VidiunEmailIngestionProfileStatus': VidiunEmailIngestionProfileStatus,
            'VidiunEntryModerationStatus': VidiunEntryModerationStatus,
            'VidiunEntryServerNodeStatus': VidiunEntryServerNodeStatus,
            'VidiunFeatureStatusType': VidiunFeatureStatusType,
            'VidiunFlavorAssetStatus': VidiunFlavorAssetStatus,
            'VidiunFlavorReadyBehaviorType': VidiunFlavorReadyBehaviorType,
            'VidiunGender': VidiunGender,
            'VidiunGroupUserStatus': VidiunGroupUserStatus,
            'VidiunInheritanceType': VidiunInheritanceType,
            'VidiunIpAddressRestrictionType': VidiunIpAddressRestrictionType,
            'VidiunLicenseType': VidiunLicenseType,
            'VidiunLimitFlavorsRestrictionType': VidiunLimitFlavorsRestrictionType,
            'VidiunLivePublishStatus': VidiunLivePublishStatus,
            'VidiunLiveReportExportType': VidiunLiveReportExportType,
            'VidiunLiveStatsEventType': VidiunLiveStatsEventType,
            'VidiunMailJobStatus': VidiunMailJobStatus,
            'VidiunMediaType': VidiunMediaType,
            'VidiunModerationFlagType': VidiunModerationFlagType,
            'VidiunMrssExtensionMode': VidiunMrssExtensionMode,
            'VidiunNotificationObjectType': VidiunNotificationObjectType,
            'VidiunNotificationStatus': VidiunNotificationStatus,
            'VidiunNotificationType': VidiunNotificationType,
            'VidiunNullableBoolean': VidiunNullableBoolean,
            'VidiunPartnerGroupType': VidiunPartnerGroupType,
            'VidiunPartnerStatus': VidiunPartnerStatus,
            'VidiunPartnerType': VidiunPartnerType,
            'VidiunPermissionStatus': VidiunPermissionStatus,
            'VidiunPermissionType': VidiunPermissionType,
            'VidiunPlaylistType': VidiunPlaylistType,
            'VidiunPrivacyType': VidiunPrivacyType,
            'VidiunRecordStatus': VidiunRecordStatus,
            'VidiunResponseProfileStatus': VidiunResponseProfileStatus,
            'VidiunResponseProfileType': VidiunResponseProfileType,
            'VidiunResponseType': VidiunResponseType,
            'VidiunSchedulerStatusType': VidiunSchedulerStatusType,
            'VidiunSearchOperatorType': VidiunSearchOperatorType,
            'VidiunSearchProviderType': VidiunSearchProviderType,
            'VidiunServerNodeStatus': VidiunServerNodeStatus,
            'VidiunSessionType': VidiunSessionType,
            'VidiunSiteRestrictionType': VidiunSiteRestrictionType,
            'VidiunStatsEventType': VidiunStatsEventType,
            'VidiunStatsFeatureType': VidiunStatsFeatureType,
            'VidiunStatsVmcEventType': VidiunStatsVmcEventType,
            'VidiunStorageProfileDeliveryStatus': VidiunStorageProfileDeliveryStatus,
            'VidiunStorageProfileReadyBehavior': VidiunStorageProfileReadyBehavior,
            'VidiunStorageProfileStatus': VidiunStorageProfileStatus,
            'VidiunSyndicationFeedStatus': VidiunSyndicationFeedStatus,
            'VidiunSyndicationFeedType': VidiunSyndicationFeedType,
            'VidiunThumbAssetStatus': VidiunThumbAssetStatus,
            'VidiunThumbCropType': VidiunThumbCropType,
            'VidiunUiConfCreationMode': VidiunUiConfCreationMode,
            'VidiunUiConfObjType': VidiunUiConfObjType,
            'VidiunUpdateMethodType': VidiunUpdateMethodType,
            'VidiunUploadErrorCode': VidiunUploadErrorCode,
            'VidiunUploadTokenStatus': VidiunUploadTokenStatus,
            'VidiunUserAgentRestrictionType': VidiunUserAgentRestrictionType,
            'VidiunUserJoinPolicyType': VidiunUserJoinPolicyType,
            'VidiunUserRoleStatus': VidiunUserRoleStatus,
            'VidiunUserStatus': VidiunUserStatus,
            'VidiunUserType': VidiunUserType,
            'VidiunWidgetSecurityType': VidiunWidgetSecurityType,
            'VidiunAccessControlOrderBy': VidiunAccessControlOrderBy,
            'VidiunAccessControlProfileOrderBy': VidiunAccessControlProfileOrderBy,
            'VidiunAdminUserOrderBy': VidiunAdminUserOrderBy,
            'VidiunAkamaiUniversalStreamType': VidiunAkamaiUniversalStreamType,
            'VidiunAmazonS3StorageProfileFilesPermissionLevel': VidiunAmazonS3StorageProfileFilesPermissionLevel,
            'VidiunAmazonS3StorageProfileOrderBy': VidiunAmazonS3StorageProfileOrderBy,
            'VidiunApiActionPermissionItemOrderBy': VidiunApiActionPermissionItemOrderBy,
            'VidiunApiParameterPermissionItemAction': VidiunApiParameterPermissionItemAction,
            'VidiunApiParameterPermissionItemOrderBy': VidiunApiParameterPermissionItemOrderBy,
            'VidiunAppTokenHashType': VidiunAppTokenHashType,
            'VidiunAppTokenOrderBy': VidiunAppTokenOrderBy,
            'VidiunAssetOrderBy': VidiunAssetOrderBy,
            'VidiunAssetParamsOrderBy': VidiunAssetParamsOrderBy,
            'VidiunAssetParamsOutputOrderBy': VidiunAssetParamsOutputOrderBy,
            'VidiunAssetType': VidiunAssetType,
            'VidiunAudioCodec': VidiunAudioCodec,
            'VidiunBaseEntryCloneOptions': VidiunBaseEntryCloneOptions,
            'VidiunBaseEntryCompareAttribute': VidiunBaseEntryCompareAttribute,
            'VidiunBaseEntryMatchAttribute': VidiunBaseEntryMatchAttribute,
            'VidiunBaseEntryOrderBy': VidiunBaseEntryOrderBy,
            'VidiunBaseSyndicationFeedOrderBy': VidiunBaseSyndicationFeedOrderBy,
            'VidiunBatchJobObjectType': VidiunBatchJobObjectType,
            'VidiunBatchJobOrderBy': VidiunBatchJobOrderBy,
            'VidiunBatchJobType': VidiunBatchJobType,
            'VidiunBulkUploadAction': VidiunBulkUploadAction,
            'VidiunBulkUploadObjectType': VidiunBulkUploadObjectType,
            'VidiunBulkUploadOrderBy': VidiunBulkUploadOrderBy,
            'VidiunBulkUploadResultStatus': VidiunBulkUploadResultStatus,
            'VidiunBulkUploadType': VidiunBulkUploadType,
            'VidiunCategoryEntryAdvancedOrderBy': VidiunCategoryEntryAdvancedOrderBy,
            'VidiunCategoryEntryOrderBy': VidiunCategoryEntryOrderBy,
            'VidiunCategoryIdentifierField': VidiunCategoryIdentifierField,
            'VidiunCategoryOrderBy': VidiunCategoryOrderBy,
            'VidiunCategoryUserOrderBy': VidiunCategoryUserOrderBy,
            'VidiunCloneComponentSelectorType': VidiunCloneComponentSelectorType,
            'VidiunConditionType': VidiunConditionType,
            'VidiunContainerFormat': VidiunContainerFormat,
            'VidiunContextType': VidiunContextType,
            'VidiunControlPanelCommandOrderBy': VidiunControlPanelCommandOrderBy,
            'VidiunConversionProfileAssetParamsOrderBy': VidiunConversionProfileAssetParamsOrderBy,
            'VidiunConversionProfileOrderBy': VidiunConversionProfileOrderBy,
            'VidiunConversionProfileStatus': VidiunConversionProfileStatus,
            'VidiunConversionProfileType': VidiunConversionProfileType,
            'VidiunDataEntryCompareAttribute': VidiunDataEntryCompareAttribute,
            'VidiunDataEntryMatchAttribute': VidiunDataEntryMatchAttribute,
            'VidiunDataEntryOrderBy': VidiunDataEntryOrderBy,
            'VidiunDeliveryProfileAkamaiAppleHttpManifestOrderBy': VidiunDeliveryProfileAkamaiAppleHttpManifestOrderBy,
            'VidiunDeliveryProfileAkamaiHdsOrderBy': VidiunDeliveryProfileAkamaiHdsOrderBy,
            'VidiunDeliveryProfileAkamaiHttpOrderBy': VidiunDeliveryProfileAkamaiHttpOrderBy,
            'VidiunDeliveryProfileGenericAppleHttpOrderBy': VidiunDeliveryProfileGenericAppleHttpOrderBy,
            'VidiunDeliveryProfileGenericHdsOrderBy': VidiunDeliveryProfileGenericHdsOrderBy,
            'VidiunDeliveryProfileGenericHttpOrderBy': VidiunDeliveryProfileGenericHttpOrderBy,
            'VidiunDeliveryProfileGenericRtmpOrderBy': VidiunDeliveryProfileGenericRtmpOrderBy,
            'VidiunDeliveryProfileGenericSilverLightOrderBy': VidiunDeliveryProfileGenericSilverLightOrderBy,
            'VidiunDeliveryProfileLiveAppleHttpOrderBy': VidiunDeliveryProfileLiveAppleHttpOrderBy,
            'VidiunDeliveryProfileOrderBy': VidiunDeliveryProfileOrderBy,
            'VidiunDeliveryProfileRtmpOrderBy': VidiunDeliveryProfileRtmpOrderBy,
            'VidiunDeliveryProfileType': VidiunDeliveryProfileType,
            'VidiunDeliveryServerNodeOrderBy': VidiunDeliveryServerNodeOrderBy,
            'VidiunDocumentEntryCompareAttribute': VidiunDocumentEntryCompareAttribute,
            'VidiunDocumentEntryMatchAttribute': VidiunDocumentEntryMatchAttribute,
            'VidiunDurationType': VidiunDurationType,
            'VidiunEdgeServerNodeOrderBy': VidiunEdgeServerNodeOrderBy,
            'VidiunEntryIdentifierField': VidiunEntryIdentifierField,
            'VidiunEntryReplacementStatus': VidiunEntryReplacementStatus,
            'VidiunEntryServerNodeOrderBy': VidiunEntryServerNodeOrderBy,
            'VidiunEntryServerNodeType': VidiunEntryServerNodeType,
            'VidiunEntryStatus': VidiunEntryStatus,
            'VidiunEntryType': VidiunEntryType,
            'VidiunExternalMediaEntryCompareAttribute': VidiunExternalMediaEntryCompareAttribute,
            'VidiunExternalMediaEntryMatchAttribute': VidiunExternalMediaEntryMatchAttribute,
            'VidiunFileAssetObjectType': VidiunFileAssetObjectType,
            'VidiunFileAssetOrderBy': VidiunFileAssetOrderBy,
            'VidiunFileAssetStatus': VidiunFileAssetStatus,
            'VidiunFileSyncObjectType': VidiunFileSyncObjectType,
            'VidiunFlavorAssetOrderBy': VidiunFlavorAssetOrderBy,
            'VidiunFlavorParamsOrderBy': VidiunFlavorParamsOrderBy,
            'VidiunFlavorParamsOutputOrderBy': VidiunFlavorParamsOutputOrderBy,
            'VidiunGenericSyndicationFeedOrderBy': VidiunGenericSyndicationFeedOrderBy,
            'VidiunGenericXsltSyndicationFeedOrderBy': VidiunGenericXsltSyndicationFeedOrderBy,
            'VidiunGeoCoderType': VidiunGeoCoderType,
            'VidiunGoogleSyndicationFeedAdultValues': VidiunGoogleSyndicationFeedAdultValues,
            'VidiunGoogleVideoSyndicationFeedOrderBy': VidiunGoogleVideoSyndicationFeedOrderBy,
            'VidiunGroupUserOrderBy': VidiunGroupUserOrderBy,
            'VidiunITunesSyndicationFeedAdultValues': VidiunITunesSyndicationFeedAdultValues,
            'VidiunITunesSyndicationFeedCategories': VidiunITunesSyndicationFeedCategories,
            'VidiunITunesSyndicationFeedOrderBy': VidiunITunesSyndicationFeedOrderBy,
            'VidiunLanguage': VidiunLanguage,
            'VidiunLanguageCode': VidiunLanguageCode,
            'VidiunLiveAssetOrderBy': VidiunLiveAssetOrderBy,
            'VidiunLiveChannelCompareAttribute': VidiunLiveChannelCompareAttribute,
            'VidiunLiveChannelMatchAttribute': VidiunLiveChannelMatchAttribute,
            'VidiunLiveChannelOrderBy': VidiunLiveChannelOrderBy,
            'VidiunLiveChannelSegmentOrderBy': VidiunLiveChannelSegmentOrderBy,
            'VidiunLiveChannelSegmentStatus': VidiunLiveChannelSegmentStatus,
            'VidiunLiveChannelSegmentTriggerType': VidiunLiveChannelSegmentTriggerType,
            'VidiunLiveChannelSegmentType': VidiunLiveChannelSegmentType,
            'VidiunLiveEntryCompareAttribute': VidiunLiveEntryCompareAttribute,
            'VidiunLiveEntryMatchAttribute': VidiunLiveEntryMatchAttribute,
            'VidiunLiveEntryOrderBy': VidiunLiveEntryOrderBy,
            'VidiunLiveEntryServerNodeOrderBy': VidiunLiveEntryServerNodeOrderBy,
            'VidiunLiveParamsOrderBy': VidiunLiveParamsOrderBy,
            'VidiunLiveReportOrderBy': VidiunLiveReportOrderBy,
            'VidiunLiveReportType': VidiunLiveReportType,
            'VidiunLiveStreamAdminEntryCompareAttribute': VidiunLiveStreamAdminEntryCompareAttribute,
            'VidiunLiveStreamAdminEntryMatchAttribute': VidiunLiveStreamAdminEntryMatchAttribute,
            'VidiunLiveStreamAdminEntryOrderBy': VidiunLiveStreamAdminEntryOrderBy,
            'VidiunLiveStreamEntryCompareAttribute': VidiunLiveStreamEntryCompareAttribute,
            'VidiunLiveStreamEntryMatchAttribute': VidiunLiveStreamEntryMatchAttribute,
            'VidiunLiveStreamEntryOrderBy': VidiunLiveStreamEntryOrderBy,
            'VidiunMailType': VidiunMailType,
            'VidiunMediaEntryCompareAttribute': VidiunMediaEntryCompareAttribute,
            'VidiunMediaEntryMatchAttribute': VidiunMediaEntryMatchAttribute,
            'VidiunMediaEntryOrderBy': VidiunMediaEntryOrderBy,
            'VidiunMediaFlavorParamsOrderBy': VidiunMediaFlavorParamsOrderBy,
            'VidiunMediaFlavorParamsOutputOrderBy': VidiunMediaFlavorParamsOutputOrderBy,
            'VidiunMediaInfoOrderBy': VidiunMediaInfoOrderBy,
            'VidiunMediaParserType': VidiunMediaParserType,
            'VidiunMediaServerNodeOrderBy': VidiunMediaServerNodeOrderBy,
            'VidiunMixEntryCompareAttribute': VidiunMixEntryCompareAttribute,
            'VidiunMixEntryMatchAttribute': VidiunMixEntryMatchAttribute,
            'VidiunMixEntryOrderBy': VidiunMixEntryOrderBy,
            'VidiunModerationFlagStatus': VidiunModerationFlagStatus,
            'VidiunModerationObjectType': VidiunModerationObjectType,
            'VidiunPartnerOrderBy': VidiunPartnerOrderBy,
            'VidiunPermissionItemOrderBy': VidiunPermissionItemOrderBy,
            'VidiunPermissionItemType': VidiunPermissionItemType,
            'VidiunPermissionOrderBy': VidiunPermissionOrderBy,
            'VidiunPlayableEntryCompareAttribute': VidiunPlayableEntryCompareAttribute,
            'VidiunPlayableEntryMatchAttribute': VidiunPlayableEntryMatchAttribute,
            'VidiunPlayableEntryOrderBy': VidiunPlayableEntryOrderBy,
            'VidiunPlaybackProtocol': VidiunPlaybackProtocol,
            'VidiunPlaylistCompareAttribute': VidiunPlaylistCompareAttribute,
            'VidiunPlaylistMatchAttribute': VidiunPlaylistMatchAttribute,
            'VidiunPlaylistOrderBy': VidiunPlaylistOrderBy,
            'VidiunQuizUserEntryOrderBy': VidiunQuizUserEntryOrderBy,
            'VidiunReportInterval': VidiunReportInterval,
            'VidiunReportOrderBy': VidiunReportOrderBy,
            'VidiunReportType': VidiunReportType,
            'VidiunResponseProfileOrderBy': VidiunResponseProfileOrderBy,
            'VidiunRuleActionType': VidiunRuleActionType,
            'VidiunSchemaType': VidiunSchemaType,
            'VidiunSearchConditionComparison': VidiunSearchConditionComparison,
            'VidiunServerNodeOrderBy': VidiunServerNodeOrderBy,
            'VidiunServerNodeType': VidiunServerNodeType,
            'VidiunSourceType': VidiunSourceType,
            'VidiunStorageProfileOrderBy': VidiunStorageProfileOrderBy,
            'VidiunStorageProfileProtocol': VidiunStorageProfileProtocol,
            'VidiunSyndicationFeedEntriesOrderBy': VidiunSyndicationFeedEntriesOrderBy,
            'VidiunTaggedObjectType': VidiunTaggedObjectType,
            'VidiunThumbAssetOrderBy': VidiunThumbAssetOrderBy,
            'VidiunThumbParamsOrderBy': VidiunThumbParamsOrderBy,
            'VidiunThumbParamsOutputOrderBy': VidiunThumbParamsOutputOrderBy,
            'VidiunTubeMogulSyndicationFeedCategories': VidiunTubeMogulSyndicationFeedCategories,
            'VidiunTubeMogulSyndicationFeedOrderBy': VidiunTubeMogulSyndicationFeedOrderBy,
            'VidiunUiConfOrderBy': VidiunUiConfOrderBy,
            'VidiunUploadTokenOrderBy': VidiunUploadTokenOrderBy,
            'VidiunUserEntryOrderBy': VidiunUserEntryOrderBy,
            'VidiunUserEntryStatus': VidiunUserEntryStatus,
            'VidiunUserEntryType': VidiunUserEntryType,
            'VidiunUserLoginDataOrderBy': VidiunUserLoginDataOrderBy,
            'VidiunUserOrderBy': VidiunUserOrderBy,
            'VidiunUserRoleOrderBy': VidiunUserRoleOrderBy,
            'VidiunVideoCodec': VidiunVideoCodec,
            'VidiunWidgetOrderBy': VidiunWidgetOrderBy,
            'VidiunYahooSyndicationFeedAdultValues': VidiunYahooSyndicationFeedAdultValues,
            'VidiunYahooSyndicationFeedCategories': VidiunYahooSyndicationFeedCategories,
            'VidiunYahooSyndicationFeedOrderBy': VidiunYahooSyndicationFeedOrderBy,
        }

    def getTypes(self):
        return {
            'KalturaListResponse': KalturaListResponse,
            'KalturaBaseRestriction': KalturaBaseRestriction,
            'KalturaAccessControl': KalturaAccessControl,
            'KalturaContextTypeHolder': KalturaContextTypeHolder,
            'KalturaAccessControlContextTypeHolder': KalturaAccessControlContextTypeHolder,
            'KalturaRuleAction': KalturaRuleAction,
            'KalturaCondition': KalturaCondition,
            'KalturaRule': KalturaRule,
            'KalturaAccessControlProfile': KalturaAccessControlProfile,
            'KalturaKeyValue': KalturaKeyValue,
            'KalturaAccessControlScope': KalturaAccessControlScope,
            'KalturaReportFilter': KalturaReportFilter,
            'KalturaAnalyticsFilter': KalturaAnalyticsFilter,
            'KalturaApiExceptionArg': KalturaApiExceptionArg,
            'KalturaAppToken': KalturaAppToken,
            'KalturaAsset': KalturaAsset,
            'KalturaString': KalturaString,
            'KalturaAssetParams': KalturaAssetParams,
            'KalturaResource': KalturaResource,
            'KalturaContentResource': KalturaContentResource,
            'KalturaAssetParamsResourceContainer': KalturaAssetParamsResourceContainer,
            'KalturaOperationAttributes': KalturaOperationAttributes,
            'KalturaBaseEntry': KalturaBaseEntry,
            'KalturaBaseEntryCloneOptionItem': KalturaBaseEntryCloneOptionItem,
            'KalturaBaseResponseProfile': KalturaBaseResponseProfile,
            'KalturaBaseSyndicationFeed': KalturaBaseSyndicationFeed,
            'KalturaJobData': KalturaJobData,
            'KalturaBatchHistoryData': KalturaBatchHistoryData,
            'KalturaBatchJob': KalturaBatchJob,
            'KalturaPlayerDeliveryType': KalturaPlayerDeliveryType,
            'KalturaPlayerEmbedCodeType': KalturaPlayerEmbedCodeType,
            'KalturaPartner': KalturaPartner,
            'KalturaValue': KalturaValue,
            'KalturaBooleanValue': KalturaBooleanValue,
            'KalturaBulkUploadPluginData': KalturaBulkUploadPluginData,
            'KalturaBulkUploadResult': KalturaBulkUploadResult,
            'KalturaBulkUpload': KalturaBulkUpload,
            'KalturaBulkUploadObjectData': KalturaBulkUploadObjectData,
            'KalturaCEError': KalturaCEError,
            'KalturaCategory': KalturaCategory,
            'KalturaCategoryEntry': KalturaCategoryEntry,
            'KalturaCategoryUser': KalturaCategoryUser,
            'KalturaClientConfiguration': KalturaClientConfiguration,
            'KalturaClientNotification': KalturaClientNotification,
            'KalturaContext': KalturaContext,
            'KalturaContextDataResult': KalturaContextDataResult,
            'KalturaControlPanelCommand': KalturaControlPanelCommand,
            'KalturaConversionAttribute': KalturaConversionAttribute,
            'KalturaCropDimensions': KalturaCropDimensions,
            'KalturaConversionProfile': KalturaConversionProfile,
            'KalturaConversionProfileAssetParams': KalturaConversionProfileAssetParams,
            'KalturaConvertCollectionFlavorData': KalturaConvertCollectionFlavorData,
            'KalturaCoordinate': KalturaCoordinate,
            'KalturaDataEntry': KalturaDataEntry,
            'KalturaUrlRecognizer': KalturaUrlRecognizer,
            'KalturaUrlTokenizer': KalturaUrlTokenizer,
            'KalturaDeliveryProfile': KalturaDeliveryProfile,
            'KalturaFileSyncDescriptor': KalturaFileSyncDescriptor,
            'KalturaDestFileSyncDescriptor': KalturaDestFileSyncDescriptor,
            'KalturaSearchItem': KalturaSearchItem,
            'KalturaFilter': KalturaFilter,
            'KalturaRelatedFilter': KalturaRelatedFilter,
            'KalturaFilterPager': KalturaFilterPager,
            'KalturaResponseProfileMapping': KalturaResponseProfileMapping,
            'KalturaDetachedResponseProfile': KalturaDetachedResponseProfile,
            'KalturaEmailIngestionProfile': KalturaEmailIngestionProfile,
            'KalturaStringValue': KalturaStringValue,
            'KalturaEntryReplacementOptions': KalturaEntryReplacementOptions,
            'KalturaEntryServerNode': KalturaEntryServerNode,
            'KalturaObjectIdentifier': KalturaObjectIdentifier,
            'KalturaExtendingItemMrssParameter': KalturaExtendingItemMrssParameter,
            'KalturaPlayableEntry': KalturaPlayableEntry,
            'KalturaMediaEntry': KalturaMediaEntry,
            'KalturaFeatureStatus': KalturaFeatureStatus,
            'KalturaFileAsset': KalturaFileAsset,
            'KalturaFlavorAsset': KalturaFlavorAsset,
            'KalturaFlavorAssetUrlOptions': KalturaFlavorAssetUrlOptions,
            'KalturaFlavorParams': KalturaFlavorParams,
            'KalturaFlavorAssetWithParams': KalturaFlavorAssetWithParams,
            'KalturaFlavorParamsOutput': KalturaFlavorParamsOutput,
            'KalturaSchedulerStatus': KalturaSchedulerStatus,
            'KalturaSchedulerConfig': KalturaSchedulerConfig,
            'KalturaSchedulerWorker': KalturaSchedulerWorker,
            'KalturaScheduler': KalturaScheduler,
            'KalturaGroupUser': KalturaGroupUser,
            'KalturaObject': KalturaObject,
            'KalturaIntegerValue': KalturaIntegerValue,
            'KalturaLiveStreamConfiguration': KalturaLiveStreamConfiguration,
            'KalturaLiveStreamPushPublishConfiguration': KalturaLiveStreamPushPublishConfiguration,
            'KalturaLiveEntryRecordingOptions': KalturaLiveEntryRecordingOptions,
            'KalturaLiveEntry': KalturaLiveEntry,
            'KalturaLiveChannel': KalturaLiveChannel,
            'KalturaLiveChannelSegment': KalturaLiveChannelSegment,
            'KalturaLiveReportExportParams': KalturaLiveReportExportParams,
            'KalturaLiveReportExportResponse': KalturaLiveReportExportResponse,
            'KalturaLiveReportInputFilter': KalturaLiveReportInputFilter,
            'KalturaLiveStats': KalturaLiveStats,
            'KalturaLiveStatsEvent': KalturaLiveStatsEvent,
            'KalturaLiveStreamBitrate': KalturaLiveStreamBitrate,
            'KalturaLiveStreamEntry': KalturaLiveStreamEntry,
            'KalturaLiveStreamParams': KalturaLiveStreamParams,
            'KalturaBaseEntryBaseFilter': KalturaBaseEntryBaseFilter,
            'KalturaBaseEntryFilter': KalturaBaseEntryFilter,
            'KalturaPlayableEntryBaseFilter': KalturaPlayableEntryBaseFilter,
            'KalturaPlayableEntryFilter': KalturaPlayableEntryFilter,
            'KalturaMediaEntryBaseFilter': KalturaMediaEntryBaseFilter,
            'KalturaMediaEntryFilter': KalturaMediaEntryFilter,
            'KalturaMediaEntryFilterForPlaylist': KalturaMediaEntryFilterForPlaylist,
            'KalturaMediaInfo': KalturaMediaInfo,
            'KalturaMixEntry': KalturaMixEntry,
            'KalturaModerationFlag': KalturaModerationFlag,
            'KalturaPartnerStatistics': KalturaPartnerStatistics,
            'KalturaPartnerUsage': KalturaPartnerUsage,
            'KalturaPermission': KalturaPermission,
            'KalturaPermissionItem': KalturaPermissionItem,
            'KalturaPlaylist': KalturaPlaylist,
            'KalturaPluginData': KalturaPluginData,
            'KalturaRemotePath': KalturaRemotePath,
            'KalturaUrlResource': KalturaUrlResource,
            'KalturaRemoteStorageResource': KalturaRemoteStorageResource,
            'KalturaReport': KalturaReport,
            'KalturaReportBaseTotal': KalturaReportBaseTotal,
            'KalturaReportGraph': KalturaReportGraph,
            'KalturaReportInputBaseFilter': KalturaReportInputBaseFilter,
            'KalturaReportResponse': KalturaReportResponse,
            'KalturaReportTable': KalturaReportTable,
            'KalturaReportTotal': KalturaReportTotal,
            'KalturaRequestConfiguration': KalturaRequestConfiguration,
            'KalturaResponseProfile': KalturaResponseProfile,
            'KalturaResponseProfileCacheRecalculateOptions': KalturaResponseProfileCacheRecalculateOptions,
            'KalturaResponseProfileCacheRecalculateResults': KalturaResponseProfileCacheRecalculateResults,
            'KalturaScope': KalturaScope,
            'KalturaSearch': KalturaSearch,
            'KalturaSearchAuthData': KalturaSearchAuthData,
            'KalturaSearchResult': KalturaSearchResult,
            'KalturaSearchResultResponse': KalturaSearchResultResponse,
            'KalturaServerNode': KalturaServerNode,
            'KalturaSessionInfo': KalturaSessionInfo,
            'KalturaSourceFileSyncDescriptor': KalturaSourceFileSyncDescriptor,
            'KalturaStartWidgetSessionResponse': KalturaStartWidgetSessionResponse,
            'KalturaStatsEvent': KalturaStatsEvent,
            'KalturaStatsKmcEvent': KalturaStatsKmcEvent,
            'KalturaStorageProfile': KalturaStorageProfile,
            'KalturaSyndicationFeedEntryCount': KalturaSyndicationFeedEntryCount,
            'KalturaThumbAsset': KalturaThumbAsset,
            'KalturaThumbParams': KalturaThumbParams,
            'KalturaThumbParamsOutput': KalturaThumbParamsOutput,
            'KalturaThumbnailServeOptions': KalturaThumbnailServeOptions,
            'KalturaUiConf': KalturaUiConf,
            'KalturaUiConfTypeInfo': KalturaUiConfTypeInfo,
            'KalturaUploadResponse': KalturaUploadResponse,
            'KalturaUploadToken': KalturaUploadToken,
            'KalturaUser': KalturaUser,
            'KalturaUserEntry': KalturaUserEntry,
            'KalturaUserLoginData': KalturaUserLoginData,
            'KalturaUserRole': KalturaUserRole,
            'KalturaWidget': KalturaWidget,
            'KalturaBatchJobBaseFilter': KalturaBatchJobBaseFilter,
            'KalturaBatchJobFilter': KalturaBatchJobFilter,
            'KalturaAccessControlBlockAction': KalturaAccessControlBlockAction,
            'KalturaAccessControlLimitDeliveryProfilesAction': KalturaAccessControlLimitDeliveryProfilesAction,
            'KalturaAccessControlLimitFlavorsAction': KalturaAccessControlLimitFlavorsAction,
            'KalturaAccessControlListResponse': KalturaAccessControlListResponse,
            'KalturaAccessControlModifyRequestHostRegexAction': KalturaAccessControlModifyRequestHostRegexAction,
            'KalturaAccessControlPreviewAction': KalturaAccessControlPreviewAction,
            'KalturaAccessControlProfileListResponse': KalturaAccessControlProfileListResponse,
            'KalturaAccessControlServeRemoteEdgeServerAction': KalturaAccessControlServeRemoteEdgeServerAction,
            'KalturaAdminUser': KalturaAdminUser,
            'KalturaAmazonS3StorageProfile': KalturaAmazonS3StorageProfile,
            'KalturaApiActionPermissionItem': KalturaApiActionPermissionItem,
            'KalturaApiParameterPermissionItem': KalturaApiParameterPermissionItem,
            'KalturaAppTokenBaseFilter': KalturaAppTokenBaseFilter,
            'KalturaAppTokenListResponse': KalturaAppTokenListResponse,
            'KalturaAssetParamsOutput': KalturaAssetParamsOutput,
            'KalturaAssetPropertiesCompareCondition': KalturaAssetPropertiesCompareCondition,
            'KalturaAssetsParamsResourceContainers': KalturaAssetsParamsResourceContainers,
            'KalturaAttributeCondition': KalturaAttributeCondition,
            'KalturaAuthenticatedCondition': KalturaAuthenticatedCondition,
            'KalturaBaseEntryCloneOptionComponent': KalturaBaseEntryCloneOptionComponent,
            'KalturaBaseEntryListResponse': KalturaBaseEntryListResponse,
            'KalturaBaseSyndicationFeedBaseFilter': KalturaBaseSyndicationFeedBaseFilter,
            'KalturaBaseSyndicationFeedListResponse': KalturaBaseSyndicationFeedListResponse,
            'KalturaBatchJobListResponse': KalturaBatchJobListResponse,
            'KalturaBulkDownloadJobData': KalturaBulkDownloadJobData,
            'KalturaBulkUploadBaseFilter': KalturaBulkUploadBaseFilter,
            'KalturaBulkUploadCategoryData': KalturaBulkUploadCategoryData,
            'KalturaBulkUploadCategoryEntryData': KalturaBulkUploadCategoryEntryData,
            'KalturaBulkUploadCategoryUserData': KalturaBulkUploadCategoryUserData,
            'KalturaBulkUploadEntryData': KalturaBulkUploadEntryData,
            'KalturaBulkUploadJobData': KalturaBulkUploadJobData,
            'KalturaBulkUploadListResponse': KalturaBulkUploadListResponse,
            'KalturaBulkUploadResultCategory': KalturaBulkUploadResultCategory,
            'KalturaBulkUploadResultCategoryEntry': KalturaBulkUploadResultCategoryEntry,
            'KalturaBulkUploadResultCategoryUser': KalturaBulkUploadResultCategoryUser,
            'KalturaBulkUploadResultEntry': KalturaBulkUploadResultEntry,
            'KalturaBulkUploadResultUser': KalturaBulkUploadResultUser,
            'KalturaBulkUploadUserData': KalturaBulkUploadUserData,
            'KalturaCaptureThumbJobData': KalturaCaptureThumbJobData,
            'KalturaCategoryEntryAdvancedFilter': KalturaCategoryEntryAdvancedFilter,
            'KalturaCategoryEntryListResponse': KalturaCategoryEntryListResponse,
            'KalturaCategoryIdentifier': KalturaCategoryIdentifier,
            'KalturaCategoryListResponse': KalturaCategoryListResponse,
            'KalturaCategoryUserAdvancedFilter': KalturaCategoryUserAdvancedFilter,
            'KalturaCategoryUserListResponse': KalturaCategoryUserListResponse,
            'KalturaClipAttributes': KalturaClipAttributes,
            'KalturaCompareCondition': KalturaCompareCondition,
            'KalturaDataCenterContentResource': KalturaDataCenterContentResource,
            'KalturaConcatAttributes': KalturaConcatAttributes,
            'KalturaConcatJobData': KalturaConcatJobData,
            'KalturaControlPanelCommandBaseFilter': KalturaControlPanelCommandBaseFilter,
            'KalturaControlPanelCommandListResponse': KalturaControlPanelCommandListResponse,
            'KalturaConvartableJobData': KalturaConvartableJobData,
            'KalturaConversionProfileAssetParamsListResponse': KalturaConversionProfileAssetParamsListResponse,
            'KalturaConversionProfileListResponse': KalturaConversionProfileListResponse,
            'KalturaConvertLiveSegmentJobData': KalturaConvertLiveSegmentJobData,
            'KalturaConvertProfileJobData': KalturaConvertProfileJobData,
            'KalturaCopyPartnerJobData': KalturaCopyPartnerJobData,
            'KalturaCountryRestriction': KalturaCountryRestriction,
            'KalturaDataListResponse': KalturaDataListResponse,
            'KalturaDeleteFileJobData': KalturaDeleteFileJobData,
            'KalturaDeleteJobData': KalturaDeleteJobData,
            'KalturaDeliveryProfileAkamaiAppleHttpManifest': KalturaDeliveryProfileAkamaiAppleHttpManifest,
            'KalturaDeliveryProfileAkamaiHds': KalturaDeliveryProfileAkamaiHds,
            'KalturaDeliveryProfileAkamaiHttp': KalturaDeliveryProfileAkamaiHttp,
            'KalturaDeliveryProfileBaseFilter': KalturaDeliveryProfileBaseFilter,
            'KalturaDeliveryProfileCondition': KalturaDeliveryProfileCondition,
            'KalturaDeliveryProfileGenericAppleHttp': KalturaDeliveryProfileGenericAppleHttp,
            'KalturaDeliveryProfileGenericHds': KalturaDeliveryProfileGenericHds,
            'KalturaDeliveryProfileGenericHttp': KalturaDeliveryProfileGenericHttp,
            'KalturaDeliveryProfileGenericSilverLight': KalturaDeliveryProfileGenericSilverLight,
            'KalturaDeliveryProfileListResponse': KalturaDeliveryProfileListResponse,
            'KalturaDeliveryProfileLiveAppleHttp': KalturaDeliveryProfileLiveAppleHttp,
            'KalturaDeliveryProfileRtmp': KalturaDeliveryProfileRtmp,
            'KalturaDeliveryServerNode': KalturaDeliveryServerNode,
            'KalturaDirectoryRestriction': KalturaDirectoryRestriction,
            'KalturaDrmEntryContextPluginData': KalturaDrmEntryContextPluginData,
            'KalturaCategoryUserBaseFilter': KalturaCategoryUserBaseFilter,
            'KalturaCategoryUserFilter': KalturaCategoryUserFilter,
            'KalturaUserBaseFilter': KalturaUserBaseFilter,
            'KalturaUserFilter': KalturaUserFilter,
            'KalturaEntryContext': KalturaEntryContext,
            'KalturaEntryContextDataParams': KalturaEntryContextDataParams,
            'KalturaEntryContextDataResult': KalturaEntryContextDataResult,
            'KalturaEntryCuePointSearchFilter': KalturaEntryCuePointSearchFilter,
            'KalturaEntryIdentifier': KalturaEntryIdentifier,
            'KalturaEntryLiveStats': KalturaEntryLiveStats,
            'KalturaEntryServerNodeListResponse': KalturaEntryServerNodeListResponse,
            'KalturaBooleanField': KalturaBooleanField,
            'KalturaFeatureStatusListResponse': KalturaFeatureStatusListResponse,
            'KalturaFileAssetListResponse': KalturaFileAssetListResponse,
            'KalturaFlattenJobData': KalturaFlattenJobData,
            'KalturaFlavorAssetListResponse': KalturaFlavorAssetListResponse,
            'KalturaFlavorParamsListResponse': KalturaFlavorParamsListResponse,
            'KalturaFlavorParamsOutputListResponse': KalturaFlavorParamsOutputListResponse,
            'KalturaGenericSyndicationFeed': KalturaGenericSyndicationFeed,
            'KalturaGoogleVideoSyndicationFeed': KalturaGoogleVideoSyndicationFeed,
            'KalturaGroupUserListResponse': KalturaGroupUserListResponse,
            'KalturaHashCondition': KalturaHashCondition,
            'KalturaITunesSyndicationFeed': KalturaITunesSyndicationFeed,
            'KalturaImportJobData': KalturaImportJobData,
            'KalturaIndexAdvancedFilter': KalturaIndexAdvancedFilter,
            'KalturaIndexJobData': KalturaIndexJobData,
            'KalturaIpAddressRestriction': KalturaIpAddressRestriction,
            'KalturaLimitFlavorsRestriction': KalturaLimitFlavorsRestriction,
            'KalturaLiveChannelListResponse': KalturaLiveChannelListResponse,
            'KalturaLiveChannelSegmentListResponse': KalturaLiveChannelSegmentListResponse,
            'KalturaLiveEntryServerNode': KalturaLiveEntryServerNode,
            'KalturaLiveReportExportJobData': KalturaLiveReportExportJobData,
            'KalturaLiveStatsListResponse': KalturaLiveStatsListResponse,
            'KalturaLiveStreamListResponse': KalturaLiveStreamListResponse,
            'KalturaLiveStreamPushPublishRTMPConfiguration': KalturaLiveStreamPushPublishRTMPConfiguration,
            'KalturaMailJobData': KalturaMailJobData,
            'KalturaMatchCondition': KalturaMatchCondition,
            'KalturaMediaInfoBaseFilter': KalturaMediaInfoBaseFilter,
            'KalturaMediaInfoListResponse': KalturaMediaInfoListResponse,
            'KalturaMediaListResponse': KalturaMediaListResponse,
            'KalturaMixListResponse': KalturaMixListResponse,
            'KalturaModerationFlagListResponse': KalturaModerationFlagListResponse,
            'KalturaMoveCategoryEntriesJobData': KalturaMoveCategoryEntriesJobData,
            'KalturaNotificationJobData': KalturaNotificationJobData,
            'KalturaObjectListResponse': KalturaObjectListResponse,
            'KalturaOrCondition': KalturaOrCondition,
            'KalturaPartnerBaseFilter': KalturaPartnerBaseFilter,
            'KalturaPartnerListResponse': KalturaPartnerListResponse,
            'KalturaPermissionItemListResponse': KalturaPermissionItemListResponse,
            'KalturaPermissionListResponse': KalturaPermissionListResponse,
            'KalturaPlaylistListResponse': KalturaPlaylistListResponse,
            'KalturaProvisionJobData': KalturaProvisionJobData,
            'KalturaQuizUserEntry': KalturaQuizUserEntry,
            'KalturaRecalculateCacheJobData': KalturaRecalculateCacheJobData,
            'KalturaRemotePathListResponse': KalturaRemotePathListResponse,
            'KalturaReportBaseFilter': KalturaReportBaseFilter,
            'KalturaReportInputFilter': KalturaReportInputFilter,
            'KalturaReportListResponse': KalturaReportListResponse,
            'KalturaResponseProfileBaseFilter': KalturaResponseProfileBaseFilter,
            'KalturaResponseProfileHolder': KalturaResponseProfileHolder,
            'KalturaResponseProfileListResponse': KalturaResponseProfileListResponse,
            'KalturaSchedulerListResponse': KalturaSchedulerListResponse,
            'KalturaSchedulerWorkerListResponse': KalturaSchedulerWorkerListResponse,
            'KalturaSearchCondition': KalturaSearchCondition,
            'KalturaSearchOperator': KalturaSearchOperator,
            'KalturaServerNodeBaseFilter': KalturaServerNodeBaseFilter,
            'KalturaServerNodeListResponse': KalturaServerNodeListResponse,
            'KalturaSessionRestriction': KalturaSessionRestriction,
            'KalturaSiteRestriction': KalturaSiteRestriction,
            'KalturaStorageAddAction': KalturaStorageAddAction,
            'KalturaStorageJobData': KalturaStorageJobData,
            'KalturaStorageProfileBaseFilter': KalturaStorageProfileBaseFilter,
            'KalturaStorageProfileListResponse': KalturaStorageProfileListResponse,
            'KalturaSyncCategoryPrivacyContextJobData': KalturaSyncCategoryPrivacyContextJobData,
            'KalturaThumbAssetListResponse': KalturaThumbAssetListResponse,
            'KalturaThumbParamsListResponse': KalturaThumbParamsListResponse,
            'KalturaThumbParamsOutputListResponse': KalturaThumbParamsOutputListResponse,
            'KalturaTubeMogulSyndicationFeed': KalturaTubeMogulSyndicationFeed,
            'KalturaUiConfBaseFilter': KalturaUiConfBaseFilter,
            'KalturaUiConfListResponse': KalturaUiConfListResponse,
            'KalturaUploadTokenBaseFilter': KalturaUploadTokenBaseFilter,
            'KalturaUploadTokenListResponse': KalturaUploadTokenListResponse,
            'KalturaUrlRecognizerAkamaiG2O': KalturaUrlRecognizerAkamaiG2O,
            'KalturaUrlTokenizerAkamaiHttp': KalturaUrlTokenizerAkamaiHttp,
            'KalturaUrlTokenizerAkamaiRtmp': KalturaUrlTokenizerAkamaiRtmp,
            'KalturaUrlTokenizerAkamaiRtsp': KalturaUrlTokenizerAkamaiRtsp,
            'KalturaUrlTokenizerAkamaiSecureHd': KalturaUrlTokenizerAkamaiSecureHd,
            'KalturaUrlTokenizerBitGravity': KalturaUrlTokenizerBitGravity,
            'KalturaUrlTokenizerCloudFront': KalturaUrlTokenizerCloudFront,
            'KalturaUrlTokenizerLevel3': KalturaUrlTokenizerLevel3,
            'KalturaUrlTokenizerLimeLight': KalturaUrlTokenizerLimeLight,
            'KalturaUrlTokenizerUplynk': KalturaUrlTokenizerUplynk,
            'KalturaUrlTokenizerVelocix': KalturaUrlTokenizerVelocix,
            'KalturaUrlTokenizerVnpt': KalturaUrlTokenizerVnpt,
            'KalturaUserAgentRestriction': KalturaUserAgentRestriction,
            'KalturaUserEntryListResponse': KalturaUserEntryListResponse,
            'KalturaUserListResponse': KalturaUserListResponse,
            'KalturaUserLoginDataListResponse': KalturaUserLoginDataListResponse,
            'KalturaUserRoleCondition': KalturaUserRoleCondition,
            'KalturaUserRoleListResponse': KalturaUserRoleListResponse,
            'KalturaValidateActiveEdgeCondition': KalturaValidateActiveEdgeCondition,
            'KalturaWidgetBaseFilter': KalturaWidgetBaseFilter,
            'KalturaWidgetListResponse': KalturaWidgetListResponse,
            'KalturaYahooSyndicationFeed': KalturaYahooSyndicationFeed,
            'KalturaAccessControlBaseFilter': KalturaAccessControlBaseFilter,
            'KalturaAccessControlProfileBaseFilter': KalturaAccessControlProfileBaseFilter,
            'KalturaAkamaiProvisionJobData': KalturaAkamaiProvisionJobData,
            'KalturaAkamaiUniversalProvisionJobData': KalturaAkamaiUniversalProvisionJobData,
            'KalturaAppTokenFilter': KalturaAppTokenFilter,
            'KalturaAssetBaseFilter': KalturaAssetBaseFilter,
            'KalturaAssetParamsBaseFilter': KalturaAssetParamsBaseFilter,
            'KalturaAssetResource': KalturaAssetResource,
            'KalturaBaseSyndicationFeedFilter': KalturaBaseSyndicationFeedFilter,
            'KalturaBulkUploadFilter': KalturaBulkUploadFilter,
            'KalturaCategoryBaseFilter': KalturaCategoryBaseFilter,
            'KalturaCategoryEntryBaseFilter': KalturaCategoryEntryBaseFilter,
            'KalturaControlPanelCommandFilter': KalturaControlPanelCommandFilter,
            'KalturaConversionProfileAssetParamsBaseFilter': KalturaConversionProfileAssetParamsBaseFilter,
            'KalturaConversionProfileBaseFilter': KalturaConversionProfileBaseFilter,
            'KalturaConvertCollectionJobData': KalturaConvertCollectionJobData,
            'KalturaConvertJobData': KalturaConvertJobData,
            'KalturaCountryCondition': KalturaCountryCondition,
            'KalturaDeliveryProfileFilter': KalturaDeliveryProfileFilter,
            'KalturaDeliveryProfileGenericRtmp': KalturaDeliveryProfileGenericRtmp,
            'KalturaEdgeServerNode': KalturaEdgeServerNode,
            'KalturaEndUserReportInputFilter': KalturaEndUserReportInputFilter,
            'KalturaEntryReferrerLiveStats': KalturaEntryReferrerLiveStats,
            'KalturaEntryResource': KalturaEntryResource,
            'KalturaEntryServerNodeBaseFilter': KalturaEntryServerNodeBaseFilter,
            'KalturaExtractMediaJobData': KalturaExtractMediaJobData,
            'KalturaIntegerField': KalturaIntegerField,
            'KalturaFieldCompareCondition': KalturaFieldCompareCondition,
            'KalturaStringField': KalturaStringField,
            'KalturaFieldMatchCondition': KalturaFieldMatchCondition,
            'KalturaFileAssetBaseFilter': KalturaFileAssetBaseFilter,
            'KalturaFileSyncResource': KalturaFileSyncResource,
            'KalturaGenericXsltSyndicationFeed': KalturaGenericXsltSyndicationFeed,
            'KalturaGeoDistanceCondition': KalturaGeoDistanceCondition,
            'KalturaGeoTimeLiveStats': KalturaGeoTimeLiveStats,
            'KalturaGroupUserBaseFilter': KalturaGroupUserBaseFilter,
            'KalturaIpAddressCondition': KalturaIpAddressCondition,
            'KalturaLiveAsset': KalturaLiveAsset,
            'KalturaLiveChannelSegmentBaseFilter': KalturaLiveChannelSegmentBaseFilter,
            'KalturaLiveParams': KalturaLiveParams,
            'KalturaMediaFlavorParams': KalturaMediaFlavorParams,
            'KalturaMediaInfoFilter': KalturaMediaInfoFilter,
            'KalturaMediaServerNode': KalturaMediaServerNode,
            'KalturaOperationResource': KalturaOperationResource,
            'KalturaPartnerFilter': KalturaPartnerFilter,
            'KalturaPermissionBaseFilter': KalturaPermissionBaseFilter,
            'KalturaPermissionItemBaseFilter': KalturaPermissionItemBaseFilter,
            'KalturaPostConvertJobData': KalturaPostConvertJobData,
            'KalturaPreviewRestriction': KalturaPreviewRestriction,
            'KalturaRecalculateResponseProfileCacheJobData': KalturaRecalculateResponseProfileCacheJobData,
            'KalturaRegexCondition': KalturaRegexCondition,
            'KalturaRemoteStorageResources': KalturaRemoteStorageResources,
            'KalturaResponseProfileFilter': KalturaResponseProfileFilter,
            'KalturaSearchComparableAttributeCondition': KalturaSearchComparableAttributeCondition,
            'KalturaSearchComparableCondition': KalturaSearchComparableCondition,
            'KalturaSearchMatchAttributeCondition': KalturaSearchMatchAttributeCondition,
            'KalturaSearchMatchCondition': KalturaSearchMatchCondition,
            'KalturaServerNodeFilter': KalturaServerNodeFilter,
            'KalturaSiteCondition': KalturaSiteCondition,
            'KalturaSshImportJobData': KalturaSshImportJobData,
            'KalturaStorageDeleteJobData': KalturaStorageDeleteJobData,
            'KalturaStorageExportJobData': KalturaStorageExportJobData,
            'KalturaStorageProfileFilter': KalturaStorageProfileFilter,
            'KalturaStringResource': KalturaStringResource,
            'KalturaUiConfFilter': KalturaUiConfFilter,
            'KalturaUploadTokenFilter': KalturaUploadTokenFilter,
            'KalturaUserEntryBaseFilter': KalturaUserEntryBaseFilter,
            'KalturaUserLoginDataBaseFilter': KalturaUserLoginDataBaseFilter,
            'KalturaUserRoleBaseFilter': KalturaUserRoleBaseFilter,
            'KalturaWidgetFilter': KalturaWidgetFilter,
            'KalturaAccessControlFilter': KalturaAccessControlFilter,
            'KalturaAccessControlProfileFilter': KalturaAccessControlProfileFilter,
            'KalturaAmazonS3StorageExportJobData': KalturaAmazonS3StorageExportJobData,
            'KalturaAmazonS3StorageProfileBaseFilter': KalturaAmazonS3StorageProfileBaseFilter,
            'KalturaAssetFilter': KalturaAssetFilter,
            'KalturaAssetParamsFilter': KalturaAssetParamsFilter,
            'KalturaBaseEntryCompareAttributeCondition': KalturaBaseEntryCompareAttributeCondition,
            'KalturaBaseEntryMatchAttributeCondition': KalturaBaseEntryMatchAttributeCondition,
            'KalturaBatchJobFilterExt': KalturaBatchJobFilterExt,
            'KalturaCategoryEntryFilter': KalturaCategoryEntryFilter,
            'KalturaCategoryFilter': KalturaCategoryFilter,
            'KalturaConversionProfileFilter': KalturaConversionProfileFilter,
            'KalturaConversionProfileAssetParamsFilter': KalturaConversionProfileAssetParamsFilter,
            'KalturaCoordinatesContextField': KalturaCoordinatesContextField,
            'KalturaCountryContextField': KalturaCountryContextField,
            'KalturaDataEntryCompareAttributeCondition': KalturaDataEntryCompareAttributeCondition,
            'KalturaDataEntryMatchAttributeCondition': KalturaDataEntryMatchAttributeCondition,
            'KalturaDeliveryProfileAkamaiAppleHttpManifestBaseFilter': KalturaDeliveryProfileAkamaiAppleHttpManifestBaseFilter,
            'KalturaDeliveryProfileAkamaiHdsBaseFilter': KalturaDeliveryProfileAkamaiHdsBaseFilter,
            'KalturaDeliveryProfileAkamaiHttpBaseFilter': KalturaDeliveryProfileAkamaiHttpBaseFilter,
            'KalturaDeliveryProfileGenericAppleHttpBaseFilter': KalturaDeliveryProfileGenericAppleHttpBaseFilter,
            'KalturaDeliveryProfileGenericHdsBaseFilter': KalturaDeliveryProfileGenericHdsBaseFilter,
            'KalturaDeliveryProfileGenericHttpBaseFilter': KalturaDeliveryProfileGenericHttpBaseFilter,
            'KalturaDeliveryProfileGenericSilverLightBaseFilter': KalturaDeliveryProfileGenericSilverLightBaseFilter,
            'KalturaDeliveryProfileLiveAppleHttpBaseFilter': KalturaDeliveryProfileLiveAppleHttpBaseFilter,
            'KalturaDeliveryProfileRtmpBaseFilter': KalturaDeliveryProfileRtmpBaseFilter,
            'KalturaDeliveryServerNodeBaseFilter': KalturaDeliveryServerNodeBaseFilter,
            'KalturaDocumentEntryCompareAttributeCondition': KalturaDocumentEntryCompareAttributeCondition,
            'KalturaDocumentEntryMatchAttributeCondition': KalturaDocumentEntryMatchAttributeCondition,
            'KalturaEntryServerNodeFilter': KalturaEntryServerNodeFilter,
            'KalturaEvalBooleanField': KalturaEvalBooleanField,
            'KalturaEvalStringField': KalturaEvalStringField,
            'KalturaExternalMediaEntryCompareAttributeCondition': KalturaExternalMediaEntryCompareAttributeCondition,
            'KalturaExternalMediaEntryMatchAttributeCondition': KalturaExternalMediaEntryMatchAttributeCondition,
            'KalturaFileAssetFilter': KalturaFileAssetFilter,
            'KalturaGenericSyndicationFeedBaseFilter': KalturaGenericSyndicationFeedBaseFilter,
            'KalturaGoogleVideoSyndicationFeedBaseFilter': KalturaGoogleVideoSyndicationFeedBaseFilter,
            'KalturaGroupUserFilter': KalturaGroupUserFilter,
            'KalturaITunesSyndicationFeedBaseFilter': KalturaITunesSyndicationFeedBaseFilter,
            'KalturaIpAddressContextField': KalturaIpAddressContextField,
            'KalturaLiveChannelCompareAttributeCondition': KalturaLiveChannelCompareAttributeCondition,
            'KalturaLiveChannelMatchAttributeCondition': KalturaLiveChannelMatchAttributeCondition,
            'KalturaLiveChannelSegmentFilter': KalturaLiveChannelSegmentFilter,
            'KalturaLiveEntryCompareAttributeCondition': KalturaLiveEntryCompareAttributeCondition,
            'KalturaLiveEntryMatchAttributeCondition': KalturaLiveEntryMatchAttributeCondition,
            'KalturaLiveStreamAdminEntryCompareAttributeCondition': KalturaLiveStreamAdminEntryCompareAttributeCondition,
            'KalturaLiveStreamAdminEntryMatchAttributeCondition': KalturaLiveStreamAdminEntryMatchAttributeCondition,
            'KalturaLiveStreamEntryCompareAttributeCondition': KalturaLiveStreamEntryCompareAttributeCondition,
            'KalturaLiveStreamEntryMatchAttributeCondition': KalturaLiveStreamEntryMatchAttributeCondition,
            'KalturaMediaEntryCompareAttributeCondition': KalturaMediaEntryCompareAttributeCondition,
            'KalturaMediaEntryMatchAttributeCondition': KalturaMediaEntryMatchAttributeCondition,
            'KalturaMediaFlavorParamsOutput': KalturaMediaFlavorParamsOutput,
            'KalturaMixEntryCompareAttributeCondition': KalturaMixEntryCompareAttributeCondition,
            'KalturaMixEntryMatchAttributeCondition': KalturaMixEntryMatchAttributeCondition,
            'KalturaObjectIdField': KalturaObjectIdField,
            'KalturaPermissionFilter': KalturaPermissionFilter,
            'KalturaPermissionItemFilter': KalturaPermissionItemFilter,
            'KalturaPlayableEntryCompareAttributeCondition': KalturaPlayableEntryCompareAttributeCondition,
            'KalturaPlayableEntryMatchAttributeCondition': KalturaPlayableEntryMatchAttributeCondition,
            'KalturaPlaylistCompareAttributeCondition': KalturaPlaylistCompareAttributeCondition,
            'KalturaPlaylistMatchAttributeCondition': KalturaPlaylistMatchAttributeCondition,
            'KalturaServerFileResource': KalturaServerFileResource,
            'KalturaSshUrlResource': KalturaSshUrlResource,
            'KalturaTimeContextField': KalturaTimeContextField,
            'KalturaTubeMogulSyndicationFeedBaseFilter': KalturaTubeMogulSyndicationFeedBaseFilter,
            'KalturaUploadedFileTokenResource': KalturaUploadedFileTokenResource,
            'KalturaUserAgentCondition': KalturaUserAgentCondition,
            'KalturaUserAgentContextField': KalturaUserAgentContextField,
            'KalturaUserEmailContextField': KalturaUserEmailContextField,
            'KalturaUserEntryFilter': KalturaUserEntryFilter,
            'KalturaUserLoginDataFilter': KalturaUserLoginDataFilter,
            'KalturaUserRoleFilter': KalturaUserRoleFilter,
            'KalturaWebcamTokenResource': KalturaWebcamTokenResource,
            'KalturaYahooSyndicationFeedBaseFilter': KalturaYahooSyndicationFeedBaseFilter,
            'KalturaAdminUserBaseFilter': KalturaAdminUserBaseFilter,
            'KalturaAmazonS3StorageProfileFilter': KalturaAmazonS3StorageProfileFilter,
            'KalturaApiActionPermissionItemBaseFilter': KalturaApiActionPermissionItemBaseFilter,
            'KalturaApiParameterPermissionItemBaseFilter': KalturaApiParameterPermissionItemBaseFilter,
            'KalturaAssetParamsOutputBaseFilter': KalturaAssetParamsOutputBaseFilter,
            'KalturaDataEntryBaseFilter': KalturaDataEntryBaseFilter,
            'KalturaDeliveryProfileAkamaiAppleHttpManifestFilter': KalturaDeliveryProfileAkamaiAppleHttpManifestFilter,
            'KalturaDeliveryProfileAkamaiHdsFilter': KalturaDeliveryProfileAkamaiHdsFilter,
            'KalturaDeliveryProfileAkamaiHttpFilter': KalturaDeliveryProfileAkamaiHttpFilter,
            'KalturaDeliveryProfileGenericAppleHttpFilter': KalturaDeliveryProfileGenericAppleHttpFilter,
            'KalturaDeliveryProfileGenericHdsFilter': KalturaDeliveryProfileGenericHdsFilter,
            'KalturaDeliveryProfileGenericHttpFilter': KalturaDeliveryProfileGenericHttpFilter,
            'KalturaDeliveryProfileGenericSilverLightFilter': KalturaDeliveryProfileGenericSilverLightFilter,
            'KalturaDeliveryProfileLiveAppleHttpFilter': KalturaDeliveryProfileLiveAppleHttpFilter,
            'KalturaDeliveryProfileRtmpFilter': KalturaDeliveryProfileRtmpFilter,
            'KalturaDeliveryServerNodeFilter': KalturaDeliveryServerNodeFilter,
            'KalturaFlavorAssetBaseFilter': KalturaFlavorAssetBaseFilter,
            'KalturaFlavorParamsBaseFilter': KalturaFlavorParamsBaseFilter,
            'KalturaGenericSyndicationFeedFilter': KalturaGenericSyndicationFeedFilter,
            'KalturaGoogleVideoSyndicationFeedFilter': KalturaGoogleVideoSyndicationFeedFilter,
            'KalturaITunesSyndicationFeedFilter': KalturaITunesSyndicationFeedFilter,
            'KalturaLiveEntryServerNodeBaseFilter': KalturaLiveEntryServerNodeBaseFilter,
            'KalturaPlaylistBaseFilter': KalturaPlaylistBaseFilter,
            'KalturaQuizUserEntryBaseFilter': KalturaQuizUserEntryBaseFilter,
            'KalturaThumbAssetBaseFilter': KalturaThumbAssetBaseFilter,
            'KalturaThumbParamsBaseFilter': KalturaThumbParamsBaseFilter,
            'KalturaTubeMogulSyndicationFeedFilter': KalturaTubeMogulSyndicationFeedFilter,
            'KalturaYahooSyndicationFeedFilter': KalturaYahooSyndicationFeedFilter,
            'KalturaAdminUserFilter': KalturaAdminUserFilter,
            'KalturaApiActionPermissionItemFilter': KalturaApiActionPermissionItemFilter,
            'KalturaApiParameterPermissionItemFilter': KalturaApiParameterPermissionItemFilter,
            'KalturaAssetParamsOutputFilter': KalturaAssetParamsOutputFilter,
            'KalturaDataEntryFilter': KalturaDataEntryFilter,
            'KalturaDeliveryProfileGenericRtmpBaseFilter': KalturaDeliveryProfileGenericRtmpBaseFilter,
            'KalturaEdgeServerNodeBaseFilter': KalturaEdgeServerNodeBaseFilter,
            'KalturaFlavorAssetFilter': KalturaFlavorAssetFilter,
            'KalturaFlavorParamsFilter': KalturaFlavorParamsFilter,
            'KalturaGenericXsltSyndicationFeedBaseFilter': KalturaGenericXsltSyndicationFeedBaseFilter,
            'KalturaLiveEntryServerNodeFilter': KalturaLiveEntryServerNodeFilter,
            'KalturaLiveStreamAdminEntry': KalturaLiveStreamAdminEntry,
            'KalturaMediaServerNodeBaseFilter': KalturaMediaServerNodeBaseFilter,
            'KalturaPlaylistFilter': KalturaPlaylistFilter,
            'KalturaQuizUserEntryFilter': KalturaQuizUserEntryFilter,
            'KalturaThumbAssetFilter': KalturaThumbAssetFilter,
            'KalturaThumbParamsFilter': KalturaThumbParamsFilter,
            'KalturaDeliveryProfileGenericRtmpFilter': KalturaDeliveryProfileGenericRtmpFilter,
            'KalturaEdgeServerNodeFilter': KalturaEdgeServerNodeFilter,
            'KalturaFlavorParamsOutputBaseFilter': KalturaFlavorParamsOutputBaseFilter,
            'KalturaGenericXsltSyndicationFeedFilter': KalturaGenericXsltSyndicationFeedFilter,
            'KalturaLiveAssetBaseFilter': KalturaLiveAssetBaseFilter,
            'KalturaLiveParamsBaseFilter': KalturaLiveParamsBaseFilter,
            'KalturaMediaFlavorParamsBaseFilter': KalturaMediaFlavorParamsBaseFilter,
            'KalturaMediaServerNodeFilter': KalturaMediaServerNodeFilter,
            'KalturaMixEntryBaseFilter': KalturaMixEntryBaseFilter,
            'KalturaThumbParamsOutputBaseFilter': KalturaThumbParamsOutputBaseFilter,
            'KalturaFlavorParamsOutputFilter': KalturaFlavorParamsOutputFilter,
            'KalturaLiveAssetFilter': KalturaLiveAssetFilter,
            'KalturaLiveParamsFilter': KalturaLiveParamsFilter,
            'KalturaMediaFlavorParamsFilter': KalturaMediaFlavorParamsFilter,
            'KalturaMixEntryFilter': KalturaMixEntryFilter,
            'KalturaThumbParamsOutputFilter': KalturaThumbParamsOutputFilter,
            'KalturaLiveEntryBaseFilter': KalturaLiveEntryBaseFilter,
            'KalturaMediaFlavorParamsOutputBaseFilter': KalturaMediaFlavorParamsOutputBaseFilter,
            'KalturaLiveEntryFilter': KalturaLiveEntryFilter,
            'KalturaMediaFlavorParamsOutputFilter': KalturaMediaFlavorParamsOutputFilter,
            'KalturaLiveChannelBaseFilter': KalturaLiveChannelBaseFilter,
            'KalturaLiveStreamEntryBaseFilter': KalturaLiveStreamEntryBaseFilter,
            'KalturaLiveChannelFilter': KalturaLiveChannelFilter,
            'KalturaLiveStreamEntryFilter': KalturaLiveStreamEntryFilter,
            'KalturaLiveStreamAdminEntryBaseFilter': KalturaLiveStreamAdminEntryBaseFilter,
            'KalturaLiveStreamAdminEntryFilter': KalturaLiveStreamAdminEntryFilter,
        }

    # @return string
    def getName(self):
        return ''

