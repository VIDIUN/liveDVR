#!/bin/bash
# For upgrade just type ./upgradeLive <version> [replace_script|downgrade|build|install_live_recorder|replace_default] [ffmpeg build path] [ffmpeg version] [replace option: all/live/recorder]
# in case 'build' is used as parameter then ffmpeg build path and ffmpeg version are mandatory

#set -e

PRODUCT_PATH=/opt/vidiun/liveController
USAGE="usage: upgradeLive [version] <replace_script|downgrade|build|install_live_recorder> <ffmpeg build path> <ffmpeg version> <replace option: all/live/recorder>"
BUILD_USAGE="usage: upgradeLive [version] build [ffmpeg build path] [ffmpeg version]"
REPLACE_DEFAULT_USAGE="usage: upgradeLive [version] replace_default [all/live/recorder]"
REPLACE_TYPE=
FILES_TO_REPLACE=
FFMPEG_BUILD_PATH=
FFMPEG_VERSION=
VERSION=

PARAM=install
if [ $# -eq 0 ]; then
   echo ${USAGE}
   exit 1
fi

VERSION=$1
mkdir -p ${PRODUCT_PATH}
cd ${PRODUCT_PATH}
if [ $# -gt 1 ]; then
    PARAM=$2
fi

if [ "${PARAM}" = "build" ]; then
	if [ $# -gt 3 ]; then
		FFMPEG_BUILD_PATH=$3
		FFMPEG_VERSION=$4
	else
		echo "wrong number of parameters running install with build. ${BUILD_USAGE}"
		exit 2
	fi
elif [ "${PARAM}" = "replace_default" ]; then
	if [ $# -gt 2 ]; then
		REPLACE_TYPE=$3
		case ${REPLACE_TYPE} in
		    all)
		        FILES_TO_REPLACE="vLiveController liveRecorder"
		    ;;
		    live)
		        FILES_TO_REPLACE="vLiveController"
		    ;;
		    recorder)
		        FILES_TO_REPLACE="liveRecorder"
		    ;;
		esac
	else
		echo "wrong number of parameters running upgradeLive with replace_default. ${REPLACE_DEFAULT_USAGE}"
		exit 3
	fi
fi

function download_version() {
    if [ -r v${VERSION}.tar.gz ]; then
        echo "rm -f v${VERSION}.tar.gz"
        rm -f v${VERSION}.tar.gz
    fi
    echo "starting to download v${VERSION}.tar.gz"
    wget https://github.com/vidiun/liveDVR/archive/v${VERSION}.tar.gz
}

function download_new_version() {
    download_version
    if [ -r ${VERSION} ]; then
       local __time=(date +%s)
       mv ${VERSION}  ${__time}.${PRODUCT_PATH}/${VERSION}
    fi
    echo "running unzip v${VERSION}.tar.gz"
    tar -xvzf v${VERSION}.tar.gz
    mv liveDVR-${VERSION} ${VERSION}
    rm -f v${VERSION}.tar.gz
}

function replace() {
    local __files=($1)
    download_version
    for file in ${__files}; do
        case ${file} in
            upgradeLive)
                echo "extracting liveDVR-${VERSION}/deployment/upgradeLive from liveDVR-${VERSION}.tar.gz"
                tar -zxvf v${VERSION}.tar.gz liveDVR-${VERSION}/deployment/upgradeLive
                echo "copying  liveDVR-${VERSION}/deployment/upgradeLive to ${PRODUCT_PATH}"
                cp -f liveDVR-${VERSION}/deployment/upgradeLive ./
                ;;
            vLiveController)
                local __liveController="serviceWrappers/defaults/vLiveController"
                echo "extracting liveDVR-${VERSION}/${__liveController} from liveDVR-${VERSION}.tar.gz"
                tar -zxvf v${VERSION}.tar.gz liveDVR-${VERSION}/${__liveController}
                echo "copying  liveDVR-${VERSION}/${__liveController} to /etc/default"
                cp -f liveDVR-${VERSION}/${__liveController} /etc/default/
                ;;
            liveRecorder)
                local __liveRecorder="liveRecorder/serviceWrappers/defaults/liveRecorder"
                echo "extracting liveDVR-${VERSION}/${__liveRecorder} from liveDVR-${VERSION}.tar.gz"
                tar -zxvf v${VERSION}.tar.gz liveDVR-${VERSION}/${__liveRecorder}
                echo "copying  liveDVR-${VERSION}/${__liveRecorder} to /etc/default"
                cp -f liveDVR-${VERSION}/${__liveRecorder} /etc/default/
                ;;
        esac
    done
    echo "removing artifacts..."
    rm -rf v${VERSION}.tar.gz*
    rm -rf liveDVR-${VERSION}
}


function install() {
	local __build=$1
	local __install_live_recorder=$2
	echo "staring installation, build=${__build}, install_live_recorder=${__install_live_recorder}"
    mkdir -p latest
    cd ${VERSION}
    # move configuration files (liveController's and liveRecorder's) to latest version
    cp ../configMapping.json common/config/
    cp ../configMapping.ini liveRecorder/Config/
    npm install
    cd ..
    if [ "${__build}" = "yes" ]; then
        echo "### starting to build binaries..."
        ${VERSION}/build_scripts/build_ffmpg.sh ${FFMPEG_BUILD_PATH} ${FFMPEG_VERSION}
        ${VERSION}/build_scripts/build_addons.sh . ${FFMPEG_BUILD_PATH}
        ${VERSION}/build_ts2mp4_convertor.sh ./liveRecorder ${FFMPEG_BUILD_PATH}
        echo "### finished building binaries"
    else
	    # download binaries from Jenkins
	    echo "### starting to download binaries..."
	    ${VERSION}/deployment/get_bins "${VERSION}"
	    echo "### finished downloading binaries"
	fi
    # create symlinks to latest dir and process script
    if [ -r "latest" ] && [ -L "latest" ]; then
         echo "unlink latest"
         unlink latest
    fi
    ln -s ${VERSION} latest
    if [ "${__install_live_recorder}" = "yes" ]; then
	      if [ ! -L /etc/init.d/liveRecorder ]; then
	            echo "Creating symlink to latest/liveRecorder/serviceWrappers/linux/liveRecorder from /etc/init.d/liveRecorder"
	            ln -s latest/liveRecorder/serviceWrappers/linux/liveRecorder /etc/init.d/liveRecorder
	      fi
          echo "starting to install liveRecoder prerequisites..."
          python --version
          echo "installing python, suitable for live platform..."
          . ${VERSION}/liveRecorder/installPython.sh
          python --version
	      local __modules=(schedule m3u8 poster psutil pycrypto)
          for module in "${__modules[@]}"; do
                python -c "import ${module}"
                [ $? -ne 0 ] && pip install ${module}
         done
         echo "finished installing liveRecorder prerequisites"
    fi
}

function downgrade() {
    if [ -L "latest" ]; then
        echo "unlink latest"
        unlink latest
    fi
    ln -s ${VERSION} latest

}

function stop() {
   if [ -x /etc/init.d/vLiveController ]; then
        /etc/init.d/vLiveController stop
   else
        echo "cannot stop liveController since /etc/init.d/vLiveController is not executable"
   fi
   if [ -x /etc/init.d/liveRecorder ]; then
        /etc/init.d/liveRecorder stop
   elif [ -e /etc/init.d/liveRecorder ]; then
       echo  "cannot stop liveRecorder since /etc/init.d/liveRecorder is not executable"
   fi
}

function start() {
    if [ ! -L /etc/init.d/vLiveController ]; then
       echo "Creating symlink to vLiveController script from /etc/init.d/vLiveController"
       ln -s latest/serviceWrappers/linux/vLiveController /etc/init.d/vLiveController
    fi
    # start liveController, nginx (web server), and liveRecorder
    /etc/init.d/vLiveController restart
    sleep 5
    echo "starting nginx..."
    ${VERSION}/packager/bin/run_nginx.sh
    if [ -x /etc/init.d/liveRecorder ]; then
          /etc/init.d/liveRecorder restart
    else
        echo "this machine doesn't run liveRecorder"
    fi
}

function main()
{
	echo ">>>>>> starting upgrade <<<<<<"
	echo "upgradeLive ${VERSION} ${PARAM} ${FFMPEG_BUILD_PATH} ${FFMPEG_VERSION} ${REPLACE_TYPE}"
    pushd ${PRODUCT_PATH}

	if [ ! -r "${VERSION}" ] || [ ! "latest" -ef "${VERSION}" ] || [ ! "${PARAM}" = "install" ] ; then

		# check if the version dir exists before downgrading, otherwise perform regular installation
		# if configMapping.json changed from ${VERSION} to current installed version the file should be updated
		# manually
		local __build="no"
		local __install_live_recorder="no"
		[ "${PARAM}" = "downgrade" ] && [ ! -r ${VERSION} ] && PARAM="install"
		if [ "${PARAM}" = "build" ]; then
		     __build="yes"
		     PARAM="install"
		fi
		if [ "${PARAM}" = "install_live_recorder" ]; then
		    __install_live_recorder="yes"
		    PARAM="install"
		fi

	    case ${PARAM} in
	        install)
	            echo "upgrading liveController to v${VERSION}"
	            stop
	            download_new_version
	            install ${__build} ${__install_live_recorder}
	            start
	            ;;
	        replace_script)
	            echo "updating upgradeLive script to v${VERSION}"
	            replace upgradeLive
	            exit 0
	            ;;
	        downgrade)
	            echo "downgrading liveController to v${VERSION}"
	            stop
	            downgrade
	            start
	            ;;
	         replace_default)
	            echo "updating ${FILES_TO_REPLACE} default files to v${VERSION}"
	            replace ${FILES_TO_REPLACE}
	            ;;
	         *)
                echo ${USAGE}
                exit 2
                ;;
	    esac

		echo ">>>>> finished upgrade <<<<<"

	else
	    echo "Found that version v${VERSION} is already installed. No action done."
        echo "Please check upgradeLive ${USAGE}"
	fi
	popd
}

main
